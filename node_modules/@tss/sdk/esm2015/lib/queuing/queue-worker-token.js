/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Guid } from '../core/uuid/guid';
import { getElapsedSeconds } from '../core/date-time/get-elapsed-seconds.function';
import { calculateRemainingSeconds } from '../core/stats/calculate-remaining-seconds.function';
/**
 * Unique token created for each queue worker
 */
export class QueueWorkerToken {
    constructor() {
        this.isWorking = false;
        this.isCanceled = false;
        this.id = Guid.newGuid().value;
    }
    /**
     * @return {?}
     */
    get isComplete() {
        return !this.isWorking;
    }
    /**
     * @return {?}
     */
    get ellapsedSeconds() {
        return getElapsedSeconds(new Date(), this.startTime);
    }
    /**
     * @return {?}
     */
    get totalProcessed() {
        return this.totalComplete + this.totalFailed;
    }
    /**
     * @return {?}
     */
    get recordsProcessedPerSecond() {
        return this.totalComplete / this.ellapsedSeconds;
    }
    /**
     * @return {?}
     */
    get recordsProcessedPerMinute() {
        return this.recordsProcessedPerSecond * 60;
    }
    /**
     * @return {?}
     */
    start() {
        this.reset();
        this.startTime = new Date();
        this.isWorking = true;
        return this;
    }
    /**
     * @return {?}
     */
    reset() {
        this.isWorking = false;
        this.isCanceled = false;
        this.totalComplete = 0;
        this.totalFailed = 0;
        this.startTime = null;
        this.endTime = null;
        return this;
    }
    /**
     * @param {?} remainingCount
     * @return {?}
     */
    calculateRemainingSeconds(remainingCount) {
        return this.isComplete
            ? 0
            : calculateRemainingSeconds(this.totalProcessed, this.ellapsedSeconds, remainingCount);
    }
    /**
     * @return {?}
     */
    complete() {
        this.endTime = new Date();
        this.isWorking = false;
        return this;
    }
    /**
     * @return {?}
     */
    cancel() {
        this.isCanceled = true;
        this.isWorking = false;
        return this;
    }
}
if (false) {
    /** @type {?} */
    QueueWorkerToken.prototype.id;
    /** @type {?} */
    QueueWorkerToken.prototype.isWorking;
    /** @type {?} */
    QueueWorkerToken.prototype.isCanceled;
    /** @type {?} */
    QueueWorkerToken.prototype.totalComplete;
    /** @type {?} */
    QueueWorkerToken.prototype.totalFailed;
    /** @type {?} */
    QueueWorkerToken.prototype.startTime;
    /** @type {?} */
    QueueWorkerToken.prototype.endTime;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUtd29ya2VyLXRva2VuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvcXVldWluZy9xdWV1ZS13b3JrZXItdG9rZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQzs7OztBQU0vRixNQUFNLE9BQU8sZ0JBQWdCO0lBNkIzQjtRQTNCQSxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUEyQmpCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDOzs7O0lBdEJELElBQUksVUFBVTtRQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2RCxDQUFDOzs7O0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFFRCxJQUFJLHlCQUF5QjtRQUMzQixPQUFPLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNuRCxDQUFDOzs7O0lBRUQsSUFBSSx5QkFBeUI7UUFDM0IsT0FBTyxJQUFJLENBQUMseUJBQXlCLEdBQUcsRUFBRSxDQUFDO0lBQzdDLENBQUM7Ozs7SUFNRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXRCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7OztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVwQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQseUJBQXlCLENBQUMsY0FBc0I7UUFDOUMsT0FBTyxJQUFJLENBQUMsVUFBVTtZQUNwQixDQUFDLENBQUMsQ0FBQztZQUNILENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDM0YsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFdkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBRXZCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGOzs7SUF0RUMsOEJBQW9COztJQUNwQixxQ0FBa0I7O0lBQ2xCLHNDQUFtQjs7SUFDbkIseUNBQXNCOztJQUN0Qix1Q0FBb0I7O0lBQ3BCLHFDQUFnQjs7SUFDaEIsbUNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHdWlkIH0gZnJvbSAnLi4vY29yZS91dWlkL2d1aWQnO1xuaW1wb3J0IHsgZ2V0RWxhcHNlZFNlY29uZHMgfSBmcm9tICcuLi9jb3JlL2RhdGUtdGltZS9nZXQtZWxhcHNlZC1zZWNvbmRzLmZ1bmN0aW9uJztcbmltcG9ydCB7IGNhbGN1bGF0ZVJlbWFpbmluZ1NlY29uZHMgfSBmcm9tICcuLi9jb3JlL3N0YXRzL2NhbGN1bGF0ZS1yZW1haW5pbmctc2Vjb25kcy5mdW5jdGlvbic7XG5cblxuLyoqXG4gKiBVbmlxdWUgdG9rZW4gY3JlYXRlZCBmb3IgZWFjaCBxdWV1ZSB3b3JrZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFF1ZXVlV29ya2VyVG9rZW4ge1xuICByZWFkb25seSBpZDogc3RyaW5nO1xuICBpc1dvcmtpbmcgPSBmYWxzZTtcbiAgaXNDYW5jZWxlZCA9IGZhbHNlO1xuICB0b3RhbENvbXBsZXRlOiBudW1iZXI7XG4gIHRvdGFsRmFpbGVkOiBudW1iZXI7XG4gIHN0YXJ0VGltZTogRGF0ZTtcbiAgZW5kVGltZTogRGF0ZTtcblxuICBnZXQgaXNDb21wbGV0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuaXNXb3JraW5nO1xuICB9XG5cbiAgZ2V0IGVsbGFwc2VkU2Vjb25kcygpOiBudW1iZXIge1xuICAgIHJldHVybiBnZXRFbGFwc2VkU2Vjb25kcyhuZXcgRGF0ZSgpLCB0aGlzLnN0YXJ0VGltZSk7XG4gIH1cblxuICBnZXQgdG90YWxQcm9jZXNzZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbENvbXBsZXRlICsgdGhpcy50b3RhbEZhaWxlZDtcbiAgfVxuXG4gIGdldCByZWNvcmRzUHJvY2Vzc2VkUGVyU2Vjb25kKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxDb21wbGV0ZSAvIHRoaXMuZWxsYXBzZWRTZWNvbmRzO1xuICB9XG5cbiAgZ2V0IHJlY29yZHNQcm9jZXNzZWRQZXJNaW51dGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRzUHJvY2Vzc2VkUGVyU2Vjb25kICogNjA7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmlkID0gR3VpZC5uZXdHdWlkKCkudmFsdWU7XG4gIH1cblxuICBzdGFydCgpOiBRdWV1ZVdvcmtlclRva2VuIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuaXNXb3JraW5nID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVzZXQoKTogUXVldWVXb3JrZXJUb2tlbiB7XG4gICAgdGhpcy5pc1dvcmtpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmlzQ2FuY2VsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnRvdGFsQ29tcGxldGUgPSAwO1xuICAgIHRoaXMudG90YWxGYWlsZWQgPSAwO1xuICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcbiAgICB0aGlzLmVuZFRpbWUgPSBudWxsO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjYWxjdWxhdGVSZW1haW5pbmdTZWNvbmRzKHJlbWFpbmluZ0NvdW50OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmlzQ29tcGxldGVcbiAgICAgID8gMFxuICAgICAgOiBjYWxjdWxhdGVSZW1haW5pbmdTZWNvbmRzKHRoaXMudG90YWxQcm9jZXNzZWQsIHRoaXMuZWxsYXBzZWRTZWNvbmRzLCByZW1haW5pbmdDb3VudCk7XG4gIH1cblxuICBjb21wbGV0ZSgpOiBRdWV1ZVdvcmtlclRva2VuIHtcbiAgICB0aGlzLmVuZFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuaXNXb3JraW5nID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNhbmNlbCgpOiBRdWV1ZVdvcmtlclRva2VuIHtcbiAgICB0aGlzLmlzQ2FuY2VsZWQgPSB0cnVlO1xuICAgIHRoaXMuaXNXb3JraW5nID0gZmFsc2U7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19