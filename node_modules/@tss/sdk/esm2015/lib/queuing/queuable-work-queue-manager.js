/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 3rd Party.
import { forkJoin } from 'rxjs';
import { map } from 'rxjs/operators';
// TSS.
import { WorkQueueManager, DEFAULT_WORK_QUEUE_OPTIONS } from './work-queue-manager';
/**
 * @abstract
 * @template TInput, TOutput
 */
export class QueuableWorkQueueManager extends WorkQueueManager {
    constructor() {
        super(...arguments);
        this.options = Object.assign({
            autoDequeu: true
        }, DEFAULT_WORK_QUEUE_OPTIONS);
    }
    /**
     * Enqueues multiple items into an array.
     * @param {...?} items Items to enqueue.
     *
     * TODO: We want to change this to use "mergeAll" once we
     *  upgrade to rxjs 6, as that is the desired behavior here.
     *
     * // The following works in rxjs 6, but not in 5:
     * of(...sources)
     * .pipe(
     *   mergeAll(),
     *   // NOTE: in rxjs 5
     *   tap((x: TInput) => x)
     * )
     * @return {?}
     */
    enqueuMany(...items) {
        /** @type {?} */
        const sources = items
            .map((/**
         * @param {?} i
         * @return {?}
         */
        i => this.enqueue(i)));
        return forkJoin(sources)
            .pipe(map((/**
         * @param {?} results
         * @return {?}
         */
        (results) => results.pop())));
    }
    /**
     * Deque many items from the queue.
     * @param {...?} items Items do deque.
     * @return {?}
     */
    dequeuMany(...items) {
        /** @type {?} */
        const sources = items
            .map((/**
         * @param {?} i
         * @return {?}
         */
        i => this.dequeue(i)));
        return forkJoin(sources)
            .pipe(map((/**
         * @param {?} results
         * @return {?}
         */
        (results) => results.pop())));
    }
    /**
     * @protected
     * @param {?} payload
     * @return {?}
     */
    onWorkComplete(payload) {
        return forkJoin(super.onWorkComplete(payload), this.dequeue(payload.input))
            .pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => result[0])));
    }
}
if (false) {
    /** @type {?} */
    QueuableWorkQueueManager.prototype.options;
    /**
     * @abstract
     * @param {?} item
     * @return {?}
     */
    QueuableWorkQueueManager.prototype.enqueue = function (item) { };
    /**
     * @abstract
     * @param {?} item
     * @return {?}
     */
    QueuableWorkQueueManager.prototype.dequeue = function (item) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWFibGUtd29yay1xdWV1ZS1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvcXVldWluZy9xdWV1YWJsZS13b3JrLXF1ZXVlLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQWMsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHckMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLDBCQUEwQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0FBTXBGLE1BQU0sT0FBZ0Isd0JBQTBDLFNBQVEsZ0JBQWlDO0lBQXpHOztRQUNXLFlBQU8sR0FBK0IsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUMzRCxVQUFVLEVBQUUsSUFBSTtTQUNqQixFQUFFLDBCQUEwQixDQUFDLENBQUM7SUFxRGpDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBakNDLFVBQVUsQ0FBQyxHQUFHLEtBQWU7O2NBQ3JCLE9BQU8sR0FBeUIsS0FBSzthQUN4QyxHQUFHOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDO1FBRTVCLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQzthQUNyQixJQUFJLENBQ0gsR0FBRzs7OztRQUFDLENBQUMsT0FBaUIsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFDLENBQzFDLENBQUM7SUFDTixDQUFDOzs7Ozs7SUFNRCxVQUFVLENBQUMsR0FBRyxLQUFlOztjQUNyQixPQUFPLEdBQXlCLEtBQUs7YUFDeEMsR0FBRzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQztRQUU1QixPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUM7YUFDckIsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxDQUFDLE9BQWlCLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBQyxDQUMxQyxDQUFDO0lBQ04sQ0FBQzs7Ozs7O0lBRVMsY0FBYyxDQUFDLE9BQXNDO1FBQzdELE9BQU8sUUFBUSxDQUNiLEtBQUssQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUM1QjthQUNFLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUMzQixDQUFDO0lBQ04sQ0FBQztDQUNGOzs7SUF2REMsMkNBRStCOzs7Ozs7SUFFL0IsaUVBQW1EOzs7Ozs7SUFDbkQsaUVBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZm9ya0pvaW4gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgV29ya1F1ZXVlTWFuYWdlciwgREVGQVVMVF9XT1JLX1FVRVVFX09QVElPTlMgfSBmcm9tICcuL3dvcmstcXVldWUtbWFuYWdlcic7XG5pbXBvcnQgeyBRdWV1YWJsZSB9IGZyb20gJy4vcXVldWFibGUnO1xuaW1wb3J0IHsgUXVldWFibGVXb3JrZXJRdWV1ZU9wdGlvbnMgfSBmcm9tICcuL3F1ZXVhYmxlLXdvcmtlci1xdWV1ZS1vcHRpb25zJztcbmltcG9ydCB7IFF1ZXVlUGF5bG9hZCB9IGZyb20gJy4vcXVldWUtcGF5bG9hZCc7XG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFF1ZXVhYmxlV29ya1F1ZXVlTWFuYWdlcjxUSW5wdXQsIFRPdXRwdXQ+IGV4dGVuZHMgV29ya1F1ZXVlTWFuYWdlcjxUSW5wdXQsIFRPdXRwdXQ+IGltcGxlbWVudHMgUXVldWFibGU8VElucHV0PiB7XG4gIHJlYWRvbmx5IG9wdGlvbnM6IFF1ZXVhYmxlV29ya2VyUXVldWVPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgYXV0b0RlcXVldTogdHJ1ZVxuICB9LCBERUZBVUxUX1dPUktfUVVFVUVfT1BUSU9OUyk7XG5cbiAgYWJzdHJhY3QgZW5xdWV1ZShpdGVtOiBUSW5wdXQpOiBPYnNlcnZhYmxlPFRJbnB1dD47XG4gIGFic3RyYWN0IGRlcXVldWUoaXRlbTogVElucHV0KTogT2JzZXJ2YWJsZTxUSW5wdXQ+O1xuXG4gIC8qKlxuICAgKiBFbnF1ZXVlcyBtdWx0aXBsZSBpdGVtcyBpbnRvIGFuIGFycmF5LlxuICAgKiBAcGFyYW0gaXRlbXMgSXRlbXMgdG8gZW5xdWV1ZS5cbiAgICpcbiAgICogVE9ETzogV2Ugd2FudCB0byBjaGFuZ2UgdGhpcyB0byB1c2UgXCJtZXJnZUFsbFwiIG9uY2Ugd2VcbiAgICogIHVwZ3JhZGUgdG8gcnhqcyA2LCBhcyB0aGF0IGlzIHRoZSBkZXNpcmVkIGJlaGF2aW9yIGhlcmUuXG4gICAqXG4gICAqIC8vIFRoZSBmb2xsb3dpbmcgd29ya3MgaW4gcnhqcyA2LCBidXQgbm90IGluIDU6XG4gICAqIG9mKC4uLnNvdXJjZXMpXG4gICAqIC5waXBlKFxuICAgKiAgIG1lcmdlQWxsKCksXG4gICAqICAgLy8gTk9URTogaW4gcnhqcyA1XG4gICAqICAgdGFwKCh4OiBUSW5wdXQpID0+IHgpXG4gICAqIClcbiAgICovXG4gIGVucXVldU1hbnkoLi4uaXRlbXM6IFRJbnB1dFtdKTogT2JzZXJ2YWJsZTxUSW5wdXQ+IHtcbiAgICBjb25zdCBzb3VyY2VzOiBPYnNlcnZhYmxlPFRJbnB1dD5bXSA9IGl0ZW1zXG4gICAgICAubWFwKGkgPT4gdGhpcy5lbnF1ZXVlKGkpKTtcblxuICAgIHJldHVybiBmb3JrSm9pbihzb3VyY2VzKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCgocmVzdWx0czogVElucHV0W10pID0+IHJlc3VsdHMucG9wKCkpXG4gICAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlcXVlIG1hbnkgaXRlbXMgZnJvbSB0aGUgcXVldWUuXG4gICAqIEBwYXJhbSBpdGVtcyBJdGVtcyBkbyBkZXF1ZS5cbiAgICovXG4gIGRlcXVldU1hbnkoLi4uaXRlbXM6IFRJbnB1dFtdKTogT2JzZXJ2YWJsZTxUSW5wdXQ+IHtcbiAgICBjb25zdCBzb3VyY2VzOiBPYnNlcnZhYmxlPFRJbnB1dD5bXSA9IGl0ZW1zXG4gICAgICAubWFwKGkgPT4gdGhpcy5kZXF1ZXVlKGkpKTtcblxuICAgIHJldHVybiBmb3JrSm9pbihzb3VyY2VzKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCgocmVzdWx0czogVElucHV0W10pID0+IHJlc3VsdHMucG9wKCkpXG4gICAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIG9uV29ya0NvbXBsZXRlKHBheWxvYWQ6IFF1ZXVlUGF5bG9hZDxUSW5wdXQsIFRPdXRwdXQ+KTogT2JzZXJ2YWJsZTxRdWV1ZVBheWxvYWQ8VElucHV0LCBUT3V0cHV0Pj4ge1xuICAgIHJldHVybiBmb3JrSm9pbihcbiAgICAgIHN1cGVyLm9uV29ya0NvbXBsZXRlKHBheWxvYWQpLFxuICAgICAgdGhpcy5kZXF1ZXVlKHBheWxvYWQuaW5wdXQpXG4gICAgKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCgocmVzdWx0KSA9PiByZXN1bHRbMF0pXG4gICAgICApO1xuICB9XG59XG4iXX0=