/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 3rd Party.
import { Subject, of, iif } from 'rxjs';
import { takeWhile, tap, filter, mergeMap, map } from 'rxjs/operators';
import { QueueWorkerToken } from './queue-worker-token';
import { WorkQueueStatusEventType } from './work-queue-status-event-type';
import { WorkQueueStatusTracker } from './work-queue-status-tracker';
import { isValue } from '../core/type-check/is-value.function';
import { isNotValue } from '../core/type-check/is-not-value.function';
/** @type {?} */
export const DEFAULT_WORK_QUEUE_OPTIONS = {
    autoStartWorkers: true,
    workerCount: 1,
};
/**
 * Provides the core queueing workflow for basic unit of work queues.
 * High Priority Todos:
 * * Implement worker cancelation into the worker token - RG.
 *
 * Low Priority Todos:
 * * Add queue prioritization - a queue priority flag to pull those items first from the queue - RG.
 * * Change overriding of methods to use metho attributes instead. Example: \@OnWorkComplete.
 * @abstract
 * @template TInput, TOutput
 */
export class WorkQueueManager {
    /**
     * @param {?} log
     * @param {?=} options
     */
    constructor(log, options) {
        this.log = log;
        this.workerTokens = [];
        this.tracker = new WorkQueueStatusTracker();
        this.options = Object.assign({}, DEFAULT_WORK_QUEUE_OPTIONS);
        this.setOptions(options);
        this.queueChangeObserver = new Subject();
        this.queueChange = this.queueChangeObserver.pipe();
        this.queueStarted = this.queueChangeObserver.pipe(filter((/**
         * @param {?} change
         * @return {?}
         */
        change => change.event === WorkQueueStatusEventType.QueueStarted)));
        this.queueComplete = this.queueChangeObserver.pipe(filter((/**
         * @param {?} change
         * @return {?}
         */
        change => change.event === WorkQueueStatusEventType.QueueComplete)));
        if (this.options.autoStartWorkers) {
            setTimeout((/**
             * @return {?}
             */
            () => this.startWork()));
        }
    }
    /**
     * @return {?}
     */
    get isWorking() {
        return this.tracker.isWorking;
    }
    /**
     * @return {?}
     */
    get status() {
        return this.tracker.getStatus();
    }
    /**
     * Overrides default options.
     * @param {?} options Options to override the defaults.
     * @return {?}
     */
    setOptions(options) {
        Object.assign(this.options, options);
        return this;
    }
    /**
     * Kicks off the queue workflow with the specified number of workers. If
     * the maximum number of workers are currently running, no additional workers
     * will be created (only the delta of allowed and running will be started).
     * @return {?}
     */
    startWork() {
        // We dont' want to change the queue size if the queue is already working
        // because it will mess up the statistics (percent copmlete, etc).
        /** @type {?} */
        const starterSource = iif((/**
         * @return {?}
         */
        () => !this.isWorking), this.getRemainingQueueCount()
            .pipe(tap((/**
         * @param {?} queueCount
         * @return {?}
         */
        (queueCount) => this.tracker.setQueueSize(queueCount)))));
        this.onReady()
            .pipe(mergeMap((/**
         * @return {?}
         */
        () => starterSource)))
            .subscribe((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const workersToStart = this.options.workerCount - this.workerTokens.length;
            if (workersToStart > 0) {
                this.emitQueueChange(null, WorkQueueStatusEventType.QueueStarted);
            }
            for (let i = 0; i < workersToStart; i++) {
                /** @type {?} */
                const token = new QueueWorkerToken().start();
                this.tracker.addWorker(token);
                this.workerTokens.push(token);
                this.emitQueueChange(token, WorkQueueStatusEventType.QueueWorkerStarted);
                this.getNextAndDoWork(token);
            }
        }));
    }
    /**
     * Stops all workers from processing the queue.
     * @return {?}
     */
    stopWork() {
        this.workerTokens.forEach((/**
         * @param {?} token
         * @return {?}
         */
        token => token.cancel()));
    }
    /**
     * Method that determines that the workers are ready to be started. Note, in this implementation it
     * makes use of an empty promise. The main reason for this is to provide a hook for other implementers
     * to setup/initialize the queue before starting the workers. Additionaly, this practices provides a
     * way to run the workers asynchronously.
     * @protected
     * @return {?}
     */
    onReady() {
        return of(null);
    }
    /**
     * @protected
     * @param {?} input
     * @return {?}
     */
    onBeforeWorkStarted(input) {
        return of(input);
    }
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    onWorkComplete(data) {
        return of(data);
    }
    /**
     * @protected
     * @param {?} data
     * @param {?} error
     * @return {?}
     */
    onWorkFailed(data, error) {
        return of(data, error);
    }
    /**
     * @protected
     * @return {?}
     */
    getRemainingQueueCount() {
        return of(-1);
    }
    /**
     * @protected
     * @param {?} token
     * @param {?} event
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    emitQueueChange(token, event, input, output) {
        this.queueChangeObserver.next({
            event,
            input,
            output,
            status: this.tracker.getStatus(),
            tokenId: token ? token.id : null,
        });
    }
    /**
     * @private
     * @param {?} token
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    emitWorkStarted(token, input, output) {
        this.emitQueueChange(token, WorkQueueStatusEventType.UnitOfWorkStarted, input, output);
    }
    /**
     * @private
     * @param {?} token
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    emitWorkComplete(token, input, output) {
        this.emitQueueChange(token, WorkQueueStatusEventType.UnitOfWorkComplete, input, output);
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    onWorkerCompleted(token) {
        if (token.isComplete) {
            return;
        }
        /** @type {?} */
        const index = this.workerTokens.indexOf(token);
        token.complete();
        if (index !== -1) {
            this.workerTokens.splice(index, 1);
        }
        this.emitQueueChange(token, WorkQueueStatusEventType.QueueWorkerComplete);
        if (this.workerTokens.length === 0) {
            this.emitQueueChange(token, WorkQueueStatusEventType.QueueComplete);
            this.tracker.complete();
        }
    }
    /**
     * @private
     * @param {?} token
     * @param {?} next
     * @return {?}
     */
    checkIfWorkerComplete(token, next) {
        if (isNotValue(next)) {
            this.onWorkerCompleted(token);
        }
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    getNextAndDoWork(token) {
        if (token.isCanceled) {
            this.log.debug(`Canceling worker due to canceled toke: ${token.id}`);
            this.onWorkerCompleted(token);
        }
        this.log.trace('Retrieving next queue item to start processing');
        /** @type {?} */
        const processingData = { input: null, output: null };
        this.getNext()
            .pipe(tap((/**
         * @param {?} input
         * @return {?}
         */
        (input) => processingData.input = input)), tap((/**
         * @param {?} input
         * @return {?}
         */
        (input) => this.checkIfWorkerComplete(token, input))), takeWhile((/**
         * @param {?} input
         * @return {?}
         */
        (input) => isValue(input) && !token.isCanceled)), tap((/**
         * @param {?} input
         * @return {?}
         */
        (input) => this.emitWorkStarted(token, input))), mergeMap((/**
         * @param {?} input
         * @return {?}
         */
        (input) => this.onBeforeWorkStarted(input))), mergeMap((/**
         * @param {?} input
         * @return {?}
         */
        (input) => this.doWork(input))), tap((/**
         * @param {?} output
         * @return {?}
         */
        (output) => processingData.output = output)), map((/**
         * @return {?}
         */
        () => processingData)), mergeMap((/**
         * @param {?} data
         * @return {?}
         */
        (data) => this.onWorkComplete(data))))
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.log.trace('Completed work for item');
            token.totalComplete++;
            this.emitWorkComplete(token, data.input, data.output);
            this.getNextAndDoWork(token);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.log.error(`Failed to process item. {error}`, error);
            token.totalFailed++;
            this.onWorkFailed(processingData, error)
                .toPromise()
                .then((/**
             * @return {?}
             */
            () => this.getNextAndDoWork(token)));
        }));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    WorkQueueManager.prototype.queueChangeObserver;
    /**
     * @type {?}
     * @protected
     */
    WorkQueueManager.prototype.workerTokens;
    /**
     * @type {?}
     * @protected
     */
    WorkQueueManager.prototype.tracker;
    /** @type {?} */
    WorkQueueManager.prototype.queueChange;
    /** @type {?} */
    WorkQueueManager.prototype.queueStarted;
    /** @type {?} */
    WorkQueueManager.prototype.queueComplete;
    /** @type {?} */
    WorkQueueManager.prototype.options;
    /**
     * @type {?}
     * @protected
     */
    WorkQueueManager.prototype.log;
    /**
     * Implementation method to do the actual unit of work.
     * @abstract
     * @protected
     * @param {?} item The input paramater needed to process the unit of work and return an output result.
     * @return {?}
     */
    WorkQueueManager.prototype.doWork = function (item) { };
    /**
     * Implementation method to retrieve the next value in the queue. Note, there are no further checks
     * to verify duplicate items are not processed - it is the responsibility of the implementer of this
     * base class to never return the same item from this method. Typically the item in the queue is either
     * dequeued or marked as "processing" to prevent this potential issue.
     * @abstract
     * @protected
     * @return {?}
     */
    WorkQueueManager.prototype.getNext = function () { };
}
//# sourceMappingURL=data:application/json;base64,