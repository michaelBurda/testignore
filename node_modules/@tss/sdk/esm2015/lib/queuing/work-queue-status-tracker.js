/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { average } from '../core/stats/average.function';
export class WorkQueueStatusTracker {
    constructor() {
        this.totalQueueSize = 0;
        this.workers = [];
    }
    /**
     * @return {?}
     */
    get workerCount() {
        return this.workers.length;
    }
    /**
     * @return {?}
     */
    get percentComplete() {
        return this.totalQueueSize >= 0
            ? Math.round(this.totalProcessed / this.totalQueueSize * 100) || 0
            : 0;
    }
    /**
     * @return {?}
     */
    get totalComplete() {
        return this.workers.reduce((/**
         * @param {?} accumulator
         * @param {?} current
         * @return {?}
         */
        (accumulator, current) => accumulator + current.totalComplete), 0) || 0;
    }
    /**
     * @return {?}
     */
    get totalFailed() {
        return this.workers.reduce((/**
         * @param {?} accumulator
         * @param {?} current
         * @return {?}
         */
        (accumulator, current) => accumulator + current.totalFailed), 0) || 0;
    }
    /**
     * @return {?}
     */
    get totalProcessed() {
        return this.totalComplete + this.totalFailed;
    }
    /**
     * @return {?}
     */
    get isWorking() {
        return Boolean(this.runningWorkerCount);
    }
    /**
     * @return {?}
     */
    get isComplete() {
        return this.startTime && !this.isWorking;
    }
    /**
     * @return {?}
     */
    get isCanceled() {
        /** @type {?} */
        const canceledWorkersCount = this.workers.filter((/**
         * @param {?} worker
         * @return {?}
         */
        worker => worker.isCanceled)).length;
        return Boolean(canceledWorkersCount && canceledWorkersCount === this.workers.length);
    }
    /**
     * @return {?}
     */
    get runningWorkerCount() {
        return this.workers.filter((/**
         * @param {?} worker
         * @return {?}
         */
        worker => worker.isWorking)).length;
    }
    /**
     * @return {?}
     */
    get startTime() {
        /** @type {?} */
        const startTimes = this.workers
            .filter((/**
         * @param {?} worker
         * @return {?}
         */
        worker => worker.startTime))
            .map((/**
         * @param {?} worker
         * @return {?}
         */
        worker => worker.startTime
            ? worker.startTime.getTime()
            : null));
        return new Date(Math.min(...startTimes));
    }
    /**
     * @return {?}
     */
    get endTime() {
        /** @type {?} */
        const startTimes = this.workers
            .filter((/**
         * @param {?} worker
         * @return {?}
         */
        worker => worker.startTime))
            .map((/**
         * @param {?} worker
         * @return {?}
         */
        worker => worker.startTime
            ? worker.startTime.getTime()
            : null));
        return new Date(Math.max(...startTimes));
    }
    /**
     * @return {?}
     */
    get remainingQueueSize() {
        return this.totalQueueSize - this.totalProcessed;
    }
    /**
     * @return {?}
     */
    get estimatedSecondsLeft() {
        /** @type {?} */
        const remainingCount = this.remainingQueueSize;
        return remainingCount
            ? average(this.workers
                .map((/**
             * @param {?} worker
             * @return {?}
             */
            worker => worker.calculateRemainingSeconds(remainingCount))))
            : 0;
    }
    /**
     * @return {?}
     */
    get averageRecordsProcessedPerMinute() {
        return average(this.workers
            .map((/**
         * @param {?} worker
         * @return {?}
         */
        worker => worker.recordsProcessedPerMinute)));
    }
    /**
     * @param {?} totalQueueSize
     * @return {?}
     */
    setQueueSize(totalQueueSize) {
        this.totalQueueSize = totalQueueSize;
        return this;
    }
    /**
     * @return {?}
     */
    complete() {
        this.workers.splice(0, this.workers.length);
        this.totalQueueSize = 0;
        return this;
    }
    /**
     * @param {...?} workers
     * @return {?}
     */
    addWorker(...workers) {
        workers.forEach((/**
         * @param {?} worker
         * @return {?}
         */
        worker => {
            this.workers.push(worker);
        }));
        return this;
    }
    /**
     * @return {?}
     */
    getStatus() {
        return {
            isWorking: this.isWorking,
            isCanceled: this.isCanceled,
            isComplete: this.isComplete,
            totalProcessed: this.totalProcessed,
            startTime: this.startTime,
            endTime: this.endTime,
            percentComplete: this.percentComplete,
            totalQueueSize: this.totalQueueSize,
            remainingQueueSize: this.remainingQueueSize,
            totalComplete: this.totalComplete,
            totalFailed: this.totalFailed,
            estimatedSecondsLeft: this.estimatedSecondsLeft,
            workerCount: this.workers.length,
        };
    }
}
if (false) {
    /** @type {?} */
    WorkQueueStatusTracker.prototype.totalQueueSize;
    /**
     * @type {?}
     * @protected
     */
    WorkQueueStatusTracker.prototype.workers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay1xdWV1ZS1zdGF0dXMtdHJhY2tlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL3F1ZXVpbmcvd29yay1xdWV1ZS1zdGF0dXMtdHJhY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBR3pELE1BQU0sT0FBTyxzQkFBc0I7SUFBbkM7UUFDRSxtQkFBYyxHQUFHLENBQUMsQ0FBQztRQUVBLFlBQU8sR0FBdUIsRUFBRSxDQUFDO0lBd0h0RCxDQUFDOzs7O0lBdEhDLElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQztZQUM3QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNsRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7OztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNOzs7OztRQUFDLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLEdBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BHLENBQUM7Ozs7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTs7Ozs7UUFBQyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxHQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsRyxDQUFDOzs7O0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMzQyxDQUFDOzs7O0lBRUQsSUFBSSxVQUFVOztjQUNOLG9CQUFvQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTTs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBQyxDQUFDLE1BQU07UUFDcEYsT0FBTyxPQUFPLENBQUMsb0JBQW9CLElBQUksb0JBQW9CLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RixDQUFDOzs7O0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07Ozs7UUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUMsQ0FBQyxNQUFNLENBQUM7SUFDaEUsQ0FBQzs7OztJQUVELElBQUksU0FBUzs7Y0FDTCxVQUFVLEdBQWEsSUFBSSxDQUFDLE9BQU87YUFDdEMsTUFBTTs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBQzthQUNsQyxHQUFHOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUztZQUM3QixDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDNUIsQ0FBQyxDQUFDLElBQUksRUFDUDtRQUVILE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELElBQUksT0FBTzs7Y0FDSCxVQUFVLEdBQWEsSUFBSSxDQUFDLE9BQU87YUFDdEMsTUFBTTs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBQzthQUNsQyxHQUFHOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUztZQUM3QixDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDNUIsQ0FBQyxDQUFDLElBQUksRUFDUDtRQUVILE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7OztJQUVELElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQ25ELENBQUM7Ozs7SUFFRCxJQUFJLG9CQUFvQjs7Y0FDaEIsY0FBYyxHQUFHLElBQUksQ0FBQyxrQkFBa0I7UUFDOUMsT0FBTyxjQUFjO1lBQ25CLENBQUMsQ0FBQyxPQUFPLENBQ1AsSUFBSSxDQUFDLE9BQU87aUJBQ1QsR0FBRzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxFQUFDLENBQ25FO1lBQ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNSLENBQUM7Ozs7SUFFRCxJQUFJLGdDQUFnQztRQUNsQyxPQUFPLE9BQU8sQ0FDWixJQUFJLENBQUMsT0FBTzthQUNULEdBQUc7Ozs7UUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsRUFBQyxDQUNuRCxDQUFDO0lBQ0osQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsY0FBc0I7UUFDakMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsR0FBRyxPQUEyQjtRQUN0QyxPQUFPLENBQUMsT0FBTzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLENBQUMsRUFBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsU0FBUztRQUNQLE9BQU87WUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDckMsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLGtCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7WUFDM0MsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixvQkFBb0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CO1lBQy9DLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07U0FDakMsQ0FBQztJQUNKLENBQUM7Q0FDRjs7O0lBMUhDLGdEQUFtQjs7Ozs7SUFFbkIseUNBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVldWVXb3JrZXJUb2tlbiB9IGZyb20gJy4vcXVldWUtd29ya2VyLXRva2VuJztcbmltcG9ydCB7IFdvcmtRdWV1ZVN0YXR1cyB9IGZyb20gJy4vd29yay1xdWV1ZS1zdGF0dXMnO1xuaW1wb3J0IHsgYXZlcmFnZSB9IGZyb20gJy4uL2NvcmUvc3RhdHMvYXZlcmFnZS5mdW5jdGlvbic7XG5cblxuZXhwb3J0IGNsYXNzIFdvcmtRdWV1ZVN0YXR1c1RyYWNrZXIgaW1wbGVtZW50cyBXb3JrUXVldWVTdGF0dXMge1xuICB0b3RhbFF1ZXVlU2l6ZSA9IDA7XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHdvcmtlcnM6IFF1ZXVlV29ya2VyVG9rZW5bXSA9IFtdO1xuXG4gIGdldCB3b3JrZXJDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLndvcmtlcnMubGVuZ3RoO1xuICB9XG5cbiAgZ2V0IHBlcmNlbnRDb21wbGV0ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRvdGFsUXVldWVTaXplID49IDBcbiAgICAgID8gTWF0aC5yb3VuZCh0aGlzLnRvdGFsUHJvY2Vzc2VkIC8gdGhpcy50b3RhbFF1ZXVlU2l6ZSAqIDEwMCkgfHwgMFxuICAgICAgOiAwO1xuICB9XG5cbiAgZ2V0IHRvdGFsQ29tcGxldGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy53b3JrZXJzLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQpID0+IGFjY3VtdWxhdG9yICsgY3VycmVudC50b3RhbENvbXBsZXRlLCAwKSB8fCAwO1xuICB9XG5cbiAgZ2V0IHRvdGFsRmFpbGVkKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMud29ya2Vycy5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50KSA9PiBhY2N1bXVsYXRvciArIGN1cnJlbnQudG90YWxGYWlsZWQsIDApIHx8IDA7XG4gIH1cblxuICBnZXQgdG90YWxQcm9jZXNzZWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy50b3RhbENvbXBsZXRlICsgdGhpcy50b3RhbEZhaWxlZDtcbiAgfVxuXG4gIGdldCBpc1dvcmtpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy5ydW5uaW5nV29ya2VyQ291bnQpO1xuICB9XG5cbiAgZ2V0IGlzQ29tcGxldGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRUaW1lICYmICF0aGlzLmlzV29ya2luZztcbiAgfVxuXG4gIGdldCBpc0NhbmNlbGVkKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNhbmNlbGVkV29ya2Vyc0NvdW50ID0gdGhpcy53b3JrZXJzLmZpbHRlcih3b3JrZXIgPT4gd29ya2VyLmlzQ2FuY2VsZWQpLmxlbmd0aDtcbiAgICByZXR1cm4gQm9vbGVhbihjYW5jZWxlZFdvcmtlcnNDb3VudCAmJiBjYW5jZWxlZFdvcmtlcnNDb3VudCA9PT0gdGhpcy53b3JrZXJzLmxlbmd0aCk7XG4gIH1cblxuICBnZXQgcnVubmluZ1dvcmtlckNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMud29ya2Vycy5maWx0ZXIod29ya2VyID0+IHdvcmtlci5pc1dvcmtpbmcpLmxlbmd0aDtcbiAgfVxuXG4gIGdldCBzdGFydFRpbWUoKTogRGF0ZSB7XG4gICAgY29uc3Qgc3RhcnRUaW1lczogbnVtYmVyW10gPSB0aGlzLndvcmtlcnNcbiAgICAgIC5maWx0ZXIod29ya2VyID0+IHdvcmtlci5zdGFydFRpbWUpXG4gICAgICAubWFwKHdvcmtlciA9PiB3b3JrZXIuc3RhcnRUaW1lXG4gICAgICAgID8gd29ya2VyLnN0YXJ0VGltZS5nZXRUaW1lKClcbiAgICAgICAgOiBudWxsXG4gICAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE1hdGgubWluKC4uLnN0YXJ0VGltZXMpKTtcbiAgfVxuXG4gIGdldCBlbmRUaW1lKCk6IERhdGUge1xuICAgIGNvbnN0IHN0YXJ0VGltZXM6IG51bWJlcltdID0gdGhpcy53b3JrZXJzXG4gICAgICAuZmlsdGVyKHdvcmtlciA9PiB3b3JrZXIuc3RhcnRUaW1lKVxuICAgICAgLm1hcCh3b3JrZXIgPT4gd29ya2VyLnN0YXJ0VGltZVxuICAgICAgICA/IHdvcmtlci5zdGFydFRpbWUuZ2V0VGltZSgpXG4gICAgICAgIDogbnVsbFxuICAgICAgKTtcblxuICAgIHJldHVybiBuZXcgRGF0ZShNYXRoLm1heCguLi5zdGFydFRpbWVzKSk7XG4gIH1cblxuICBnZXQgcmVtYWluaW5nUXVldWVTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxRdWV1ZVNpemUgLSB0aGlzLnRvdGFsUHJvY2Vzc2VkO1xuICB9XG5cbiAgZ2V0IGVzdGltYXRlZFNlY29uZHNMZWZ0KCk6IG51bWJlciB7XG4gICAgY29uc3QgcmVtYWluaW5nQ291bnQgPSB0aGlzLnJlbWFpbmluZ1F1ZXVlU2l6ZTtcbiAgICByZXR1cm4gcmVtYWluaW5nQ291bnRcbiAgICAgID8gYXZlcmFnZShcbiAgICAgICAgdGhpcy53b3JrZXJzXG4gICAgICAgICAgLm1hcCh3b3JrZXIgPT4gd29ya2VyLmNhbGN1bGF0ZVJlbWFpbmluZ1NlY29uZHMocmVtYWluaW5nQ291bnQpKVxuICAgICAgKVxuICAgICAgOiAwO1xuICB9XG5cbiAgZ2V0IGF2ZXJhZ2VSZWNvcmRzUHJvY2Vzc2VkUGVyTWludXRlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGF2ZXJhZ2UoXG4gICAgICB0aGlzLndvcmtlcnNcbiAgICAgICAgLm1hcCh3b3JrZXIgPT4gd29ya2VyLnJlY29yZHNQcm9jZXNzZWRQZXJNaW51dGUpXG4gICAgKTtcbiAgfVxuXG4gIHNldFF1ZXVlU2l6ZSh0b3RhbFF1ZXVlU2l6ZTogbnVtYmVyKTogV29ya1F1ZXVlU3RhdHVzVHJhY2tlciB7XG4gICAgdGhpcy50b3RhbFF1ZXVlU2l6ZSA9IHRvdGFsUXVldWVTaXplO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29tcGxldGUoKTogV29ya1F1ZXVlU3RhdHVzVHJhY2tlciB7XG4gICAgdGhpcy53b3JrZXJzLnNwbGljZSgwLCB0aGlzLndvcmtlcnMubGVuZ3RoKTtcbiAgICB0aGlzLnRvdGFsUXVldWVTaXplID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFdvcmtlciguLi53b3JrZXJzOiBRdWV1ZVdvcmtlclRva2VuW10pOiBXb3JrUXVldWVTdGF0dXNUcmFja2VyIHtcbiAgICB3b3JrZXJzLmZvckVhY2god29ya2VyID0+IHtcbiAgICAgIHRoaXMud29ya2Vycy5wdXNoKHdvcmtlcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldFN0YXR1cygpOiBXb3JrUXVldWVTdGF0dXMge1xuICAgIHJldHVybiB7XG4gICAgICBpc1dvcmtpbmc6IHRoaXMuaXNXb3JraW5nLFxuICAgICAgaXNDYW5jZWxlZDogdGhpcy5pc0NhbmNlbGVkLFxuICAgICAgaXNDb21wbGV0ZTogdGhpcy5pc0NvbXBsZXRlLFxuICAgICAgdG90YWxQcm9jZXNzZWQ6IHRoaXMudG90YWxQcm9jZXNzZWQsXG4gICAgICBzdGFydFRpbWU6IHRoaXMuc3RhcnRUaW1lLFxuICAgICAgZW5kVGltZTogdGhpcy5lbmRUaW1lLFxuICAgICAgcGVyY2VudENvbXBsZXRlOiB0aGlzLnBlcmNlbnRDb21wbGV0ZSxcbiAgICAgIHRvdGFsUXVldWVTaXplOiB0aGlzLnRvdGFsUXVldWVTaXplLFxuICAgICAgcmVtYWluaW5nUXVldWVTaXplOiB0aGlzLnJlbWFpbmluZ1F1ZXVlU2l6ZSxcbiAgICAgIHRvdGFsQ29tcGxldGU6IHRoaXMudG90YWxDb21wbGV0ZSxcbiAgICAgIHRvdGFsRmFpbGVkOiB0aGlzLnRvdGFsRmFpbGVkLFxuICAgICAgZXN0aW1hdGVkU2Vjb25kc0xlZnQ6IHRoaXMuZXN0aW1hdGVkU2Vjb25kc0xlZnQsXG4gICAgICB3b3JrZXJDb3VudDogdGhpcy53b3JrZXJzLmxlbmd0aCxcbiAgICB9O1xuICB9XG59XG4iXX0=