/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SecurityConfig } from './security-config';
import { isString } from '../core/type-check/is-string.function';
import { isArray } from '../core/type-check/is-array.function';
import { isValue } from '../core/type-check/is-value.function';
import { isNumber } from '../core/type-check/is-number.function';
import * as i0 from "@angular/core";
import * as i1 from "./security-config";
export class RoleManagerService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.roles = new Set();
        this.roleSplitterExpr = new RegExp(this.config.roleSplitterExp);
    }
    /**
     * @return {?}
     */
    get enabled() {
        return this.config.rolesEnabled;
    }
    /**
     * @return {?}
     */
    get roleCount() {
        return this.roles.size;
    }
    /**
     * @return {?}
     */
    getRoles() {
        return Array.from(this.roles);
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    setRoles(roles) {
        this.clearRoles();
        this.addRoles(roles);
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    addRoles(roles) {
        if (isString(roles) && ((/** @type {?} */ (roles))).includes(',')) {
            roles = this.toArray(((/** @type {?} */ (roles))));
        }
        if (isArray(roles)) {
            ((/** @type {?} */ (roles))).forEach(this.addRole, this);
        }
        else {
            this.addRole((/** @type {?} */ (roles)));
        }
    }
    /**
     * @param {?} role
     * @return {?}
     */
    addRole(role) {
        this.roles.add(String(role).trim());
    }
    /**
     * @return {?}
     */
    clearRoles() {
        this.roles.clear();
    }
    /**
     * @param {?} role
     * @return {?}
     */
    hasRole(role) {
        if (!this.enabled) {
            return true;
        }
        if (!isValue(role)) {
            return false;
        }
        return this.hasRoles(String(role));
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    hasRoles(roles) {
        /** @type {?} */
        let splitRoles;
        if (!this.enabled) {
            return true;
        }
        if (!isValue(roles)) {
            return false;
        }
        splitRoles = this.toArray(roles);
        return String(roles).includes(',')
            ? this.hasAllRoles(splitRoles)
            : this.hasAnyRoles(splitRoles);
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    hasAllRoles(roles) {
        if (!this.enabled) {
            return true;
        }
        if (!isValue(roles)) {
            return false;
        }
        /** @type {?} */
        const roleList = this.toStringArray(roles);
        return roleList.every(this.forRealHasRole.bind(this));
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    hasAnyRoles(roles) {
        if (!this.enabled) {
            return true;
        }
        if (!isValue(roles)) {
            return false;
        }
        /** @type {?} */
        const roleList = this.toStringArray(roles);
        return roleList.some(this.forRealHasRole.bind(this));
    }
    /**
     * @private
     * @param {?} role
     * @return {?}
     */
    forRealHasRole(role) {
        return this.roles.has(String(role).trim());
    }
    /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    toStringArray(roles) {
        /** @type {?} */
        let rolesList = [];
        if (isString(roles)) {
            rolesList = this.toArray((/** @type {?} */ (roles)));
        }
        else if (isNumber(roles)) {
            rolesList.push(String(roles));
        }
        else {
            rolesList = (/** @type {?} */ (roles));
        }
        return rolesList;
    }
    /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    toArray(roles) {
        return String(roles).split(this.roleSplitterExpr);
    }
}
RoleManagerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
RoleManagerService.ctorParameters = () => [
    { type: SecurityConfig }
];
/** @nocollapse */ RoleManagerService.ngInjectableDef = i0.defineInjectable({ factory: function RoleManagerService_Factory() { return new RoleManagerService(i0.inject(i1.SecurityConfig)); }, token: RoleManagerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    RoleManagerService.prototype.roles;
    /**
     * @type {?}
     * @private
     */
    RoleManagerService.prototype.roleSplitterExpr;
    /**
     * @type {?}
     * @private
     */
    RoleManagerService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,