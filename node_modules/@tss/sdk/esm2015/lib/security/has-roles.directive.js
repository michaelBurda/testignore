/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { RoleManagerService } from './role-manager.service';
import { Logger } from '../core/logging/logger.service';
export class HasRolesDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} roleMgr
     * @param {?} log
     */
    constructor(templateRef, viewContainer, roleMgr, log) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.roleMgr = roleMgr;
        this.log = log;
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    set hasRoles(roles) {
        if (this.roleMgr.hasRoles(roles)) {
            // If condition is true add template to DOM
            this.viewContainer.createEmbeddedView(this.templateRef);
            this.log.trace(`Granted access: ${roles}`);
        }
        else {
            // Else remove template from DOM
            this.viewContainer.clear();
            this.log.trace(`Denied access: ${roles}`);
        }
    }
}
HasRolesDirective.decorators = [
    { type: Directive, args: [{
                // TODO: remove this once this is moved to it's own package - RG.
                // tslint:disable-next-line
                selector: '[hasRoles]'
            },] }
];
/** @nocollapse */
HasRolesDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: RoleManagerService },
    { type: Logger }
];
HasRolesDirective.propDecorators = {
    hasRoles: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.roleMgr;
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL3NlY3VyaXR5L2hhcy1yb2xlcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFReEQsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7OztJQUU1QixZQUNVLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLE9BQTJCLEVBQzNCLEdBQVc7UUFIWCxnQkFBVyxHQUFYLFdBQVcsQ0FBa0I7UUFDN0Isa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBQzNCLFFBQUcsR0FBSCxHQUFHLENBQVE7SUFDckIsQ0FBQzs7Ozs7SUFFRCxJQUFhLFFBQVEsQ0FBQyxLQUFzQjtRQUMxQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2hDLDJDQUEyQztZQUMzQyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsZ0NBQWdDO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDOzs7WUF4QkYsU0FBUyxTQUFDOzs7Z0JBR1QsUUFBUSxFQUFFLFlBQVk7YUFDdkI7Ozs7WUFUMEIsV0FBVztZQUFFLGdCQUFnQjtZQUMvQyxrQkFBa0I7WUFDbEIsTUFBTTs7O3VCQWlCWixLQUFLOzs7Ozs7O0lBTkosd0NBQXFDOzs7OztJQUNyQywwQ0FBdUM7Ozs7O0lBQ3ZDLG9DQUFtQzs7Ozs7SUFDbkMsZ0NBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvbGVNYW5hZ2VyU2VydmljZSB9IGZyb20gJy4vcm9sZS1tYW5hZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vY29yZS9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlJztcblxuXG5ARGlyZWN0aXZlKHtcbiAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgb25jZSB0aGlzIGlzIG1vdmVkIHRvIGl0J3Mgb3duIHBhY2thZ2UgLSBSRy5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gIHNlbGVjdG9yOiAnW2hhc1JvbGVzXSdcbn0pXG5leHBvcnQgY2xhc3MgSGFzUm9sZXNEaXJlY3RpdmUge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgcm9sZU1ncjogUm9sZU1hbmFnZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9nOiBMb2dnZXIpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBoYXNSb2xlcyhyb2xlczogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucm9sZU1nci5oYXNSb2xlcyhyb2xlcykpIHtcbiAgICAgIC8vIElmIGNvbmRpdGlvbiBpcyB0cnVlIGFkZCB0ZW1wbGF0ZSB0byBET01cbiAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XG4gICAgICB0aGlzLmxvZy50cmFjZShgR3JhbnRlZCBhY2Nlc3M6ICR7cm9sZXN9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEVsc2UgcmVtb3ZlIHRlbXBsYXRlIGZyb20gRE9NXG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICAgIHRoaXMubG9nLnRyYWNlKGBEZW5pZWQgYWNjZXNzOiAke3JvbGVzfWApO1xuICAgIH1cbiAgfVxufVxuIl19