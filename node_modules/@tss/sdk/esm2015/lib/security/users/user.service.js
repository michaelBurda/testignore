/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
// TSS.
import { BaseResourceService } from '../../core/resource/base-resource.service';
import { SecurityConfig } from '../security-config';
import { join } from '../../core/url/join.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../security-config";
/**
 * \@example
 * ## Get Users that belong to a given role (by ID).
 * service.usersByRoleId('1428a342-8a95-4b6c-b3e9-da135e3ced04')
 *
 * // ...which is just a shortcut for:
 * service.query({}, new HttpParams().set('filterByRoleId', roleName));
 *
 * ## Get Users that belong to a given role (by name).
 * service.usersByRoleName('Admin')
 *
 * // ...which is just a shortcut for:
 * service.query({}, new HttpParams().set('filterByRoleName', roleName));
 */
export class UserService extends BaseResourceService {
    /**
     * @param {?} http
     * @param {?} config
     */
    constructor(http, config) {
        super(http, {
            url: join(config.serviceUrl, config.usersEndpoint)
        });
        this.http = http;
    }
    /**
     * @param {?} roleId
     * @param {?=} params
     * @return {?}
     */
    usersByRoleId(roleId, params) {
        params = (params || new HttpParams()).set('filterByRoleId', roleId);
        return this.query({}, params);
    }
    /**
     * @param {?} roleName
     * @param {?=} params
     * @return {?}
     */
    usersByRoleName(roleName, params) {
        params = (params || new HttpParams()).set('filterByRoleName', roleName);
        return this.query({}, params);
    }
    /**
     * @param {?} searchText
     * @param {?=} params
     * @return {?}
     */
    search(searchText, params) {
        params = (params || new HttpParams()).set('search', searchText);
        return this.query({}, params);
    }
}
UserService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UserService.ctorParameters = () => [
    { type: HttpClient },
    { type: SecurityConfig }
];
/** @nocollapse */ UserService.ngInjectableDef = i0.defineInjectable({ factory: function UserService_Factory() { return new UserService(i0.inject(i1.HttpClient), i0.inject(i2.SecurityConfig)); }, token: UserService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    UserService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvc2VjdXJpdHkvdXNlcnMvdXNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUVoRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQnBELE1BQU0sT0FBTyxXQUFZLFNBQVEsbUJBQXlCOzs7OztJQUN4RCxZQUFzQixJQUFnQixFQUFFLE1BQXNCO1FBQzVELEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDVixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLGFBQWEsQ0FBQztTQUNuRCxDQUFDLENBQUM7UUFIaUIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUl0QyxDQUFDOzs7Ozs7SUFFRCxhQUFhLENBQUMsTUFBYyxFQUFFLE1BQW1CO1FBQy9DLE1BQU0sR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBRUQsZUFBZSxDQUFDLFFBQWdCLEVBQUUsTUFBbUI7UUFDbkQsTUFBTSxHQUFHLENBQUMsTUFBTSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeEUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsVUFBa0IsRUFBRSxNQUFtQjtRQUM1QyxNQUFNLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDaEUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7WUF2QkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBN0JRLFVBQVU7WUFTVixjQUFjOzs7Ozs7OztJQXNCVCwyQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gM3JkIHBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBCYXNlUmVzb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29yZS9yZXNvdXJjZS9iYXNlLXJlc291cmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vdXNlcic7XG5pbXBvcnQgeyBTZWN1cml0eUNvbmZpZyB9IGZyb20gJy4uL3NlY3VyaXR5LWNvbmZpZyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAnLi4vLi4vY29yZS91cmwvam9pbi5mdW5jdGlvbic7XG5cblxuLyoqXG4gKiBAZXhhbXBsZVxuICogIyMgR2V0IFVzZXJzIHRoYXQgYmVsb25nIHRvIGEgZ2l2ZW4gcm9sZSAoYnkgSUQpLlxuICogc2VydmljZS51c2Vyc0J5Um9sZUlkKCcxNDI4YTM0Mi04YTk1LTRiNmMtYjNlOS1kYTEzNWUzY2VkMDQnKVxuICpcbiAqIC8vIC4uLndoaWNoIGlzIGp1c3QgYSBzaG9ydGN1dCBmb3I6XG4gKiBzZXJ2aWNlLnF1ZXJ5KHt9LCBuZXcgSHR0cFBhcmFtcygpLnNldCgnZmlsdGVyQnlSb2xlSWQnLCByb2xlTmFtZSkpO1xuICpcbiAqICMjIEdldCBVc2VycyB0aGF0IGJlbG9uZyB0byBhIGdpdmVuIHJvbGUgKGJ5IG5hbWUpLlxuICogc2VydmljZS51c2Vyc0J5Um9sZU5hbWUoJ0FkbWluJylcbiAqXG4gKiAvLyAuLi53aGljaCBpcyBqdXN0IGEgc2hvcnRjdXQgZm9yOlxuICogc2VydmljZS5xdWVyeSh7fSwgbmV3IEh0dHBQYXJhbXMoKS5zZXQoJ2ZpbHRlckJ5Um9sZU5hbWUnLCByb2xlTmFtZSkpO1xuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBVc2VyU2VydmljZSBleHRlbmRzIEJhc2VSZXNvdXJjZVNlcnZpY2U8VXNlcj4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCwgY29uZmlnOiBTZWN1cml0eUNvbmZpZykge1xuICAgIHN1cGVyKGh0dHAsIHtcbiAgICAgIHVybDogam9pbihjb25maWcuc2VydmljZVVybCwgY29uZmlnLnVzZXJzRW5kcG9pbnQpXG4gICAgfSk7XG4gIH1cblxuICB1c2Vyc0J5Um9sZUlkKHJvbGVJZDogc3RyaW5nLCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxVc2VyW10+IHtcbiAgICBwYXJhbXMgPSAocGFyYW1zIHx8IG5ldyBIdHRwUGFyYW1zKCkpLnNldCgnZmlsdGVyQnlSb2xlSWQnLCByb2xlSWQpO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5KHt9LCBwYXJhbXMpO1xuICB9XG5cbiAgdXNlcnNCeVJvbGVOYW1lKHJvbGVOYW1lOiBzdHJpbmcsIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPFVzZXJbXT4ge1xuICAgIHBhcmFtcyA9IChwYXJhbXMgfHwgbmV3IEh0dHBQYXJhbXMoKSkuc2V0KCdmaWx0ZXJCeVJvbGVOYW1lJywgcm9sZU5hbWUpO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5KHt9LCBwYXJhbXMpO1xuICB9XG5cbiAgc2VhcmNoKHNlYXJjaFRleHQ6IHN0cmluZywgcGFyYW1zPzogSHR0cFBhcmFtcykge1xuICAgIHBhcmFtcyA9IChwYXJhbXMgfHwgbmV3IEh0dHBQYXJhbXMoKSkuc2V0KCdzZWFyY2gnLCBzZWFyY2hUZXh0KTtcbiAgICByZXR1cm4gdGhpcy5xdWVyeSh7fSwgcGFyYW1zKTtcbiAgfVxufVxuIl19