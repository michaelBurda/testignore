/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ResourceConfig } from '../core/resource.config';
import { AutoConfig } from '../core/auto-config.decorator';
import * as i0 from "@angular/core";
/**
 * Security related configuration options. These settings are used to drive all
 * security related behaviour throughout the application. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
let SecurityConfig = /**
 * Security related configuration options. These settings are used to drive all
 * security related behaviour throughout the application. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
class SecurityConfig extends ResourceConfig {
    constructor() {
        super(...arguments);
        this.rolesEnabled = true;
        this.storeToken = true;
        this.autoSignIn = true;
        this.authorizationType = 'Bearer';
        this.tokenEndpoint = 'token';
        this.signOutEndpoint = 'api/account/signout';
        this.userInfoEndpoint = 'api/account/userinfo';
        this.usersEndpoint = 'api/users/{id}';
        this.rolesEndpoint = 'api/roles/{id}';
        this.privilegesEndpoint = 'api/privileges/{id}';
        this.userRolesEndpoint = 'api/users/{userId}/roles/{roleName}';
        this.rolesPrivilegesEndpoint = 'api/roles/{roleId}/privileges/{privilegeId}';
        this.tokenStorageKey = '__tss_token';
        this.tokenInvalidationDateLookup = '__tss_token_invalidate_date';
        this.tdsTokenInclusionExpression = '/api/';
        this.withCredentialsInclusionExpression = '(.*?)';
        this.setWithCredentials = false;
        this.accessToken = null;
        this.defaultUserName = null;
        this.defaultPassword = null;
        this.roleSplitterExp = '[,|]+';
        this.tokenBody = (/**
         * @param {?} userName
         * @param {?} password
         * @return {?}
         */
        (userName, password) => `grant_type=password&username=${userName}&password=${password}`);
    }
};
SecurityConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ SecurityConfig.ngInjectableDef = i0.defineInjectable({ factory: function SecurityConfig_Factory() { return new SecurityConfig(); }, token: SecurityConfig, providedIn: "root" });
/**
 * Security related configuration options. These settings are used to drive all
 * security related behaviour throughout the application. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
SecurityConfig = tslib_1.__decorate([
    AutoConfig('SecurityConfig')
], SecurityConfig);
export { SecurityConfig };
if (false) {
    /** @type {?} */
    SecurityConfig.prototype.rolesEnabled;
    /** @type {?} */
    SecurityConfig.prototype.storeToken;
    /** @type {?} */
    SecurityConfig.prototype.autoSignIn;
    /** @type {?} */
    SecurityConfig.prototype.authorizationType;
    /** @type {?} */
    SecurityConfig.prototype.tokenEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.signOutEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.userInfoEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.usersEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.rolesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.privilegesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.userRolesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.rolesPrivilegesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.tokenStorageKey;
    /** @type {?} */
    SecurityConfig.prototype.tokenInvalidationDateLookup;
    /** @type {?} */
    SecurityConfig.prototype.tdsTokenInclusionExpression;
    /** @type {?} */
    SecurityConfig.prototype.withCredentialsInclusionExpression;
    /** @type {?} */
    SecurityConfig.prototype.setWithCredentials;
    /** @type {?} */
    SecurityConfig.prototype.accessToken;
    /** @type {?} */
    SecurityConfig.prototype.defaultUserName;
    /** @type {?} */
    SecurityConfig.prototype.defaultPassword;
    /** @type {?} */
    SecurityConfig.prototype.roleSplitterExp;
    /** @type {?} */
    SecurityConfig.prototype.tokenBody;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHktY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvc2VjdXJpdHkvc2VjdXJpdHktY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7Ozs7O0lBYzlDLGNBQWM7Ozs7O01BQWQsY0FBZSxTQUFRLGNBQWM7SUFKbEQ7O1FBS0UsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFDcEIsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLHNCQUFpQixHQUF1QixRQUFRLENBQUM7UUFDakQsa0JBQWEsR0FBRyxPQUFPLENBQUM7UUFDeEIsb0JBQWUsR0FBRyxxQkFBcUIsQ0FBQztRQUN4QyxxQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQztRQUMxQyxrQkFBYSxHQUFHLGdCQUFnQixDQUFDO1FBQ2pDLGtCQUFhLEdBQUcsZ0JBQWdCLENBQUM7UUFDakMsdUJBQWtCLEdBQUcscUJBQXFCLENBQUM7UUFDM0Msc0JBQWlCLEdBQUcscUNBQXFDLENBQUM7UUFDMUQsNEJBQXVCLEdBQUcsNkNBQTZDLENBQUM7UUFDeEUsb0JBQWUsR0FBRyxhQUFhLENBQUM7UUFDaEMsZ0NBQTJCLEdBQUcsNkJBQTZCLENBQUM7UUFDNUQsZ0NBQTJCLEdBQUcsT0FBTyxDQUFDO1FBQ3RDLHVDQUFrQyxHQUFHLE9BQU8sQ0FBQztRQUM3Qyx1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDM0IsZ0JBQVcsR0FBVyxJQUFJLENBQUM7UUFDM0Isb0JBQWUsR0FBVyxJQUFJLENBQUM7UUFDL0Isb0JBQWUsR0FBVyxJQUFJLENBQUM7UUFDL0Isb0JBQWUsR0FBRyxPQUFPLENBQUM7UUFDMUIsY0FBUzs7Ozs7UUFBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLGdDQUFnQyxRQUFRLGFBQWEsUUFBUSxFQUFFLEVBQUM7S0FDckc7Q0FBQSxDQUFBOztZQTNCQSxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7Ozs7O0FBRVksY0FBYztJQUQxQixVQUFVLENBQUMsZ0JBQWdCLENBQUM7R0FDaEIsY0FBYyxDQXVCMUI7U0F2QlksY0FBYzs7O0lBQ3pCLHNDQUFvQjs7SUFDcEIsb0NBQWtCOztJQUNsQixvQ0FBa0I7O0lBQ2xCLDJDQUFpRDs7SUFDakQsdUNBQXdCOztJQUN4Qix5Q0FBd0M7O0lBQ3hDLDBDQUEwQzs7SUFDMUMsdUNBQWlDOztJQUNqQyx1Q0FBaUM7O0lBQ2pDLDRDQUEyQzs7SUFDM0MsMkNBQTBEOztJQUMxRCxpREFBd0U7O0lBQ3hFLHlDQUFnQzs7SUFDaEMscURBQTREOztJQUM1RCxxREFBc0M7O0lBQ3RDLDREQUE2Qzs7SUFDN0MsNENBQTJCOztJQUMzQixxQ0FBMkI7O0lBQzNCLHlDQUErQjs7SUFDL0IseUNBQStCOztJQUMvQix5Q0FBMEI7O0lBQzFCLG1DQUFvRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc291cmNlQ29uZmlnIH0gZnJvbSAnLi4vY29yZS9yZXNvdXJjZS5jb25maWcnO1xuaW1wb3J0IHsgQXV0b0NvbmZpZyB9IGZyb20gJy4uL2NvcmUvYXV0by1jb25maWcuZGVjb3JhdG9yJztcblxuXG5leHBvcnQgdHlwZSBBdXRob3JpemF0aW9uVHlwZXMgPSAnQmVhcmVyJztcblxuLyoqXG4gKiBTZWN1cml0eSByZWxhdGVkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy4gVGhlc2Ugc2V0dGluZ3MgYXJlIHVzZWQgdG8gZHJpdmUgYWxsXG4gKiBzZWN1cml0eSByZWxhdGVkIGJlaGF2aW91ciB0aHJvdWdob3V0IHRoZSBhcHBsaWNhdGlvbi4gVGhlIHNldHRpbmdzIGNhbiBiZVxuICogb3ZlcnJpZGRlbiBkaXJlY3RseSBpbiB0aGUgY29kZSwgYXBwbGljYXRpb24gbW9kdWxlLCBvciBmcm9tIHRoZSBURFMgc2VydmVyLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbkBBdXRvQ29uZmlnKCdTZWN1cml0eUNvbmZpZycpXG5leHBvcnQgY2xhc3MgU2VjdXJpdHlDb25maWcgZXh0ZW5kcyBSZXNvdXJjZUNvbmZpZyB7XG4gIHJvbGVzRW5hYmxlZCA9IHRydWU7XG4gIHN0b3JlVG9rZW4gPSB0cnVlO1xuICBhdXRvU2lnbkluID0gdHJ1ZTtcbiAgYXV0aG9yaXphdGlvblR5cGU6IEF1dGhvcml6YXRpb25UeXBlcyA9ICdCZWFyZXInO1xuICB0b2tlbkVuZHBvaW50ID0gJ3Rva2VuJztcbiAgc2lnbk91dEVuZHBvaW50ID0gJ2FwaS9hY2NvdW50L3NpZ25vdXQnO1xuICB1c2VySW5mb0VuZHBvaW50ID0gJ2FwaS9hY2NvdW50L3VzZXJpbmZvJztcbiAgdXNlcnNFbmRwb2ludCA9ICdhcGkvdXNlcnMve2lkfSc7XG4gIHJvbGVzRW5kcG9pbnQgPSAnYXBpL3JvbGVzL3tpZH0nO1xuICBwcml2aWxlZ2VzRW5kcG9pbnQgPSAnYXBpL3ByaXZpbGVnZXMve2lkfSc7XG4gIHVzZXJSb2xlc0VuZHBvaW50ID0gJ2FwaS91c2Vycy97dXNlcklkfS9yb2xlcy97cm9sZU5hbWV9JztcbiAgcm9sZXNQcml2aWxlZ2VzRW5kcG9pbnQgPSAnYXBpL3JvbGVzL3tyb2xlSWR9L3ByaXZpbGVnZXMve3ByaXZpbGVnZUlkfSc7XG4gIHRva2VuU3RvcmFnZUtleSA9ICdfX3Rzc190b2tlbic7XG4gIHRva2VuSW52YWxpZGF0aW9uRGF0ZUxvb2t1cCA9ICdfX3Rzc190b2tlbl9pbnZhbGlkYXRlX2RhdGUnO1xuICB0ZHNUb2tlbkluY2x1c2lvbkV4cHJlc3Npb24gPSAnL2FwaS8nO1xuICB3aXRoQ3JlZGVudGlhbHNJbmNsdXNpb25FeHByZXNzaW9uID0gJyguKj8pJztcbiAgc2V0V2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gIGFjY2Vzc1Rva2VuOiBzdHJpbmcgPSBudWxsO1xuICBkZWZhdWx0VXNlck5hbWU6IHN0cmluZyA9IG51bGw7XG4gIGRlZmF1bHRQYXNzd29yZDogc3RyaW5nID0gbnVsbDtcbiAgcm9sZVNwbGl0dGVyRXhwID0gJ1ssfF0rJztcbiAgdG9rZW5Cb2R5ID0gKHVzZXJOYW1lLCBwYXNzd29yZCkgPT4gYGdyYW50X3R5cGU9cGFzc3dvcmQmdXNlcm5hbWU9JHt1c2VyTmFtZX0mcGFzc3dvcmQ9JHtwYXNzd29yZH1gO1xufVxuIl19