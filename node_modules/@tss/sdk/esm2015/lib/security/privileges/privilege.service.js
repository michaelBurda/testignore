/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BaseResourceService } from '../../core/resource/base-resource.service';
import { SecurityConfig } from '../security-config';
import { join } from '../../core/url/join.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../security-config";
export class PrivilegeService extends BaseResourceService {
    /**
     * @param {?} http
     * @param {?} config
     */
    constructor(http, config) {
        super(http, {
            url: join(config.serviceUrl, config.privilegesEndpoint)
        });
        this.http = http;
    }
}
PrivilegeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PrivilegeService.ctorParameters = () => [
    { type: HttpClient },
    { type: SecurityConfig }
];
/** @nocollapse */ PrivilegeService.ngInjectableDef = i0.defineInjectable({ factory: function PrivilegeService_Factory() { return new PrivilegeService(i0.inject(i1.HttpClient), i0.inject(i2.SecurityConfig)); }, token: PrivilegeService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PrivilegeService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmlsZWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9zZWN1cml0eS9wcml2aWxlZ2VzL3ByaXZpbGVnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUVoRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDhCQUE4QixDQUFDOzs7O0FBTXBELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxtQkFBOEI7Ozs7O0lBQ2xFLFlBQXNCLElBQWdCLEVBQUUsTUFBc0I7UUFDNUQsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNWLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsa0JBQWtCLENBQUM7U0FDeEQsQ0FBQyxDQUFDO1FBSGlCLFNBQUksR0FBSixJQUFJLENBQVk7SUFJdEMsQ0FBQzs7O1lBUkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBWFEsVUFBVTtZQUtWLGNBQWM7Ozs7Ozs7O0lBUVQsZ0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmFzZVJlc291cmNlU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvcmVzb3VyY2UvYmFzZS1yZXNvdXJjZS5zZXJ2aWNlJztcbmltcG9ydCB7IFByaXZpbGVnZSB9IGZyb20gJy4vcHJpdmlsZWdlJztcbmltcG9ydCB7IFNlY3VyaXR5Q29uZmlnIH0gZnJvbSAnLi4vc2VjdXJpdHktY29uZmlnJztcbmltcG9ydCB7IGpvaW4gfSBmcm9tICcuLi8uLi9jb3JlL3VybC9qb2luLmZ1bmN0aW9uJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQcml2aWxlZ2VTZXJ2aWNlIGV4dGVuZHMgQmFzZVJlc291cmNlU2VydmljZTxQcml2aWxlZ2U+IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsIGNvbmZpZzogU2VjdXJpdHlDb25maWcpIHtcbiAgICBzdXBlcihodHRwLCB7XG4gICAgICB1cmw6IGpvaW4oY29uZmlnLnNlcnZpY2VVcmwsIGNvbmZpZy5wcml2aWxlZ2VzRW5kcG9pbnQpXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==