/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// 3rd party.
import { Subject } from 'rxjs';
import { publishReplay } from 'rxjs/operators';
import { RoleManagerService } from './role-manager.service';
import { SecurityConfig } from './security-config';
import { Logger } from '../core/logging/logger.service';
import { PersistentStorage } from '../core/storage/persistent-storage.service';
import { isString } from '../core/type-check/is-string.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./role-manager.service";
import * as i3 from "./security-config";
import * as i4 from "../core/storage/persistent-storage.service";
import * as i5 from "../core/logging/logger.service";
/** @enum {number} */
const SignInState = {
    SignedIn: 0,
    SignedOut: 1,
    SignInFailed: 2,
    SignOutFailed: 3,
};
export { SignInState };
SignInState[SignInState.SignedIn] = 'SignedIn';
SignInState[SignInState.SignedOut] = 'SignedOut';
SignInState[SignInState.SignInFailed] = 'SignInFailed';
SignInState[SignInState.SignOutFailed] = 'SignOutFailed';
export class AuthService {
    /**
     * @param {?} http
     * @param {?} roleMgr
     * @param {?} config
     * @param {?} storage
     * @param {?} log
     */
    constructor(http, roleMgr, config, storage, log) {
        this.http = http;
        this.roleMgr = roleMgr;
        this.config = config;
        this.storage = storage;
        this.log = log;
        this.stateChangeSubject = new Subject();
        this.rememberMe = config.storeToken;
        this.stateChange = this.stateChangeSubject.asObservable();
        if (config.autoSignIn && !this.isAuthenticated) {
            this.loadStoredToken();
        }
    }
    /**
     * @param {?} userName
     * @param {?} password
     * @param {?=} rememberMe
     * @return {?}
     */
    signIn(userName, password, rememberMe = this.rememberMe) {
        /** @type {?} */
        const observable = this.http.post(`${this.config.serviceUrl}/${this.config.tokenEndpoint}`, this.config.tokenBody(userName, password))
            .pipe(publishReplay(1));
        this.rememberMe = rememberMe;
        observable.subscribe(this.onSignedIn.bind(this), this.onSignInFailed.bind(this));
        return observable;
    }
    /**
     * @return {?}
     */
    signOut() {
        /** @type {?} */
        const signOutUrl = `${this.config.serviceUrl}/${this.config.signOutEndpoint}`;
        if (this.isFederatedAccount) {
            this.log.info(`Signing out. Authentication Type: STS. Forwarded to: ${signOutUrl}`);
            this.onSignedOut();
            if (typeof location !== 'undefined') {
                location.href = signOutUrl;
            }
        }
        else {
            // The only reason this "Account" method is abstracted here is because there is additional stuff that
            // has to happen when you sign out - like removing the user information cache, etc.
            /** @type {?} */
            const obserable = this.http.get(signOutUrl)
                .pipe(publishReplay(1));
            obserable
                .subscribe(this.onSignedOut.bind(this), this.onSignedOutFailed.bind(this));
            return obserable;
        }
    }
    /**
     * @return {?}
     */
    getUserInfo() {
        return this.http.get(`${this.config.serviceUrl}/${this.config.userInfoEndpoint}`);
    }
    /**
     * @return {?}
     */
    getToken() {
        return this.isAuthenticated
            ? this.account.access_token || null
            : null;
    }
    /**
     * @return {?}
     */
    loadStoredToken() {
        /** @type {?} */
        const token = this.getLocalToken();
        /** @type {?} */
        let loaded = false;
        if (token && token['.expires']) {
            /** @type {?} */
            const expiresDate = token['.expires'];
            if (expiresDate > new Date()) {
                this.onSignedIn(token, true);
                loaded = true;
            }
        }
        return loaded;
    }
    /**
     * @param {?} account
     * @param {?=} skipLocalStorage
     * @return {?}
     */
    onSignedIn(account, skipLocalStorage = false) {
        this.account = account;
        this.isAuthenticated = true;
        this.isDomainAccount = (account.foundContextType || '').toLowerCase() === 'domain';
        this.isFederatedAccount = (account.authenticationType || '').toLowerCase() === 'federation';
        // Note, we are exposing the access token through the security config because the token intercepter
        // can not use this auth service - it will result in a cyclic dpendency injection error.
        // See Angular issue: https://github.com/angular/angular/issues/18224
        // TODO: Deprecate "accessToken" property on "SecurityConfig" once this is resolved - RG.
        this.config.accessToken = account.access_token;
        this.roleMgr.setRoles(account.privileges || account.roles);
        if (!skipLocalStorage && this.rememberMe) {
            account.lastSignIn = new Date();
            this.setLocalToken(account);
        }
        this.log.debug('User signed in succesfully');
        this.stateChangeSubject.next(SignInState.SignedIn);
    }
    /**
     * @return {?}
     */
    onSignedOut() {
        // We set the "authenticated" flag state to false so that anyone watching this can see the new state and
        // get rid of the account information that was cached, because it is no longer applicable.
        this.isAuthenticated = false;
        this.isDomainAccount = false;
        this.isFederatedAccount = false;
        this.account = null;
        this.roleMgr.clearRoles();
        this.setLocalToken(null);
        this.log.debug('User signed out succesfully');
        this.stateChangeSubject.next(SignInState.SignedOut);
    }
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    onSignInFailed(err) {
        this.log.error('Failed to sign in', err);
        this.stateChangeSubject.next(SignInState.SignInFailed);
    }
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    onSignedOutFailed(err) {
        this.log.error('Failed to sign out', err);
        this.stateChangeSubject.next(SignInState.SignOutFailed);
    }
    /**
     * @private
     * @return {?}
     */
    getLocalToken() {
        try {
            /** @type {?} */
            const token = this.storage.getObject(this.config.tokenStorageKey);
            if (token && token.lastSignIn && isString(token.lastSignIn)) {
                token.lastSignIn = new Date(token.lastSignIn);
            }
            if (token && token['.expires'] && isString(token['.expires'])) {
                token['.expires'] = new Date(Date.parse(token['.expires']));
            }
            return token;
        }
        finally {
            // We don't need to do anything bbecause this is not critical path.
        }
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    setLocalToken(token) {
        try {
            if (token) {
                this.storage.setObject(this.config.tokenStorageKey, token);
            }
            else {
                this.storage.remove(this.config.tokenStorageKey);
            }
        }
        finally {
            // We don't need to do anything as this is not a core workflow.
        }
    }
}
AuthService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AuthService.ctorParameters = () => [
    { type: HttpClient },
    { type: RoleManagerService },
    { type: SecurityConfig },
    { type: PersistentStorage },
    { type: Logger }
];
/** @nocollapse */ AuthService.ngInjectableDef = i0.defineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.inject(i1.HttpClient), i0.inject(i2.RoleManagerService), i0.inject(i3.SecurityConfig), i0.inject(i4.PersistentStorage), i0.inject(i5.Logger)); }, token: AuthService, providedIn: "root" });
if (false) {
    /** @type {?} */
    AuthService.prototype.rememberMe;
    /** @type {?} */
    AuthService.prototype.account;
    /** @type {?} */
    AuthService.prototype.isAuthenticated;
    /** @type {?} */
    AuthService.prototype.isDomainAccount;
    /** @type {?} */
    AuthService.prototype.isFederatedAccount;
    /** @type {?} */
    AuthService.prototype.stateChange;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.stateChangeSubject;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.roleMgr;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,