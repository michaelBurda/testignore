/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { toFormDataString } from '../http/to-form-data-string.function';
import { isValue } from '../core/type-check/is-value.function';
/**
 * @record
 */
export function AngularHttpOption() { }
if (false) {
    /** @type {?|undefined} */
    AngularHttpOption.prototype.headers;
    /** @type {?|undefined} */
    AngularHttpOption.prototype.observe;
    /** @type {?|undefined} */
    AngularHttpOption.prototype.params;
    /** @type {?|undefined} */
    AngularHttpOption.prototype.reportProgress;
    /** @type {?|undefined} */
    AngularHttpOption.prototype.responseType;
    /** @type {?|undefined} */
    AngularHttpOption.prototype.withCredentials;
}
/**
 * @param {?=} params
 * @param {?=} format
 * @return {?}
 */
export function getEsriMapServiceHttOptions(params, format = 'json') {
    /** @type {?} */
    const headers = new HttpHeaders();
    params = params || new HttpParams();
    if (format) {
        params = params.set('f', format);
    }
    headers.append('Content-Type', 'application/json');
    headers.append('Access-Control-Allow-Origin', '*');
    /** @type {?} */
    const httpOptions = {
        withCredentials: true,
        headers,
        params,
    };
    return httpOptions;
}
/**
 * @param {?} httpOption
 * @param {?} params
 * @return {?}
 */
export function addParamsToHttpOptions(httpOption, params) {
    Object
        .keys(params)
        .filter((/**
     * @param {?} key
     * @return {?}
     */
    key => isValue(params[key])))
        .forEach((/**
     * @param {?} key
     * @return {?}
     */
    key => {
        /** @type {?} */
        const value = params[key];
        httpOption.params = httpOption.params.set(key, toFormDataString(value, false));
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXNyaS1tYXAtc2VydmljZS1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZXNyaS9lc3JpLW1hcC1zZXJ2aWNlLXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFL0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDeEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7O0FBRy9ELHVDQU9DOzs7SUFOQyxvQ0FBc0I7O0lBQ3RCLG9DQUFpQjs7SUFDakIsbUNBQW9COztJQUNwQiwyQ0FBeUI7O0lBQ3pCLHlDQUFzQjs7SUFDdEIsNENBQTBCOzs7Ozs7O0FBRzVCLE1BQU0sVUFBVSwyQkFBMkIsQ0FBQyxNQUFtQixFQUFFLFNBQWtDLE1BQU07O1VBQ2pHLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRTtJQUNqQyxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksVUFBVSxFQUFFLENBQUM7SUFFcEMsSUFBSSxNQUFNLEVBQUU7UUFDVixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDbEM7SUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxNQUFNLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUM7O1VBRTdDLFdBQVcsR0FBRztRQUNsQixlQUFlLEVBQUUsSUFBSTtRQUNyQixPQUFPO1FBQ1AsTUFBTTtLQUNQO0lBRUQsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFVBQTZCLEVBQUUsTUFBVTtJQUM5RSxNQUFNO1NBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNaLE1BQU07Ozs7SUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQztTQUNuQyxPQUFPOzs7O0lBQUMsR0FBRyxDQUFDLEVBQUU7O2NBQ1AsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDekIsVUFBVSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQyxFQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBFc3JpUXVlcnlSZXNwb25zZUZvcm1hdCB9IGZyb20gJy4vZXNyaS1yZXNwb25zZS1mb3JtYXQnO1xuaW1wb3J0IHsgdG9Gb3JtRGF0YVN0cmluZyB9IGZyb20gJy4uL2h0dHAvdG8tZm9ybS1kYXRhLXN0cmluZy5mdW5jdGlvbic7XG5pbXBvcnQgeyBpc1ZhbHVlIH0gZnJvbSAnLi4vY29yZS90eXBlLWNoZWNrL2lzLXZhbHVlLmZ1bmN0aW9uJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIEFuZ3VsYXJIdHRwT3B0aW9uIHtcbiAgaGVhZGVycz86IEh0dHBIZWFkZXJzO1xuICBvYnNlcnZlPzogJ2JvZHknO1xuICBwYXJhbXM/OiBIdHRwUGFyYW1zO1xuICByZXBvcnRQcm9ncmVzcz86IGJvb2xlYW47XG4gIHJlc3BvbnNlVHlwZT86ICdqc29uJztcbiAgd2l0aENyZWRlbnRpYWxzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVzcmlNYXBTZXJ2aWNlSHR0T3B0aW9ucyhwYXJhbXM/OiBIdHRwUGFyYW1zLCBmb3JtYXQ6IEVzcmlRdWVyeVJlc3BvbnNlRm9ybWF0ID0gJ2pzb24nKTogQW5ndWxhckh0dHBPcHRpb24ge1xuICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gIHBhcmFtcyA9IHBhcmFtcyB8fCBuZXcgSHR0cFBhcmFtcygpO1xuXG4gIGlmIChmb3JtYXQpIHtcbiAgICBwYXJhbXMgPSBwYXJhbXMuc2V0KCdmJywgZm9ybWF0KTtcbiAgfVxuXG4gIGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICBoZWFkZXJzLmFwcGVuZCgnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcblxuICBjb25zdCBodHRwT3B0aW9ucyA9IHtcbiAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXG4gICAgaGVhZGVycyxcbiAgICBwYXJhbXMsXG4gIH07XG5cbiAgcmV0dXJuIGh0dHBPcHRpb25zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkUGFyYW1zVG9IdHRwT3B0aW9ucyhodHRwT3B0aW9uOiBBbmd1bGFySHR0cE9wdGlvbiwgcGFyYW1zOiB7fSk6IHZvaWQge1xuICBPYmplY3RcbiAgICAua2V5cyhwYXJhbXMpXG4gICAgLmZpbHRlcihrZXkgPT4gaXNWYWx1ZShwYXJhbXNba2V5XSkpXG4gICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zW2tleV07XG4gICAgICBodHRwT3B0aW9uLnBhcmFtcyA9IGh0dHBPcHRpb24ucGFyYW1zLnNldChrZXksIHRvRm9ybURhdGFTdHJpbmcodmFsdWUsIGZhbHNlKSk7XG4gICAgfSk7XG59XG4iXX0=