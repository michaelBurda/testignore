/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { tap, map } from 'rxjs/operators';
// TSS.
import { getPortalUrl } from './get-portal-url.function';
import { getEsriMapServiceHttOptions, addParamsToHttpOptions } from '../esri-map-service-request';
import { EsriConfig } from '../esri-config';
import { DataSourceConfig } from '../../data-source/data-source-config';
import { BaseEsriService } from '../base-esri.service';
import { Logger } from '../../core/logging/logger.service';
import { toFormData } from '../../http/to-form-data.function';
import { toEsriPortalAccessToken } from './to-esri-portal-access-token.function';
import { toEsriServerToken } from '../to-esri-server-token.function';
import { PORTAL_GENERATE_TOKEN_ENDPOINT, PORTAL_OAUTH_TOKEN_ENDPOINT } from '../esri.constants';
import { removePortalAccessTokenFromHash } from './remove-portal-access-token-from-hash.function';
import { join } from '../../core/url/join.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../esri-config";
import * as i3 from "../../data-source/data-source-config";
import * as i4 from "../../core/logging/logger.service";
export class EsriPortalService extends BaseEsriService {
    /**
     * @param {?} http
     * @param {?} config
     * @param {?} dataConfig
     * @param {?} log
     */
    constructor(http, config, dataConfig, log) {
        super(http, config, dataConfig, log);
    }
    /**
     * @param {?} portalUrl
     * @param {?} clientId
     * @param {?} code
     * @param {?=} bodyData
     * @param {?=} params
     * @return {?}
     */
    getTokenByCode(portalUrl, clientId, code, bodyData, params) {
        /** @type {?} */
        const data = Object.assign({
            client_id: clientId,
            code,
            redirect_uri: removePortalAccessTokenFromHash(window.location.href),
            grant_type: 'authorization_code'
        }, bodyData);
        /** @type {?} */
        const formData = toFormData(data);
        return this.doPost(portalUrl, PORTAL_OAUTH_TOKEN_ENDPOINT, formData, params)
            .pipe(map((/**
         * @param {?} rawToken
         * @return {?}
         */
        rawToken => toEsriPortalAccessToken(rawToken, portalUrl))));
    }
    /**
     * @param {?} portalUrl
     * @param {?} clientId
     * @param {?} refreshToken
     * @param {?=} bodyData
     * @param {?=} params
     * @return {?}
     */
    refreshToken(portalUrl, clientId, refreshToken, bodyData, params) {
        /** @type {?} */
        const data = Object.assign({
            client_id: clientId,
            refresh_token: refreshToken,
            grant_type: 'refresh_token'
        }, bodyData);
        /** @type {?} */
        const formData = toFormData(data);
        return this.doPost(portalUrl, PORTAL_OAUTH_TOKEN_ENDPOINT, formData, params)
            .pipe(map((/**
         * @param {?} rawToken
         * @return {?}
         */
        rawToken => toEsriPortalAccessToken(rawToken, portalUrl))));
    }
    /**
     * @param {?} portalUrl
     * @param {?} portalAccessToken
     * @param {?} serverUrl
     * @param {?=} params
     * @return {?}
     */
    getServerToken(portalUrl, portalAccessToken, serverUrl, params) {
        /** @type {?} */
        const additionalParams = {
            request: 'getToken',
            serverUrl,
            token: portalAccessToken,
            referer: window.location.host
        };
        return this.doGet(portalUrl, PORTAL_GENERATE_TOKEN_ENDPOINT, additionalParams, params)
            .pipe(map((/**
         * @param {?} token
         * @return {?}
         */
        token => toEsriServerToken(token))));
    }
    /**
     * @protected
     * @template T
     * @param {?} portalUrl
     * @param {?} endpoint
     * @param {?} queryParams
     * @param {?=} params
     * @return {?}
     */
    doGet(portalUrl, endpoint, queryParams, params) {
        /** @type {?} */
        const basePortalUrl = getPortalUrl(portalUrl);
        /** @type {?} */
        const url = join(basePortalUrl, endpoint);
        /** @type {?} */
        const httpOption = getEsriMapServiceHttOptions(params);
        addParamsToHttpOptions(httpOption, queryParams);
        return this.http
            .get(url, httpOption)
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.handleEsriResponseError(response, url))));
    }
    /**
     * @protected
     * @template T
     * @param {?} portalUrl
     * @param {?} endpoint
     * @param {?} formData
     * @param {?=} params
     * @return {?}
     */
    doPost(portalUrl, endpoint, formData, params) {
        /** @type {?} */
        const basePortalUrl = getPortalUrl(portalUrl);
        /** @type {?} */
        const url = join(basePortalUrl, endpoint);
        /** @type {?} */
        const httpOption = getEsriMapServiceHttOptions(params);
        return this.http
            .post(url, formData, httpOption)
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.handleEsriResponseError(response, url))));
    }
}
EsriPortalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
EsriPortalService.ctorParameters = () => [
    { type: HttpClient },
    { type: EsriConfig },
    { type: DataSourceConfig },
    { type: Logger }
];
/** @nocollapse */ EsriPortalService.ngInjectableDef = i0.defineInjectable({ factory: function EsriPortalService_Factory() { return new EsriPortalService(i0.inject(i1.HttpClient), i0.inject(i2.EsriConfig), i0.inject(i3.DataSourceConfig), i0.inject(i4.Logger)); }, token: EsriPortalService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,