/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map, tap } from 'rxjs/operators';
// TSS.
import { Logger } from '../core/logging/logger.service';
import { NetworkFeature } from '../lrs/networks/network-feature';
import { EventFeatureCollection } from '../lrs/events/event-feature-collection';
import { NetworkFeatureCollection } from '../lrs/networks/network-feature-collection';
import { CriteriaOperator } from '../maps/where-clause-builder';
import { EsriConfig } from './esri-config';
import { getEsriMapServiceHttOptions, addParamsToHttpOptions } from './esri-map-service-request';
import { toFieldName } from '../maps/fields/layer-field';
import { DataSourceConfig } from '../data-source/data-source-config';
import { toFormData } from '../http/to-form-data.function';
import { MAP_LAYERS_SERVICE_ENDPOINT, LRS_LAYERS_SERVICE_ENDPOINT, MAP_LAYER_QUERY_SERVICE_ENDPOINT, LRS_SERVER_META_ENDPOINT, LRS_SERVER_APPLY_EDITS_ENDPOINT, LRS_GEOMETRY_TO_MEASURE, MAP_LAYER_SERVICE_ENDPOINT } from './esri.constants';
import { getGeometryToMeasureOptions } from './geometry-to-measure/get-geometry-to-measure-options.function';
import { getMapQueryOptions } from './query/get-map-query-options.function';
import { toHttpQueryParams } from './query/to-http-query-params.function';
import { tryStripGdbVersion } from './try-strip-gdb-version.function';
import { toLayerId } from '../maps/to-layer-id.function';
import { BaseEsriService } from './base-esri.service';
import { joinAndFomatWithLayer } from './join-and-format-with-layer.function';
import { join } from '../core/url/join.function';
import { format } from '../core/formatting/format.function';
import { FeatureClassLayer } from '../maps/feature-class-layer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./esri-config";
import * as i3 from "../data-source/data-source-config";
import * as i4 from "../core/logging/logger.service";
export class EsriMapServerService extends BaseEsriService {
    /**
     * @param {?} http
     * @param {?} config
     * @param {?} dataConfig
     * @param {?} log
     */
    constructor(http, config, dataConfig, log) {
        super(http, config, dataConfig, log);
    }
    /**
     * Retrieves the map service metadata for all layers.
     * @param {?} serviceUrl
     * @return {?}
     */
    getMapLayers(serviceUrl) {
        /** @type {?} */
        const url = join(serviceUrl, MAP_LAYERS_SERVICE_ENDPOINT);
        return this.http
            .get(url, getEsriMapServiceHttOptions())
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.handleEsriResponseError(response, serviceUrl))));
    }
    /**
     * Retrieves the map service metadata for a given layer (by it's ID).
     * @param {?} serviceUrl
     * @param {?} layerId
     * @return {?}
     */
    getMapLayer(serviceUrl, layerId) {
        /** @type {?} */
        const url = joinAndFomatWithLayer(layerId, {}, serviceUrl, MAP_LAYER_SERVICE_ENDPOINT);
        return this.http
            .get(url, getEsriMapServiceHttOptions())
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.handleEsriResponseError(response, serviceUrl))), map((/**
         * @param {?} mapLayerMetadata
         * @return {?}
         */
        mapLayerMetadata => new FeatureClassLayer(mapLayerMetadata))));
    }
    /**
     * Retrieves the LRS Layers Metadata information from the map service
     * @param {?} serviceUrl
     * @return {?}
     */
    getLrsLayers(serviceUrl) {
        /** @type {?} */
        const url = join(serviceUrl, LRS_LAYERS_SERVICE_ENDPOINT);
        return this.http
            .get(url, getEsriMapServiceHttOptions())
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.handleEsriResponseError(response, serviceUrl))));
    }
    /**
     * Retrieves the LRS Server Metadata information from the map service
     * @param {?} serviceUrl
     * @return {?}
     */
    getLrsServer(serviceUrl) {
        /** @type {?} */
        const url = join(serviceUrl, LRS_SERVER_META_ENDPOINT);
        return this.http
            .get(url, getEsriMapServiceHttOptions())
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        (response) => this.handleEsriResponseError(response, serviceUrl))));
    }
    /**
     * @param {?} serviceUrl
     * @param {?=} lrsId
     * @return {?}
     */
    getVersions(serviceUrl, lrsId) {
        return this.getLrsServer(serviceUrl)
            .pipe(map((/**
         * @param {?} metadata
         * @return {?}
         */
        (metadata) => {
            /** @type {?} */
            let lrs = metadata ? metadata.lrs[0] : null;
            if (!lrs) {
                throw new Error(`No LRS infos found`);
            }
            if (lrsId) {
                lrs = metadata.lrs.find((/**
                 * @param {?} lrsInfo
                 * @return {?}
                 */
                lrsInfo => lrsInfo.id === lrsId));
                if (!lrs) {
                    throw new Error(`No LRS info found with ID '${lrsId}'`);
                }
            }
            return lrs.versions;
        })));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} networkLayerId
     * @param {?} routeId
     * @param {?} x
     * @param {?} y
     * @param {?=} viewDate
     * @param {?=} inSpatialReferenceId
     * @param {?=} outputSpatialReferenceId
     * @return {?}
     */
    singleGeometryToMeasure(serviceUrl, networkLayerId, routeId, x, y, viewDate, inSpatialReferenceId = 4326, outputSpatialReferenceId = 4326) {
        /** @type {?} */
        const locations = [
            { routeId, geometry: { x, y } }
        ];
        return this.geometryToMeasure(serviceUrl, networkLayerId, {
            locations,
            temporalViewDate: viewDate,
            inSR: inSpatialReferenceId,
            outSR: outputSpatialReferenceId,
        })
            .pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            /** @type {?} */
            const match = { m: null, x: null, y: null, z: null };
            if (result.locations.length && result.locations[0].results.length) {
                const [found] = result.locations[0].results;
                match.m = found.measure;
                match.x = found.geometry.x;
                match.y = found.geometry.y;
            }
            return match;
        })));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} networkLayerId
     * @param {?} options
     * @return {?}
     */
    geometryToMeasure(serviceUrl, networkLayerId, options) {
        /** @type {?} */
        const endpoint = format(LRS_GEOMETRY_TO_MEASURE, { layerId: networkLayerId });
        /** @type {?} */
        const url = join(serviceUrl, endpoint);
        /** @type {?} */
        const httpOption = getEsriMapServiceHttOptions();
        /** @type {?} */
        const serviceOptions = getGeometryToMeasureOptions(options);
        /** @type {?} */
        const useGetMethod = !this.shouldUsePostMethod(serviceOptions);
        if (useGetMethod) {
            addParamsToHttpOptions(httpOption, serviceOptions);
        }
        return (useGetMethod
            ? this.http.get(url, httpOption)
            : this.http.post(url, toFormData(serviceOptions), httpOption))
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        response => this.handleEsriResponseError(response, serviceUrl))));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} edits
     * @param {?=} gdbVersion
     * @return {?}
     */
    applyEdits(serviceUrl, edits, gdbVersion) {
        /** @type {?} */
        const url = join(serviceUrl, LRS_SERVER_APPLY_EDITS_ENDPOINT);
        /** @type {?} */
        const options = getEsriMapServiceHttOptions();
        /** @type {?} */
        const useGetMethod = !this.shouldUsePostMethod(edits);
        if (useGetMethod) {
            options.params = options.params
                .set('edits', JSON.stringify(edits))
                .set('gdbVersion', gdbVersion);
        }
        return (useGetMethod
            ? this.http.get(url, options)
            : this.http.post(url, toFormData({ edits, gdbVersion }), options))
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        response => this.handleEsriResponseError(response, serviceUrl))));
    }
    /**
     * @template T
     * @param {?} serviceUrl
     * @param {?} layer
     * @param {?} field
     * @param {?=} options
     * @return {?}
     */
    getUniqueValues(serviceUrl, layer, field, options) {
        /** @type {?} */
        const fieldName = toFieldName(field);
        /** @type {?} */
        const queryOptions = getMapQueryOptions({
            outFields: fieldName,
            returnDistinctValues: true,
            returnGeometry: false,
        }, options);
        return this.query(serviceUrl, toLayerId(layer), queryOptions)
            .pipe(map((/**
         * @param {?} collection
         * @return {?}
         */
        collection => {
            return collection.features.map((/**
             * @param {?} f
             * @return {?}
             */
            f => f.properties[fieldName]));
        })));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layer
     * @param {?} whereClause
     * @param {?=} options
     * @return {?}
     */
    getQueryCount(serviceUrl, layer, whereClause, options) {
        /** @type {?} */
        const queryOptions = getMapQueryOptions({
            returnCountOnly: true,
            returnGeometry: false,
            where: whereClause,
        }, options);
        return this.query(serviceUrl, toLayerId(layer), queryOptions)
            .pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return (result || { count: 0 }).count;
        })));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layer
     * @param {?} eventId
     * @param {?=} options
     * @return {?}
     */
    getEvent(serviceUrl, layer, eventId, options) {
        tryStripGdbVersion(layer, options);
        throw new Error('Not implemented yet');
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layer
     * @param {?} routeId
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @param {?=} viewDate
     * @param {?=} options
     * @return {?}
     */
    queryEvents(serviceUrl, layer, routeId, fromMeasure, toMeasure, viewDate, options) {
        tryStripGdbVersion(layer, options);
        /** @type {?} */
        const where = this.getWhereBuilder()
            .withEventLayer(layer)
            .withRouteId(routeId)
            .withViewDate(viewDate)
            .betweenMeasures(fromMeasure, toMeasure)
            .toWhereClause();
        /** @type {?} */
        const queryOptions = getMapQueryOptions({ where, returnGeometry: false }, options);
        return this
            .query(serviceUrl, layer.id, queryOptions)
            .pipe(map((/**
         * @param {?} featureCollection
         * @return {?}
         */
        featureCollection => new EventFeatureCollection(featureCollection, layer))));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layer
     * @param {?} searchText
     * @param {?=} options
     * @return {?}
     */
    searchEventsByText(serviceUrl, layer, searchText, options) {
        return this.searchByText(serviceUrl, layer.id, searchText, options)
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        response => this.handleEsriResponseError(response, serviceUrl))), map((/**
         * @param {?} featureCollection
         * @return {?}
         */
        featureCollection => new EventFeatureCollection(featureCollection, layer))));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} routeId
     * @param {?} layer
     * @param {?=} viewDate
     * @param {?=} options
     * @return {?}
     */
    getRoute(serviceUrl, routeId, layer, viewDate, options) {
        tryStripGdbVersion(layer, options);
        /** @type {?} */
        const where = this.getWhereBuilder()
            .withNetworkLayer(layer)
            .where(layer.compositeRouteIdFieldName, CriteriaOperator.Equals, routeId)
            .withViewDate(viewDate)
            .toWhereClause();
        /** @type {?} */
        const queryOptions = getMapQueryOptions({
            where
        }, options);
        return this
            .query(serviceUrl, layer.id, queryOptions)
            .pipe(map((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            return x && x.features && x.features.length
                ? new NetworkFeature(x.features[0], layer)
                : null;
        })));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layer
     * @param {?} whereClause
     * @param {?=} options
     * @return {?}
     */
    queryRoutes(serviceUrl, layer, whereClause, options) {
        /** @type {?} */
        const queryOptions = getMapQueryOptions({
            where: whereClause
        }, options);
        return this.query(serviceUrl, layer.id, queryOptions)
            .pipe(map((/**
         * @param {?} featureCollection
         * @return {?}
         */
        featureCollection => new NetworkFeatureCollection(featureCollection, layer, options.outSR))));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layer
     * @param {?} searchText
     * @param {?=} options
     * @return {?}
     */
    searchRoutesByText(serviceUrl, layer, searchText, options) {
        return this.searchByText(serviceUrl, layer.id, searchText, options)
            .pipe(map((/**
         * @param {?} featureCollection
         * @return {?}
         */
        featureCollection => new NetworkFeatureCollection(featureCollection, layer))));
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layerId
     * @param {?} searchText
     * @param {?=} options
     * @return {?}
     */
    searchByText(serviceUrl, layerId, searchText, options) {
        /** @type {?} */
        const queryOptions = getMapQueryOptions({
            text: searchText
        }, options);
        // The where clause must be deleted because if a where clause is specified it will override the search text.
        delete queryOptions.where;
        return this.query(serviceUrl, layerId, queryOptions);
    }
    /**
     * @param {?} serviceUrl
     * @param {?} layerId
     * @param {?} options
     * @return {?}
     */
    query(serviceUrl, layerId, options) {
        /** @type {?} */
        const url = joinAndFomatWithLayer(layerId, options, serviceUrl, MAP_LAYER_QUERY_SERVICE_ENDPOINT);
        /** @type {?} */
        const httpOption = getEsriMapServiceHttOptions();
        /** @type {?} */
        const usePostMethod = this.shouldUsePostMethod(options.where);
        if (!usePostMethod) {
            httpOption.params = toHttpQueryParams(options, httpOption.params);
        }
        /** @type {?} */
        const source = usePostMethod
            ? this.http.post(url, options, httpOption)
            : this.http.get(url, httpOption);
        return source.pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.handleEsriResponseError(response, url);
            return (/** @type {?} */ (response));
        })));
    }
}
EsriMapServerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
EsriMapServerService.ctorParameters = () => [
    { type: HttpClient },
    { type: EsriConfig },
    { type: DataSourceConfig },
    { type: Logger }
];
/** @nocollapse */ EsriMapServerService.ngInjectableDef = i0.defineInjectable({ factory: function EsriMapServerService_Factory() { return new EsriMapServerService(i0.inject(i1.HttpClient), i0.inject(i2.EsriConfig), i0.inject(i3.DataSourceConfig), i0.inject(i4.Logger)); }, token: EsriMapServerService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,