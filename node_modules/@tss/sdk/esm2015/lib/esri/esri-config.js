/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AutoConfig } from '../core/auto-config.decorator';
import * as i0 from "@angular/core";
/**
 * Configuration class for storing global ESRI-related settings.
 */
let EsriConfig = /**
 * Configuration class for storing global ESRI-related settings.
 */
class EsriConfig {
    constructor() {
        this.arcgis = {};
        this.arcgisQueryMethodStrategy = 'prefer-get';
        this.arcgisMaxWhereLengthGetThreshold = 3500;
    }
    /**
     * @return {?}
     */
    get hasGeometryUrl() {
        return Boolean(this.arcgis && this.arcgis.geometryUrl);
    }
    /**
     * @return {?}
     */
    get arcGisGeometryUrl() {
        return this.hasGeometryUrl ? this.arcgis.geometryUrl : null;
    }
};
EsriConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ EsriConfig.ngInjectableDef = i0.defineInjectable({ factory: function EsriConfig_Factory() { return new EsriConfig(); }, token: EsriConfig, providedIn: "root" });
/**
 * Configuration class for storing global ESRI-related settings.
 */
EsriConfig = tslib_1.__decorate([
    AutoConfig('EsriConfig')
], EsriConfig);
export { EsriConfig };
if (false) {
    /** @type {?} */
    EsriConfig.prototype.arcgis;
    /** @type {?} */
    EsriConfig.prototype.arcgisQueryMethodStrategy;
    /** @type {?} */
    EsriConfig.prototype.arcgisMaxWhereLengthGetThreshold;
    /** @type {?} */
    EsriConfig.prototype.arcgisPortalUrl;
    /** @type {?} */
    EsriConfig.prototype.arcgisPortalClientId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXNyaS1jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9lc3JpL2VzcmktY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7O0lBYTlDLFVBQVU7OztNQUFWLFVBQVU7SUFKdkI7UUFLRSxXQUFNLEdBQTZCLEVBQUUsQ0FBQztRQUN0Qyw4QkFBeUIsR0FBOEIsWUFBWSxDQUFDO1FBQ3BFLHFDQUFnQyxHQUFHLElBQUksQ0FBQztLQVd6Qzs7OztJQVBDLElBQUksY0FBYztRQUNoQixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7OztJQUVELElBQUksaUJBQWlCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM5RCxDQUFDO0NBQ0YsQ0FBQTs7WUFsQkEsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7QUFFWSxVQUFVO0lBRHRCLFVBQVUsQ0FBQyxZQUFZLENBQUM7R0FDWixVQUFVLENBY3RCO1NBZFksVUFBVTs7O0lBQ3JCLDRCQUFzQzs7SUFDdEMsK0NBQW9FOztJQUNwRSxzREFBd0M7O0lBQ3hDLHFDQUF3Qjs7SUFDeEIsMENBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0b0NvbmZpZyB9IGZyb20gJy4uL2NvcmUvYXV0by1jb25maWcuZGVjb3JhdG9yJztcblxuXG5leHBvcnQgdHlwZSBBcmNnaXNRdWVyeU1ldGhvZFN0cmF0ZWd5ID0gJ3ByZWZlci1nZXQnIHwgJ2ZvcmNlLWdldCcgfCAnZm9yY2UtcG9zdCc7XG5cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGNsYXNzIGZvciBzdG9yaW5nIGdsb2JhbCBFU1JJLXJlbGF0ZWQgc2V0dGluZ3MuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuQEF1dG9Db25maWcoJ0VzcmlDb25maWcnKVxuZXhwb3J0IGNsYXNzIEVzcmlDb25maWcge1xuICBhcmNnaXM6IHsgZ2VvbWV0cnlVcmw/OiBzdHJpbmcgfSA9IHt9O1xuICBhcmNnaXNRdWVyeU1ldGhvZFN0cmF0ZWd5OiBBcmNnaXNRdWVyeU1ldGhvZFN0cmF0ZWd5ID0gJ3ByZWZlci1nZXQnO1xuICBhcmNnaXNNYXhXaGVyZUxlbmd0aEdldFRocmVzaG9sZCA9IDM1MDA7XG4gIGFyY2dpc1BvcnRhbFVybDogc3RyaW5nO1xuICBhcmNnaXNQb3J0YWxDbGllbnRJZDogc3RyaW5nO1xuXG4gIGdldCBoYXNHZW9tZXRyeVVybCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmFyY2dpcyAmJiB0aGlzLmFyY2dpcy5nZW9tZXRyeVVybCk7XG4gIH1cblxuICBnZXQgYXJjR2lzR2VvbWV0cnlVcmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5oYXNHZW9tZXRyeVVybCA/IHRoaXMuYXJjZ2lzLmdlb21ldHJ5VXJsIDogbnVsbDtcbiAgfVxufVxuIl19