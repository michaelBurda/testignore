/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// 3rd Party.
import { Subject, fromEvent } from 'rxjs';
import { MotionConfig } from './motion.config';
import * as i0 from "@angular/core";
import * as i1 from "./motion.config";
/**
 * Geolocator service. Provides a single point of motion API.
 */
export class DeviceMotionService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.motionChangeSource = new Subject();
        this.motionChange = this.motionChangeSource.asObservable();
        fromEvent(window, 'ondevicemotion').subscribe((/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.emitMotionChange(event)));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} motion
     * @return {THIS}
     */
    mockMotion(motion) {
        if (!(/** @type {?} */ (this)).config.allowMotionMocking) {
            throw new Error('Permission denied to mock device motion');
        }
        (/** @type {?} */ (this)).motionChangeSource.next(motion);
        return (/** @type {?} */ (this));
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    emitMotionChange(event) {
        this.motionChangeSource.next({
            x: event.acceleration.x,
            y: event.acceleration.y,
            z: event.acceleration.z,
            withGravityX: event.accelerationIncludingGravity.x,
            withGravityY: event.accelerationIncludingGravity.y,
            withGravityZ: event.accelerationIncludingGravity.z,
            rotationRateAlpha: event.rotationRate.alpha,
            rotationRateBeta: event.rotationRate.beta,
            rotationRateGamma: event.rotationRate.gamma,
        });
    }
}
DeviceMotionService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DeviceMotionService.ctorParameters = () => [
    { type: MotionConfig }
];
/** @nocollapse */ DeviceMotionService.ngInjectableDef = i0.defineInjectable({ factory: function DeviceMotionService_Factory() { return new DeviceMotionService(i0.inject(i1.MotionConfig)); }, token: DeviceMotionService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DeviceMotionService.prototype.motionChange;
    /** @type {?} */
    DeviceMotionService.prototype.motionChangeSource;
    /**
     * @type {?}
     * @private
     */
    DeviceMotionService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLW1vdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbW90aW9uL2RldmljZS1tb3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSXRELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7O0FBUy9DLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFJOUIsWUFBNkIsTUFBb0I7UUFBcEIsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQUMvQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUzRCxTQUFTLENBQUMsTUFBTSxFQUFFLGdCQUFnQixDQUFDLENBQUMsU0FBUzs7OztRQUFDLENBQUMsS0FBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUM7SUFDNUcsQ0FBQzs7Ozs7OztJQUVELFVBQVUsQ0FBQyxNQUFjO1FBQ3ZCLElBQUksQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1NBQzVEO1FBRUQsbUJBQUEsSUFBSSxFQUFBLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFFTyxnQkFBZ0IsQ0FBQyxLQUF3QjtRQUMvQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDO1lBQzNCLENBQUMsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZCLFlBQVksRUFBRSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUNsRCxZQUFZLEVBQUUsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7WUFDbEQsWUFBWSxFQUFFLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBQ2xELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSztZQUMzQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7WUFDekMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLO1NBQzVDLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQW5DRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFSUSxZQUFZOzs7OztJQVVuQiwyQ0FBMEM7O0lBQzFDLGlEQUE2Qzs7Ozs7SUFFakMscUNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XG5cbi8vIEFwcC5cbmltcG9ydCB7IE1vdGlvbiB9IGZyb20gJy4vbW90aW9uJztcbmltcG9ydCB7IE1vdGlvbkNvbmZpZyB9IGZyb20gJy4vbW90aW9uLmNvbmZpZyc7XG5cblxuLyoqXG4gKiBHZW9sb2NhdG9yIHNlcnZpY2UuIFByb3ZpZGVzIGEgc2luZ2xlIHBvaW50IG9mIG1vdGlvbiBBUEkuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERldmljZU1vdGlvblNlcnZpY2Uge1xuICByZWFkb25seSBtb3Rpb25DaGFuZ2U6IE9ic2VydmFibGU8TW90aW9uPjtcbiAgcmVhZG9ubHkgbW90aW9uQ2hhbmdlU291cmNlOiBTdWJqZWN0PE1vdGlvbj47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25maWc6IE1vdGlvbkNvbmZpZykge1xuICAgIHRoaXMubW90aW9uQ2hhbmdlU291cmNlID0gbmV3IFN1YmplY3QoKTtcbiAgICB0aGlzLm1vdGlvbkNoYW5nZSA9IHRoaXMubW90aW9uQ2hhbmdlU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgZnJvbUV2ZW50KHdpbmRvdywgJ29uZGV2aWNlbW90aW9uJykuc3Vic2NyaWJlKChldmVudDogRGV2aWNlTW90aW9uRXZlbnQpID0+IHRoaXMuZW1pdE1vdGlvbkNoYW5nZShldmVudCkpO1xuICB9XG5cbiAgbW9ja01vdGlvbihtb3Rpb246IE1vdGlvbik6IHRoaXMge1xuICAgIGlmICghdGhpcy5jb25maWcuYWxsb3dNb3Rpb25Nb2NraW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Blcm1pc3Npb24gZGVuaWVkIHRvIG1vY2sgZGV2aWNlIG1vdGlvbicpO1xuICAgIH1cblxuICAgIHRoaXMubW90aW9uQ2hhbmdlU291cmNlLm5leHQobW90aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHByaXZhdGUgZW1pdE1vdGlvbkNoYW5nZShldmVudDogRGV2aWNlTW90aW9uRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLm1vdGlvbkNoYW5nZVNvdXJjZS5uZXh0KHtcbiAgICAgIHg6IGV2ZW50LmFjY2VsZXJhdGlvbi54LFxuICAgICAgeTogZXZlbnQuYWNjZWxlcmF0aW9uLnksXG4gICAgICB6OiBldmVudC5hY2NlbGVyYXRpb24ueixcbiAgICAgIHdpdGhHcmF2aXR5WDogZXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54LFxuICAgICAgd2l0aEdyYXZpdHlZOiBldmVudC5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LnksXG4gICAgICB3aXRoR3Jhdml0eVo6IGV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueixcbiAgICAgIHJvdGF0aW9uUmF0ZUFscGhhOiBldmVudC5yb3RhdGlvblJhdGUuYWxwaGEsXG4gICAgICByb3RhdGlvblJhdGVCZXRhOiBldmVudC5yb3RhdGlvblJhdGUuYmV0YSxcbiAgICAgIHJvdGF0aW9uUmF0ZUdhbW1hOiBldmVudC5yb3RhdGlvblJhdGUuZ2FtbWEsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==