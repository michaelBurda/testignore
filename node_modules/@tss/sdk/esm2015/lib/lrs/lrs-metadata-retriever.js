/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forkJoin, of } from 'rxjs';
import { map, tap, mergeMap } from 'rxjs/operators';
import { LrsMetadata } from './lrs-metadata';
import { MapServerMetadata } from '../maps/map-server-metadata';
import { mergeLrsMetadataSources } from './lrs-metadata-merge';
import { isString } from '../core/type-check/is-string.function';
export class LrsMetadataRetriever {
    /**
     * @param {?} http
     * @param {?} mapServer
     * @param {?} dataSourceService
     * @param {?} dataSourceLrsMetadataService
     * @param {?} notify
     * @param {?} log
     */
    constructor(http, mapServer, dataSourceService, dataSourceLrsMetadataService, notify, log) {
        this.http = http;
        this.mapServer = mapServer;
        this.dataSourceService = dataSourceService;
        this.dataSourceLrsMetadataService = dataSourceLrsMetadataService;
        this.notify = notify;
        this.log = log;
    }
    /**
     * @param {?} dataSource
     * @return {?}
     */
    withDataSource(dataSource) {
        if (isString(dataSource)) {
            this.dataSourceId = (/** @type {?} */ (dataSource));
        }
        else {
            this.dataSource = (/** @type {?} */ (dataSource));
            this.dataSourceId = this.dataSource.id;
        }
        return this;
    }
    /**
     * @param {?} lrsMeta
     * @return {?}
     */
    withLrsMetadata(lrsMeta) {
        this.dataSourceLrsMetadata = lrsMeta;
        return this;
    }
    /**
     * @return {?}
     */
    retrieve() {
        if (!this.dataSourceId) {
            throw new Error('A data source ID must be supplied');
        }
        return of(null)
            .pipe(mergeMap(this.getDataSource.bind(this)), mergeMap(this.getDataSourceLrsMetadata.bind(this)), mergeMap(this.getMapServiceLayers.bind(this)), mergeMap(this.getMapServiceLrsMetadata.bind(this)), mergeMap(this.mergeAll.bind(this)));
    }
    /**
     * @private
     * @return {?}
     */
    getDataSource() {
        /** @type {?} */
        const observable = this.dataSource
            ? of(this.dataSource)
            : this.dataSourceService
                .get(this.dataSourceId)
                .pipe(tap((/**
             * @param {?} dataSource
             * @return {?}
             */
            (dataSource) => this.dataSource = dataSource)));
        return this.notify
            .with(observable)
            .error(`Failed to retrieve data source by ID: ${this.dataSourceId}: {error}`)
            .source;
    }
    /**
     * @private
     * @return {?}
     */
    getDataSourceLrsMetadata() {
        /** @type {?} */
        const observable = this.dataSourceLrsMetadata
            ? of(this.dataSourceLrsMetadata)
            : this.dataSourceLrsMetadataService
                .get(this.dataSourceId)
                .pipe(tap((/**
             * @param {?} meta
             * @return {?}
             */
            (meta) => {
                this.dataSourceLrsMetadata = new LrsMetadata(this.dataSource)
                    .assign(meta);
                // NOTE: If we don't recieve any data source LRS metadata back then we assume that
                // the map service has LRS capabiliities - otherwise we have no LRS server data available.
                if (!meta) {
                    this.dataSourceLrsMetadata.serviceHasLrsMeta = true;
                }
            })));
        return this.notify
            .with(observable)
            .error(`Failed to retrieve data source LRS metadata by data source ID: ${this.dataSourceId}: {error}`)
            .source;
    }
    /**
     * @private
     * @return {?}
     */
    getMapServiceLayers() {
        /** @type {?} */
        const observable = this.mapServerMetadata || !this.dataSource.serviceUrl
            ? of(this.mapServerMetadata)
            : this.mapServer
                .getMapLayers(this.dataSource.serviceUrl)
                .pipe(tap((/**
             * @param {?} meta
             * @return {?}
             */
            (meta) => this.mapServerMetadata = new MapServerMetadata().assign(meta))));
        return this.notify
            .with(observable)
            .error(`Failed to retrieve map service metadata from URL: ${this.dataSource.serviceUrl}: {error}`)
            .source;
    }
    /**
     * @private
     * @return {?}
     */
    getMapServiceLrsMetadata() {
        /** @type {?} */
        const observable = !this.dataSource.serviceUrl || !this.dataSourceLrsMetadata.serviceHasLrsMeta
            ? of(this.mapServerLrsMetadata)
            : forkJoin([
                this.mapServer.getLrsServer(this.dataSource.serviceUrl),
                this.mapServer.getLrsLayers(this.dataSource.serviceUrl)
            ])
                .pipe(map((/**
             * @param {?} meta
             * @return {?}
             */
            (meta) => {
                const [lrsServerMeta, lrsLayersMeta] = meta;
                /** @type {?} */
                const lrsMetadata = Object.assign({}, lrsServerMeta, lrsLayersMeta);
                /** @type {?} */
                const mapServerLrsMetadata = new LrsMetadata().assign(lrsMetadata);
                return mapServerLrsMetadata;
            })), tap((/**
             * @param {?} meta
             * @return {?}
             */
            (meta) => this.mapServerLrsMetadata = new LrsMetadata().assign(meta))));
        return this.notify
            .with(observable)
            .error(`Failed to retrieve map service LRS metadata from URL: ${this.dataSource.serviceUrl}: {error}`)
            .source;
    }
    /**
     * @private
     * @return {?}
     */
    mergeAll() {
        /** @type {?} */
        const fullLrsMeta = mergeLrsMetadataSources(this.dataSource, this.dataSourceLrsMetadata, this.mapServerLrsMetadata, this.mapServerMetadata);
        return of(fullLrsMeta);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.dataSourceId;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.dataSourceLrsMetadata;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.mapServerMetadata;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.mapServerLrsMetadata;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.mapServer;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.dataSourceService;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.dataSourceLrsMetadataService;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,