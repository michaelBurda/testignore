/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { LrsFeature } from '../lrs-feature';
import { toFeature } from '../feature';
import { WGS_84_SRID } from '../../geometry/geometry.constants';
import { clone } from '../../core/clone/clone.function';
export class EventFeature extends LrsFeature {
    /**
     * @param {?} feature
     * @param {?} layer
     * @param {?=} spatialReferenceId
     */
    constructor(feature, layer, spatialReferenceId = WGS_84_SRID) {
        super(feature, layer, spatialReferenceId);
        this.routeId = this.getValue(layer.routeIdFieldName);
        this.fromMeasure = this.getValue(layer.fromMeasureFieldName);
        this.toMeasure = this.getValue(layer.toMeasureFieldName);
    }
    /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    static create(layer, properties = {}, geometry = null) {
        /** @type {?} */
        const feature = toFeature(properties, (/** @type {?} */ (geometry)));
        return new EventFeature(feature, layer);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} routeId
     * @return {THIS}
     */
    setRouteId(routeId) {
        (/** @type {?} */ (this)).routeId = routeId;
        return (/** @type {?} */ (this)).setValue(routeId, (/** @type {?} */ (this)).layer.routeIdFieldName);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    setFromMeasure(measure) {
        (/** @type {?} */ (this)).fromMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.fromMeasureFieldName, measure);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    setToMeasure(measure) {
        if (!(/** @type {?} */ (this)).isLinear) {
            throw new Error('Cannot set to measure for a point-based feature');
        }
        (/** @type {?} */ (this)).toMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.toMeasureFieldName, measure);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @return {THIS}
     */
    setMeasureExtent(fromMeasure, toMeasure) {
        return (/** @type {?} */ (this)).setFromMeasure(fromMeasure)
            .setToMeasure(toMeasure);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const copyFeature = clone(this.toFeature());
        return new EventFeature(copyFeature, this.layer);
    }
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    setGeometryTypeProperties() {
        (/** @type {?} */ (this)).isLinear = Boolean((/** @type {?} */ (this)).layer.toMeasureFieldName);
        (/** @type {?} */ (this)).isPoint = !(/** @type {?} */ (this)).isLinear;
        (/** @type {?} */ (this)).isPolygon = false;
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    EventFeature.prototype.layer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtZmVhdHVyZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2xycy9ldmVudHMvZXZlbnQtZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVoRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHeEQsTUFBTSxPQUFPLFlBQWEsU0FBUSxVQUFVOzs7Ozs7SUFHMUMsWUFBWSxPQUFnQixFQUFFLEtBQWlCLEVBQUUsa0JBQWtCLEdBQUcsV0FBVztRQUMvRSxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUNYLEtBQWlCLEVBQ2pCLGFBQXVDLEVBQUUsRUFDekMsV0FBaUQsSUFBSTs7Y0FFL0MsT0FBTyxHQUFZLFNBQVMsQ0FBQyxVQUFVLEVBQUUsbUJBQUEsUUFBUSxFQUFZLENBQUM7UUFDcEUsT0FBTyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Ozs7OztJQUVELFVBQVUsQ0FBQyxPQUFlO1FBQ3hCLG1CQUFBLElBQUksRUFBQSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7Ozs7SUFFRCxjQUFjLENBQUMsT0FBZTtRQUM1QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQzNCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUMsUUFBUSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7O0lBRUQsWUFBWSxDQUFDLE9BQWU7UUFDMUIsSUFBSSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLFFBQVEsRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7U0FDcEU7UUFFRCxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUMsUUFBUSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7OztJQUVELGdCQUFnQixDQUFDLFdBQW1CLEVBQUUsU0FBaUI7UUFDckQsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FDUixjQUFjLENBQUMsV0FBVyxDQUFDO2FBQzNCLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDRyxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMzQyxPQUFPLElBQUksWUFBWSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7OztJQUVTLHlCQUF5QjtRQUNqQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3ZELG1CQUFBLElBQUksRUFBQSxDQUFDLE9BQU8sR0FBRyxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLFFBQVEsQ0FBQztRQUM5QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDO0NBQ0Y7OztJQXZEQyw2QkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAzcmQgUGFydHkuXG5pbXBvcnQgeyBGZWF0dXJlLCBHZW9tZXRyeSwgTGluZVN0cmluZywgUG9pbnQsIE11bHRpTGluZVN0cmluZyB9IGZyb20gJ2dlb2pzb24nO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBMcnNGZWF0dXJlIH0gZnJvbSAnLi4vbHJzLWZlYXR1cmUnO1xuaW1wb3J0IHsgRXZlbnRMYXllciB9IGZyb20gJy4vZXZlbnQtbGF5ZXInO1xuaW1wb3J0IHsgTHJzUmVmZXJlbmNlRmVhdHVyZSB9IGZyb20gJy4uL2xycy1yZWZlcmVuY2UtZmVhdHVyZSc7XG5pbXBvcnQgeyB0b0ZlYXR1cmUgfSBmcm9tICcuLi9mZWF0dXJlJztcbmltcG9ydCB7IFdHU184NF9TUklEIH0gZnJvbSAnLi4vLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuY29uc3RhbnRzJztcbmltcG9ydCB7IENsb25lYWJsZSB9IGZyb20gJy4uLy4uL2NvcmUvY2xvbmUvY2xvbmVhYmxlJztcbmltcG9ydCB7IGNsb25lIH0gZnJvbSAnLi4vLi4vY29yZS9jbG9uZS9jbG9uZS5mdW5jdGlvbic7XG5cblxuZXhwb3J0IGNsYXNzIEV2ZW50RmVhdHVyZSBleHRlbmRzIExyc0ZlYXR1cmUgaW1wbGVtZW50cyBMcnNSZWZlcmVuY2VGZWF0dXJlLCBDbG9uZWFibGU8RXZlbnRGZWF0dXJlPiB7XG4gIGxheWVyOiBFdmVudExheWVyO1xuXG4gIGNvbnN0cnVjdG9yKGZlYXR1cmU6IEZlYXR1cmUsIGxheWVyOiBFdmVudExheWVyLCBzcGF0aWFsUmVmZXJlbmNlSWQgPSBXR1NfODRfU1JJRCkge1xuICAgIHN1cGVyKGZlYXR1cmUsIGxheWVyLCBzcGF0aWFsUmVmZXJlbmNlSWQpO1xuXG4gICAgdGhpcy5yb3V0ZUlkID0gdGhpcy5nZXRWYWx1ZShsYXllci5yb3V0ZUlkRmllbGROYW1lKTtcbiAgICB0aGlzLmZyb21NZWFzdXJlID0gdGhpcy5nZXRWYWx1ZShsYXllci5mcm9tTWVhc3VyZUZpZWxkTmFtZSk7XG4gICAgdGhpcy50b01lYXN1cmUgPSB0aGlzLmdldFZhbHVlKGxheWVyLnRvTWVhc3VyZUZpZWxkTmFtZSk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKFxuICAgIGxheWVyOiBFdmVudExheWVyLFxuICAgIHByb3BlcnRpZXM6IHsgW25hbWU6IHN0cmluZ106IGFueTsgfSA9IHt9LFxuICAgIGdlb21ldHJ5OiBQb2ludCB8IExpbmVTdHJpbmcgfCBNdWx0aUxpbmVTdHJpbmcgPSBudWxsXG4gICk6IEV2ZW50RmVhdHVyZSB7XG4gICAgY29uc3QgZmVhdHVyZTogRmVhdHVyZSA9IHRvRmVhdHVyZShwcm9wZXJ0aWVzLCBnZW9tZXRyeSBhcyBHZW9tZXRyeSk7XG4gICAgcmV0dXJuIG5ldyBFdmVudEZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpO1xuICB9XG5cbiAgc2V0Um91dGVJZChyb3V0ZUlkOiBzdHJpbmcpOiB0aGlzIHtcbiAgICB0aGlzLnJvdXRlSWQgPSByb3V0ZUlkO1xuICAgIHJldHVybiB0aGlzLnNldFZhbHVlKHJvdXRlSWQsIHRoaXMubGF5ZXIucm91dGVJZEZpZWxkTmFtZSk7XG4gIH1cblxuICBzZXRGcm9tTWVhc3VyZShtZWFzdXJlOiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLmZyb21NZWFzdXJlID0gbWVhc3VyZTtcbiAgICByZXR1cm4gdGhpcy5zZXRWYWx1ZSh0aGlzLmxheWVyLmZyb21NZWFzdXJlRmllbGROYW1lLCBtZWFzdXJlKTtcbiAgfVxuXG4gIHNldFRvTWVhc3VyZShtZWFzdXJlOiBudW1iZXIpOiB0aGlzIHtcbiAgICBpZiAoIXRoaXMuaXNMaW5lYXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNldCB0byBtZWFzdXJlIGZvciBhIHBvaW50LWJhc2VkIGZlYXR1cmUnKTtcbiAgICB9XG5cbiAgICB0aGlzLnRvTWVhc3VyZSA9IG1lYXN1cmU7XG4gICAgcmV0dXJuIHRoaXMuc2V0VmFsdWUodGhpcy5sYXllci50b01lYXN1cmVGaWVsZE5hbWUsIG1lYXN1cmUpO1xuICB9XG5cbiAgc2V0TWVhc3VyZUV4dGVudChmcm9tTWVhc3VyZTogbnVtYmVyLCB0b01lYXN1cmU6IG51bWJlcik6IHRoaXMge1xuICAgIHJldHVybiB0aGlzXG4gICAgICAuc2V0RnJvbU1lYXN1cmUoZnJvbU1lYXN1cmUpXG4gICAgICAuc2V0VG9NZWFzdXJlKHRvTWVhc3VyZSk7XG4gIH1cblxuICBjbG9uZSgpOiBFdmVudEZlYXR1cmUge1xuICAgIGNvbnN0IGNvcHlGZWF0dXJlID0gY2xvbmUodGhpcy50b0ZlYXR1cmUoKSk7XG4gICAgcmV0dXJuIG5ldyBFdmVudEZlYXR1cmUoY29weUZlYXR1cmUsIHRoaXMubGF5ZXIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldEdlb21ldHJ5VHlwZVByb3BlcnRpZXMoKTogdGhpcyB7XG4gICAgdGhpcy5pc0xpbmVhciA9IEJvb2xlYW4odGhpcy5sYXllci50b01lYXN1cmVGaWVsZE5hbWUpO1xuICAgIHRoaXMuaXNQb2ludCA9ICF0aGlzLmlzTGluZWFyO1xuICAgIHRoaXMuaXNQb2x5Z29uID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==