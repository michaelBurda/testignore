/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isDynamicDataExpression, DYNAMIC_DATA_REGEX } from './is-dynamic-data-expression.function';
import { extractFeatureDataByLayer } from './extract-feature-data.function';
import { isNumber } from 'util';
import { sumValues } from '../../core/stats/sum-values.function';
import { average } from '../../core/stats/average.function';
import { isObject } from '../../core/type-check/is-object.function';
import { extractTokenExpressions } from '../../core/tokens/extract-token-expressions.function';
import { replaceToken } from '../../core/tokens/replace-token.function';
import { format } from '../../core/formatting/format.function';
/**
 * @param {?} dataValues
 * @return {?}
 */
function dataValuesToNumbers(dataValues) {
    return dataValues
        .filter((/**
     * @param {?} value
     * @return {?}
     */
    value => isNumber(value)))
        .map((/**
     * @param {?} value
     * @return {?}
     */
    value => Number(value)));
}
/**
 * @param {?} expression
 * @param {...?} features
 * @return {?}
 */
function evaluateSingleDynamicDataExpression(expression, ...features) {
    /** @type {?} */
    const parsedValue = expression.match(DYNAMIC_DATA_REGEX);
    /** @type {?} */
    let expressionValue;
    if (parsedValue && parsedValue.length > 2) {
        /** @type {?} */
        const layerId = Number(parsedValue[1]);
        /** @type {?} */
        const field = parsedValue[2];
        /** @type {?} */
        const subsetKeyword = (/** @type {?} */ ((parsedValue[3] || 'first').toLocaleLowerCase()));
        /** @type {?} */
        const dataValues = extractFeatureDataByLayer(layerId, field, ...features);
        if (subsetKeyword === 'first') {
            expressionValue = dataValues[0];
        }
        else if (subsetKeyword === 'last') {
            expressionValue = dataValues[dataValues.length - 1];
        }
        else if (subsetKeyword === 'sum' || subsetKeyword === 'add') {
            /** @type {?} */
            const numberValues = dataValuesToNumbers(dataValues);
            expressionValue = sumValues(numberValues);
        }
        else if (subsetKeyword === 'avg' || subsetKeyword === 'average') {
            /** @type {?} */
            const numberValues = dataValuesToNumbers(dataValues);
            expressionValue = average(numberValues);
        }
        else if (subsetKeyword === 'concat') {
            expressionValue = dataValues.join(', ');
        }
        else if (subsetKeyword === 'min') {
            /** @type {?} */
            const numberValues = dataValuesToNumbers(dataValues);
            expressionValue = Math.min(...numberValues);
        }
        else if (subsetKeyword === 'max') {
            /** @type {?} */
            const numberValues = dataValuesToNumbers(dataValues);
            expressionValue = Math.max(...numberValues);
        }
        else {
            throw new Error(`Unsupported dynamic data expression subset keyword '${subsetKeyword}'`);
        }
        return isObject(expressionValue)
            ? JSON.stringify(expressionValue)
            : String(expressionValue);
    }
}
/**
 * @param {?} expression
 * @param {...?} features
 * @return {?}
 */
function evaluateDynamicDataExpression(expression, ...features) {
    /** @type {?} */
    const tokenExpressions = extractTokenExpressions(expression);
    /** @type {?} */
    let evaluationResult = expression;
    tokenExpressions
        .filter((/**
     * @param {?} tokenExpression
     * @return {?}
     */
    tokenExpression => isDynamicDataExpression(tokenExpression)))
        .forEach((/**
     * @param {?} tokenExpression
     * @return {?}
     */
    tokenExpression => {
        /** @type {?} */
        const value = evaluateSingleDynamicDataExpression(tokenExpression, ...features);
        evaluationResult = replaceToken(evaluationResult, tokenExpression, value);
    }));
    return evaluationResult;
}
/**
 * @param {?} expression
 * @param {...?} features
 * @return {?}
 */
export function evaluteFeatureDataExpression(expression, ...features) {
    /** @type {?} */
    const evaluationResult = evaluateDynamicDataExpression(expression, ...features);
    /** @type {?} */
    const firstFeatureProperties = features && features.length
        ? features[0].properties
        : {};
    /** @type {?} */
    const replaceTokens = Object.assign({}, firstFeatureProperties, {
        RecordCount: features.length,
    });
    return format(evaluationResult, replaceTokens);
}
//# sourceMappingURL=data:application/json;base64,