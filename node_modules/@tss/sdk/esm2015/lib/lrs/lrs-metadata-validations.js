/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getIdField } from '../maps/fields/layer-field';
import { ValidationCheck } from '../core/validation/validation-check';
/** @type {?} */
export const LRS_LAYER_VALIDATIONS = new ValidationCheck(`Layer '{name}'`)
    .add(new ValidationCheck('should have list of fields')
    .pass((/**
 * @param {?} l
 * @return {?}
 */
l => Boolean(l.fields && l.fields.length))), new ValidationCheck('should have an ID field in list of fields')
    .pass((/**
 * @param {?} l
 * @return {?}
 */
l => Boolean(getIdField(l.fields)))));
/** @type {?} */
export const LRS_NETWORK_LAYER_VALIDATIONS = new ValidationCheck(`Network layer '{name}' (ID: {id})`)
    .add(new ValidationCheck(`should have a 'Composite Route ID Field Name' value specified`)
    .pass((/**
 * @param {?} l
 * @return {?}
 */
l => Boolean(l.compositeRouteIdFieldName))));
/** @type {?} */
export const LRS_EVENT_LAYER_VALIDATIONS = new ValidationCheck(`Event layer '{name}' (ID: {id})`)
    .add(new ValidationCheck(`should have a 'From Measure Field Name' value specified`)
    .pass((/**
 * @param {?} l
 * @return {?}
 */
l => Boolean(l.compositeRouteIdFieldName))));
/** @type {?} */
export const LRS_METADATA_VALIDATIONS = new ValidationCheck('LRS Metadata')
    .add(new ValidationCheck('should have network layers')
    .pass((/**
 * @param {?} x
 * @return {?}
 */
x => Boolean(x.networkLayers && x.networkLayers.length))), new ValidationCheck('should have event layers')
    .pass((/**
 * @param {?} x
 * @return {?}
 */
x => Boolean(x.eventLayers && x.eventLayers.length))));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHJzLW1ldGFkYXRhLXZhbGlkYXRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbHJzL2xycy1tZXRhZGF0YS12YWxpZGF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7QUFHdEUsTUFBTSxPQUFPLHFCQUFxQixHQUE4QixJQUFJLGVBQWUsQ0FBVyxnQkFBZ0IsQ0FBQztLQUM1RyxHQUFHLENBQ0YsSUFBSSxlQUFlLENBQVcsNEJBQTRCLENBQUM7S0FDeEQsSUFBSTs7OztBQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUVsRCxJQUFJLGVBQWUsQ0FBVywyQ0FBMkMsQ0FBQztLQUN2RSxJQUFJOzs7O0FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQzVDOztBQUVILE1BQU0sT0FBTyw2QkFBNkIsR0FBa0MsSUFBSSxlQUFlLENBQzdGLG1DQUFtQyxDQUNwQztLQUNFLEdBQUcsQ0FDRixJQUFJLGVBQWUsQ0FBZSwrREFBK0QsQ0FBQztLQUMvRixJQUFJOzs7O0FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLEVBQUMsQ0FDbkQ7O0FBRUgsTUFBTSxPQUFPLDJCQUEyQixHQUFrQyxJQUFJLGVBQWUsQ0FDM0YsaUNBQWlDLENBQ2xDO0tBQ0UsR0FBRyxDQUNGLElBQUksZUFBZSxDQUFlLHlEQUF5RCxDQUFDO0tBQ3pGLElBQUk7Ozs7QUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMseUJBQXlCLENBQUMsRUFBQyxDQUNuRDs7QUFFSCxNQUFNLE9BQU8sd0JBQXdCLEdBQWlDLElBQUksZUFBZSxDQUFjLGNBQWMsQ0FBQztLQUNuSCxHQUFHLENBQ0YsSUFBSSxlQUFlLENBQWMsNEJBQTRCLENBQUM7S0FDM0QsSUFBSTs7OztBQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUVoRSxJQUFJLGVBQWUsQ0FBYywwQkFBMEIsQ0FBQztLQUN6RCxJQUFJOzs7O0FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBSzdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTHJzTGF5ZXIgfSBmcm9tICcuL2xycy1sYXllcic7XG5pbXBvcnQgeyBOZXR3b3JrTGF5ZXIgfSBmcm9tICcuL25ldHdvcmtzL25ldHdvcmstbGF5ZXInO1xuaW1wb3J0IHsgZ2V0SWRGaWVsZCB9IGZyb20gJy4uL21hcHMvZmllbGRzL2xheWVyLWZpZWxkJztcbmltcG9ydCB7IExyc01ldGFkYXRhIH0gZnJvbSAnLi9scnMtbWV0YWRhdGEnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkNoZWNrIH0gZnJvbSAnLi4vY29yZS92YWxpZGF0aW9uL3ZhbGlkYXRpb24tY2hlY2snO1xuXG5cbmV4cG9ydCBjb25zdCBMUlNfTEFZRVJfVkFMSURBVElPTlM6IFZhbGlkYXRpb25DaGVjazxMcnNMYXllcj4gPSBuZXcgVmFsaWRhdGlvbkNoZWNrPExyc0xheWVyPihgTGF5ZXIgJ3tuYW1lfSdgKVxuICAuYWRkKFxuICAgIG5ldyBWYWxpZGF0aW9uQ2hlY2s8THJzTGF5ZXI+KCdzaG91bGQgaGF2ZSBsaXN0IG9mIGZpZWxkcycpXG4gICAgICAucGFzcyhsID0+IEJvb2xlYW4obC5maWVsZHMgJiYgbC5maWVsZHMubGVuZ3RoKSksXG5cbiAgICBuZXcgVmFsaWRhdGlvbkNoZWNrPExyc0xheWVyPignc2hvdWxkIGhhdmUgYW4gSUQgZmllbGQgaW4gbGlzdCBvZiBmaWVsZHMnKVxuICAgICAgLnBhc3MobCA9PiBCb29sZWFuKGdldElkRmllbGQobC5maWVsZHMpKSlcbiAgKTtcblxuZXhwb3J0IGNvbnN0IExSU19ORVRXT1JLX0xBWUVSX1ZBTElEQVRJT05TOiBWYWxpZGF0aW9uQ2hlY2s8TmV0d29ya0xheWVyPiA9IG5ldyBWYWxpZGF0aW9uQ2hlY2s8TmV0d29ya0xheWVyPihcbiAgYE5ldHdvcmsgbGF5ZXIgJ3tuYW1lfScgKElEOiB7aWR9KWBcbilcbiAgLmFkZChcbiAgICBuZXcgVmFsaWRhdGlvbkNoZWNrPE5ldHdvcmtMYXllcj4oYHNob3VsZCBoYXZlIGEgJ0NvbXBvc2l0ZSBSb3V0ZSBJRCBGaWVsZCBOYW1lJyB2YWx1ZSBzcGVjaWZpZWRgKVxuICAgICAgLnBhc3MobCA9PiBCb29sZWFuKGwuY29tcG9zaXRlUm91dGVJZEZpZWxkTmFtZSkpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBMUlNfRVZFTlRfTEFZRVJfVkFMSURBVElPTlM6IFZhbGlkYXRpb25DaGVjazxOZXR3b3JrTGF5ZXI+ID0gbmV3IFZhbGlkYXRpb25DaGVjazxOZXR3b3JrTGF5ZXI+KFxuICBgRXZlbnQgbGF5ZXIgJ3tuYW1lfScgKElEOiB7aWR9KWBcbilcbiAgLmFkZChcbiAgICBuZXcgVmFsaWRhdGlvbkNoZWNrPE5ldHdvcmtMYXllcj4oYHNob3VsZCBoYXZlIGEgJ0Zyb20gTWVhc3VyZSBGaWVsZCBOYW1lJyB2YWx1ZSBzcGVjaWZpZWRgKVxuICAgICAgLnBhc3MobCA9PiBCb29sZWFuKGwuY29tcG9zaXRlUm91dGVJZEZpZWxkTmFtZSkpXG4gICk7XG5cbmV4cG9ydCBjb25zdCBMUlNfTUVUQURBVEFfVkFMSURBVElPTlM6IFZhbGlkYXRpb25DaGVjazxMcnNNZXRhZGF0YT4gPSBuZXcgVmFsaWRhdGlvbkNoZWNrPExyc01ldGFkYXRhPignTFJTIE1ldGFkYXRhJylcbiAgLmFkZChcbiAgICBuZXcgVmFsaWRhdGlvbkNoZWNrPExyc01ldGFkYXRhPignc2hvdWxkIGhhdmUgbmV0d29yayBsYXllcnMnKVxuICAgICAgLnBhc3MoeCA9PiBCb29sZWFuKHgubmV0d29ya0xheWVycyAmJiB4Lm5ldHdvcmtMYXllcnMubGVuZ3RoKSksXG5cbiAgICBuZXcgVmFsaWRhdGlvbkNoZWNrPExyc01ldGFkYXRhPignc2hvdWxkIGhhdmUgZXZlbnQgbGF5ZXJzJylcbiAgICAgIC5wYXNzKHggPT4gQm9vbGVhbih4LmV2ZW50TGF5ZXJzICYmIHguZXZlbnRMYXllcnMubGVuZ3RoKSksXG5cbiAgICAvLyBUT0RPOiBBZGQgb3RoZXIgbmVzdGVkIHZhbGlkYXRpb25zIC0gUkcuXG4gICAgLy8gLmZvclByb3BlcnR5KGxyc01ldGEgPT4gbHJzTWV0YS5ldmVudExheWVycylcbiAgICAvLyAuYWRkKClcbiAgKTtcbiJdfQ==