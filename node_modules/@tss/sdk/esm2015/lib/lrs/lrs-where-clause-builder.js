/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { WhereClauseBuilder, CriteriaOperator } from '../maps/where-clause-builder';
import { toUtcDate } from '../core/date-time/conversion/to-utc-date.function';
import { setDateToBeginningOfDay } from '../core/date-time/set-date-to-beginning-of-date.function';
import { getDateFormatForProvider } from '../data-source/get-date-format-for-provider.function';
import { format } from '../core/formatting/format.function';
import { formatDateForQuery } from '../core/date-time/format/format-date-for-query.function';
/** @type {?} */
export const NO_TEMPORAL_LAYER_SUPPLIED_ERROR_MSG = 'No LRS temporal layers supplied';
/** @type {?} */
export const NO_REFERENCE_LAYER_SUPPLIED_ERROR_MSG = 'No LRS reference layer supplied';
/** @type {?} */
export const LRS_DATE_WHERE_CLAUSE_TEMPLATE = '(({fromDateFieldName} IS NULL OR {fromDateFieldName} <= {dateEndOfDay})'
    + ' AND ({toDateFieldName} IS NULL OR {toDateFieldName} > {date}))';
/** @type {?} */
export const LRS_POINT_EVENT_WHERE_CLAUSE_TEMPLATE = `({fromMeasureFieldName} between {fromMeasure} and {toMeasure})`;
/** @type {?} */
export const LRS_LINEAR_EVENT_WHERE_CLAUSE_TEMPLATE = `(({fromMeasureFieldName} between {fromMeasure} AND {toMeasure})`
    + ` OR ({toMeasureFieldName} between {fromMeasure} AND {toMeasure}) OR ({fromMeasureFieldName} < {fromMeasure}`
    + ` AND {toMeasureFieldName} > {toMeasure})) AND NOT (({fromMeasureFieldName} < {fromMeasure}`
    + ` AND {toMeasureFieldName} <= {fromMeasure}) OR ({toMeasureFieldName} > {toMeasure} AND {fromMeasureFieldName} >= {toMeasure}))`;
/**
 * @param {?} fromDateFieldName
 * @param {?} toDateFieldName
 * @param {?=} dbType
 * @param {?=} viewDate
 * @return {?}
 */
export function getLrsViewDateWhereStatement(fromDateFieldName, toDateFieldName, dbType, viewDate) {
    viewDate = toUtcDate(viewDate || new Date());
    setDateToBeginningOfDay(viewDate);
    // TODO: Look into whether we need to actually use end of day or not
    // Currently we are just setting it to same as 'date' - RG.
    /** @type {?} */
    const dateFormat = getDateFormatForProvider(dbType);
    return format(LRS_DATE_WHERE_CLAUSE_TEMPLATE, {
        fromDateFieldName,
        toDateFieldName,
        date: formatDateForQuery(viewDate, dateFormat),
        dateEndOfDay: formatDateForQuery(viewDate, dateFormat),
    });
}
export class LrsWhereClauseBuilder extends WhereClauseBuilder {
    /**
     * @param {?=} options
     */
    constructor(options) {
        super(options);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} sourceData
     * @return {THIS}
     */
    withDataSource(sourceData) {
        return (/** @type {?} */ (this)).withDataProvider(sourceData.providerName);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} sourceDbType
     * @return {THIS}
     */
    withDataProvider(sourceDbType) {
        (/** @type {?} */ (this)).sourceDbType = sourceDbType;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} eventLayer
     * @return {THIS}
     */
    withEventLayer(eventLayer) {
        return (/** @type {?} */ (this)).withTemporalLayer(eventLayer)
            .withReferenceLayer(eventLayer);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} referenceLayer
     * @return {THIS}
     */
    withReferenceLayer(referenceLayer) {
        (/** @type {?} */ (this)).referenceLayer = referenceLayer;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} networkLayer
     * @return {THIS}
     */
    withNetworkLayer(networkLayer) {
        return (/** @type {?} */ (this)).withTemporalLayer(networkLayer);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} temporalLayer
     * @return {THIS}
     */
    withTemporalLayer(temporalLayer) {
        (/** @type {?} */ (this)).temporalLayer = temporalLayer;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} routeId
     * @param {?=} routeIdFieldName
     * @return {THIS}
     */
    withRouteId(routeId, routeIdFieldName) {
        return (/** @type {?} */ (this)).where(routeIdFieldName || (/** @type {?} */ (this)).referenceLayer.routeIdFieldName, CriteriaOperator.Equals, routeId);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} viewDate
     * @param {?=} fromDateFieldName
     * @param {?=} toDateFieldName
     * @return {THIS}
     */
    withViewDate(viewDate, fromDateFieldName, toDateFieldName) {
        if ((/** @type {?} */ (this)).temporalLayer) {
            fromDateFieldName = fromDateFieldName || (/** @type {?} */ (this)).temporalLayer.fromDateFieldName;
            toDateFieldName = toDateFieldName || (/** @type {?} */ (this)).temporalLayer.toDateFieldName;
        }
        /** @type {?} */
        const hasDateFieldInfo = Boolean((/** @type {?} */ (this)).temporalLayer || fromDateFieldName && toDateFieldName);
        if (!hasDateFieldInfo) {
            throw new Error(NO_TEMPORAL_LAYER_SUPPLIED_ERROR_MSG);
        }
        if (fromDateFieldName && toDateFieldName) {
            /** @type {?} */
            const dateClause = getLrsViewDateWhereStatement((/** @type {?} */ (this)).formatField(fromDateFieldName), (/** @type {?} */ (this)).formatField(toDateFieldName), (/** @type {?} */ (this)).sourceDbType, viewDate);
            (/** @type {?} */ (this)).add(dateClause);
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @param {?=} fromMeasureFieldName
     * @param {?=} toMeasureFieldName
     * @return {THIS}
     */
    betweenMeasures(fromMeasure, toMeasure, fromMeasureFieldName, toMeasureFieldName) {
        if ((/** @type {?} */ (this)).referenceLayer) {
            fromMeasureFieldName = fromMeasureFieldName || (/** @type {?} */ (this)).referenceLayer.fromMeasureFieldName;
            toMeasureFieldName = toMeasureFieldName || (/** @type {?} */ (this)).referenceLayer.toMeasureFieldName;
        }
        /** @type {?} */
        const hasMeasureFieldInfo = Boolean((/** @type {?} */ (this)).referenceLayer || fromMeasureFieldName);
        if (!hasMeasureFieldInfo) {
            throw new Error(NO_REFERENCE_LAYER_SUPPLIED_ERROR_MSG);
        }
        /** @type {?} */
        const whereTemplate = toMeasureFieldName
            ? LRS_LINEAR_EVENT_WHERE_CLAUSE_TEMPLATE
            : LRS_POINT_EVENT_WHERE_CLAUSE_TEMPLATE;
        /** @type {?} */
        const measureClause = format(whereTemplate, {
            fromMeasureFieldName: (/** @type {?} */ (this)).formatField(fromMeasureFieldName),
            toMeasureFieldName: (/** @type {?} */ (this)).formatField(toMeasureFieldName),
            fromMeasure,
            toMeasure,
        });
        return (/** @type {?} */ (this)).add(measureClause);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LrsWhereClauseBuilder.prototype.temporalLayer;
    /**
     * @type {?}
     * @private
     */
    LrsWhereClauseBuilder.prototype.referenceLayer;
    /**
     * @type {?}
     * @private
     */
    LrsWhereClauseBuilder.prototype.sourceDbType;
}
//# sourceMappingURL=data:application/json;base64,