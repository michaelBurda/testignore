/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FeatureClassLayer } from '../maps/feature-class-layer';
import { stripTableName } from '../data-source/data-table';
import { CapturePosition } from './capture-position';
/**
 * @param {?} layer
 * @param {?=} stripLayerTableName
 * @return {?}
 */
export function getLayerTableName(layer, stripLayerTableName = false) {
    /** @type {?} */
    let tableName = layer
        ? layer.featureClassName || layer.datasetName
        : null;
    if (stripLayerTableName) {
        tableName = stripTableName(tableName);
    }
    return tableName;
}
/**
 * @record
 */
export function TemporalLayer() { }
if (false) {
    /** @type {?|undefined} */
    TemporalLayer.prototype.fromDateFieldName;
    /** @type {?|undefined} */
    TemporalLayer.prototype.toDateFieldName;
}
/**
 * @record
 */
export function DataLayer() { }
if (false) {
    /** @type {?} */
    DataLayer.prototype.featureClassName;
}
/**
 * @record
 */
export function NetworkLayerMappingInfo() { }
if (false) {
    /** @type {?} */
    NetworkLayerMappingInfo.prototype.id;
    /** @type {?|undefined} */
    NetworkLayerMappingInfo.prototype.name;
    /** @type {?|undefined} */
    NetworkLayerMappingInfo.prototype.type;
}
/**
 * @record
 */
export function LrsReferenceLayer() { }
if (false) {
    /** @type {?} */
    LrsReferenceLayer.prototype.routeIdFieldName;
    /** @type {?} */
    LrsReferenceLayer.prototype.fromMeasureFieldName;
    /** @type {?} */
    LrsReferenceLayer.prototype.toMeasureFieldName;
}
/**
 * @record
 */
export function LrsDataReferenceLayer() { }
/**
 * @record
 */
export function ChildLrsLayer() { }
if (false) {
    /** @type {?} */
    ChildLrsLayer.prototype.parentNetwork;
}
/**
 * @record
 */
export function EditableLayer() { }
if (false) {
    /** @type {?|undefined} */
    EditableLayer.prototype.targetFeatureClassName;
    /** @type {?|undefined} */
    EditableLayer.prototype.modifiedDateFieldName;
    /** @type {?|undefined} */
    EditableLayer.prototype.modifiedByFieldName;
}
export class LrsLayer extends FeatureClassLayer {
    /**
     * @param {...?} sources
     */
    constructor(...sources) {
        super(...sources);
        this.capturePositions = this.capturePositions ? this.capturePositions : [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getPositionByValue(value) {
        return this.capturePositions.find((/**
         * @param {?} positionDef
         * @return {?}
         */
        positionDef => positionDef.value === value));
    }
    /**
     * @param {?} position
     * @return {?}
     */
    getPositions(position) {
        return this.capturePositions.filter((/**
         * @param {?} positionDef
         * @return {?}
         */
        positionDef => positionDef.position === position));
    }
    /**
     * @param {?} position
     * @return {?}
     */
    hasPosition(position) {
        /** @type {?} */
        const positions = this.getPositions(position);
        return positions.length > 0;
    }
    /**
     * @return {?}
     */
    get hasAnyPositions() {
        return this.capturePositions.length > 0;
    }
    /**
     * @return {?}
     */
    get hasLanePosition() {
        /** @type {?} */
        const positions = this.getPositions(CapturePosition.Lane);
        return positions.length > 0;
    }
    /**
     * @return {?}
     */
    get hasLeftPosition() {
        /** @type {?} */
        const positions = this.getPositions(CapturePosition.Left);
        return positions.length > 0;
    }
    /**
     * @return {?}
     */
    get hasRightPosition() {
        /** @type {?} */
        const positions = this.getPositions(CapturePosition.Right);
        return positions.length > 0;
    }
    /**
     * @return {?}
     */
    get hasCenterPosition() {
        /** @type {?} */
        const positions = this.getPositions(CapturePosition.Center);
        return positions.length > 0;
    }
}
if (false) {
    /** @type {?} */
    LrsLayer.prototype.featureClassName;
    /** @type {?} */
    LrsLayer.prototype.lrsNetworkId;
    /** @type {?} */
    LrsLayer.prototype.datasetName;
    /** @type {?} */
    LrsLayer.prototype.unitsOfMeasure;
    /** @type {?} */
    LrsLayer.prototype.measurePrecision;
    /** @type {?} */
    LrsLayer.prototype.temporalViewDate;
    /** @type {?} */
    LrsLayer.prototype.timeZoneOffset;
    /** @type {?} */
    LrsLayer.prototype.versionName;
    /** @type {?} */
    LrsLayer.prototype.isRouteEventSource;
    /** @type {?} */
    LrsLayer.prototype.isStaged;
    /** @type {?} */
    LrsLayer.prototype.dateFormat;
    /** @type {?} */
    LrsLayer.prototype.spatialReferenceInfo;
    /** @type {?} */
    LrsLayer.prototype.fromDateFieldName;
    /** @type {?} */
    LrsLayer.prototype.toDateFieldName;
    /** @type {?} */
    LrsLayer.prototype.lrs;
    /** @type {?} */
    LrsLayer.prototype.targetFeatureClassName;
    /** @type {?} */
    LrsLayer.prototype.modifiedDateFieldName;
    /** @type {?} */
    LrsLayer.prototype.modifiedByFieldName;
    /** @type {?} */
    LrsLayer.prototype.preventOverlaps;
    /** @type {?} */
    LrsLayer.prototype.autoStopCaptureOnRecordBreak;
    /** @type {?} */
    LrsLayer.prototype.forwardLaneCountFieldName;
    /** @type {?} */
    LrsLayer.prototype.reverseLaneCountFieldName;
    /** @type {?} */
    LrsLayer.prototype.positionIdentifierFieldName;
    /** @type {?} */
    LrsLayer.prototype.capturePositions;
    /** @type {?} */
    LrsLayer.prototype.laneDrawValueOrder;
    /** @type {?} */
    LrsLayer.prototype.laneIdentifierReverseValues;
}
//# sourceMappingURL=data:application/json;base64,