/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { MapFeature } from '../maps/map-feature';
import { isLine } from '../geometry/geometry/is-line.function';
import { isPoint } from '../geometry/geometry/is-point.function';
import { WGS_84_SRID } from '../geometry/geometry.constants';
import { clone } from '../core/clone/clone.function';
export class LrsFeature extends MapFeature {
    /**
     * @return {?}
     */
    get layerId() {
        return this.layer ? this.layer.id : null;
    }
    /**
     * @return {?}
     */
    get fromDate() {
        return this.getValue(this.layer.fromDateFieldName);
    }
    /**
     * @return {?}
     */
    get toDate() {
        return this.getValue(this.layer.toDateFieldName);
    }
    /**
     * @return {?}
     */
    get isRetired() {
        return Boolean(this.toDate);
    }
    /**
     * @return {?}
     */
    get isActive() {
        return !this.isRetired;
    }
    /**
     * @param {?} feature
     * @param {?} layer
     * @param {?=} spatialReferenceId
     */
    constructor(feature, layer, spatialReferenceId = WGS_84_SRID) {
        super(feature, layer, spatialReferenceId);
        if (this.geometry && this.isGeometryTypeInvalid()) {
            throw new Error(`Unsupported geometry type of ${this.geometry.type} detected.`);
        }
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} date
     * @return {THIS}
     */
    setFromDate(date) {
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.fromDateFieldName, date);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} date
     * @return {THIS}
     */
    setToDate(date) {
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.toDateFieldName, date);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    retire() {
        if ((/** @type {?} */ (this)).layer.toDateFieldName) {
            (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.toDateFieldName, new Date());
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const copyFeature = clone(this.toFeature());
        return new LrsFeature(copyFeature, this.layer);
    }
    /**
     * @protected
     * @return {?}
     */
    isGeometryTypeValid() {
        return isLine(this.geometry) || isPoint(this.geometry);
    }
    /**
     * @private
     * @return {?}
     */
    isGeometryTypeInvalid() {
        return !this.isGeometryTypeValid();
    }
}
if (false) {
    /** @type {?} */
    LrsFeature.prototype.routeId;
    /** @type {?} */
    LrsFeature.prototype.fromMeasure;
    /** @type {?} */
    LrsFeature.prototype.toMeasure;
    /** @type {?} */
    LrsFeature.prototype.layer;
    /** @type {?} */
    LrsFeature.prototype.displayValue;
    /** @type {?} */
    LrsFeature.prototype.styleValue;
    /** @type {?} */
    LrsFeature.prototype.viewDate;
    /** @type {?} */
    LrsFeature.prototype.gdbVersion;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHJzLWZlYXR1cmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9scnMvbHJzLWZlYXR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUtBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHckQsTUFBTSxPQUFPLFVBQVcsU0FBUSxVQUFVOzs7O0lBVXhDLElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUMzQyxDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7O0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7OztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDekIsQ0FBQzs7Ozs7O0lBRUQsWUFBWSxPQUFnQixFQUFFLEtBQWUsRUFBRSxrQkFBa0IsR0FBRyxXQUFXO1FBQzdFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFFMUMsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFO1lBQ2pELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQztTQUNqRjtJQUNILENBQUM7Ozs7Ozs7SUFFRCxXQUFXLENBQUMsSUFBVTtRQUNwQixPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDLFFBQVEsQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7Ozs7OztJQUVELFNBQVMsQ0FBQyxJQUFVO1FBQ2xCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUMsUUFBUSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Ozs7O0lBRUQsTUFBTTtRQUNKLElBQUksbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRTtZQUM5QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxDQUFDLGVBQWUsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7U0FDdkQ7UUFFRCxPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0lBQ2QsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0csV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7O0lBRVMsbUJBQW1CO1FBQzNCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Ozs7O0lBRU8scUJBQXFCO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7OztJQWpFQyw2QkFBZ0I7O0lBQ2hCLGlDQUFvQjs7SUFDcEIsK0JBQWtCOztJQUNsQiwyQkFBZ0I7O0lBQ2hCLGtDQUFrQjs7SUFDbEIsZ0NBQWdCOztJQUNoQiw4QkFBZ0I7O0lBQ2hCLGdDQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIDNyZCBQYXJ0eS5cbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICdnZW9qc29uJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgTHJzTGF5ZXIgfSBmcm9tICcuL2xycy1sYXllcic7XG5pbXBvcnQgeyBNYXBGZWF0dXJlIH0gZnJvbSAnLi4vbWFwcy9tYXAtZmVhdHVyZSc7XG5pbXBvcnQgeyBpc0xpbmUgfSBmcm9tICcuLi9nZW9tZXRyeS9nZW9tZXRyeS9pcy1saW5lLmZ1bmN0aW9uJztcbmltcG9ydCB7IGlzUG9pbnQgfSBmcm9tICcuLi9nZW9tZXRyeS9nZW9tZXRyeS9pcy1wb2ludC5mdW5jdGlvbic7XG5pbXBvcnQgeyBXR1NfODRfU1JJRCB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5LmNvbnN0YW50cyc7XG5pbXBvcnQgeyBDbG9uZWFibGUgfSBmcm9tICcuLi9jb3JlL2Nsb25lL2Nsb25lYWJsZSc7XG5pbXBvcnQgeyBjbG9uZSB9IGZyb20gJy4uL2NvcmUvY2xvbmUvY2xvbmUuZnVuY3Rpb24nO1xuXG5cbmV4cG9ydCBjbGFzcyBMcnNGZWF0dXJlIGV4dGVuZHMgTWFwRmVhdHVyZSBpbXBsZW1lbnRzIENsb25lYWJsZTxMcnNGZWF0dXJlPiB7XG4gIHJvdXRlSWQ6IHN0cmluZztcbiAgZnJvbU1lYXN1cmU6IG51bWJlcjtcbiAgdG9NZWFzdXJlOiBudW1iZXI7XG4gIGxheWVyOiBMcnNMYXllcjtcbiAgZGlzcGxheVZhbHVlOiBhbnk7XG4gIHN0eWxlVmFsdWU6IGFueTtcbiAgdmlld0RhdGU/OiBEYXRlO1xuICBnZGJWZXJzaW9uPzogc3RyaW5nO1xuXG4gIGdldCBsYXllcklkKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubGF5ZXIgPyB0aGlzLmxheWVyLmlkIDogbnVsbDtcbiAgfVxuXG4gIGdldCBmcm9tRGF0ZSgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSh0aGlzLmxheWVyLmZyb21EYXRlRmllbGROYW1lKTtcbiAgfVxuXG4gIGdldCB0b0RhdGUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUodGhpcy5sYXllci50b0RhdGVGaWVsZE5hbWUpO1xuICB9XG5cbiAgZ2V0IGlzUmV0aXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnRvRGF0ZSk7XG4gIH1cblxuICBnZXQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmlzUmV0aXJlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGZlYXR1cmU6IEZlYXR1cmUsIGxheWVyOiBMcnNMYXllciwgc3BhdGlhbFJlZmVyZW5jZUlkID0gV0dTXzg0X1NSSUQpIHtcbiAgICBzdXBlcihmZWF0dXJlLCBsYXllciwgc3BhdGlhbFJlZmVyZW5jZUlkKTtcblxuICAgIGlmICh0aGlzLmdlb21ldHJ5ICYmIHRoaXMuaXNHZW9tZXRyeVR5cGVJbnZhbGlkKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZ2VvbWV0cnkgdHlwZSBvZiAke3RoaXMuZ2VvbWV0cnkudHlwZX0gZGV0ZWN0ZWQuYCk7XG4gICAgfVxuICB9XG5cbiAgc2V0RnJvbURhdGUoZGF0ZTogRGF0ZSk6IHRoaXMge1xuICAgIHJldHVybiB0aGlzLnNldFZhbHVlKHRoaXMubGF5ZXIuZnJvbURhdGVGaWVsZE5hbWUsIGRhdGUpO1xuICB9XG5cbiAgc2V0VG9EYXRlKGRhdGU6IERhdGUpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpcy5zZXRWYWx1ZSh0aGlzLmxheWVyLnRvRGF0ZUZpZWxkTmFtZSwgZGF0ZSk7XG4gIH1cblxuICByZXRpcmUoKTogdGhpcyB7XG4gICAgaWYgKHRoaXMubGF5ZXIudG9EYXRlRmllbGROYW1lKSB7XG4gICAgICB0aGlzLnNldFZhbHVlKHRoaXMubGF5ZXIudG9EYXRlRmllbGROYW1lLCBuZXcgRGF0ZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNsb25lKCk6IExyc0ZlYXR1cmUge1xuICAgIGNvbnN0IGNvcHlGZWF0dXJlID0gY2xvbmUodGhpcy50b0ZlYXR1cmUoKSk7XG4gICAgcmV0dXJuIG5ldyBMcnNGZWF0dXJlKGNvcHlGZWF0dXJlLCB0aGlzLmxheWVyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpc0dlb21ldHJ5VHlwZVZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc0xpbmUodGhpcy5nZW9tZXRyeSkgfHwgaXNQb2ludCh0aGlzLmdlb21ldHJ5KTtcbiAgfVxuXG4gIHByaXZhdGUgaXNHZW9tZXRyeVR5cGVJbnZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5pc0dlb21ldHJ5VHlwZVZhbGlkKCk7XG4gIH1cbn1cbiJdfQ==