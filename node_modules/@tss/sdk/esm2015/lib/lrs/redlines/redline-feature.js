/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { LrsFeature } from '../lrs-feature';
import { toFeature } from '../feature';
import { isPolygon } from '../../geometry/geometry/is-polygon.function';
import { clone } from '../../core/clone/clone.function';
export class RedlineFeature extends LrsFeature {
    /**
     * @param {?} feature
     * @param {?} layer
     */
    constructor(feature, layer) {
        super(feature, layer);
        this.routeId = this.getValue(layer.routeIdFieldName);
        this.fromMeasure = this.getValue(layer.fromMeasureFieldName);
        this.toMeasure = this.getValue(layer.toMeasureFieldName);
        this.isLinear = Boolean(layer.toMeasureFieldName);
    }
    /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    static create(layer, properties = {}, geometry = null) {
        /** @type {?} */
        const feature = toFeature(properties, (/** @type {?} */ (geometry)));
        return new RedlineFeature(feature, layer);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    setFromMeasure(measure) {
        (/** @type {?} */ (this)).fromMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.fromMeasureFieldName, measure);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    setToMeasure(measure) {
        if (!(/** @type {?} */ (this)).isLinear) {
            throw new Error('Cannot set to measure for a point-based feature');
        }
        (/** @type {?} */ (this)).toMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.toMeasureFieldName, measure);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @return {THIS}
     */
    setMeasureExtent(fromMeasure, toMeasure) {
        return (/** @type {?} */ (this)).setFromMeasure(fromMeasure)
            .setToMeasure(toMeasure);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const copyFeature = clone(this.toFeature());
        return new RedlineFeature(copyFeature, this.layer);
    }
    /**
     * @protected
     * @return {?}
     */
    isGeometryTypeValid() {
        return isPolygon(this.geometry) || super.isGeometryTypeValid();
    }
}
if (false) {
    /** @type {?} */
    RedlineFeature.prototype.layer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkbGluZS1mZWF0dXJlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbHJzL3JlZGxpbmVzL3JlZGxpbmUtZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUV4RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHeEQsTUFBTSxPQUFPLGNBQWUsU0FBUSxVQUFVOzs7OztJQUc1QyxZQUFZLE9BQWdCLEVBQUUsS0FBbUI7UUFDL0MsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7Ozs7O0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FDWCxLQUFtQixFQUNuQixhQUF1QyxFQUFFLEVBQ3pDLFdBQWlELElBQUk7O2NBRS9DLE9BQU8sR0FBWSxTQUFTLENBQUMsVUFBVSxFQUFFLG1CQUFBLFFBQVEsRUFBWSxDQUFDO1FBQ3BFLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7Ozs7SUFFRCxjQUFjLENBQUMsT0FBZTtRQUM1QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1FBQzNCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUMsUUFBUSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7O0lBRUQsWUFBWSxDQUFDLE9BQWU7UUFDMUIsSUFBSSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLFFBQVEsRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7U0FDcEU7UUFFRCxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBQ3pCLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUMsUUFBUSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7OztJQUVELGdCQUFnQixDQUFDLFdBQW1CLEVBQUUsU0FBaUI7UUFDckQsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FDUixjQUFjLENBQUMsV0FBVyxDQUFDO2FBQzNCLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsS0FBSzs7Y0FDRyxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMzQyxPQUFPLElBQUksY0FBYyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7SUFFUyxtQkFBbUI7UUFDM0IsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ2pFLENBQUM7Q0FDRjs7O0lBaERDLCtCQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIDNyZCBQYXJ0eS5cbmltcG9ydCB7IEZlYXR1cmUsIEdlb21ldHJ5LCBMaW5lU3RyaW5nLCBQb2ludCwgTXVsdGlMaW5lU3RyaW5nIH0gZnJvbSAnZ2VvanNvbic7XG5cbi8vIFRTUy5cbmltcG9ydCB7IExyc0ZlYXR1cmUgfSBmcm9tICcuLi9scnMtZmVhdHVyZSc7XG5pbXBvcnQgeyBMcnNSZWZlcmVuY2VGZWF0dXJlIH0gZnJvbSAnLi4vbHJzLXJlZmVyZW5jZS1mZWF0dXJlJztcbmltcG9ydCB7IHRvRmVhdHVyZSB9IGZyb20gJy4uL2ZlYXR1cmUnO1xuaW1wb3J0IHsgUmVkbGluZUxheWVyIH0gZnJvbSAnLi9yZWRsaW5lLWxheWVyJztcbmltcG9ydCB7IGlzUG9seWdvbiB9IGZyb20gJy4uLy4uL2dlb21ldHJ5L2dlb21ldHJ5L2lzLXBvbHlnb24uZnVuY3Rpb24nO1xuaW1wb3J0IHsgQ2xvbmVhYmxlIH0gZnJvbSAnLi4vLi4vY29yZS9jbG9uZS9jbG9uZWFibGUnO1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tICcuLi8uLi9jb3JlL2Nsb25lL2Nsb25lLmZ1bmN0aW9uJztcblxuXG5leHBvcnQgY2xhc3MgUmVkbGluZUZlYXR1cmUgZXh0ZW5kcyBMcnNGZWF0dXJlIGltcGxlbWVudHMgTHJzUmVmZXJlbmNlRmVhdHVyZSwgQ2xvbmVhYmxlPFJlZGxpbmVGZWF0dXJlPiB7XG4gIGxheWVyOiBSZWRsaW5lTGF5ZXI7XG5cbiAgY29uc3RydWN0b3IoZmVhdHVyZTogRmVhdHVyZSwgbGF5ZXI6IFJlZGxpbmVMYXllcikge1xuICAgIHN1cGVyKGZlYXR1cmUsIGxheWVyKTtcblxuICAgIHRoaXMucm91dGVJZCA9IHRoaXMuZ2V0VmFsdWUobGF5ZXIucm91dGVJZEZpZWxkTmFtZSk7XG4gICAgdGhpcy5mcm9tTWVhc3VyZSA9IHRoaXMuZ2V0VmFsdWUobGF5ZXIuZnJvbU1lYXN1cmVGaWVsZE5hbWUpO1xuICAgIHRoaXMudG9NZWFzdXJlID0gdGhpcy5nZXRWYWx1ZShsYXllci50b01lYXN1cmVGaWVsZE5hbWUpO1xuICAgIHRoaXMuaXNMaW5lYXIgPSBCb29sZWFuKGxheWVyLnRvTWVhc3VyZUZpZWxkTmFtZSk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKFxuICAgIGxheWVyOiBSZWRsaW5lTGF5ZXIsXG4gICAgcHJvcGVydGllczogeyBbbmFtZTogc3RyaW5nXTogYW55OyB9ID0ge30sXG4gICAgZ2VvbWV0cnk6IFBvaW50IHwgTGluZVN0cmluZyB8IE11bHRpTGluZVN0cmluZyA9IG51bGxcbiAgKTogUmVkbGluZUZlYXR1cmUge1xuICAgIGNvbnN0IGZlYXR1cmU6IEZlYXR1cmUgPSB0b0ZlYXR1cmUocHJvcGVydGllcywgZ2VvbWV0cnkgYXMgR2VvbWV0cnkpO1xuICAgIHJldHVybiBuZXcgUmVkbGluZUZlYXR1cmUoZmVhdHVyZSwgbGF5ZXIpO1xuICB9XG5cbiAgc2V0RnJvbU1lYXN1cmUobWVhc3VyZTogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy5mcm9tTWVhc3VyZSA9IG1lYXN1cmU7XG4gICAgcmV0dXJuIHRoaXMuc2V0VmFsdWUodGhpcy5sYXllci5mcm9tTWVhc3VyZUZpZWxkTmFtZSwgbWVhc3VyZSk7XG4gIH1cblxuICBzZXRUb01lYXN1cmUobWVhc3VyZTogbnVtYmVyKTogdGhpcyB7XG4gICAgaWYgKCF0aGlzLmlzTGluZWFyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgdG8gbWVhc3VyZSBmb3IgYSBwb2ludC1iYXNlZCBmZWF0dXJlJyk7XG4gICAgfVxuXG4gICAgdGhpcy50b01lYXN1cmUgPSBtZWFzdXJlO1xuICAgIHJldHVybiB0aGlzLnNldFZhbHVlKHRoaXMubGF5ZXIudG9NZWFzdXJlRmllbGROYW1lLCBtZWFzdXJlKTtcbiAgfVxuXG4gIHNldE1lYXN1cmVFeHRlbnQoZnJvbU1lYXN1cmU6IG51bWJlciwgdG9NZWFzdXJlOiBudW1iZXIpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpc1xuICAgICAgLnNldEZyb21NZWFzdXJlKGZyb21NZWFzdXJlKVxuICAgICAgLnNldFRvTWVhc3VyZSh0b01lYXN1cmUpO1xuICB9XG5cbiAgY2xvbmUoKTogUmVkbGluZUZlYXR1cmUge1xuICAgIGNvbnN0IGNvcHlGZWF0dXJlID0gY2xvbmUodGhpcy50b0ZlYXR1cmUoKSk7XG4gICAgcmV0dXJuIG5ldyBSZWRsaW5lRmVhdHVyZShjb3B5RmVhdHVyZSwgdGhpcy5sYXllcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgaXNHZW9tZXRyeVR5cGVWYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gaXNQb2x5Z29uKHRoaXMuZ2VvbWV0cnkpIHx8IHN1cGVyLmlzR2VvbWV0cnlUeXBlVmFsaWQoKTtcbiAgfVxufVxuIl19