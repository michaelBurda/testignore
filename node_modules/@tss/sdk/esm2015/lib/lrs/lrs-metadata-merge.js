/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LrsMetadata } from './lrs-metadata';
import { findLayer } from './layer-search';
import { LayerDrawingInfo } from '../maps/drawing/layer-drawing-info';
import { mergeDeep } from '../core/merge/merge-deep.function';
import { mergeDeepArray } from '../core/merge/merge-deep-array.function';
import { isNumber } from '../core/type-check/is-number.function';
/**
 * @param {?} layerId
 * @param {...?} layerList
 * @return {?}
 */
function find(layerId, ...layerList) {
    return findLayer(layerId, ...layerList);
}
/**
 * @param {?} layer
 * @return {?}
 */
function setLayerDefaults(layer) {
    layer.fields = layer.fields || [];
}
/**
 * @param {?} layer
 * @return {?}
 */
function setNetworkLayerDefaults(layer) {
    if (layer) {
        layer.hierarchyFilter = layer.hierarchyFilter || [];
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function mergeFieldDomains(target, source) {
    mergeDeep(target, source, { ignoreArrays: true });
    if (target && target.codedValues && source && source.codedValues) {
        mergeDeepArray(target.codedValues, source.codedValues, { identifier: 'code' });
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function mergeFields(target, source) {
    target = target || [];
    source = source || [];
    mergeDeepArray(target, source, {
        identifier: 'name',
        beforeMerge: (/**
         * @param {?} targetField
         * @param {?} sourceField
         * @return {?}
         */
        (targetField, sourceField) => {
            if (targetField.domain && sourceField.domain && sourceField.domain.codedValues) {
                /** @type {?} */
                const doValuesNeedMerged = sourceField.domain.codedValues.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => isNumber(c.order)));
                if (doValuesNeedMerged && doValuesNeedMerged.length) {
                    mergeFieldDomains(targetField.domain, sourceField.domain);
                    return false;
                }
            }
        })
    });
}
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function mergeLayer(target, source) {
    if (!target || !source) {
        return;
    }
    /** @type {?} */
    const lrsTarget = (/** @type {?} */ (target));
    /** @type {?} */
    const lrsSource = (/** @type {?} */ (source));
    /** @type {?} */
    const targetCapturePositions = lrsTarget.capturePositions || [];
    /** @type {?} */
    const sourceCapturePositions = lrsSource.capturePositions || [];
    /** @type {?} */
    const targetDrawingInfo = (/** @type {?} */ (lrsTarget.drawingInfo));
    /** @type {?} */
    const sourceDrawingInfo = (/** @type {?} */ (lrsSource.drawingInfo));
    /** @type {?} */
    const hasDrawingInfo = Boolean(targetDrawingInfo || sourceDrawingInfo);
    /** @type {?} */
    const drawingInfo = new LayerDrawingInfo((/** @type {?} */ (lrsTarget.drawingInfo)), (/** @type {?} */ (lrsSource.drawingInfo)));
    mergeDeep(target, source, { ignoreArrays: true });
    mergeFields(target.fields, source.fields);
    if (hasDrawingInfo) {
        ((/** @type {?} */ (target))).drawingInfo = drawingInfo;
    }
    if (!targetCapturePositions.length && sourceCapturePositions.length) {
        lrsTarget.capturePositions = sourceCapturePositions;
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @param {?=} sourceMetadata
 * @param {?=} sort
 * @param {?=} onMergeComplete
 * @return {?}
 */
export function mergeLayers(target, source, sourceMetadata, sort = true, onMergeComplete = null) {
    target = target || [];
    source = source || [];
    target.forEach((/**
     * @param {?} targetLayer
     * @return {?}
     */
    (targetLayer) => {
        setLayerDefaults(targetLayer);
        mergeLayer(targetLayer, source.find((/**
         * @param {?} sourceLayer
         * @return {?}
         */
        sourceLayer => sourceLayer.id === targetLayer.id)));
    }));
    // There will be occurences where the source has layers that the target doesn't, which
    // means that the merge will not happen above, because the target is the one being looped.
    source
        .filter((/**
     * @param {?} src
     * @return {?}
     */
    src => !target.find((/**
     * @param {?} x
     * @return {?}
     */
    x => src.id === x.id))))
        .forEach((/**
     * @param {?} missing
     * @return {?}
     */
    missing => {
        /** @type {?} */
        let newLayer = missing;
        if (sourceMetadata) {
            /** @type {?} */
            const merger = find(missing.id, sourceMetadata.tables, sourceMetadata.layers, sourceMetadata.nonLRSLayers);
            // We want to preseve the original table or layer, so we don't overwrite it here.
            newLayer = Object.assign({}, merger);
            mergeLayer(newLayer, missing);
        }
        setLayerDefaults(newLayer);
        target.push(newLayer);
    }));
    if (sort) {
        target.sort((/**
         * @param {?} layer1
         * @param {?} layer2
         * @return {?}
         */
        (layer1, layer2) => layer1.order - layer2.order));
    }
    if (onMergeComplete) {
        target.forEach((/**
         * @param {?} targetLayer
         * @return {?}
         */
        (targetLayer) => {
            onMergeComplete(targetLayer, source.find((/**
             * @param {?} sourceLayer
             * @return {?}
             */
            sourceLayer => sourceLayer.id === targetLayer.id)));
        }));
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @param {?=} sourceMetadata
 * @return {?}
 */
export function mergeNetworkLayers(target, source, sourceMetadata) {
    /** @type {?} */
    const isSorted = true;
    mergeLayers(target, source, sourceMetadata, isSorted, onMergeNetworkLayerComplete);
}
/**
 * @param {?} targetLayer
 * @param {?} sourceLayer
 * @return {?}
 */
export function onMergeNetworkLayerComplete(targetLayer, sourceLayer) {
    setNetworkLayerDefaults(targetLayer);
    setNetworkLayerDefaults(sourceLayer);
    if (targetLayer && sourceLayer) {
        mergeDeepArray(targetLayer.hierarchyFilter, sourceLayer.hierarchyFilter, { identifier: 'name' });
    }
}
/**
 * @param {?} target
 * @param {...?} source
 * @return {?}
 */
export function mergeLrsMetadata(target, ...source) {
    source.forEach((/**
     * @param {?} srcMeta
     * @return {?}
     */
    srcMeta => {
        /** @type {?} */
        const dataSource = srcMeta.dataSource || target.dataSource;
        mergeDeep(target, srcMeta, { ignoreArrays: true });
        if (dataSource) {
            target.dataSource = dataSource;
        }
        mergeNetworkLayers(target.networkLayers, srcMeta.networkLayers, target);
        mergeLayers(target.eventLayers, srcMeta.eventLayers, target);
        mergeLayers(target.calibrationPointLayers, srcMeta.calibrationPointLayers, target);
        mergeLayers(target.intersectionLayers, srcMeta.intersectionLayers, target);
        mergeLayers(target.centerlineLayers, srcMeta.centerlineLayers, target);
        mergeLayers(target.redlineLayers, srcMeta.redlineLayers, target);
        mergeLayers(target.nonLRSLayers, srcMeta.nonLRSLayers, target);
        mergeLayers(target.layers, srcMeta.layers);
        mergeLayers(target.tables, srcMeta.tables);
    }));
}
/**
 * @param {?} target
 * @param {...?} source
 * @return {?}
 */
export function mergeMapMetadata(target, ...source) {
    source.forEach((/**
     * @param {?} meta
     * @return {?}
     */
    meta => {
        Object.assign(target, meta);
    }));
}
/**
 * @param {?} target
 * @param {...?} source
 * @return {?}
 */
export function deepMergeMapMetadata(target, ...source) {
    source.forEach((/**
     * @param {?} meta
     * @return {?}
     */
    meta => {
        meta.layers.forEach((/**
         * @param {?} nonLrsLayerInfo
         * @return {?}
         */
        nonLrsLayerInfo => {
            /** @type {?} */
            const targetLayer = target.getLrsLayer(nonLrsLayerInfo.id);
            if (targetLayer) {
                /** @type {?} */
                const baseFields = [...nonLrsLayerInfo.fields];
                mergeFields(baseFields, targetLayer.fields);
                targetLayer.fields = baseFields;
                if (nonLrsLayerInfo.geometryType) {
                    targetLayer.geometryType = nonLrsLayerInfo.geometryType;
                }
                targetLayer.drawingInfo = new LayerDrawingInfo(nonLrsLayerInfo.drawingInfo, targetLayer.drawingInfo);
            }
        }));
    }));
}
/**
 * @param {?} dataSource
 * @param {?} dataSourceLrsMetadata
 * @param {?} mapServerLrsMetadata
 * @param {?} mapServerMetadata
 * @return {?}
 */
export function mergeLrsMetadataSources(dataSource, dataSourceLrsMetadata, mapServerLrsMetadata, mapServerMetadata) {
    /** @type {?} */
    const hasMapServerLrsMetadata = Boolean(mapServerLrsMetadata);
    /** @type {?} */
    const fullLrsMeta = mapServerLrsMetadata
        || dataSourceLrsMetadata
        || new LrsMetadata(dataSource);
    fullLrsMeta.mergeMapMetadata(mapServerMetadata);
    fullLrsMeta.dataSource = fullLrsMeta.dataSource || dataSource;
    fullLrsMeta.dataSourceId = fullLrsMeta.dataSourceId || dataSource.id;
    if (hasMapServerLrsMetadata) {
        // If the map service has LRS metadata then we need to merge the
        // data source LRS metadata into the map service lrs metadata
        // because we want the data source metadata to be priority.
        fullLrsMeta.mergeLrsMetadata(dataSourceLrsMetadata);
    }
    else {
        // We only need to do a dep merge when there is no LRS metadata available in the map service because
        // the map service LRS metadata provides all of the same information as the map server metadata (like fields).
        fullLrsMeta.deepMergeMapMetadata(mapServerMetadata);
    }
    fullLrsMeta.rebuildLayers();
    return fullLrsMeta;
}
//# sourceMappingURL=data:application/json;base64,