/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { LrsFeature } from '../lrs-feature';
import { toFeature } from '../feature';
import { getPoint } from '../../geometry/line/get-point.function';
import { getMeasure } from '../../geometry/line/get-measure.function';
import { WGS_84_SRID } from '../../geometry/geometry.constants';
import { clone } from '../../core/clone/clone.function';
export class NetworkFeature extends LrsFeature {
    /**
     * @param {?} feature
     * @param {?} layer
     * @param {?=} spatialReferenceId
     */
    constructor(feature, layer, spatialReferenceId = WGS_84_SRID) {
        super(feature, layer, spatialReferenceId);
        this.routeId = this.getValue(layer.compositeRouteIdFieldName);
        this.displayValue = this.displayValue || this.routeId;
        this.setMeasureFromGeometry();
    }
    /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    static create(layer, properties = {}, geometry = null) {
        /** @type {?} */
        const feature = toFeature(properties, (/** @type {?} */ (geometry)));
        return new NetworkFeature(feature, layer);
    }
    /**
     * @param {?} point
     * @return {?}
     */
    getMeasure(point) {
        return getMeasure((/** @type {?} */ (this.geometry)), point);
    }
    /**
     * @param {?} measure
     * @return {?}
     */
    getPoint(measure) {
        return getPoint((/** @type {?} */ (this.geometry)), measure);
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const copyFeature = clone(this.toFeature());
        return new NetworkFeature(copyFeature, this.layer);
    }
}
if (false) {
    /** @type {?} */
    NetworkFeature.prototype.layer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay1mZWF0dXJlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbHJzL25ldHdvcmtzL25ldHdvcmstZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU1QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBR3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRWhFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUd4RCxNQUFNLE9BQU8sY0FBZSxTQUFRLFVBQVU7Ozs7OztJQUc1QyxZQUFZLE9BQWdCLEVBQUUsS0FBbUIsRUFBRSxrQkFBa0IsR0FBRyxXQUFXO1FBQ2pGLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RELElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUNYLEtBQW1CLEVBQ25CLGFBQXVDLEVBQUUsRUFDekMsV0FBeUMsSUFBSTs7Y0FFdkMsT0FBTyxHQUFZLFNBQVMsQ0FBQyxVQUFVLEVBQUUsbUJBQUEsUUFBUSxFQUFZLENBQUM7UUFDcEUsT0FBTyxJQUFJLGNBQWMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBa0I7UUFDM0IsT0FBTyxVQUFVLENBQUMsbUJBQUEsSUFBSSxDQUFDLFFBQVEsRUFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxPQUFlO1FBQ3RCLE9BQU8sUUFBUSxDQUFDLG1CQUFBLElBQUksQ0FBQyxRQUFRLEVBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7OztJQUVELEtBQUs7O2NBQ0csV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLGNBQWMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRjs7O0lBL0JDLCtCQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIDNyZCBQYXJ0eS5cbmltcG9ydCB7IEZlYXR1cmUsIExpbmVTdHJpbmcsIE11bHRpTGluZVN0cmluZywgR2VvbWV0cnkgfSBmcm9tICdnZW9qc29uJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgTHJzRmVhdHVyZSB9IGZyb20gJy4uL2xycy1mZWF0dXJlJztcbmltcG9ydCB7IE5ldHdvcmtMYXllciB9IGZyb20gJy4vbmV0d29yay1sYXllcic7XG5pbXBvcnQgeyB0b0ZlYXR1cmUgfSBmcm9tICcuLi9mZWF0dXJlJztcbmltcG9ydCB7IFNpbmdsZVBvaW50IH0gZnJvbSAnLi4vLi4vZ2VvbWV0cnkvcG9pbnQvc2luZ2xlLXBvaW50JztcbmltcG9ydCB7IExpbmVHZW9tZXRyeSB9IGZyb20gJy4uLy4uL2dlb21ldHJ5L2xpbmUvbGluZS1nZW9tZXRyeSc7XG5pbXBvcnQgeyBnZXRQb2ludCB9IGZyb20gJy4uLy4uL2dlb21ldHJ5L2xpbmUvZ2V0LXBvaW50LmZ1bmN0aW9uJztcbmltcG9ydCB7IGdldE1lYXN1cmUgfSBmcm9tICcuLi8uLi9nZW9tZXRyeS9saW5lL2dldC1tZWFzdXJlLmZ1bmN0aW9uJztcbmltcG9ydCB7IFdHU184NF9TUklEIH0gZnJvbSAnLi4vLi4vZ2VvbWV0cnkvZ2VvbWV0cnkuY29uc3RhbnRzJztcbmltcG9ydCB7IENsb25lYWJsZSB9IGZyb20gJy4uLy4uL2NvcmUvY2xvbmUvY2xvbmVhYmxlJztcbmltcG9ydCB7IGNsb25lIH0gZnJvbSAnLi4vLi4vY29yZS9jbG9uZS9jbG9uZS5mdW5jdGlvbic7XG5cblxuZXhwb3J0IGNsYXNzIE5ldHdvcmtGZWF0dXJlIGV4dGVuZHMgTHJzRmVhdHVyZSBpbXBsZW1lbnRzIENsb25lYWJsZTxOZXR3b3JrRmVhdHVyZT4ge1xuICBsYXllcjogTmV0d29ya0xheWVyO1xuXG4gIGNvbnN0cnVjdG9yKGZlYXR1cmU6IEZlYXR1cmUsIGxheWVyOiBOZXR3b3JrTGF5ZXIsIHNwYXRpYWxSZWZlcmVuY2VJZCA9IFdHU184NF9TUklEKSB7XG4gICAgc3VwZXIoZmVhdHVyZSwgbGF5ZXIsIHNwYXRpYWxSZWZlcmVuY2VJZCk7XG5cbiAgICB0aGlzLnJvdXRlSWQgPSB0aGlzLmdldFZhbHVlKGxheWVyLmNvbXBvc2l0ZVJvdXRlSWRGaWVsZE5hbWUpO1xuICAgIHRoaXMuZGlzcGxheVZhbHVlID0gdGhpcy5kaXNwbGF5VmFsdWUgfHwgdGhpcy5yb3V0ZUlkO1xuICAgIHRoaXMuc2V0TWVhc3VyZUZyb21HZW9tZXRyeSgpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShcbiAgICBsYXllcjogTmV0d29ya0xheWVyLFxuICAgIHByb3BlcnRpZXM6IHsgW25hbWU6IHN0cmluZ106IGFueTsgfSA9IHt9LFxuICAgIGdlb21ldHJ5OiBMaW5lU3RyaW5nIHwgTXVsdGlMaW5lU3RyaW5nID0gbnVsbFxuICApOiBOZXR3b3JrRmVhdHVyZSB7XG4gICAgY29uc3QgZmVhdHVyZTogRmVhdHVyZSA9IHRvRmVhdHVyZShwcm9wZXJ0aWVzLCBnZW9tZXRyeSBhcyBHZW9tZXRyeSk7XG4gICAgcmV0dXJuIG5ldyBOZXR3b3JrRmVhdHVyZShmZWF0dXJlLCBsYXllcik7XG4gIH1cblxuICBnZXRNZWFzdXJlKHBvaW50OiBTaW5nbGVQb2ludCk6IG51bWJlciB7XG4gICAgcmV0dXJuIGdldE1lYXN1cmUodGhpcy5nZW9tZXRyeSBhcyBMaW5lR2VvbWV0cnksIHBvaW50KTtcbiAgfVxuXG4gIGdldFBvaW50KG1lYXN1cmU6IG51bWJlcik6IFNpbmdsZVBvaW50IHtcbiAgICByZXR1cm4gZ2V0UG9pbnQodGhpcy5nZW9tZXRyeSBhcyBMaW5lR2VvbWV0cnksIG1lYXN1cmUpO1xuICB9XG5cbiAgY2xvbmUoKTogTmV0d29ya0ZlYXR1cmUge1xuICAgIGNvbnN0IGNvcHlGZWF0dXJlID0gY2xvbmUodGhpcy50b0ZlYXR1cmUoKSk7XG4gICAgcmV0dXJuIG5ldyBOZXR3b3JrRmVhdHVyZShjb3B5RmVhdHVyZSwgdGhpcy5sYXllcik7XG4gIH1cbn1cbiJdfQ==