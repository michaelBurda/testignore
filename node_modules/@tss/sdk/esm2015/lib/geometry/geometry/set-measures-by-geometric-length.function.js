/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 3rd party.
import distance from '@turf/distance';
import { toMultiPartPaths } from '../line/to-multi-part-paths.function';
import { getMeasureFromPoint } from '../point/get-measure-from-point.function';
import { sortAscending } from '../../core/sort/sort.function';
import { isNotNumber } from '../../core/type-check/is-not-number.function';
/** @type {?} */
const DEFAULT_EMPTY_Z_VALUE = 0;
/** @type {?} */
const DEFAULT_OPTIONS = {
    units: 'miles',
    hasZValues: true,
    calibrationPositions: []
};
/**
 * @param {?} line
 * @param {?=} options
 * @return {?}
 */
export function setMeasuresByGeometricLength(line, options) {
    /** @type {?} */
    const martiPart = toMultiPartPaths(line);
    options = Object.assign({}, DEFAULT_OPTIONS, options);
    /** @type {?} */
    let lastMeasure = 0;
    martiPart.forEach((/**
     * @param {?} linePart
     * @param {?} partIndex
     * @return {?}
     */
    (linePart, partIndex) => {
        setMeasureForLine(linePart, lastMeasure, partIndex, options);
        /** @type {?} */
        const lastCoordinateIndex = linePart.length - 1;
        /** @type {?} */
        const lastCoordinate = linePart[lastCoordinateIndex];
        lastMeasure += getMeasureFromPoint(lastCoordinate);
    }));
}
/**
 * @param {?} line
 * @param {?} startMeasure
 * @param {?} partIndex
 * @param {?} options
 * @return {?}
 */
function setMeasureForLine(line, startMeasure, partIndex, options) {
    /** @type {?} */
    const hasCalibrationPoints = options.calibrationPositions.some((/**
     * @param {?} calibrationPosition
     * @return {?}
     */
    calibrationPosition => calibrationPosition.partIndex === partIndex));
    if (hasCalibrationPoints) {
        calibrateLinePart(line, startMeasure, partIndex, options);
    }
    else {
        setLinePartMeasuresByGeometricLength(line, startMeasure, options);
    }
}
/**
 * @param {?} line
 * @param {?} startMeasure
 * @param {?} partIndex
 * @param {?} options
 * @return {?}
 */
function calibrateLinePart(line, startMeasure, partIndex, options) {
    /** @type {?} */
    const calibrationPositions = options.calibrationPositions.filter((/**
     * @param {?} position
     * @return {?}
     */
    position => position.partIndex === partIndex));
    /** @type {?} */
    let fromVertexIndex = 0;
    sortAscending(calibrationPositions, (/**
     * @param {?} calibration
     * @return {?}
     */
    calibration => calibration.measure));
    calibrationPositions.forEach((/**
     * @param {?} calibration
     * @return {?}
     */
    calibration => {
        /** @type {?} */
        const fromVertex = line[fromVertexIndex];
        /** @type {?} */
        const toVertex = line[calibration.vertexIndex];
        /** @type {?} */
        const numberOfVerticesInBetween = calibration.vertexIndex - fromVertexIndex;
        /** @type {?} */
        const distanceForSection = Math.abs(calibration.measure - startMeasure);
        /** @type {?} */
        const measureDistributionIncrement = distanceForSection / numberOfVerticesInBetween;
        setMeasure(fromVertex, startMeasure, options.hasZValues);
        setMeasure(toVertex, calibration.measure, options.hasZValues);
        /** @type {?} */
        const inBetweenVertices = getVerticesBetween(line, fromVertexIndex, calibration.vertexIndex);
        inBetweenVertices.forEach((/**
         * @param {?} vertice
         * @param {?} index
         * @return {?}
         */
        (vertice, index) => {
            /** @type {?} */
            const partNumber = index + 1;
            /** @type {?} */
            const verticeIncrement = partNumber * measureDistributionIncrement;
            /** @type {?} */
            const measure = startMeasure + verticeIncrement;
            setMeasure(vertice, measure, options.hasZValues);
        }));
        fromVertexIndex = calibration.vertexIndex;
        startMeasure = calibration.measure;
    }));
    /** @type {?} */
    const areMoreVertices = fromVertexIndex < line.length - 1;
    if (areMoreVertices) {
        /** @type {?} */
        const remainingPoints = getVerticesBetween(line, fromVertexIndex - 1, line.length);
        setLinePartMeasuresByGeometricLength(remainingPoints, startMeasure, options);
    }
}
/**
 * @param {?} line
 * @param {?} startRangeIndex
 * @param {?} endRangeIndex
 * @return {?}
 */
function getVerticesBetween(line, startRangeIndex, endRangeIndex) {
    /** @type {?} */
    let index = startRangeIndex + 1;
    /** @type {?} */
    const vertices = [];
    for (; index < endRangeIndex; index++) {
        /** @type {?} */
        const vertice = line[index];
        vertices.push(vertice);
    }
    return vertices;
}
/**
 * @param {?} line
 * @param {?} startMeasure
 * @param {?} options
 * @return {?}
 */
function setLinePartMeasuresByGeometricLength(line, startMeasure, options) {
    /** @type {?} */
    let previousVertex;
    /** @type {?} */
    let vertexMeasure = startMeasure;
    line.forEach((/**
     * @param {?} vertex
     * @param {?} index
     * @return {?}
     */
    (vertex, index) => {
        if (index !== 0) {
            /** @type {?} */
            const distanceBetweenVerticees = distance(previousVertex, vertex, options);
            vertexMeasure += distanceBetweenVerticees;
        }
        setMeasure(vertex, vertexMeasure, options.hasZValues);
        previousVertex = vertex;
    }));
}
/**
 * @param {?} coordinate
 * @param {?} measure
 * @param {?} hasZValues
 * @return {?}
 */
function setMeasure(coordinate, measure, hasZValues) {
    /** @type {?} */
    const accountForZValue = hasZValues || coordinate.length > 3;
    /** @type {?} */
    const measureIndex = accountForZValue ? 3 : 2;
    coordinate[measureIndex] = measure;
    if (accountForZValue) {
        ensureZValue(coordinate);
    }
}
/**
 * @param {?} coordinate
 * @return {?}
 */
function ensureZValue(coordinate) {
    if (isNotNumber(coordinate[2])) {
        coordinate[2] = DEFAULT_EMPTY_Z_VALUE;
    }
}
//# sourceMappingURL=data:application/json;base64,