/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { toSinglePartPointArray } from '../point/to-single-part-point.function';
import { getLastItem } from '../../core/array/get-last-item.function';
/**
 * @param {?} line
 * @param {?} point
 * @return {?}
 */
export function isPointOnLineString(line, point) {
    return isPointOnLine(line.coordinates[0], getLastItem(line.coordinates), point);
}
/**
 * @param {?} line
 * @param {?} lat
 * @param {?} lng
 * @return {?}
 */
export function isLatLngOnLineString(line, lat, lng) {
    const [lineStartLng, lineStartLat] = line.coordinates[0];
    const [lineEndLng, lineEndLat] = getLastItem(line.coordinates);
    return isLatLngOnLine(lineStartLat, lineStartLng, lineEndLat, lineEndLng, lat, lng);
}
/**
 * @param {?} lineStartLat
 * @param {?} lineStartLng
 * @param {?} lineEndLat
 * @param {?} lineEndLng
 * @param {?} testPointLat
 * @param {?} testPointLng
 * @return {?}
 */
export function isLatLngOnLine(lineStartLat, lineStartLng, lineEndLat, lineEndLng, testPointLat, testPointLng) {
    throw new Error('AHHH!');
}
/**
 * @param {?} lineStartPoint
 * @param {?} lineEndPoint
 * @param {?} testPoint
 * @param {?=} tolerance
 * @return {?}
 */
export function isPointOnLine(lineStartPoint, lineEndPoint, testPoint, tolerance = 0) {
    /** @type {?} */
    const startPoint = toSinglePartPointArray(lineStartPoint);
    /** @type {?} */
    const endPoint = toSinglePartPointArray(lineEndPoint);
    /** @type {?} */
    const point = toSinglePartPointArray(testPoint);
    const [startPointX, startPointY] = startPoint;
    const [endPointX, endPointY] = endPoint;
    const [testPointX, testPointY] = point;
    /** @type {?} */
    const slope = (endPointY - startPointY) / (endPointX - startPointX);
    /** @type {?} */
    const y = slope * testPointX + startPointY;
    if ((y <= testPointY + tolerance && y >= testPointY - tolerance) && (testPointX >= startPointX && testPointX <= endPointX)) {
        return true;
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtcG9pbnQtb24tbGluZS5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2dlb21ldHJ5L2xpbmUvaXMtcG9pbnQtb24tbGluZS5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBS0EsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDaEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7Ozs7QUFHdEUsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQWdCLEVBQUUsS0FBa0I7SUFDdEUsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2xGLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsSUFBZ0IsRUFBRSxHQUFXLEVBQUUsR0FBVztVQUN2RSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztVQUNsRCxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUU5RCxPQUFPLGNBQWMsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3RGLENBQUM7Ozs7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixZQUFvQixFQUNwQixZQUFvQixFQUNwQixVQUFrQixFQUNsQixVQUFrQixFQUNsQixZQUFvQixFQUNwQixZQUFvQjtJQUVwQixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxjQUEyQixFQUFFLFlBQXlCLEVBQUUsU0FBc0IsRUFBRSxTQUFTLEdBQUcsQ0FBQzs7VUFDbkgsVUFBVSxHQUFHLHNCQUFzQixDQUFDLGNBQWMsQ0FBQzs7VUFDbkQsUUFBUSxHQUFHLHNCQUFzQixDQUFDLFlBQVksQ0FBQzs7VUFDL0MsS0FBSyxHQUFHLHNCQUFzQixDQUFDLFNBQVMsQ0FBQztVQUV6QyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsR0FBRyxVQUFVO1VBQ3ZDLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxHQUFHLFFBQVE7VUFDakMsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsS0FBSzs7VUFDaEMsS0FBSyxHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQzs7VUFDN0QsQ0FBQyxHQUFHLEtBQUssR0FBRyxVQUFVLEdBQUcsV0FBVztJQUUxQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsR0FBRyxTQUFTLElBQUksQ0FBQyxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxXQUFXLElBQUksVUFBVSxJQUFJLFNBQVMsQ0FBQyxFQUFFO1FBQzFILE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAzcmQgUGFydHkuXG5pbXBvcnQgeyBMaW5lU3RyaW5nIH0gZnJvbSAnZ2VvanNvbic7XG5cbi8vIFRTUy5cbmltcG9ydCB7IFNpbmdsZVBvaW50IH0gZnJvbSAnLi4vcG9pbnQvc2luZ2xlLXBvaW50JztcbmltcG9ydCB7IHRvU2luZ2xlUGFydFBvaW50QXJyYXkgfSBmcm9tICcuLi9wb2ludC90by1zaW5nbGUtcGFydC1wb2ludC5mdW5jdGlvbic7XG5pbXBvcnQgeyBnZXRMYXN0SXRlbSB9IGZyb20gJy4uLy4uL2NvcmUvYXJyYXkvZ2V0LWxhc3QtaXRlbS5mdW5jdGlvbic7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUG9pbnRPbkxpbmVTdHJpbmcobGluZTogTGluZVN0cmluZywgcG9pbnQ6IFNpbmdsZVBvaW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBpc1BvaW50T25MaW5lKGxpbmUuY29vcmRpbmF0ZXNbMF0sIGdldExhc3RJdGVtKGxpbmUuY29vcmRpbmF0ZXMpLCBwb2ludCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xhdExuZ09uTGluZVN0cmluZyhsaW5lOiBMaW5lU3RyaW5nLCBsYXQ6IG51bWJlciwgbG5nOiBudW1iZXIpOiBib29sZWFuIHtcbiAgY29uc3QgW2xpbmVTdGFydExuZywgbGluZVN0YXJ0TGF0XSA9IGxpbmUuY29vcmRpbmF0ZXNbMF07XG4gIGNvbnN0IFtsaW5lRW5kTG5nLCBsaW5lRW5kTGF0XSA9IGdldExhc3RJdGVtKGxpbmUuY29vcmRpbmF0ZXMpO1xuXG4gIHJldHVybiBpc0xhdExuZ09uTGluZShsaW5lU3RhcnRMYXQsIGxpbmVTdGFydExuZywgbGluZUVuZExhdCwgbGluZUVuZExuZywgbGF0LCBsbmcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMYXRMbmdPbkxpbmUoXG4gIGxpbmVTdGFydExhdDogbnVtYmVyLFxuICBsaW5lU3RhcnRMbmc6IG51bWJlcixcbiAgbGluZUVuZExhdDogbnVtYmVyLFxuICBsaW5lRW5kTG5nOiBudW1iZXIsXG4gIHRlc3RQb2ludExhdDogbnVtYmVyLFxuICB0ZXN0UG9pbnRMbmc6IG51bWJlclxuKTogYm9vbGVhbiB7XG4gIHRocm93IG5ldyBFcnJvcignQUhISCEnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUG9pbnRPbkxpbmUobGluZVN0YXJ0UG9pbnQ6IFNpbmdsZVBvaW50LCBsaW5lRW5kUG9pbnQ6IFNpbmdsZVBvaW50LCB0ZXN0UG9pbnQ6IFNpbmdsZVBvaW50LCB0b2xlcmFuY2UgPSAwKTogYm9vbGVhbiB7XG4gIGNvbnN0IHN0YXJ0UG9pbnQgPSB0b1NpbmdsZVBhcnRQb2ludEFycmF5KGxpbmVTdGFydFBvaW50KTtcbiAgY29uc3QgZW5kUG9pbnQgPSB0b1NpbmdsZVBhcnRQb2ludEFycmF5KGxpbmVFbmRQb2ludCk7XG4gIGNvbnN0IHBvaW50ID0gdG9TaW5nbGVQYXJ0UG9pbnRBcnJheSh0ZXN0UG9pbnQpO1xuXG4gIGNvbnN0IFtzdGFydFBvaW50WCwgc3RhcnRQb2ludFldID0gc3RhcnRQb2ludDtcbiAgY29uc3QgW2VuZFBvaW50WCwgZW5kUG9pbnRZXSA9IGVuZFBvaW50O1xuICBjb25zdCBbdGVzdFBvaW50WCwgdGVzdFBvaW50WV0gPSBwb2ludDtcbiAgY29uc3Qgc2xvcGUgPSAoZW5kUG9pbnRZIC0gc3RhcnRQb2ludFkpIC8gKGVuZFBvaW50WCAtIHN0YXJ0UG9pbnRYKTtcbiAgY29uc3QgeSA9IHNsb3BlICogdGVzdFBvaW50WCArIHN0YXJ0UG9pbnRZO1xuXG4gIGlmICgoeSA8PSB0ZXN0UG9pbnRZICsgdG9sZXJhbmNlICYmIHkgPj0gdGVzdFBvaW50WSAtIHRvbGVyYW5jZSkgJiYgKHRlc3RQb2ludFggPj0gc3RhcnRQb2ludFggJiYgdGVzdFBvaW50WCA8PSBlbmRQb2ludFgpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iXX0=