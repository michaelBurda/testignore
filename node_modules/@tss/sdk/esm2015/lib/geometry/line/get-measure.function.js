/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { lineString } from '@turf/helpers';
import nearestPointOnLine from '@turf/nearest-point-on-line';
import lineSplit from '@turf/line-split';
import length from '@turf/length';
import { getMeasureFromPoint } from '../point/get-measure-from-point.function';
import { toSinglePartPointArray } from '../point/to-single-part-point.function';
import { isMultiPartLine } from './is-multi-part.function';
import { toLineOrMultiLineString } from './to-line-or-multi-line-string.function';
import { getDistanceBetweenPoints } from '../point/get-distance-between-points.function';
import { getLastItem } from '../../core/array/get-last-item.function';
/**
 * @param {?} line
 * @param {?} point
 * @param {?=} options
 * @return {?}
 */
export function getMeasure(line, point, options) {
    options = Object.assign({
        lengthUnit: 'miles',
        coordinateSystem: 'wgs84'
    }, options);
    /** @type {?} */
    const closestPointFeature = nearestPointOnLine(line, point);
    if (!closestPointFeature || !closestPointFeature.geometry) {
        throw new Error('Unable to get measure for geometry');
    }
    /** @type {?} */
    const foundPointMeasure = getMeasureFromPoint(closestPointFeature.geometry);
    // If the point happens to land on a verticee, then it will already have a measure.
    if (foundPointMeasure !== null) {
        return foundPointMeasure;
    }
    /** @type {?} */
    const lineGeometry = toLineOrMultiLineString(line);
    if (isMultiPartLine(lineGeometry.coordinates)) {
        throw new Error('MultiLineString is not supported in getMeasure function yet.');
    }
    return interpolateMeasure((/** @type {?} */ (lineGeometry)), closestPointFeature.geometry, options);
}
/**
 * @param {?} line
 * @param {?} pointOnLine
 * @param {?} options
 * @return {?}
 */
function interpolateMeasure(line, pointOnLine, options) {
    /** @type {?} */
    const pointCoordinates = toSinglePartPointArray(pointOnLine);
    /** @type {?} */
    const pointGeometry = { type: 'Point', coordinates: pointCoordinates };
    /** @type {?} */
    const pointFeature = { type: 'Feature', geometry: pointGeometry, properties: {} };
    /** @type {?} */
    const lineFeature = {
        type: 'Feature',
        geometry: line,
        properties: {}
    };
    /** @type {?} */
    const splitResult = lineSplit(lineFeature, pointFeature);
    /** @type {?} */
    const firstFeature = splitResult.features[0];
    /** @type {?} */
    const splitVertex = getLastItem(firstFeature.geometry.coordinates);
    /** @type {?} */
    const lastVertexWithMeasureIndex = firstFeature.geometry.coordinates.length - 2;
    /** @type {?} */
    const lastVertexWithMeasure = firstFeature.geometry.coordinates[lastVertexWithMeasureIndex];
    /** @type {?} */
    const newLineSegment = lineString([lastVertexWithMeasure, splitVertex]);
    /** @type {?} */
    const measureOffset = options.coordinateSystem === 'flat'
        ? getDistanceBetweenPoints(lastVertexWithMeasure, splitVertex)
        : length(newLineSegment, { units: (/** @type {?} */ (options.lengthUnit)) });
    /** @type {?} */
    const lastVertexMeasure = getMeasureFromPoint(lastVertexWithMeasure);
    return lastVertexMeasure + measureOffset;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LW1lYXN1cmUuZnVuY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9nZW9tZXRyeS9saW5lL2dldC1tZWFzdXJlLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sa0JBQWtCLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxTQUFTLE1BQU0sa0JBQWtCLENBQUM7QUFDekMsT0FBTyxNQUFNLE1BQU0sY0FBYyxDQUFDO0FBS2xDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNsRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUV6RixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUNBQXlDLENBQUM7Ozs7Ozs7QUFHdEUsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFrQixFQUFFLEtBQWtCLEVBQUUsT0FBMkI7SUFDNUYsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdEIsVUFBVSxFQUFFLE9BQU87UUFDbkIsZ0JBQWdCLEVBQUUsT0FBTztLQUMxQixFQUFFLE9BQU8sQ0FBQyxDQUFDOztVQUVOLG1CQUFtQixHQUFtQixrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO0lBQzNFLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRTtRQUN6RCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7S0FDdkQ7O1VBRUssaUJBQWlCLEdBQUcsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDO0lBRTNFLG1GQUFtRjtJQUNuRixJQUFJLGlCQUFpQixLQUFLLElBQUksRUFBRTtRQUM5QixPQUFPLGlCQUFpQixDQUFDO0tBQzFCOztVQUVLLFlBQVksR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7SUFDbEQsSUFBSSxlQUFlLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1FBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztLQUNqRjtJQUVELE9BQU8sa0JBQWtCLENBQUMsbUJBQUEsWUFBWSxFQUFjLEVBQUUsbUJBQW1CLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQy9GLENBQUM7Ozs7Ozs7QUFFRCxTQUFTLGtCQUFrQixDQUFDLElBQWdCLEVBQUUsV0FBd0IsRUFBRSxPQUEwQjs7VUFDMUYsZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxDQUFDOztVQUN0RCxhQUFhLEdBQVUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRTs7VUFDdkUsWUFBWSxHQUFtQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFOztVQUMzRixXQUFXLEdBQXdCO1FBQ3ZDLElBQUksRUFBRSxTQUFTO1FBQ2YsUUFBUSxFQUFFLElBQUk7UUFDZCxVQUFVLEVBQUUsRUFBRTtLQUNmOztVQUVLLFdBQVcsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQzs7VUFDbEQsWUFBWSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOztVQUN0QyxXQUFXLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDOztVQUM1RCwwQkFBMEIsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQzs7VUFDekUscUJBQXFCLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsMEJBQTBCLENBQUM7O1VBQ3JGLGNBQWMsR0FBRyxVQUFVLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxXQUFXLENBQUMsQ0FBQzs7VUFFakUsYUFBYSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsS0FBSyxNQUFNO1FBQ3ZELENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxxQkFBcUIsRUFBRSxXQUFXLENBQUM7UUFDOUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUJBQUEsT0FBTyxDQUFDLFVBQVUsRUFBTyxFQUFFLENBQUM7O1VBQzFELGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDO0lBRXBFLE9BQU8saUJBQWlCLEdBQUcsYUFBYSxDQUFDO0FBQzNDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAzcmQgUGFydHkuXG5pbXBvcnQgeyBGZWF0dXJlLCBQb2ludCwgTGluZVN0cmluZyB9IGZyb20gJ2dlb2pzb24nO1xuaW1wb3J0IHsgbGluZVN0cmluZyB9IGZyb20gJ0B0dXJmL2hlbHBlcnMnO1xuaW1wb3J0IG5lYXJlc3RQb2ludE9uTGluZSBmcm9tICdAdHVyZi9uZWFyZXN0LXBvaW50LW9uLWxpbmUnO1xuaW1wb3J0IGxpbmVTcGxpdCBmcm9tICdAdHVyZi9saW5lLXNwbGl0JztcbmltcG9ydCBsZW5ndGggZnJvbSAnQHR1cmYvbGVuZ3RoJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgTGluZUdlb21ldHJ5IH0gZnJvbSAnLi9saW5lLWdlb21ldHJ5JztcbmltcG9ydCB7IFNpbmdsZVBvaW50IH0gZnJvbSAnLi4vcG9pbnQvc2luZ2xlLXBvaW50JztcbmltcG9ydCB7IGdldE1lYXN1cmVGcm9tUG9pbnQgfSBmcm9tICcuLi9wb2ludC9nZXQtbWVhc3VyZS1mcm9tLXBvaW50LmZ1bmN0aW9uJztcbmltcG9ydCB7IHRvU2luZ2xlUGFydFBvaW50QXJyYXkgfSBmcm9tICcuLi9wb2ludC90by1zaW5nbGUtcGFydC1wb2ludC5mdW5jdGlvbic7XG5pbXBvcnQgeyBpc011bHRpUGFydExpbmUgfSBmcm9tICcuL2lzLW11bHRpLXBhcnQuZnVuY3Rpb24nO1xuaW1wb3J0IHsgdG9MaW5lT3JNdWx0aUxpbmVTdHJpbmcgfSBmcm9tICcuL3RvLWxpbmUtb3ItbXVsdGktbGluZS1zdHJpbmcuZnVuY3Rpb24nO1xuaW1wb3J0IHsgZ2V0RGlzdGFuY2VCZXR3ZWVuUG9pbnRzIH0gZnJvbSAnLi4vcG9pbnQvZ2V0LWRpc3RhbmNlLWJldHdlZW4tcG9pbnRzLmZ1bmN0aW9uJztcbmltcG9ydCB7IEdldE1lYXN1cmVPcHRpb25zIH0gZnJvbSAnLi9nZXQtbWVhc3VyZS1vcHRpb25zJztcbmltcG9ydCB7IGdldExhc3RJdGVtIH0gZnJvbSAnLi4vLi4vY29yZS9hcnJheS9nZXQtbGFzdC1pdGVtLmZ1bmN0aW9uJztcblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVhc3VyZShsaW5lOiBMaW5lR2VvbWV0cnksIHBvaW50OiBTaW5nbGVQb2ludCwgb3B0aW9ucz86IEdldE1lYXN1cmVPcHRpb25zKTogbnVtYmVyIHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGxlbmd0aFVuaXQ6ICdtaWxlcycsXG4gICAgY29vcmRpbmF0ZVN5c3RlbTogJ3dnczg0J1xuICB9LCBvcHRpb25zKTtcblxuICBjb25zdCBjbG9zZXN0UG9pbnRGZWF0dXJlOiBGZWF0dXJlPFBvaW50PiA9IG5lYXJlc3RQb2ludE9uTGluZShsaW5lLCBwb2ludCk7XG4gIGlmICghY2xvc2VzdFBvaW50RmVhdHVyZSB8fCAhY2xvc2VzdFBvaW50RmVhdHVyZS5nZW9tZXRyeSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGdldCBtZWFzdXJlIGZvciBnZW9tZXRyeScpO1xuICB9XG5cbiAgY29uc3QgZm91bmRQb2ludE1lYXN1cmUgPSBnZXRNZWFzdXJlRnJvbVBvaW50KGNsb3Nlc3RQb2ludEZlYXR1cmUuZ2VvbWV0cnkpO1xuXG4gIC8vIElmIHRoZSBwb2ludCBoYXBwZW5zIHRvIGxhbmQgb24gYSB2ZXJ0aWNlZSwgdGhlbiBpdCB3aWxsIGFscmVhZHkgaGF2ZSBhIG1lYXN1cmUuXG4gIGlmIChmb3VuZFBvaW50TWVhc3VyZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBmb3VuZFBvaW50TWVhc3VyZTtcbiAgfVxuXG4gIGNvbnN0IGxpbmVHZW9tZXRyeSA9IHRvTGluZU9yTXVsdGlMaW5lU3RyaW5nKGxpbmUpO1xuICBpZiAoaXNNdWx0aVBhcnRMaW5lKGxpbmVHZW9tZXRyeS5jb29yZGluYXRlcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ011bHRpTGluZVN0cmluZyBpcyBub3Qgc3VwcG9ydGVkIGluIGdldE1lYXN1cmUgZnVuY3Rpb24geWV0LicpO1xuICB9XG5cbiAgcmV0dXJuIGludGVycG9sYXRlTWVhc3VyZShsaW5lR2VvbWV0cnkgYXMgTGluZVN0cmluZywgY2xvc2VzdFBvaW50RmVhdHVyZS5nZW9tZXRyeSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlTWVhc3VyZShsaW5lOiBMaW5lU3RyaW5nLCBwb2ludE9uTGluZTogU2luZ2xlUG9pbnQsIG9wdGlvbnM6IEdldE1lYXN1cmVPcHRpb25zKTogbnVtYmVyIHtcbiAgY29uc3QgcG9pbnRDb29yZGluYXRlcyA9IHRvU2luZ2xlUGFydFBvaW50QXJyYXkocG9pbnRPbkxpbmUpO1xuICBjb25zdCBwb2ludEdlb21ldHJ5OiBQb2ludCA9IHsgdHlwZTogJ1BvaW50JywgY29vcmRpbmF0ZXM6IHBvaW50Q29vcmRpbmF0ZXMgfTtcbiAgY29uc3QgcG9pbnRGZWF0dXJlOiBGZWF0dXJlPFBvaW50PiA9IHsgdHlwZTogJ0ZlYXR1cmUnLCBnZW9tZXRyeTogcG9pbnRHZW9tZXRyeSwgcHJvcGVydGllczoge30gfTtcbiAgY29uc3QgbGluZUZlYXR1cmU6IEZlYXR1cmU8TGluZVN0cmluZz4gPSB7XG4gICAgdHlwZTogJ0ZlYXR1cmUnLFxuICAgIGdlb21ldHJ5OiBsaW5lLFxuICAgIHByb3BlcnRpZXM6IHt9XG4gIH07XG5cbiAgY29uc3Qgc3BsaXRSZXN1bHQgPSBsaW5lU3BsaXQobGluZUZlYXR1cmUsIHBvaW50RmVhdHVyZSk7XG4gIGNvbnN0IGZpcnN0RmVhdHVyZSA9IHNwbGl0UmVzdWx0LmZlYXR1cmVzWzBdO1xuICBjb25zdCBzcGxpdFZlcnRleCA9IGdldExhc3RJdGVtKGZpcnN0RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XG4gIGNvbnN0IGxhc3RWZXJ0ZXhXaXRoTWVhc3VyZUluZGV4ID0gZmlyc3RGZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmxlbmd0aCAtIDI7XG4gIGNvbnN0IGxhc3RWZXJ0ZXhXaXRoTWVhc3VyZSA9IGZpcnN0RmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlc1tsYXN0VmVydGV4V2l0aE1lYXN1cmVJbmRleF07XG4gIGNvbnN0IG5ld0xpbmVTZWdtZW50ID0gbGluZVN0cmluZyhbbGFzdFZlcnRleFdpdGhNZWFzdXJlLCBzcGxpdFZlcnRleF0pO1xuXG4gIGNvbnN0IG1lYXN1cmVPZmZzZXQgPSBvcHRpb25zLmNvb3JkaW5hdGVTeXN0ZW0gPT09ICdmbGF0J1xuICAgID8gZ2V0RGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGxhc3RWZXJ0ZXhXaXRoTWVhc3VyZSwgc3BsaXRWZXJ0ZXgpXG4gICAgOiBsZW5ndGgobmV3TGluZVNlZ21lbnQsIHsgdW5pdHM6IG9wdGlvbnMubGVuZ3RoVW5pdCBhcyBhbnkgfSk7XG4gIGNvbnN0IGxhc3RWZXJ0ZXhNZWFzdXJlID0gZ2V0TWVhc3VyZUZyb21Qb2ludChsYXN0VmVydGV4V2l0aE1lYXN1cmUpO1xuXG4gIHJldHVybiBsYXN0VmVydGV4TWVhc3VyZSArIG1lYXN1cmVPZmZzZXQ7XG59XG4iXX0=