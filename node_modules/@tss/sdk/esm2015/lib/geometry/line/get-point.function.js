/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { toMultiPartPaths } from './to-multi-part-paths.function';
import { addRange } from '../../core/array/add-range.function';
import { getMeasureFromPoint } from '../point/get-measure-from-point.function';
/**
 * @param {?} line
 * @param {?} measure
 * @return {?}
 */
export function getPoint(line, measure) {
    /** @type {?} */
    const pointComparisionDetails = [];
    /** @type {?} */
    const paths = toMultiPartPaths(line);
    paths.forEach((/**
     * @param {?} coordinates
     * @return {?}
     */
    (coordinates) => {
        /** @type {?} */
        const details = comparePathWithMeasure(coordinates, measure);
        addRange(pointComparisionDetails, details);
    }));
    /** @type {?} */
    const minPoint = pointComparisionDetails.reduce((/**
     * @param {?} accumulator
     * @param {?} value
     * @return {?}
     */
    (accumulator, value) => minPointCloserToMeasure(accumulator, value, measure)));
    /** @type {?} */
    const maxPoint = pointComparisionDetails.reduce((/**
     * @param {?} accumulator
     * @param {?} value
     * @return {?}
     */
    (accumulator, value) => maxPointCloserToMeasure(accumulator, value, measure)));
    /** @type {?} */
    const measureDeltaPercent = calculateMeasureDelta(minPoint.pointMeasure, maxPoint.pointMeasure, measure);
    /** @type {?} */
    const x = interpolateX(minPoint.pointCoordinate, maxPoint.pointCoordinate, measureDeltaPercent);
    /** @type {?} */
    const y = interpolateY(minPoint.pointCoordinate, maxPoint.pointCoordinate, measureDeltaPercent);
    return [x, y, 0, measure];
}
/**
 * @param {?} __0
 * @param {?} __1
 * @param {?} delta
 * @return {?}
 */
function interpolateX([minX], [maxX], delta) {
    return minX + delta * (maxX - minX);
}
/**
 * @param {?} __0
 * @param {?} __1
 * @param {?} delta
 * @return {?}
 */
function interpolateY([, minY], [, maxY], delta) {
    return minY + delta * (maxY - minY);
}
/**
 * @param {?} minMeasure
 * @param {?} maxMeasure
 * @param {?} measure
 * @return {?}
 */
function calculateMeasureDelta(minMeasure, maxMeasure, measure) {
    if (maxMeasure === minMeasure) {
        return 0;
    }
    return (measure - minMeasure) / (maxMeasure - minMeasure);
}
/**
 * @param {?} coordinates
 * @param {?} measureToCompare
 * @return {?}
 */
function comparePathWithMeasure(coordinates, measureToCompare) {
    /** @type {?} */
    const pointComparisionDetailsFromPath = coordinates
        .map((/**
     * @param {?} coordinate
     * @param {?} index
     * @return {?}
     */
    (coordinate, index) => compareCoordinateWithMeasure(coordinate, measureToCompare, index)));
    return pointComparisionDetailsFromPath;
}
/**
 * @param {?} coordinate
 * @param {?} measureToCompare
 * @param {?} index
 * @return {?}
 */
function compareCoordinateWithMeasure(coordinate, measureToCompare, index) {
    /** @type {?} */
    const measureFromCoordinate = getMeasureFromPoint(coordinate);
    /** @type {?} */
    const pointDetails = {
        pointCoordinate: coordinate,
        distance: Math.abs(measureFromCoordinate - measureToCompare),
        pointMeasure: measureFromCoordinate,
        index
    };
    return pointDetails;
}
/**
 * @param {?} accumulator
 * @param {?} value
 * @param {?} measureToCompare
 * @return {?}
 */
function minPointCloserToMeasure(accumulator, value, measureToCompare) {
    /** @type {?} */
    const isPointCloserToMeasure = value.distance <= accumulator.distance;
    /** @type {?} */
    const isPointLessThanMeasure = value.pointMeasure <= measureToCompare;
    return isPointCloserToMeasure && isPointLessThanMeasure
        ? value
        : accumulator;
}
/**
 * @param {?} point1
 * @param {?} point2
 * @param {?} measureToCompare
 * @return {?}
 */
function maxPointCloserToMeasure(point1, point2, measureToCompare) {
    /** @type {?} */
    const isPointCloserToMeasure = point1.distance <= point2.distance;
    /** @type {?} */
    const isPointGreaterThanMeasure = point1.pointMeasure >= measureToCompare;
    return isPointCloserToMeasure && isPointGreaterThanMeasure
        ? point1
        : point2;
}
//# sourceMappingURL=data:application/json;base64,