/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { toMultiPartPaths } from './to-multi-part-paths.function';
import { getDistanceBetweenPoints, getMetersBetweenLatLng } from '../point/get-distance-between-points.function';
import { toSinglePartPointArray } from '../point/to-single-part-point.function';
import { getDistanceToLine } from './get-distance-to-line.function';
import { addRange } from '../../core/array/add-range.function';
/**
 * @record
 */
export function LineVerticeeSummary() { }
if (false) {
    /** @type {?} */
    LineVerticeeSummary.prototype.nearestPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.furthestPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.minPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.maxPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.nextPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.previousPoint;
}
/**
 * @param {?} line
 * @param {?} point
 * @param {?=} isPointDegrees
 * @return {?}
 */
export function getVerticeeInfos(line, point, isPointDegrees = true) {
    /** @type {?} */
    const pointComparisonDetails = [];
    /** @type {?} */
    const paths = toMultiPartPaths(line);
    paths.forEach((/**
     * @param {?} coordinates
     * @return {?}
     */
    (coordinates) => {
        /** @type {?} */
        const details = comparePathWithPoint(coordinates, point, isPointDegrees);
        addRange(pointComparisonDetails, details);
    }));
    /** @type {?} */
    let nearestPoint;
    /** @type {?} */
    let furthestPoint;
    /** @type {?} */
    let minPoint;
    /** @type {?} */
    let maxPoint;
    pointComparisonDetails.forEach((/**
     * @param {?} pointCandidate
     * @return {?}
     */
    pointCandidate => {
        if (!nearestPoint || pointCandidate.distance < nearestPoint.distance) {
            nearestPoint = pointCandidate;
        }
        if (!furthestPoint || pointCandidate.distance > furthestPoint.distance) {
            furthestPoint = pointCandidate;
        }
        if (!minPoint || pointCandidate.pointMeasure < minPoint.pointMeasure) {
            minPoint = pointCandidate;
        }
        if (!maxPoint || pointCandidate.pointMeasure > maxPoint.pointMeasure) {
            maxPoint = pointCandidate;
        }
    }));
    // const nearestPoint = pointComparisionDetails
    //   .reduce((accumulator, value) => accumulator.distance > value.distance ? value : accumulator);
    /** @type {?} */
    const pointBefore = pointComparisonDetails[nearestPoint.index - 1];
    /** @type {?} */
    const pointAfter = pointComparisonDetails[nearestPoint.index + 1];
    /** @type {?} */
    let nextPoint = pointAfter;
    /** @type {?} */
    let previousPoint = pointBefore;
    // NOTE: this logic handles the rare case where the distance of the test point matches both the next
    // and previous verticee.
    // 0-----4--------------------------100
    //          5
    if (pointBefore && pointAfter) {
        /** @type {?} */
        const beforDistance = getDistanceToLine(point, nearestPoint.pointCoordinate, pointBefore.pointCoordinate);
        /** @type {?} */
        const afterDistance = getDistanceToLine(point, nearestPoint.pointCoordinate, pointAfter.pointCoordinate);
        if (beforDistance < afterDistance) {
            nextPoint = pointBefore;
            previousPoint = pointComparisonDetails[nextPoint.index - 2];
        }
    }
    return {
        nearestPoint,
        furthestPoint,
        nextPoint,
        previousPoint,
        minPoint,
        maxPoint
    };
}
/**
 * @param {?} line
 * @param {?} point
 * @param {?=} isPointDegrees
 * @return {?}
 */
export function getClosestVerticees(line, point, isPointDegrees = true) {
    /** @type {?} */
    const info = getVerticeeInfos(line, point, isPointDegrees);
    return [
        info.nearestPoint ? info.nearestPoint.pointCoordinate : null,
        info.nextPoint ? info.nextPoint.pointCoordinate : null
    ];
}
/**
 * @param {?} line
 * @param {?} point
 * @param {?=} isPointDegrees
 * @return {?}
 */
export function getClosestVerticee(line, point, isPointDegrees = true) {
    const [firstClosest] = getClosestVerticees(line, point, isPointDegrees);
    return firstClosest;
}
/**
 * @param {?} coordinates
 * @param {?} pointToCompare
 * @param {?} isPointDegrees
 * @return {?}
 */
function comparePathWithPoint(coordinates, pointToCompare, isPointDegrees) {
    /** @type {?} */
    const pointComparisionDetailsFromPath = coordinates
        .map((/**
     * @param {?} coordinate
     * @param {?} index
     * @return {?}
     */
    (coordinate, index) => compareCoordinateWithPoint(coordinate, pointToCompare, isPointDegrees, index)));
    return pointComparisionDetailsFromPath;
}
/**
 * @param {?} coordinate
 * @param {?} pointToCompare
 * @return {?}
 */
function getDegreeDistance(coordinate, pointToCompare) {
    /** @type {?} */
    const coordinate2 = toSinglePartPointArray(pointToCompare);
    return getMetersBetweenLatLng(coordinate[1], coordinate[0], coordinate2[1], coordinate2[0]);
}
/**
 * @param {?} coordinate
 * @param {?} pointToCompare
 * @param {?} isPointDegrees
 * @param {?} index
 * @return {?}
 */
function compareCoordinateWithPoint(coordinate, pointToCompare, isPointDegrees, index) {
    /** @type {?} */
    const distance = isPointDegrees
        ? getDegreeDistance(coordinate, pointToCompare)
        : getDistanceBetweenPoints(coordinate, pointToCompare);
    /** @type {?} */
    const pointDetails = {
        pointCoordinate: coordinate,
        distance,
        index
    };
    return pointDetails;
}
//# sourceMappingURL=data:application/json;base64,