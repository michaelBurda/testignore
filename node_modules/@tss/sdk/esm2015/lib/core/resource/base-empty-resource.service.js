/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { join } from '../url/join.function';
import { format } from '../formatting/format.function';
import { clean } from '../url/clean.function';
import { isString } from '../type-check/is-string.function';
import { NO_URL_ERROR_MSG } from './resource.constants';
/**
 * @abstract
 * @template T
 */
export class BaseEmptyResourceService {
    /**
     * @param {?} http
     * @param {?} paramsOrUrl
     */
    constructor(http, paramsOrUrl) {
        this.http = http;
        this.config = {
            url: null,
            idFieldName: 'id',
            cleanUrl: true,
        };
        if (isString(paramsOrUrl)) {
            this.config.url = (/** @type {?} */ (paramsOrUrl));
        }
        else {
            Object.assign(this.config, paramsOrUrl);
        }
        if (!this.config.url) {
            throw NO_URL_ERROR_MSG;
        }
    }
    /**
     * @protected
     * @param {?} entity
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    getUrlWithEntity(entity, endpoint, tokens) {
        return this.getUrlWithId(entity ? entity[this.config.idFieldName] : null, endpoint, tokens);
    }
    /**
     * @protected
     * @param {?} id
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    getUrlWithId(id, endpoint, tokens) {
        /** @type {?} */
        const inferredRouteTokens = {};
        inferredRouteTokens[this.config.idFieldName] = id;
        return this.getUrl(endpoint, Object.assign(inferredRouteTokens, tokens));
    }
    /**
     * @protected
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    getUrl(endpoint, tokens) {
        /** @type {?} */
        const url = endpoint
            ? join(this.config.url, endpoint)
            : this.config.url;
        return this.replaceTokens(url, tokens);
    }
    /**
     * @protected
     * @param {?} url
     * @param {?} tokens
     * @return {?}
     */
    replaceTokens(url, tokens) {
        tokens = tokens || {};
        if (this.config.defaultRouteTokens) {
            tokens = Object.assign({}, this.config.defaultRouteTokens, tokens);
        }
        url = format(url, tokens, true);
        if (this.config.cleanUrl) {
            url = clean(url);
        }
        return url;
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseEmptyResourceService.prototype.config;
    /**
     * @type {?}
     * @protected
     */
    BaseEmptyResourceService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1lbXB0eS1yZXNvdXJjZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY29yZS9yZXNvdXJjZS9iYXNlLWVtcHR5LXJlc291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0FBR3hELE1BQU0sT0FBZ0Isd0JBQXdCOzs7OztJQU81QyxZQUFzQixJQUFnQixFQUFFLFdBQTJDO1FBQTdELFNBQUksR0FBSixJQUFJLENBQVk7UUFONUIsV0FBTSxHQUEwQjtZQUN4QyxHQUFHLEVBQUUsSUFBSTtZQUNULFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQztRQUdBLElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLG1CQUFBLFdBQVcsRUFBVSxDQUFDO1NBQ3pDO2FBQU07WUFDTCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDcEIsTUFBTSxnQkFBZ0IsQ0FBQztTQUN4QjtJQUNILENBQUM7Ozs7Ozs7O0lBRVMsZ0JBQWdCLENBQUMsTUFBUyxFQUFFLFFBQWdCLEVBQUUsTUFBVztRQUNqRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RixDQUFDOzs7Ozs7OztJQUVTLFlBQVksQ0FBQyxFQUFtQixFQUFFLFFBQWdCLEVBQUUsTUFBVzs7Y0FDakUsbUJBQW1CLEdBQUcsRUFBRTtRQUM5QixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDOzs7Ozs7O0lBRVMsTUFBTSxDQUFDLFFBQWdCLEVBQUUsTUFBVzs7Y0FDdEMsR0FBRyxHQUFHLFFBQVE7WUFDbEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7WUFDakMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRztRQUVuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7Ozs7Ozs7SUFFUyxhQUFhLENBQUMsR0FBVyxFQUFFLE1BQVc7UUFDOUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFO1lBQ2xDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDeEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGOzs7Ozs7SUFsREMsMENBSUU7Ozs7O0lBRVUsd0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IGpvaW4gfSBmcm9tICcuLi91cmwvam9pbi5mdW5jdGlvbic7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICcuLi9mb3JtYXR0aW5nL2Zvcm1hdC5mdW5jdGlvbic7XG5pbXBvcnQgeyBjbGVhbiB9IGZyb20gJy4uL3VybC9jbGVhbi5mdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3R5cGUtY2hlY2svaXMtc3RyaW5nLmZ1bmN0aW9uJztcbmltcG9ydCB7IFJlc291cmNlU2VydmljZUNvbmZpZyB9IGZyb20gJy4vcmVzb3VyY2Utc2VydmljZS1jb25maWcnO1xuaW1wb3J0IHsgTk9fVVJMX0VSUk9SX01TRyB9IGZyb20gJy4vcmVzb3VyY2UuY29uc3RhbnRzJztcblxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUVtcHR5UmVzb3VyY2VTZXJ2aWNlPFQ+IHtcbiAgcHJvdGVjdGVkIGNvbmZpZzogUmVzb3VyY2VTZXJ2aWNlQ29uZmlnID0ge1xuICAgIHVybDogbnVsbCxcbiAgICBpZEZpZWxkTmFtZTogJ2lkJyxcbiAgICBjbGVhblVybDogdHJ1ZSxcbiAgfTtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCwgcGFyYW1zT3JVcmw6IHN0cmluZyB8IFJlc291cmNlU2VydmljZUNvbmZpZykge1xuICAgIGlmIChpc1N0cmluZyhwYXJhbXNPclVybCkpIHtcbiAgICAgIHRoaXMuY29uZmlnLnVybCA9IHBhcmFtc09yVXJsIGFzIHN0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmNvbmZpZywgcGFyYW1zT3JVcmwpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb25maWcudXJsKSB7XG4gICAgICB0aHJvdyBOT19VUkxfRVJST1JfTVNHO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRVcmxXaXRoRW50aXR5KGVudGl0eTogVCwgZW5kcG9pbnQ6IHN0cmluZywgdG9rZW5zOiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdldFVybFdpdGhJZChlbnRpdHkgPyBlbnRpdHlbdGhpcy5jb25maWcuaWRGaWVsZE5hbWVdIDogbnVsbCwgZW5kcG9pbnQsIHRva2Vucyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0VXJsV2l0aElkKGlkOiBzdHJpbmcgfCBudW1iZXIsIGVuZHBvaW50OiBzdHJpbmcsIHRva2VuczogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCBpbmZlcnJlZFJvdXRlVG9rZW5zID0ge307XG4gICAgaW5mZXJyZWRSb3V0ZVRva2Vuc1t0aGlzLmNvbmZpZy5pZEZpZWxkTmFtZV0gPSBpZDtcblxuICAgIHJldHVybiB0aGlzLmdldFVybChlbmRwb2ludCwgT2JqZWN0LmFzc2lnbihpbmZlcnJlZFJvdXRlVG9rZW5zLCB0b2tlbnMpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRVcmwoZW5kcG9pbnQ6IHN0cmluZywgdG9rZW5zOiBhbnkpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IGVuZHBvaW50XG4gICAgICA/IGpvaW4odGhpcy5jb25maWcudXJsLCBlbmRwb2ludClcbiAgICAgIDogdGhpcy5jb25maWcudXJsO1xuXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZVRva2Vucyh1cmwsIHRva2Vucyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVwbGFjZVRva2Vucyh1cmw6IHN0cmluZywgdG9rZW5zOiBhbnkpOiBzdHJpbmcge1xuICAgIHRva2VucyA9IHRva2VucyB8fCB7fTtcbiAgICBpZiAodGhpcy5jb25maWcuZGVmYXVsdFJvdXRlVG9rZW5zKSB7XG4gICAgICB0b2tlbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmNvbmZpZy5kZWZhdWx0Um91dGVUb2tlbnMsIHRva2Vucyk7XG4gICAgfVxuXG4gICAgdXJsID0gZm9ybWF0KHVybCwgdG9rZW5zLCB0cnVlKTtcbiAgICBpZiAodGhpcy5jb25maWcuY2xlYW5VcmwpIHtcbiAgICAgIHVybCA9IGNsZWFuKHVybCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybDtcbiAgfVxufVxuIl19