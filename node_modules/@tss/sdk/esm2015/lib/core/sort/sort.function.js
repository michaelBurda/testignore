/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SortDirection } from './sort-direction';
import { isFunction } from '../type-check/is-function.function';
import { isString } from '../type-check/is-string.function';
/**
 * @template T
 * @param {?} list
 * @param {...?} sortProperties
 * @return {?}
 */
export function sortAscending(list, ...sortProperties) {
    return sort(list, SortDirection.Ascending, ...sortProperties);
}
/**
 * @template T
 * @param {?} list
 * @param {...?} sortProperties
 * @return {?}
 */
export function sortDescending(list, ...sortProperties) {
    return sort(list, SortDirection.Descending, ...sortProperties);
}
/**
 * @template T
 * @param {?} list
 * @param {?=} direction
 * @param {...?} sortProperties
 * @return {?}
 */
export function sort(list, direction = SortDirection.Ascending, ...sortProperties) {
    list.sort((/**
     * @param {?} item1
     * @param {?} item2
     * @return {?}
     */
    (item1, item2) => {
        /** @type {?} */
        let sortResponse = 0;
        if (sortProperties && sortProperties.length) {
            sortProperties.forEach((/**
             * @param {?} property
             * @return {?}
             */
            property => {
                if (sortResponse === 0) {
                    /** @type {?} */
                    const value1 = getPropertyValue(item1, property);
                    /** @type {?} */
                    const value2 = getPropertyValue(item2, property);
                    sortResponse = getSortResultForString(value1, value2, direction);
                }
            }));
        }
        else {
            sortResponse = getSortResultForString(item1, item2, direction);
        }
        return sortResponse;
    }));
    return list;
}
/**
 * @template T
 * @param {?} item
 * @param {?} property
 * @return {?}
 */
function getPropertyValue(item, property) {
    return isFunction(property)
        ? ((/** @type {?} */ (property)))(item)
        : item[(/** @type {?} */ (property))];
}
/**
 * @param {?} value1
 * @param {?} value2
 * @param {?} direction
 * @return {?}
 */
function getSortResultForString(value1, value2, direction) {
    return direction === SortDirection.Ascending
        ? getSortResultForStringAscending(value1, value2)
        : getSortResultForStringDescending(value1, value2);
}
/**
 * @param {?} value
 * @return {?}
 */
function ensureValue(value) {
    return value === null || value === undefined ? '' : value;
}
/**
 * @param {?} value1
 * @param {?} value2
 * @return {?}
 */
function getSortResultForStringAscending(value1, value2) {
    value1 = ensureValue(value1);
    value2 = ensureValue(value2);
    /** @type {?} */
    const compare1 = isString(value1) ? value1.toUpperCase() : value1;
    /** @type {?} */
    const compare2 = isString(value2) ? value2.toUpperCase() : value2;
    /** @type {?} */
    let compareResult = 0;
    if (compare1 < compare2) {
        compareResult = -1;
    }
    else if (compare1 > compare2) {
        compareResult = 1;
    }
    // NOTE: 0 = equals, 1 = greater, -1 less than.
    return compareResult;
}
/**
 * @param {?} value1
 * @param {?} value2
 * @return {?}
 */
function getSortResultForStringDescending(value1, value2) {
    /** @type {?} */
    const compare1 = isString(value1) ? value1.toUpperCase() : value1;
    /** @type {?} */
    const compare2 = isString(value2) ? value2.toUpperCase() : value2;
    /** @type {?} */
    let compareResult = 0;
    if (compare1 > compare2) {
        compareResult = -1;
    }
    else if (compare1 < compare2) {
        compareResult = 1;
    }
    // NOTE: 0 = equals, 1 = greater, -1 less than.
    return compareResult;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvc29ydC9zb3J0LmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7OztBQUc1RCxNQUFNLFVBQVUsYUFBYSxDQUFJLElBQVMsRUFBRSxHQUFHLGNBQXVDO0lBQ3BGLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsU0FBUyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7QUFDaEUsQ0FBQzs7Ozs7OztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUksSUFBUyxFQUFFLEdBQUcsY0FBdUM7SUFDckYsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztBQUNqRSxDQUFDOzs7Ozs7OztBQUVELE1BQU0sVUFBVSxJQUFJLENBQUksSUFBUyxFQUFFLFlBQTJCLGFBQWEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxjQUF1QztJQUMvSCxJQUFJLENBQUMsSUFBSTs7Ozs7SUFBQyxDQUFDLEtBQVEsRUFBRSxLQUFRLEVBQUUsRUFBRTs7WUFDM0IsWUFBWSxHQUFHLENBQUM7UUFFcEIsSUFBSSxjQUFjLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUMzQyxjQUFjLENBQUMsT0FBTzs7OztZQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLFlBQVksS0FBSyxDQUFDLEVBQUU7OzBCQUNoQixNQUFNLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQzs7MEJBQzFDLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDO29CQUNoRCxZQUFZLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztpQkFDbEU7WUFDSCxDQUFDLEVBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxZQUFZLEdBQUcsc0JBQXNCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNoRTtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUMsRUFBQyxDQUFDO0lBRUgsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDOzs7Ozs7O0FBRUQsU0FBUyxnQkFBZ0IsQ0FBSSxJQUFPLEVBQUUsUUFBK0I7SUFDbkUsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDLG1CQUFBLFFBQVEsRUFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN6QyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFBLFFBQVEsRUFBVSxDQUFDLENBQUM7QUFDL0IsQ0FBQzs7Ozs7OztBQUVELFNBQVMsc0JBQXNCLENBQUMsTUFBVyxFQUFFLE1BQVcsRUFBRSxTQUF3QjtJQUNoRixPQUFPLFNBQVMsS0FBSyxhQUFhLENBQUMsU0FBUztRQUMxQyxDQUFDLENBQUMsK0JBQStCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUNqRCxDQUFDLENBQUMsZ0NBQWdDLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELENBQUM7Ozs7O0FBRUQsU0FBUyxXQUFXLENBQUMsS0FBVTtJQUM3QixPQUFPLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDNUQsQ0FBQzs7Ozs7O0FBRUQsU0FBUywrQkFBK0IsQ0FBQyxNQUFXLEVBQUUsTUFBVztJQUMvRCxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7O1VBQ3ZCLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTTs7VUFDM0QsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNOztRQUM3RCxhQUFhLEdBQUcsQ0FBQztJQUVyQixJQUFJLFFBQVEsR0FBRyxRQUFRLEVBQUU7UUFDdkIsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO1NBQU0sSUFBSSxRQUFRLEdBQUcsUUFBUSxFQUFFO1FBQzlCLGFBQWEsR0FBRyxDQUFDLENBQUM7S0FDbkI7SUFFRCwrQ0FBK0M7SUFDL0MsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxnQ0FBZ0MsQ0FBQyxNQUFjLEVBQUUsTUFBYzs7VUFDaEUsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNOztVQUMzRCxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU07O1FBQzdELGFBQWEsR0FBRyxDQUFDO0lBRXJCLElBQUksUUFBUSxHQUFHLFFBQVEsRUFBRTtRQUN2QixhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDcEI7U0FBTSxJQUFJLFFBQVEsR0FBRyxRQUFRLEVBQUU7UUFDOUIsYUFBYSxHQUFHLENBQUMsQ0FBQztLQUNuQjtJQUVELCtDQUErQztJQUMvQyxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU29ydERpcmVjdGlvbiB9IGZyb20gJy4vc29ydC1kaXJlY3Rpb24nO1xuaW1wb3J0IHsgU29ydFByb3BlcnR5R2V0dGVyIH0gZnJvbSAnLi9zb3J0LXByb3BlcnR5LWdldHRlcic7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdHlwZS1jaGVjay9pcy1mdW5jdGlvbi5mdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL3R5cGUtY2hlY2svaXMtc3RyaW5nLmZ1bmN0aW9uJztcblxuXG5leHBvcnQgZnVuY3Rpb24gc29ydEFzY2VuZGluZzxUPihsaXN0OiBUW10sIC4uLnNvcnRQcm9wZXJ0aWVzOiBTb3J0UHJvcGVydHlHZXR0ZXI8VD5bXSk6IFRbXSB7XG4gIHJldHVybiBzb3J0KGxpc3QsIFNvcnREaXJlY3Rpb24uQXNjZW5kaW5nLCAuLi5zb3J0UHJvcGVydGllcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0RGVzY2VuZGluZzxUPihsaXN0OiBUW10sIC4uLnNvcnRQcm9wZXJ0aWVzOiBTb3J0UHJvcGVydHlHZXR0ZXI8VD5bXSk6IFRbXSB7XG4gIHJldHVybiBzb3J0KGxpc3QsIFNvcnREaXJlY3Rpb24uRGVzY2VuZGluZywgLi4uc29ydFByb3BlcnRpZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydDxUPihsaXN0OiBUW10sIGRpcmVjdGlvbjogU29ydERpcmVjdGlvbiA9IFNvcnREaXJlY3Rpb24uQXNjZW5kaW5nLCAuLi5zb3J0UHJvcGVydGllczogU29ydFByb3BlcnR5R2V0dGVyPFQ+W10pOiBUW10ge1xuICBsaXN0LnNvcnQoKGl0ZW0xOiBULCBpdGVtMjogVCkgPT4ge1xuICAgIGxldCBzb3J0UmVzcG9uc2UgPSAwO1xuXG4gICAgaWYgKHNvcnRQcm9wZXJ0aWVzICYmIHNvcnRQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgc29ydFByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICAgIGlmIChzb3J0UmVzcG9uc2UgPT09IDApIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZTEgPSBnZXRQcm9wZXJ0eVZhbHVlKGl0ZW0xLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgY29uc3QgdmFsdWUyID0gZ2V0UHJvcGVydHlWYWx1ZShpdGVtMiwgcHJvcGVydHkpO1xuICAgICAgICAgIHNvcnRSZXNwb25zZSA9IGdldFNvcnRSZXN1bHRGb3JTdHJpbmcodmFsdWUxLCB2YWx1ZTIsIGRpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3J0UmVzcG9uc2UgPSBnZXRTb3J0UmVzdWx0Rm9yU3RyaW5nKGl0ZW0xLCBpdGVtMiwgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc29ydFJlc3BvbnNlO1xuICB9KTtcblxuICByZXR1cm4gbGlzdDtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZTxUPihpdGVtOiBULCBwcm9wZXJ0eTogU29ydFByb3BlcnR5R2V0dGVyPFQ+KTogYW55IHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24ocHJvcGVydHkpXG4gICAgPyAocHJvcGVydHkgYXMgKGl0ZW06IFQpID0+IHN0cmluZykoaXRlbSlcbiAgICA6IGl0ZW1bcHJvcGVydHkgYXMgc3RyaW5nXTtcbn1cblxuZnVuY3Rpb24gZ2V0U29ydFJlc3VsdEZvclN0cmluZyh2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIGRpcmVjdGlvbjogU29ydERpcmVjdGlvbik6IG51bWJlciB7XG4gIHJldHVybiBkaXJlY3Rpb24gPT09IFNvcnREaXJlY3Rpb24uQXNjZW5kaW5nXG4gICAgPyBnZXRTb3J0UmVzdWx0Rm9yU3RyaW5nQXNjZW5kaW5nKHZhbHVlMSwgdmFsdWUyKVxuICAgIDogZ2V0U29ydFJlc3VsdEZvclN0cmluZ0Rlc2NlbmRpbmcodmFsdWUxLCB2YWx1ZTIpO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVWYWx1ZSh2YWx1ZTogYW55KTogYW55IHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IHZhbHVlO1xufVxuXG5mdW5jdGlvbiBnZXRTb3J0UmVzdWx0Rm9yU3RyaW5nQXNjZW5kaW5nKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSk6IG51bWJlciB7XG4gIHZhbHVlMSA9IGVuc3VyZVZhbHVlKHZhbHVlMSk7XG4gIHZhbHVlMiA9IGVuc3VyZVZhbHVlKHZhbHVlMik7XG4gIGNvbnN0IGNvbXBhcmUxID0gaXNTdHJpbmcodmFsdWUxKSA/IHZhbHVlMS50b1VwcGVyQ2FzZSgpIDogdmFsdWUxO1xuICBjb25zdCBjb21wYXJlMiA9IGlzU3RyaW5nKHZhbHVlMikgPyB2YWx1ZTIudG9VcHBlckNhc2UoKSA6IHZhbHVlMjtcbiAgbGV0IGNvbXBhcmVSZXN1bHQgPSAwO1xuXG4gIGlmIChjb21wYXJlMSA8IGNvbXBhcmUyKSB7XG4gICAgY29tcGFyZVJlc3VsdCA9IC0xO1xuICB9IGVsc2UgaWYgKGNvbXBhcmUxID4gY29tcGFyZTIpIHtcbiAgICBjb21wYXJlUmVzdWx0ID0gMTtcbiAgfVxuXG4gIC8vIE5PVEU6IDAgPSBlcXVhbHMsIDEgPSBncmVhdGVyLCAtMSBsZXNzIHRoYW4uXG4gIHJldHVybiBjb21wYXJlUmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXRTb3J0UmVzdWx0Rm9yU3RyaW5nRGVzY2VuZGluZyh2YWx1ZTE6IHN0cmluZywgdmFsdWUyOiBzdHJpbmcpOiBudW1iZXIge1xuICBjb25zdCBjb21wYXJlMSA9IGlzU3RyaW5nKHZhbHVlMSkgPyB2YWx1ZTEudG9VcHBlckNhc2UoKSA6IHZhbHVlMTtcbiAgY29uc3QgY29tcGFyZTIgPSBpc1N0cmluZyh2YWx1ZTIpID8gdmFsdWUyLnRvVXBwZXJDYXNlKCkgOiB2YWx1ZTI7XG4gIGxldCBjb21wYXJlUmVzdWx0ID0gMDtcblxuICBpZiAoY29tcGFyZTEgPiBjb21wYXJlMikge1xuICAgIGNvbXBhcmVSZXN1bHQgPSAtMTtcbiAgfSBlbHNlIGlmIChjb21wYXJlMSA8IGNvbXBhcmUyKSB7XG4gICAgY29tcGFyZVJlc3VsdCA9IDE7XG4gIH1cblxuICAvLyBOT1RFOiAwID0gZXF1YWxzLCAxID0gZ3JlYXRlciwgLTEgbGVzcyB0aGFuLlxuICByZXR1cm4gY29tcGFyZVJlc3VsdDtcbn1cbiJdfQ==