/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { LogLevel, typeToLevel } from './log-level';
import { CoreConfig } from '../core.config';
import { format } from '../formatting/format.function';
import * as i0 from "@angular/core";
import * as i1 from "../core.config";
/**
 * Console logger.
 */
export class Logger {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.logs = [];
    }
    /**
     * @return {?}
     */
    get level() {
        return this.config.logLevel;
    }
    /**
     * @return {?}
     */
    get enabled() {
        return this.config.logEnabled;
    }
    /**
     * @return {?}
     */
    get isTrace() {
        return this.level >= LogLevel.Trace;
    }
    /**
     * @return {?}
     */
    get isDebug() {
        return this.level >= LogLevel.Debug;
    }
    /**
     * @return {?}
     */
    get isWarn() {
        return this.level >= LogLevel.Warn;
    }
    /**
     * @return {?}
     */
    get isError() {
        return this.level >= LogLevel.Error;
    }
    /**
     * @return {?}
     */
    get isFatal() {
        return this.level >= LogLevel.Fatal;
    }
    /**
     * @return {?}
     */
    get traceCount() {
        return this.count('trace');
    }
    /**
     * @return {?}
     */
    get debugCount() {
        return this.count('debug');
    }
    /**
     * @return {?}
     */
    get warnCount() {
        return this.count('warn');
    }
    /**
     * @return {?}
     */
    get errorCount() {
        return this.count('error');
    }
    /**
     * @return {?}
     */
    get fatalCount() {
        return this.count('fatal');
    }
    /**
     * @param {?} logType
     * @return {?}
     */
    count(logType) {
        return this.logsByType(logType).length;
    }
    /**
     * @param {?} logType
     * @return {?}
     */
    logsByType(logType) {
        return this.logsByLevel(typeToLevel(logType));
    }
    /**
     * @param {?} logLevel
     * @return {?}
     */
    logsByLevel(logLevel) {
        return this.logs.filter((/**
         * @param {?} l
         * @return {?}
         */
        l => l.level === logLevel));
    }
    /**
     * @param {?} log
     * @return {?}
     */
    logEntry(log) {
        if (this.config.logEnabled && log.level >= this.config.logLevel) {
            this.logs.push(log);
            if (this.isDebug) {
                console.log(`${LogLevel[log.level]}: ${log.msg} ${log.error || ''}`);
            }
        }
        return log;
    }
    /**
     * @param {?} msg
     * @param {?} level
     * @param {?=} error
     * @return {?}
     */
    log(msg, level, error = null) {
        return this.logEntry({
            msg: format(msg, { error }),
            level,
            error,
            created: new Date()
        });
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    trace(msg) {
        return this.log(msg, LogLevel.Trace);
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    debug(msg) {
        return this.log(msg, LogLevel.Debug);
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    info(msg) {
        return this.log(msg, LogLevel.Info);
    }
    /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    warn(msg, error = null) {
        return this.log(msg, LogLevel.Warn, error);
    }
    /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    error(msg, error = null) {
        return this.log(msg, LogLevel.Error, error);
    }
    /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    fatal(msg, error = null) {
        return this.log(msg, LogLevel.Fatal, error);
    }
    /**
     * @return {?}
     */
    clear() {
        this.logs.length = 0;
    }
}
Logger.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
Logger.ctorParameters = () => [
    { type: CoreConfig }
];
/** @nocollapse */ Logger.ngInjectableDef = i0.defineInjectable({ factory: function Logger_Factory() { return new Logger(i0.inject(i1.CoreConfig)); }, token: Logger, providedIn: "root" });
if (false) {
    /** @type {?} */
    Logger.prototype.logs;
    /**
     * @type {?}
     * @private
     */
    Logger.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTNDLE9BQU8sRUFBRSxRQUFRLEVBQVcsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7OztBQU92RCxNQUFNLE9BQU8sTUFBTTs7OztJQUdqQixZQUFvQixNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBRi9CLFNBQUksR0FBb0IsRUFBRSxDQUFDO0lBR2xDLENBQUM7Ozs7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFDdEMsQ0FBQzs7OztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ3JDLENBQUM7Ozs7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQztJQUN0QyxDQUFDOzs7O0lBRUQsSUFB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QUFlLElBQUk7UUFDcEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7OztJQUVELEtBQUssQ0FBQyxHQUFXLEVBQUUsUUFBZSxJQUFJO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7WUFsSEYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztZQVB6QixVQUFVOzs7OztJQVNqQixzQkFBa0M7Ozs7O0lBRXRCLHdCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IExvZ0VudHJ5IH0gZnJvbSAnLi9sb2ctZW50cnknO1xuaW1wb3J0IHsgTG9nTGV2ZWwsIExvZ1R5cGUsIHR5cGVUb0xldmVsIH0gZnJvbSAnLi9sb2ctbGV2ZWwnO1xuaW1wb3J0IHsgQ29yZUNvbmZpZyB9IGZyb20gJy4uL2NvcmUuY29uZmlnJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJy4uL2Zvcm1hdHRpbmcvZm9ybWF0LmZ1bmN0aW9uJztcblxuXG4vKipcbiAqIENvbnNvbGUgbG9nZ2VyLlxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gIHB1YmxpYyBsb2dzOiBBcnJheTxMb2dFbnRyeT4gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogQ29yZUNvbmZpZykge1xuICB9XG5cbiAgZ2V0IGxldmVsKCk6IExvZ0xldmVsIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcubG9nTGV2ZWw7XG4gIH1cblxuICBnZXQgZW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcubG9nRW5hYmxlZDtcbiAgfVxuXG4gIGdldCBpc1RyYWNlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmxldmVsID49IExvZ0xldmVsLlRyYWNlO1xuICB9XG5cbiAgZ2V0IGlzRGVidWcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubGV2ZWwgPj0gTG9nTGV2ZWwuRGVidWc7XG4gIH1cblxuICBnZXQgaXNXYXJuKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmxldmVsID49IExvZ0xldmVsLldhcm47XG4gIH1cblxuICBnZXQgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5sZXZlbCA+PSBMb2dMZXZlbC5FcnJvcjtcbiAgfVxuXG4gIGdldCBpc0ZhdGFsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmxldmVsID49IExvZ0xldmVsLkZhdGFsO1xuICB9XG5cbiAgZ2V0IHRyYWNlQ291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jb3VudCgndHJhY2UnKTtcbiAgfVxuXG4gIGdldCBkZWJ1Z0NvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY291bnQoJ2RlYnVnJyk7XG4gIH1cblxuICBnZXQgd2FybkNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY291bnQoJ3dhcm4nKTtcbiAgfVxuXG4gIGdldCBlcnJvckNvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY291bnQoJ2Vycm9yJyk7XG4gIH1cblxuICBnZXQgZmF0YWxDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNvdW50KCdmYXRhbCcpO1xuICB9XG5cbiAgY291bnQobG9nVHlwZTogTG9nVHlwZSk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubG9nc0J5VHlwZShsb2dUeXBlKS5sZW5ndGg7XG4gIH1cblxuICBsb2dzQnlUeXBlKGxvZ1R5cGU6IExvZ1R5cGUpOiBMb2dFbnRyeVtdIHtcbiAgICByZXR1cm4gdGhpcy5sb2dzQnlMZXZlbCh0eXBlVG9MZXZlbChsb2dUeXBlKSk7XG4gIH1cblxuICBsb2dzQnlMZXZlbChsb2dMZXZlbDogTG9nTGV2ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5sb2dzLmZpbHRlcihsID0+IGwubGV2ZWwgPT09IGxvZ0xldmVsKTtcbiAgfVxuXG4gIGxvZ0VudHJ5KGxvZzogTG9nRW50cnkpOiBMb2dFbnRyeSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmxvZ0VuYWJsZWQgJiYgbG9nLmxldmVsID49IHRoaXMuY29uZmlnLmxvZ0xldmVsKSB7XG4gICAgICB0aGlzLmxvZ3MucHVzaChsb2cpO1xuXG4gICAgICBpZiAodGhpcy5pc0RlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGAke0xvZ0xldmVsW2xvZy5sZXZlbF19OiAke2xvZy5tc2d9ICR7bG9nLmVycm9yIHx8ICcnfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsb2c7XG4gIH1cblxuICBsb2cobXNnOiBzdHJpbmcsIGxldmVsOiBMb2dMZXZlbCwgZXJyb3I6IEVycm9yID0gbnVsbCk6IExvZ0VudHJ5IHtcbiAgICByZXR1cm4gdGhpcy5sb2dFbnRyeSh7XG4gICAgICBtc2c6IGZvcm1hdChtc2csIHsgZXJyb3IgfSksXG4gICAgICBsZXZlbCxcbiAgICAgIGVycm9yLFxuICAgICAgY3JlYXRlZDogbmV3IERhdGUoKVxuICAgIH0pO1xuICB9XG5cbiAgdHJhY2UobXNnOiBzdHJpbmcpOiBMb2dFbnRyeSB7XG4gICAgcmV0dXJuIHRoaXMubG9nKG1zZywgTG9nTGV2ZWwuVHJhY2UpO1xuICB9XG5cbiAgZGVidWcobXNnOiBzdHJpbmcpOiBMb2dFbnRyeSB7XG4gICAgcmV0dXJuIHRoaXMubG9nKG1zZywgTG9nTGV2ZWwuRGVidWcpO1xuICB9XG5cbiAgaW5mbyhtc2c6IHN0cmluZyk6IExvZ0VudHJ5IHtcbiAgICByZXR1cm4gdGhpcy5sb2cobXNnLCBMb2dMZXZlbC5JbmZvKTtcbiAgfVxuXG4gIHdhcm4obXNnOiBzdHJpbmcsIGVycm9yOiBFcnJvciA9IG51bGwpOiBMb2dFbnRyeSB7XG4gICAgcmV0dXJuIHRoaXMubG9nKG1zZywgTG9nTGV2ZWwuV2FybiwgZXJyb3IpO1xuICB9XG5cbiAgZXJyb3IobXNnOiBzdHJpbmcsIGVycm9yOiBFcnJvciA9IG51bGwpOiBMb2dFbnRyeSB7XG4gICAgcmV0dXJuIHRoaXMubG9nKG1zZywgTG9nTGV2ZWwuRXJyb3IsIGVycm9yKTtcbiAgfVxuXG4gIGZhdGFsKG1zZzogc3RyaW5nLCBlcnJvcjogRXJyb3IgPSBudWxsKTogTG9nRW50cnkge1xuICAgIHJldHVybiB0aGlzLmxvZyhtc2csIExvZ0xldmVsLkZhdGFsLCBlcnJvcik7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLmxvZ3MubGVuZ3RoID0gMDtcbiAgfVxufVxuIl19