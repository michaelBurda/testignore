/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// 3rd party.
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class OnlineOfflineService {
    constructor() {
        this.internalConnectionChanged = new Subject();
        this.connectionChanged = this.internalConnectionChanged.asObservable();
        window.addEventListener('online', (/**
         * @return {?}
         */
        () => this.updateOnlineStatus()));
        window.addEventListener('offline', (/**
         * @return {?}
         */
        () => this.updateOnlineStatus()));
    }
    /**
     * @return {?}
     */
    get isOnline() {
        return !!window.navigator.onLine;
    }
    /**
     * @private
     * @return {?}
     */
    updateOnlineStatus() {
        this.internalConnectionChanged.next(window.navigator.onLine);
    }
}
OnlineOfflineService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
OnlineOfflineService.ctorParameters = () => [];
/** @nocollapse */ OnlineOfflineService.ngInjectableDef = i0.defineInjectable({ factory: function OnlineOfflineService_Factory() { return new OnlineOfflineService(); }, token: OnlineOfflineService, providedIn: "root" });
if (false) {
    /** @type {?} */
    OnlineOfflineService.prototype.connectionChanged;
    /**
     * @type {?}
     * @private
     */
    OnlineOfflineService.prototype.internalConnectionChanged;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib25saW5lLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2Vudmlyb25tZW50L29ubGluZS1zdGF0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFHM0MsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFNM0MsTUFBTSxPQUFPLG9CQUFvQjtJQVEvQjtRQUNFLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBQ3hELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdkUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVE7OztRQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUFDLENBQUM7UUFDbkUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7OztRQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxFQUFDLENBQUM7SUFDdEUsQ0FBQzs7OztJQVZELElBQUksUUFBUTtRQUNWLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBVU8sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7WUFuQkYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7Ozs7OztJQUVoQyxpREFBZ0Q7Ozs7O0lBQ2hELHlEQUE2RCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIDNyZCBwYXJ0eS5cbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuXG5kZWNsYXJlIGNvbnN0IHdpbmRvdzogYW55O1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIE9ubGluZU9mZmxpbmVTZXJ2aWNlIHtcbiAgcmVhZG9ubHkgY29ubmVjdGlvbkNoYW5nZWQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gIHByaXZhdGUgcmVhZG9ubHkgaW50ZXJuYWxDb25uZWN0aW9uQ2hhbmdlZDogU3ViamVjdDxib29sZWFuPjtcblxuICBnZXQgaXNPbmxpbmUoKSB7XG4gICAgcmV0dXJuICEhd2luZG93Lm5hdmlnYXRvci5vbkxpbmU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmludGVybmFsQ29ubmVjdGlvbkNoYW5nZWQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICAgIHRoaXMuY29ubmVjdGlvbkNoYW5nZWQgPSB0aGlzLmludGVybmFsQ29ubmVjdGlvbkNoYW5nZWQuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgKCkgPT4gdGhpcy51cGRhdGVPbmxpbmVTdGF0dXMoKSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCAoKSA9PiB0aGlzLnVwZGF0ZU9ubGluZVN0YXR1cygpKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlT25saW5lU3RhdHVzKCkge1xuICAgIHRoaXMuaW50ZXJuYWxDb25uZWN0aW9uQ2hhbmdlZC5uZXh0KHdpbmRvdy5uYXZpZ2F0b3Iub25MaW5lKTtcbiAgfVxufVxuIl19