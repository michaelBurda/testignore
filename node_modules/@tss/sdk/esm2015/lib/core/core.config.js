/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LogLevel } from './logging/log-level';
import { MeasurementUnit } from './units/measurement-unit';
import * as i0 from "@angular/core";
/**
 * A simple settings/config class for storing key/value pairs with persistence.
 */
export class CoreConfig {
    constructor() {
        this.autoConfig = true;
        this.logEnabled = true;
        this.logLevel = LogLevel.Info;
        this.defaultNotifyInfoMsg = 'Info';
        this.defaultNotifyWarnMsg = 'Warning';
        this.defaultNotifyErrorMsg = 'Error';
        this.defaultNotifySuccessMsg = 'Success';
        this.defaultNotifyWaitMsg = 'Wait';
        this.measurementUnit = MeasurementUnit.Imperial;
    }
}
CoreConfig.moduleConfigs = [{ className: 'CoreConfig', injectorToken: CoreConfig }];
CoreConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ CoreConfig.ngInjectableDef = i0.defineInjectable({ factory: function CoreConfig_Factory() { return new CoreConfig(); }, token: CoreConfig, providedIn: "root" });
if (false) {
    /** @type {?} */
    CoreConfig.moduleConfigs;
    /** @type {?} */
    CoreConfig.prototype.autoConfig;
    /** @type {?} */
    CoreConfig.prototype.logEnabled;
    /** @type {?} */
    CoreConfig.prototype.logLevel;
    /** @type {?} */
    CoreConfig.prototype.defaultNotifyInfoMsg;
    /** @type {?} */
    CoreConfig.prototype.defaultNotifyWarnMsg;
    /** @type {?} */
    CoreConfig.prototype.defaultNotifyErrorMsg;
    /** @type {?} */
    CoreConfig.prototype.defaultNotifySuccessMsg;
    /** @type {?} */
    CoreConfig.prototype.defaultNotifyWaitMsg;
    /** @type {?} */
    CoreConfig.prototype.measurementUnit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2NvcmUuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7O0FBUzNELE1BQU0sT0FBTyxVQUFVO0lBSHZCO1FBTUUsZUFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixlQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLGFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ3pCLHlCQUFvQixHQUFHLE1BQU0sQ0FBQztRQUM5Qix5QkFBb0IsR0FBRyxTQUFTLENBQUM7UUFDakMsMEJBQXFCLEdBQUcsT0FBTyxDQUFDO1FBQ2hDLDRCQUF1QixHQUFHLFNBQVMsQ0FBQztRQUNwQyx5QkFBb0IsR0FBRyxNQUFNLENBQUM7UUFDOUIsb0JBQWUsR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDO0tBQzVDOztBQVhpQix3QkFBYSxHQUFxQixDQUFDLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQzs7WUFKNUcsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OztJQUVDLHlCQUEyRzs7SUFFM0csZ0NBQWtCOztJQUNsQixnQ0FBa0I7O0lBQ2xCLDhCQUF5Qjs7SUFDekIsMENBQThCOztJQUM5QiwwQ0FBaUM7O0lBQ2pDLDJDQUFnQzs7SUFDaEMsNkNBQW9DOztJQUNwQywwQ0FBOEI7O0lBQzlCLHFDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ0xldmVsIH0gZnJvbSAnLi9sb2dnaW5nL2xvZy1sZXZlbCc7XG5pbXBvcnQgeyBBdXRvQ29uZmlnRGF0YSB9IGZyb20gJy4vYXV0by1jb25maWctZGF0YSc7XG5pbXBvcnQgeyBNZWFzdXJlbWVudFVuaXQgfSBmcm9tICcuL3VuaXRzL21lYXN1cmVtZW50LXVuaXQnO1xuXG5cbi8qKlxuICogQSBzaW1wbGUgc2V0dGluZ3MvY29uZmlnIGNsYXNzIGZvciBzdG9yaW5nIGtleS92YWx1ZSBwYWlycyB3aXRoIHBlcnNpc3RlbmNlLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb3JlQ29uZmlnIHtcbiAgc3RhdGljIHJlYWRvbmx5IG1vZHVsZUNvbmZpZ3M6IEF1dG9Db25maWdEYXRhW10gPSBbeyBjbGFzc05hbWU6ICdDb3JlQ29uZmlnJywgaW5qZWN0b3JUb2tlbjogQ29yZUNvbmZpZyB9XTtcblxuICBhdXRvQ29uZmlnID0gdHJ1ZTtcbiAgbG9nRW5hYmxlZCA9IHRydWU7XG4gIGxvZ0xldmVsID0gTG9nTGV2ZWwuSW5mbztcbiAgZGVmYXVsdE5vdGlmeUluZm9Nc2cgPSAnSW5mbyc7XG4gIGRlZmF1bHROb3RpZnlXYXJuTXNnID0gJ1dhcm5pbmcnO1xuICBkZWZhdWx0Tm90aWZ5RXJyb3JNc2cgPSAnRXJyb3InO1xuICBkZWZhdWx0Tm90aWZ5U3VjY2Vzc01zZyA9ICdTdWNjZXNzJztcbiAgZGVmYXVsdE5vdGlmeVdhaXRNc2cgPSAnV2FpdCc7XG4gIG1lYXN1cmVtZW50VW5pdCA9IE1lYXN1cmVtZW50VW5pdC5JbXBlcmlhbDtcbn1cbiJdfQ==