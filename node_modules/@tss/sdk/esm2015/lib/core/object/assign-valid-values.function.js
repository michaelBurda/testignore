/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isValue } from '../type-check/is-value.function';
/**
 * Assigns values from one object to another, but only for values that are valid (not null, undefined, or empty string).
 * Restriction properties can be passed in to specificy explicitly which properties to assign (if valid).
 * @template T
 * @param {?} targetItem
 * @param {?} sourceItem
 * @param {...?} restrictionProperties
 * @return {?}
 */
export function assignValidValues(targetItem, sourceItem, ...restrictionProperties) {
    if (restrictionProperties.length === 0) {
        restrictionProperties = Object.keys(sourceItem);
    }
    restrictionProperties
        .filter((/**
     * @param {?} property
     * @return {?}
     */
    property => isValue(sourceItem[property])))
        .forEach((/**
     * @param {?} property
     * @return {?}
     */
    property => targetItem[property] = sourceItem[property]));
    return targetItem;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzaWduLXZhbGlkLXZhbHVlcy5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvb2JqZWN0L2Fzc2lnbi12YWxpZC12YWx1ZXMuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7Ozs7Ozs7OztBQU8xRCxNQUFNLFVBQVUsaUJBQWlCLENBQUksVUFBYSxFQUFFLFVBQWUsRUFBRSxHQUFHLHFCQUErQjtJQUNyRyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDdEMscUJBQXFCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNqRDtJQUVELHFCQUFxQjtTQUNsQixNQUFNOzs7O0lBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUM7U0FDakQsT0FBTzs7OztJQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBQyxDQUFDO0lBRXBFLE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1ZhbHVlIH0gZnJvbSAnLi4vdHlwZS1jaGVjay9pcy12YWx1ZS5mdW5jdGlvbic7XG5cblxuLyoqXG4gKiBBc3NpZ25zIHZhbHVlcyBmcm9tIG9uZSBvYmplY3QgdG8gYW5vdGhlciwgYnV0IG9ubHkgZm9yIHZhbHVlcyB0aGF0IGFyZSB2YWxpZCAobm90IG51bGwsIHVuZGVmaW5lZCwgb3IgZW1wdHkgc3RyaW5nKS5cbiAqIFJlc3RyaWN0aW9uIHByb3BlcnRpZXMgY2FuIGJlIHBhc3NlZCBpbiB0byBzcGVjaWZpY3kgZXhwbGljaXRseSB3aGljaCBwcm9wZXJ0aWVzIHRvIGFzc2lnbiAoaWYgdmFsaWQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduVmFsaWRWYWx1ZXM8VD4odGFyZ2V0SXRlbTogVCwgc291cmNlSXRlbTogYW55LCAuLi5yZXN0cmljdGlvblByb3BlcnRpZXM6IHN0cmluZ1tdKTogVCB7XG4gIGlmIChyZXN0cmljdGlvblByb3BlcnRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmVzdHJpY3Rpb25Qcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc291cmNlSXRlbSk7XG4gIH1cblxuICByZXN0cmljdGlvblByb3BlcnRpZXNcbiAgICAuZmlsdGVyKHByb3BlcnR5ID0+IGlzVmFsdWUoc291cmNlSXRlbVtwcm9wZXJ0eV0pKVxuICAgIC5mb3JFYWNoKHByb3BlcnR5ID0+IHRhcmdldEl0ZW1bcHJvcGVydHldID0gc291cmNlSXRlbVtwcm9wZXJ0eV0pO1xuXG4gIHJldHVybiB0YXJnZXRJdGVtO1xufVxuIl19