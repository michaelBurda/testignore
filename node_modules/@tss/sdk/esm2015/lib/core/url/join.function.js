/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Port from: https://github.com/jfromaniello/url-join
// TODO: Refactor this to be cleaner - RG.
/**
 * @param {...?} parts
 * @return {?}
 */
export function join(...parts) {
    /** @type {?} */
    const resultArray = [];
    /** @type {?} */
    let str;
    if (Array.isArray(parts[0])) {
        parts = parts[0];
    }
    parts[0] = parts[0] || '';
    // If the first part is a plain protocol, we combine it with the next part.
    if (parts[0].match(/^[^/:]+:\/*$/) && parts.length > 1) {
        /** @type {?} */
        const first = parts.shift();
        parts[0] = first + parts[0];
    }
    // There must be two or three slashes in the file protocol, two slashes in anything else.
    if (parts[0].match(/^file:\/\/\//)) {
        parts[0] = parts[0].replace(/^([^/:]+):\/*/, '$1:///');
    }
    else {
        parts[0] = parts[0].replace(/^([^/:]+):\/*/, '$1://');
    }
    for (let i = 0; i < parts.length; i++) {
        /** @type {?} */
        let component = parts[i];
        if (typeof component !== 'string') {
            throw new TypeError('Url must be a string. Received ' + component);
        }
        if (component === '') {
            continue;
        }
        if (i > 0) {
            // Removing the starting slashes for each component but the first.
            component = component.replace(/^[\/]+/, '');
        }
        if (i < parts.length - 1) {
            // Removing the ending slashes for each component but the last.
            component = component.replace(/[\/]+$/, '');
        }
        else {
            // For the last component we will combine multiple slashes to a single one.
            component = component.replace(/[\/]+$/, '/');
        }
        resultArray.push(component);
    }
    str = resultArray.join('/');
    // Each input component is now separated by a single slash except the possible first plain protocol part.
    // Remove trailing slash before parameters or hash.
    str = str.replace(/\/(\?|&|#[^!])/g, '$1');
    // Replace ? in parameters with &.
    /** @type {?} */
    const urlParts = str.split('?');
    str = urlParts.shift() + (urlParts.length > 0 ? '?' : '') + urlParts.join('&');
    return str;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvdXJsL2pvaW4uZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVBLE1BQU0sVUFBVSxJQUFJLENBQUMsR0FBRyxLQUFLOztVQUNyQixXQUFXLEdBQUcsRUFBRTs7UUFDbEIsR0FBRztJQUVQLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMzQixLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2xCO0lBRUQsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsMkVBQTJFO0lBQzNFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Y0FDaEQsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUU7UUFDM0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0I7SUFFRCx5RkFBeUY7SUFDekYsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1FBQ2xDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN4RDtTQUFNO1FBQ0wsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O1lBQ2pDLFNBQVMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXhCLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLE1BQU0sSUFBSSxTQUFTLENBQUMsaUNBQWlDLEdBQUcsU0FBUyxDQUFDLENBQUM7U0FDcEU7UUFFRCxJQUFJLFNBQVMsS0FBSyxFQUFFLEVBQUU7WUFBRSxTQUFTO1NBQUU7UUFFbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1Qsa0VBQWtFO1lBQ2xFLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLCtEQUErRDtZQUMvRCxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNMLDJFQUEyRTtZQUMzRSxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDOUM7UUFFRCxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzdCO0lBRUQsR0FBRyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIseUdBQXlHO0lBRXpHLG1EQUFtRDtJQUNuRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQzs7O1VBR3JDLFFBQVEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUMvQixHQUFHLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUvRSxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQb3J0IGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qZnJvbWFuaWVsbG8vdXJsLWpvaW5cbi8vIFRPRE86IFJlZmFjdG9yIHRoaXMgdG8gYmUgY2xlYW5lciAtIFJHLlxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oLi4ucGFydHMpOiBzdHJpbmcge1xuICBjb25zdCByZXN1bHRBcnJheSA9IFtdO1xuICBsZXQgc3RyO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHBhcnRzWzBdKSkge1xuICAgIHBhcnRzID0gcGFydHNbMF07XG4gIH1cblxuICBwYXJ0c1swXSA9IHBhcnRzWzBdIHx8ICcnO1xuICAvLyBJZiB0aGUgZmlyc3QgcGFydCBpcyBhIHBsYWluIHByb3RvY29sLCB3ZSBjb21iaW5lIGl0IHdpdGggdGhlIG5leHQgcGFydC5cbiAgaWYgKHBhcnRzWzBdLm1hdGNoKC9eW14vOl0rOlxcLyokLykgJiYgcGFydHMubGVuZ3RoID4gMSkge1xuICAgIGNvbnN0IGZpcnN0ID0gcGFydHMuc2hpZnQoKTtcbiAgICBwYXJ0c1swXSA9IGZpcnN0ICsgcGFydHNbMF07XG4gIH1cblxuICAvLyBUaGVyZSBtdXN0IGJlIHR3byBvciB0aHJlZSBzbGFzaGVzIGluIHRoZSBmaWxlIHByb3RvY29sLCB0d28gc2xhc2hlcyBpbiBhbnl0aGluZyBlbHNlLlxuICBpZiAocGFydHNbMF0ubWF0Y2goL15maWxlOlxcL1xcL1xcLy8pKSB7XG4gICAgcGFydHNbMF0gPSBwYXJ0c1swXS5yZXBsYWNlKC9eKFteLzpdKyk6XFwvKi8sICckMTovLy8nKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnJlcGxhY2UoL14oW14vOl0rKTpcXC8qLywgJyQxOi8vJyk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNvbXBvbmVudCA9IHBhcnRzW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVcmwgbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQgJyArIGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBvbmVudCA9PT0gJycpIHsgY29udGludWU7IH1cblxuICAgIGlmIChpID4gMCkge1xuICAgICAgLy8gUmVtb3ZpbmcgdGhlIHN0YXJ0aW5nIHNsYXNoZXMgZm9yIGVhY2ggY29tcG9uZW50IGJ1dCB0aGUgZmlyc3QuXG4gICAgICBjb21wb25lbnQgPSBjb21wb25lbnQucmVwbGFjZSgvXltcXC9dKy8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoaSA8IHBhcnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgIC8vIFJlbW92aW5nIHRoZSBlbmRpbmcgc2xhc2hlcyBmb3IgZWFjaCBjb21wb25lbnQgYnV0IHRoZSBsYXN0LlxuICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50LnJlcGxhY2UoL1tcXC9dKyQvLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZvciB0aGUgbGFzdCBjb21wb25lbnQgd2Ugd2lsbCBjb21iaW5lIG11bHRpcGxlIHNsYXNoZXMgdG8gYSBzaW5nbGUgb25lLlxuICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50LnJlcGxhY2UoL1tcXC9dKyQvLCAnLycpO1xuICAgIH1cblxuICAgIHJlc3VsdEFycmF5LnB1c2goY29tcG9uZW50KTtcbiAgfVxuXG4gIHN0ciA9IHJlc3VsdEFycmF5LmpvaW4oJy8nKTtcbiAgLy8gRWFjaCBpbnB1dCBjb21wb25lbnQgaXMgbm93IHNlcGFyYXRlZCBieSBhIHNpbmdsZSBzbGFzaCBleGNlcHQgdGhlIHBvc3NpYmxlIGZpcnN0IHBsYWluIHByb3RvY29sIHBhcnQuXG5cbiAgLy8gUmVtb3ZlIHRyYWlsaW5nIHNsYXNoIGJlZm9yZSBwYXJhbWV0ZXJzIG9yIGhhc2guXG4gIHN0ciA9IHN0ci5yZXBsYWNlKC9cXC8oXFw/fCZ8I1teIV0pL2csICckMScpO1xuXG4gIC8vIFJlcGxhY2UgPyBpbiBwYXJhbWV0ZXJzIHdpdGggJi5cbiAgY29uc3QgdXJsUGFydHMgPSBzdHIuc3BsaXQoJz8nKTtcbiAgc3RyID0gdXJsUGFydHMuc2hpZnQoKSArICh1cmxQYXJ0cy5sZW5ndGggPiAwID8gJz8nIDogJycpICsgdXJsUGFydHMuam9pbignJicpO1xuXG4gIHJldHVybiBzdHI7XG59XG4iXX0=