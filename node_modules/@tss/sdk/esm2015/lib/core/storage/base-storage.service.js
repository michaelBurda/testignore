/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { getByteSize } from './get-byte-size.function';
import { formatByteSize } from './format-byte-size.function';
import * as i0 from "@angular/core";
/**
 * @abstract
 */
export class BaseStorage {
    constructor() {
        this.keyPrefix = '';
        this.keySuffix = '';
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        return Boolean(this.get(key));
    }
    /**
     * Returns the number of bytes for this storage key.
     * @param {?} key
     * @return {?}
     */
    size(key) {
        /** @type {?} */
        const value = this.get(key);
        return getByteSize(value) + getByteSize(key);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    sizeFormatted(key) {
        return formatByteSize(this.size(key));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getObject(key) {
        /** @type {?} */
        const value = this.get(key);
        return value ? JSON.parse(value) : null;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setObject(key, value) {
        this.set(key, JSON.stringify(value));
    }
    /**
     * @protected
     * @param {?} key
     * @return {?}
     */
    formatKey(key) {
        return `${this.keyPrefix}${key}${this.keySuffix}`;
    }
}
BaseStorage.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ BaseStorage.ngInjectableDef = i0.defineInjectable({ factory: function BaseStorage_Factory() { return new BaseStorage(); }, token: BaseStorage, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseStorage.prototype.keyPrefix;
    /**
     * @type {?}
     * @protected
     */
    BaseStorage.prototype.keySuffix;
    /** @type {?} */
    BaseStorage.prototype.length;
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    BaseStorage.prototype.get = function (key) { };
    /**
     * @abstract
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    BaseStorage.prototype.set = function (key, value) { };
    /**
     * @abstract
     * @param {?} key
     * @return {?}
     */
    BaseStorage.prototype.remove = function (key) { };
    /**
     * @abstract
     * @return {?}
     */
    BaseStorage.prototype.clear = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3N0b3JhZ2UvYmFzZS1zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7Ozs7O0FBTTdELE1BQU0sT0FBZ0IsV0FBVztJQUhqQztRQUlZLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFDZixjQUFTLEdBQUcsRUFBRSxDQUFDO0tBb0MxQjs7Ozs7SUE1QkMsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBS0QsSUFBSSxDQUFDLEdBQVc7O2NBQ1IsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQzNCLE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxHQUFXO1FBQ3ZCLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELFNBQVMsQ0FBQyxHQUFXOztjQUNiLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztRQUMzQixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFDLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxHQUFXLEVBQUUsS0FBVTtRQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7O0lBRVMsU0FBUyxDQUFDLEdBQVc7UUFDN0IsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNwRCxDQUFDOzs7WUF4Q0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7OztJQUVDLGdDQUF5Qjs7Ozs7SUFDekIsZ0NBQXlCOztJQUV6Qiw2QkFBd0I7Ozs7OztJQUN4QiwrQ0FBa0M7Ozs7Ozs7SUFDbEMsc0RBQStDOzs7Ozs7SUFDL0Msa0RBQW1DOzs7OztJQUNuQyw4Q0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZ2V0Qnl0ZVNpemUgfSBmcm9tICcuL2dldC1ieXRlLXNpemUuZnVuY3Rpb24nO1xuaW1wb3J0IHsgZm9ybWF0Qnl0ZVNpemUgfSBmcm9tICcuL2Zvcm1hdC1ieXRlLXNpemUuZnVuY3Rpb24nO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VTdG9yYWdlIHtcbiAgcHJvdGVjdGVkIGtleVByZWZpeCA9ICcnO1xuICBwcm90ZWN0ZWQga2V5U3VmZml4ID0gJyc7XG5cbiAgYWJzdHJhY3QgbGVuZ3RoOiBudW1iZXI7XG4gIGFic3RyYWN0IGdldChrZXk6IHN0cmluZyk6IHN0cmluZztcbiAgYWJzdHJhY3Qgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgcmVtb3ZlKGtleTogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgY2xlYXIoKTogdm9pZDtcblxuICBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldChrZXkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgYnl0ZXMgZm9yIHRoaXMgc3RvcmFnZSBrZXkuXG4gICAqL1xuICBzaXplKGtleTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGdldEJ5dGVTaXplKHZhbHVlKSArIGdldEJ5dGVTaXplKGtleSk7XG4gIH1cblxuICBzaXplRm9ybWF0dGVkKGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gZm9ybWF0Qnl0ZVNpemUodGhpcy5zaXplKGtleSkpO1xuICB9XG5cbiAgZ2V0T2JqZWN0KGtleTogc3RyaW5nKTogYW55IHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiBudWxsO1xuICB9XG5cbiAgc2V0T2JqZWN0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgdGhpcy5zZXQoa2V5LCBKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGZvcm1hdEtleShrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMua2V5UHJlZml4fSR7a2V5fSR7dGhpcy5rZXlTdWZmaXh9YDtcbiAgfVxufVxuIl19