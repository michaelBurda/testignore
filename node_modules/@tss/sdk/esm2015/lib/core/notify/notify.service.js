/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { CoreConfig } from '../core.config';
import { NotifyType } from './notify-type';
import { Logger } from '../logging/logger.service';
import { NotificationSubscriptionTracker } from './notification-subscription-tracker';
import { NotificationPromiseTracker } from './notification-promise-tracker';
import { format } from '../formatting/format.function';
import * as i0 from "@angular/core";
import * as i1 from "../core.config";
import * as i2 from "../logging/logger.service";
/**
 * Notification service.
 */
export class NotifyService {
    /**
     * @param {?} config
     * @param {?} log
     */
    constructor(config, log) {
        this.config = config;
        this.log = log;
    }
    /**
     * @param {?} type
     * @param {?} message
     * @param {?} title
     * @param {?=} config
     * @return {?}
     */
    notify(type, message, title, config) {
        // Add actual notification implementation here.
        return {};
    }
    /**
     * @param {?=} notifyId
     * @param {?=} containerId
     * @return {?}
     */
    clear(notifyId, containerId) {
    }
    /**
     * @template T
     * @param {?} source
     * @return {?}
     */
    with(source) {
        return new NotificationSubscriptionTracker(source, this, this.log);
    }
    /**
     * @template T
     * @param {?} source
     * @return {?}
     */
    promise(source) {
        return new NotificationPromiseTracker(source, this, this.log);
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    wait(message, title = this.config.defaultNotifyWaitMsg, config) {
        return this.notify(NotifyType.Wait, message, title, config);
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    success(message, title = this.config.defaultNotifySuccessMsg, config) {
        return this.notify(NotifyType.Success, message, title, config);
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} error
     * @param {?=} config
     * @return {?}
     */
    error(message, title = this.config.defaultNotifyErrorMsg, error = null, config) {
        return this.notify(NotifyType.Error, format(message, { error }), title, config);
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} error
     * @param {?=} config
     * @return {?}
     */
    warn(message, title = this.config.defaultNotifyWarnMsg, error = null, config) {
        return this.notify(NotifyType.Warn, format(message, { error }), title, config);
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    info(message, title = this.config.defaultNotifyInfoMsg, config) {
        return this.notify(NotifyType.Info, message, title, config);
    }
}
NotifyService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
NotifyService.ctorParameters = () => [
    { type: CoreConfig },
    { type: Logger }
];
/** @nocollapse */ NotifyService.ngInjectableDef = i0.defineInjectable({ factory: function NotifyService_Factory() { return new NotifyService(i0.inject(i1.CoreConfig), i0.inject(i2.Logger)); }, token: NotifyService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NotifyService.prototype.config;
    /**
     * @type {?}
     * @protected
     */
    NotifyService.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL25vdGlmeS9ub3RpZnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU1RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7Ozs7QUFPdkQsTUFBTSxPQUFPLGFBQWE7Ozs7O0lBQ3hCLFlBQXNCLE1BQWtCLEVBQVksR0FBVztRQUF6QyxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQVksUUFBRyxHQUFILEdBQUcsQ0FBUTtJQUMvRCxDQUFDOzs7Ozs7OztJQUVELE1BQU0sQ0FBQyxJQUFnQixFQUFFLE9BQWUsRUFBRSxLQUFhLEVBQUUsTUFBWTtRQUNuRSwrQ0FBK0M7UUFDL0MsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7Ozs7SUFFRCxLQUFLLENBQUMsUUFBaUIsRUFBRSxXQUFvQjtJQUM3QyxDQUFDOzs7Ozs7SUFFRCxJQUFJLENBQUksTUFBcUI7UUFDM0IsT0FBTyxJQUFJLCtCQUErQixDQUFJLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7Ozs7OztJQUVELE9BQU8sQ0FBSSxNQUFrQjtRQUMzQixPQUFPLElBQUksMEJBQTBCLENBQUksTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7Ozs7OztJQUVELElBQUksQ0FBQyxPQUFlLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsTUFBWTtRQUMxRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzlELENBQUM7Ozs7Ozs7SUFFRCxPQUFPLENBQUMsT0FBZSxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLE1BQVk7UUFDaEYsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7OztJQUVELEtBQUssQ0FBQyxPQUFlLEVBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCLEVBQUUsUUFBYSxJQUFJLEVBQUUsTUFBWTtRQUMvRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEYsQ0FBQzs7Ozs7Ozs7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLFFBQWEsSUFBSSxFQUFFLE1BQVk7UUFDN0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Ozs7Ozs7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLE1BQVk7UUFDMUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7WUF2Q0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztZQWJ6QixVQUFVO1lBR1YsTUFBTTs7Ozs7Ozs7SUFZRCwrQkFBNEI7Ozs7O0lBQUUsNEJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gM3JkIHBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBDb3JlQ29uZmlnIH0gZnJvbSAnLi4vY29yZS5jb25maWcnO1xuaW1wb3J0IHsgTm90aWZ5VHlwZSB9IGZyb20gJy4vbm90aWZ5LXR5cGUnO1xuaW1wb3J0IHsgTm90aWZ5IH0gZnJvbSAnLi9ub3RpZnknO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyIH0gZnJvbSAnLi9ub3RpZmljYXRpb24tc3Vic2NyaXB0aW9uLXRyYWNrZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uUHJvbWlzZVRyYWNrZXIgfSBmcm9tICcuL25vdGlmaWNhdGlvbi1wcm9taXNlLXRyYWNrZXInO1xuaW1wb3J0IHsgTm90aWZ5UmVzcG9uc2UgfSBmcm9tICcuL25vdGlmeS1yZXNwb25zZSc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICcuLi9mb3JtYXR0aW5nL2Zvcm1hdC5mdW5jdGlvbic7XG5cblxuLyoqXG4gKiBOb3RpZmljYXRpb24gc2VydmljZS5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBOb3RpZnlTZXJ2aWNlIGltcGxlbWVudHMgTm90aWZ5IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGNvbmZpZzogQ29yZUNvbmZpZywgcHJvdGVjdGVkIGxvZzogTG9nZ2VyKSB7XG4gIH1cblxuICBub3RpZnkodHlwZTogTm90aWZ5VHlwZSwgbWVzc2FnZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCBjb25maWc/OiBhbnkpOiBOb3RpZnlSZXNwb25zZSB7XG4gICAgLy8gQWRkIGFjdHVhbCBub3RpZmljYXRpb24gaW1wbGVtZW50YXRpb24gaGVyZS5cbiAgICByZXR1cm4ge307XG4gIH1cblxuICBjbGVhcihub3RpZnlJZD86IHN0cmluZywgY29udGFpbmVySWQ/OiBzdHJpbmcpOiB2b2lkIHtcbiAgfVxuXG4gIHdpdGg8VD4oc291cmNlOiBPYnNlcnZhYmxlPFQ+KTogTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHJhY2tlcjxUPiB7XG4gICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyPFQ+KHNvdXJjZSwgdGhpcywgdGhpcy5sb2cpO1xuICB9XG5cbiAgcHJvbWlzZTxUPihzb3VyY2U6IFByb21pc2U8VD4pOiBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPiB7XG4gICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPihzb3VyY2UsIHRoaXMsIHRoaXMubG9nKTtcbiAgfVxuXG4gIHdhaXQobWVzc2FnZTogc3RyaW5nLCB0aXRsZSA9IHRoaXMuY29uZmlnLmRlZmF1bHROb3RpZnlXYWl0TXNnLCBjb25maWc/OiBhbnkpOiBOb3RpZnlSZXNwb25zZSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5KE5vdGlmeVR5cGUuV2FpdCwgbWVzc2FnZSwgdGl0bGUsIGNvbmZpZyk7XG4gIH1cblxuICBzdWNjZXNzKG1lc3NhZ2U6IHN0cmluZywgdGl0bGUgPSB0aGlzLmNvbmZpZy5kZWZhdWx0Tm90aWZ5U3VjY2Vzc01zZywgY29uZmlnPzogYW55KTogTm90aWZ5UmVzcG9uc2Uge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeShOb3RpZnlUeXBlLlN1Y2Nlc3MsIG1lc3NhZ2UsIHRpdGxlLCBjb25maWcpO1xuICB9XG5cbiAgZXJyb3IobWVzc2FnZTogc3RyaW5nLCB0aXRsZSA9IHRoaXMuY29uZmlnLmRlZmF1bHROb3RpZnlFcnJvck1zZywgZXJyb3I6IGFueSA9IG51bGwsIGNvbmZpZz86IGFueSk6IE5vdGlmeVJlc3BvbnNlIHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnkoTm90aWZ5VHlwZS5FcnJvciwgZm9ybWF0KG1lc3NhZ2UsIHsgZXJyb3IgfSksIHRpdGxlLCBjb25maWcpO1xuICB9XG5cbiAgd2FybihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlID0gdGhpcy5jb25maWcuZGVmYXVsdE5vdGlmeVdhcm5Nc2csIGVycm9yOiBhbnkgPSBudWxsLCBjb25maWc/OiBhbnkpOiBOb3RpZnlSZXNwb25zZSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5KE5vdGlmeVR5cGUuV2FybiwgZm9ybWF0KG1lc3NhZ2UsIHsgZXJyb3IgfSksIHRpdGxlLCBjb25maWcpO1xuICB9XG5cbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIHRpdGxlID0gdGhpcy5jb25maWcuZGVmYXVsdE5vdGlmeUluZm9Nc2csIGNvbmZpZz86IGFueSk6IE5vdGlmeVJlc3BvbnNlIHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnkoTm90aWZ5VHlwZS5JbmZvLCBtZXNzYWdlLCB0aXRsZSwgY29uZmlnKTtcbiAgfVxufVxuIl19