/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BaseNotificationTracker } from './base-notification-tracker';
/**
 * @template T
 */
export class NotificationPromiseTracker extends BaseNotificationTracker {
    /**
     * @param {?} source
     * @param {?} notify
     * @param {?=} log
     * @param {?=} config
     */
    constructor(source, notify, log, config = {}) {
        super(notify, log, config);
        this.source = source;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @return {?}
     */
    wait(message, title) {
        super.wait(message, title);
        this.source = this.source
            .then((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.onSuccess(result);
            return result;
        }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.onFail(error);
            throw error;
        }));
        return this;
    }
    /**
     * @param {?} predicate
     * @param {?} message
     * @param {?=} title
     * @return {?}
     */
    waitIf(predicate, message, title) {
        return (/** @type {?} */ (super.waitIf(predicate, message, title)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @return {?}
     */
    success(message, title) {
        return (/** @type {?} */ (super.success(message, title)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @return {?}
     */
    error(message, title) {
        return (/** @type {?} */ (super.error(message, title)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @return {?}
     */
    warn(message, title) {
        return (/** @type {?} */ (super.warn(message, title)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @return {?}
     */
    info(message, title) {
        return (/** @type {?} */ (super.info(message, title)));
    }
    /**
     * @param {?} onDone
     * @return {?}
     */
    finally(onDone) {
        return (/** @type {?} */ (super.finally(onDone)));
    }
    /**
     * @param {?=} onfulfilled
     * @return {?}
     */
    then(onfulfilled) {
        return this.source.then(onfulfilled);
    }
    /**
     * @param {?=} onrejected
     * @return {?}
     */
    catch(onrejected) {
        return this.source.catch(onrejected);
    }
}
if (false) {
    /** @type {?} */
    NotificationPromiseTracker.prototype.source;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXByb21pc2UtdHJhY2tlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvbm90aWZ5L25vdGlmaWNhdGlvbi1wcm9taXNlLXRyYWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7O0FBSXRFLE1BQU0sT0FBTywwQkFBOEIsU0FBUSx1QkFBMEI7Ozs7Ozs7SUFDM0UsWUFBbUIsTUFBa0IsRUFBRSxNQUFxQixFQUFFLEdBQVksRUFBRSxTQUE2QixFQUFFO1FBQ3pHLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRFYsV0FBTSxHQUFOLE1BQU0sQ0FBWTtJQUVyQyxDQUFDOzs7Ozs7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLEtBQWM7UUFDbEMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTTthQUN0QixJQUFJOzs7O1FBQUMsQ0FBQyxNQUFTLEVBQUUsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsRUFBQzthQUNELEtBQUs7Ozs7UUFBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkIsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDLEVBQUMsQ0FBQztRQUNMLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7OztJQUVELE1BQU0sQ0FBQyxTQUFvQyxFQUFFLE9BQWUsRUFBRSxLQUFjO1FBQzFFLE9BQU8sbUJBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFpQyxDQUFDO0lBQ2xGLENBQUM7Ozs7OztJQUVELE9BQU8sQ0FBQyxPQUFlLEVBQUUsS0FBYztRQUNyQyxPQUFPLG1CQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFpQyxDQUFDO0lBQ3hFLENBQUM7Ozs7OztJQUVELEtBQUssQ0FBQyxPQUFlLEVBQUUsS0FBYztRQUNuQyxPQUFPLG1CQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFpQyxDQUFDO0lBQ3RFLENBQUM7Ozs7OztJQUVELElBQUksQ0FBQyxPQUFlLEVBQUUsS0FBYztRQUNsQyxPQUFPLG1CQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFpQyxDQUFDO0lBQ3JFLENBQUM7Ozs7OztJQUVELElBQUksQ0FBQyxPQUFlLEVBQUUsS0FBYztRQUNsQyxPQUFPLG1CQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxFQUFpQyxDQUFDO0lBQ3JFLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLE1BQThEO1FBQ3BFLE9BQU8sbUJBQUEsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBaUMsQ0FBQztJQUNoRSxDQUFDOzs7OztJQUVELElBQUksQ0FBQyxXQUFtRTtRQUN0RSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLFVBQXFFO1FBQ3pFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGOzs7SUFqRGEsNENBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90aWZ5U2VydmljZSB9IGZyb20gJy4vbm90aWZ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBCYXNlTm90aWZpY2F0aW9uVHJhY2tlciB9IGZyb20gJy4vYmFzZS1ub3RpZmljYXRpb24tdHJhY2tlcic7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25Db25maWcgfSBmcm9tICcuL25vdGlmaWNhdGlvbi1jb25maWcnO1xuXG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPiBleHRlbmRzIEJhc2VOb3RpZmljYXRpb25UcmFja2VyPFQ+IHtcbiAgY29uc3RydWN0b3IocHVibGljIHNvdXJjZTogUHJvbWlzZTxUPiwgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLCBsb2c/OiBMb2dnZXIsIGNvbmZpZzogTm90aWZpY2F0aW9uQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcihub3RpZnksIGxvZywgY29uZmlnKTtcbiAgfVxuXG4gIHdhaXQobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZyk6IE5vdGlmaWNhdGlvblByb21pc2VUcmFja2VyPFQ+IHtcbiAgICBzdXBlci53YWl0KG1lc3NhZ2UsIHRpdGxlKTtcbiAgICB0aGlzLnNvdXJjZSA9IHRoaXMuc291cmNlXG4gICAgICAudGhlbigocmVzdWx0OiBUKSA9PiB7XG4gICAgICAgIHRoaXMub25TdWNjZXNzKHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiB7XG4gICAgICAgIHRoaXMub25GYWlsKGVycm9yKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHdhaXRJZihwcmVkaWNhdGU6IGJvb2xlYW4gfCAoKCkgPT4gYm9vbGVhbiksIG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpOiBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPiB7XG4gICAgcmV0dXJuIHN1cGVyLndhaXRJZihwcmVkaWNhdGUsIG1lc3NhZ2UsIHRpdGxlKSBhcyBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPjtcbiAgfVxuXG4gIHN1Y2Nlc3MobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZyk6IE5vdGlmaWNhdGlvblByb21pc2VUcmFja2VyPFQ+IHtcbiAgICByZXR1cm4gc3VwZXIuc3VjY2VzcyhtZXNzYWdlLCB0aXRsZSkgYXMgTm90aWZpY2F0aW9uUHJvbWlzZVRyYWNrZXI8VD47XG4gIH1cblxuICBlcnJvcihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKTogTm90aWZpY2F0aW9uUHJvbWlzZVRyYWNrZXI8VD4ge1xuICAgIHJldHVybiBzdXBlci5lcnJvcihtZXNzYWdlLCB0aXRsZSkgYXMgTm90aWZpY2F0aW9uUHJvbWlzZVRyYWNrZXI8VD47XG4gIH1cblxuICB3YXJuKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcpOiBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPiB7XG4gICAgcmV0dXJuIHN1cGVyLndhcm4obWVzc2FnZSwgdGl0bGUpIGFzIE5vdGlmaWNhdGlvblByb21pc2VUcmFja2VyPFQ+O1xuICB9XG5cbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nKTogTm90aWZpY2F0aW9uUHJvbWlzZVRyYWNrZXI8VD4ge1xuICAgIHJldHVybiBzdXBlci5pbmZvKG1lc3NhZ2UsIHRpdGxlKSBhcyBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPjtcbiAgfVxuXG4gIGZpbmFsbHkob25Eb25lOiAodmFsdWU6IFQgfCB1bmRlZmluZWQgfCBudWxsIHwgUHJvbWlzZUxpa2U8VD4pID0+IHZvaWQpOiBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPiB7XG4gICAgcmV0dXJuIHN1cGVyLmZpbmFsbHkob25Eb25lKSBhcyBOb3RpZmljYXRpb25Qcm9taXNlVHJhY2tlcjxUPjtcbiAgfVxuXG4gIHRoZW4ob25mdWxmaWxsZWQ/OiAoKHZhbHVlOiBUKSA9PiBUIHwgUHJvbWlzZUxpa2U8VD4pIHwgdW5kZWZpbmVkIHwgbnVsbCk6IFByb21pc2U8VD4ge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS50aGVuKG9uZnVsZmlsbGVkKTtcbiAgfVxuXG4gIGNhdGNoKG9ucmVqZWN0ZWQ/OiAoKHJlYXNvbjogYW55KSA9PiBUIHwgUHJvbWlzZUxpa2U8VD4pIHwgdW5kZWZpbmVkIHwgbnVsbCk6IFByb21pc2U8VD4ge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5jYXRjaChvbnJlamVjdGVkKTtcbiAgfVxufVxuIl19