/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { tap, publishReplay } from 'rxjs/operators';
import { BaseNotificationTracker } from './base-notification-tracker';
/**
 * @template T
 */
export class NotificationSubscriptionTracker extends BaseNotificationTracker {
    /**
     * @param {?} source
     * @param {?} notify
     * @param {?=} log
     * @param {?=} config
     */
    constructor(source, notify, log, config = {}) {
        super(notify, log, config);
        this.source = source;
        // We need to do a timeout here so that the chained events coming in after this method will be fired
        // before this subscription is added - this is necessary for any synchronous/immediate observables.
        this.source = this.source.pipe(tap((/**
         * @param {?} x
         * @return {?}
         */
        (x) => {
            setTimeout((/**
             * @return {?}
             */
            () => this.onSuccess(x)));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            setTimeout((/**
             * @return {?}
             */
            () => this.onFail(error)));
        })));
        if (this.config.useSingletonSubscriptionEmission) {
            this.source = this.source.pipe(publishReplay());
        }
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    wait(message, title, config) {
        return (/** @type {?} */ (super.wait(message, title, config)));
    }
    /**
     * @param {?} predicate
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    waitIf(predicate, message, title, config) {
        return (/** @type {?} */ (super.waitIf(predicate, message, title, config)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    success(message, title, config) {
        return (/** @type {?} */ (super.success(message, title, config)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    error(message, title, config) {
        return (/** @type {?} */ (super.error(message, title, config)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    warn(message, title, config) {
        return (/** @type {?} */ (super.warn(message, title, config)));
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    info(message, title, config) {
        return (/** @type {?} */ (super.info(message, title, config)));
    }
    /**
     * @param {?} onDone
     * @return {?}
     */
    finally(onDone) {
        return (/** @type {?} */ (super.finally(onDone)));
    }
    /**
     * @param {?=} next
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    subscribe(next, error, complete) {
        return this.source.subscribe(next, error, complete);
    }
}
if (false) {
    /** @type {?} */
    NotificationSubscriptionTracker.prototype.source;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLXN1YnNjcmlwdGlvbi10cmFja2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY29yZS9ub3RpZnkvbm90aWZpY2F0aW9uLXN1YnNjcmlwdGlvbi10cmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXBELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOzs7O0FBSXRFLE1BQU0sT0FBTywrQkFBbUMsU0FBUSx1QkFBMEI7Ozs7Ozs7SUFDaEYsWUFBbUIsTUFBcUIsRUFBRSxNQUFxQixFQUFFLEdBQVksRUFBRSxTQUE2QixFQUFFO1FBQzVHLEtBQUssQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRFYsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUd0QyxvR0FBb0c7UUFDcEcsbUdBQW1HO1FBQ25HLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzVCLEdBQUc7Ozs7UUFBQyxDQUFDLENBQUksRUFBRSxFQUFFO1lBQ1gsVUFBVTs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDO1FBQ3RDLENBQUM7Ozs7UUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2hCLFVBQVU7OztZQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztRQUN2QyxDQUFDLEVBQUMsQ0FDSCxDQUFDO1FBRUYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxFQUFFO1lBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUM7Ozs7Ozs7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLEtBQWMsRUFBRSxNQUFZO1FBQ2hELE9BQU8sbUJBQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFzQyxDQUFDO0lBQ2xGLENBQUM7Ozs7Ozs7O0lBRUQsTUFBTSxDQUFDLFNBQW9DLEVBQUUsT0FBZSxFQUFFLEtBQWMsRUFBRSxNQUFZO1FBQ3hGLE9BQU8sbUJBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBc0MsQ0FBQztJQUMvRixDQUFDOzs7Ozs7O0lBRUQsT0FBTyxDQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsTUFBWTtRQUNuRCxPQUFPLG1CQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBc0MsQ0FBQztJQUNyRixDQUFDOzs7Ozs7O0lBRUQsS0FBSyxDQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsTUFBWTtRQUNqRCxPQUFPLG1CQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBc0MsQ0FBQztJQUNuRixDQUFDOzs7Ozs7O0lBRUQsSUFBSSxDQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsTUFBWTtRQUNoRCxPQUFPLG1CQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBc0MsQ0FBQztJQUNsRixDQUFDOzs7Ozs7O0lBRUQsSUFBSSxDQUFDLE9BQWUsRUFBRSxLQUFjLEVBQUUsTUFBWTtRQUNoRCxPQUFPLG1CQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBc0MsQ0FBQztJQUNsRixDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxNQUE4RDtRQUNwRSxPQUFPLG1CQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQXNDLENBQUM7SUFDckUsQ0FBQzs7Ozs7OztJQUVELFNBQVMsQ0FBQyxJQUF5QixFQUFFLEtBQTRCLEVBQUUsUUFBcUI7UUFDdEYsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRjs7O0lBakRhLGlEQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBwdWJsaXNoUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi9ub3RpZnkuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VOb3RpZmljYXRpb25UcmFja2VyIH0gZnJvbSAnLi9iYXNlLW5vdGlmaWNhdGlvbi10cmFja2VyJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkNvbmZpZyB9IGZyb20gJy4vbm90aWZpY2F0aW9uLWNvbmZpZyc7XG5cblxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblRyYWNrZXI8VD4gZXh0ZW5kcyBCYXNlTm90aWZpY2F0aW9uVHJhY2tlcjxUPiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzb3VyY2U6IE9ic2VydmFibGU8VD4sIG5vdGlmeTogTm90aWZ5U2VydmljZSwgbG9nPzogTG9nZ2VyLCBjb25maWc6IE5vdGlmaWNhdGlvbkNvbmZpZyA9IHt9KSB7XG4gICAgc3VwZXIobm90aWZ5LCBsb2csIGNvbmZpZyk7XG5cbiAgICAvLyBXZSBuZWVkIHRvIGRvIGEgdGltZW91dCBoZXJlIHNvIHRoYXQgdGhlIGNoYWluZWQgZXZlbnRzIGNvbWluZyBpbiBhZnRlciB0aGlzIG1ldGhvZCB3aWxsIGJlIGZpcmVkXG4gICAgLy8gYmVmb3JlIHRoaXMgc3Vic2NyaXB0aW9uIGlzIGFkZGVkIC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGFueSBzeW5jaHJvbm91cy9pbW1lZGlhdGUgb2JzZXJ2YWJsZXMuXG4gICAgdGhpcy5zb3VyY2UgPSB0aGlzLnNvdXJjZS5waXBlKFxuICAgICAgdGFwKCh4OiBUKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5vblN1Y2Nlc3MoeCkpO1xuICAgICAgfSwgKGVycm9yOiBhbnkpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm9uRmFpbChlcnJvcikpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLnVzZVNpbmdsZXRvblN1YnNjcmlwdGlvbkVtaXNzaW9uKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IHRoaXMuc291cmNlLnBpcGUocHVibGlzaFJlcGxheSgpKTtcbiAgICB9XG4gIH1cblxuICB3YWl0KG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGNvbmZpZz86IGFueSk6IE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblRyYWNrZXI8VD4ge1xuICAgIHJldHVybiBzdXBlci53YWl0KG1lc3NhZ2UsIHRpdGxlLCBjb25maWcpIGFzIE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblRyYWNrZXI8VD47XG4gIH1cblxuICB3YWl0SWYocHJlZGljYXRlOiBib29sZWFuIHwgKCgpID0+IGJvb2xlYW4pLCBtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBjb25maWc/OiBhbnkpOiBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyPFQ+IHtcbiAgICByZXR1cm4gc3VwZXIud2FpdElmKHByZWRpY2F0ZSwgbWVzc2FnZSwgdGl0bGUsIGNvbmZpZykgYXMgTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHJhY2tlcjxUPjtcbiAgfVxuXG4gIHN1Y2Nlc3MobWVzc2FnZTogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgY29uZmlnPzogYW55KTogTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHJhY2tlcjxUPiB7XG4gICAgcmV0dXJuIHN1cGVyLnN1Y2Nlc3MobWVzc2FnZSwgdGl0bGUsIGNvbmZpZykgYXMgTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHJhY2tlcjxUPjtcbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGNvbmZpZz86IGFueSk6IE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblRyYWNrZXI8VD4ge1xuICAgIHJldHVybiBzdXBlci5lcnJvcihtZXNzYWdlLCB0aXRsZSwgY29uZmlnKSBhcyBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyPFQ+O1xuICB9XG5cbiAgd2FybihtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBjb25maWc/OiBhbnkpOiBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyPFQ+IHtcbiAgICByZXR1cm4gc3VwZXIud2FybihtZXNzYWdlLCB0aXRsZSwgY29uZmlnKSBhcyBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyPFQ+O1xuICB9XG5cbiAgaW5mbyhtZXNzYWdlOiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBjb25maWc/OiBhbnkpOiBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyPFQ+IHtcbiAgICByZXR1cm4gc3VwZXIuaW5mbyhtZXNzYWdlLCB0aXRsZSwgY29uZmlnKSBhcyBOb3RpZmljYXRpb25TdWJzY3JpcHRpb25UcmFja2VyPFQ+O1xuICB9XG5cbiAgZmluYWxseShvbkRvbmU6ICh2YWx1ZTogVCB8IHVuZGVmaW5lZCB8IG51bGwgfCBQcm9taXNlTGlrZTxUPikgPT4gdm9pZCk6IE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblRyYWNrZXI8VD4ge1xuICAgIHJldHVybiBzdXBlci5maW5hbGx5KG9uRG9uZSkgYXMgTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHJhY2tlcjxUPjtcbiAgfVxuXG4gIHN1YnNjcmliZShuZXh0PzogKHZhbHVlOiBUKSA9PiB2b2lkLCBlcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZT86ICgpID0+IHZvaWQpOiBTdWJzY3JpcHRpb24ge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZS5zdWJzY3JpYmUobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgfVxufVxuIl19