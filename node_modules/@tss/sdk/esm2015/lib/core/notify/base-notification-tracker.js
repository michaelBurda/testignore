/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isFunction } from '../type-check/is-function.function';
import { errorMsg } from '../error/error-msg.function';
/**
 * @abstract
 * @template T
 */
export class BaseNotificationTracker {
    /**
     * @param {?} notify
     * @param {?=} log
     * @param {?=} config
     */
    constructor(notify, log, config = { logErrors: true }) {
        this.notify = notify;
        this.log = log;
        this.config = config;
        this.eventWatchers = [];
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    wait(message, title, config) {
        this.waitResponse = this.notify.wait(message, title, config);
        // This method needs implemented in each implementation.
        this.emit('wait');
        return this;
    }
    /**
     * @param {?} predicate
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    waitIf(predicate, message, title, config) {
        /** @type {?} */
        const doWait = isFunction(predicate)
            ? ((/** @type {?} */ (predicate)))()
            : Boolean(predicate);
        return doWait ? this.wait(message, title, config) : this;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    success(message, title, config) {
        this.config.showSuccess = true;
        this.config.successMsg = message;
        this.config.successTitle = title;
        this.config.successConfiguration = config;
        this.emit('success');
        return this;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    error(message, title, config) {
        this.config.showError = true;
        this.config.errorMsg = message;
        this.config.errorTitle = title;
        this.config.errorConfiguration = config;
        this.emit('error');
        return this;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    warn(message, title, config) {
        this.config.showWarn = true;
        this.config.warnMsg = message;
        this.config.warnTitle = title;
        this.config.warnConfiguration = config;
        this.emit('warn');
        return this;
    }
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    info(message, title, config) {
        this.config.showInfo = true;
        this.config.infoMsg = message;
        this.config.infoTitle = title;
        this.config.infoConfiguration = config;
        this.emit('info');
        return this;
    }
    /**
     * @param {?} onDone
     * @return {?}
     */
    finally(onDone) {
        this.onDone = onDone;
        this.emit('finally');
        return this;
    }
    /**
     * @param {?} eventType
     * @param {?} callback
     * @return {?}
     */
    on(eventType, callback) {
        this.eventWatchers.push({ eventType, callback });
    }
    /**
     * @protected
     * @param {?} eventType
     * @param {?=} event
     * @return {?}
     */
    emit(eventType, event) {
        this.eventWatchers
            .filter((/**
         * @param {?} watcher
         * @return {?}
         */
        watcher => watcher.eventType === eventType))
            .forEach((/**
         * @param {?} watcher
         * @return {?}
         */
        watcher => watcher.callback(event)));
    }
    /**
     * @protected
     * @param {?=} response
     * @return {?}
     */
    done(response) {
        if (this.waitResponse) {
            this.notify.clear(this.waitResponse.notifyId, this.waitResponse.containerId);
        }
        if (this.onDone) {
            this.onDone(response);
        }
    }
    /**
     * @protected
     * @param {?} response
     * @return {?}
     */
    onSuccess(response) {
        if (this.config.showSuccess) {
            this.notify.success(this.config.successMsg, this.config.successTitle, this.config.successConfiguration);
        }
        if (this.config.showInfo) {
            this.notify.info(this.config.infoMsg, this.config.infoTitle, this.config.infoConfiguration);
        }
        this.done(response);
    }
    /**
     * @protected
     * @param {?} error
     * @return {?}
     */
    onFail(error) {
        /** @type {?} */
        const responseError = (error.error || error) || error;
        /** @type {?} */
        const msg = errorMsg(this.config.errorMsg, responseError);
        if (this.log && this.config.logErrors) {
            this.log.error(msg);
        }
        if (this.config.showError) {
            this.notify.error(msg, this.config.errorTitle, responseError, this.config.errorConfiguration);
        }
        if (this.config.showWarn) {
            this.notify.warn(msg, this.config.infoTitle, this.config.warnConfiguration);
        }
        this.done();
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseNotificationTracker.prototype.onDone;
    /**
     * @type {?}
     * @protected
     */
    BaseNotificationTracker.prototype.waitResponse;
    /**
     * @type {?}
     * @protected
     */
    BaseNotificationTracker.prototype.eventWatchers;
    /**
     * @type {?}
     * @protected
     */
    BaseNotificationTracker.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    BaseNotificationTracker.prototype.log;
    /**
     * @type {?}
     * @protected
     */
    BaseNotificationTracker.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,