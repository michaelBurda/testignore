/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { millisecondsToSeconds } from '../conversion/milliseconds-to-seconds.function';
import { millisecondsToMinutes } from '../conversion/milliseconds-to-minutes.function';
import { millisecondsToHours } from '../conversion/milliseconds-to-hours.function';
import { millisecondsToDays } from '../conversion/milliseconds-to-days.function';
import { MILLISECONDS_PER_SECOND, MILLISECONDS_PER_MINUTE, MILLISECONDS_PER_HOUR, MILLISECONDS_PER_DAY, READABLE_TIME_SUFFIX_MAP } from '../date-time.constants';
/**
 * @param {?} milliseconds
 * @param {?=} suffixMap
 * @return {?}
 */
export function toReadableTime(milliseconds, suffixMap = {}) {
    // TODO: Get rid of magic numbers below - RG.
    /** @type {?} */
    const formatAsMilliseconds = milliseconds < MILLISECONDS_PER_SECOND;
    /** @type {?} */
    const formatAsSeconds = milliseconds < (MILLISECONDS_PER_MINUTE - 1);
    /** @type {?} */
    const formatAsMinutes = milliseconds < (MILLISECONDS_PER_HOUR - 299);
    /** @type {?} */
    const formatAsHours = milliseconds < (MILLISECONDS_PER_DAY - 18000);
    /** @type {?} */
    let value = milliseconds;
    /** @type {?} */
    let unit;
    /** @type {?} */
    let decimalPlaces;
    suffixMap = suffixMap
        ? Object.assign({}, READABLE_TIME_SUFFIX_MAP, suffixMap)
        : READABLE_TIME_SUFFIX_MAP;
    // We assume the milliseconds was passed in.
    if (formatAsMilliseconds) {
        // The time should be shown in milliseconds.
        unit = suffixMap.ms;
        value = milliseconds;
        decimalPlaces = suffixMap.msDecimalPlaces;
    }
    else if (formatAsSeconds) {
        // The time should be shown in seconds.
        /** @type {?} */
        const seconds = millisecondsToSeconds(milliseconds);
        unit = suffixMap.sec;
        value = seconds;
        decimalPlaces = suffixMap.secDecimalPlaces;
    }
    else if (formatAsMinutes) {
        // The time should be shown in in minutes.
        /** @type {?} */
        const minutes = millisecondsToMinutes(milliseconds);
        unit = suffixMap.min;
        value = minutes;
        decimalPlaces = suffixMap.minDecimalPlaces;
    }
    else if (formatAsHours) {
        // The time should be shown in hours.
        /** @type {?} */
        const hours = millisecondsToHours(milliseconds);
        unit = suffixMap.hr;
        value = hours;
        decimalPlaces = suffixMap.hrDecimalPlaces;
    }
    else {
        // The time should be shown in days.
        /** @type {?} */
        const days = millisecondsToDays(milliseconds);
        unit = suffixMap.days;
        value = days;
        decimalPlaces = suffixMap.daysDecimalPlaces;
    }
    /** @type {?} */
    const numberWithStrippedZeros = Number(value.toFixed(decimalPlaces));
    return `${numberWithStrippedZeros} ${unit}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tcmVhZGFibGUtdGltZS5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvZGF0ZS10aW1lL3JlYWRhYmxlL3RvLXJlYWRhYmxlLXRpbWUuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ2pGLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLHFCQUFxQixFQUNyQixvQkFBb0IsRUFDcEIsd0JBQXdCLEVBQ3pCLE1BQU0sd0JBQXdCLENBQUM7Ozs7OztBQUdoQyxNQUFNLFVBQVUsY0FBYyxDQUFDLFlBQW9CLEVBQUUsWUFBaUIsRUFBRTs7O1VBRWhFLG9CQUFvQixHQUFHLFlBQVksR0FBRyx1QkFBdUI7O1VBQzdELGVBQWUsR0FBRyxZQUFZLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLENBQUM7O1VBQzlELGVBQWUsR0FBRyxZQUFZLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUM7O1VBQzlELGFBQWEsR0FBRyxZQUFZLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7O1FBQy9ELEtBQUssR0FBVyxZQUFZOztRQUM1QixJQUFZOztRQUNaLGFBQXFCO0lBRXpCLFNBQVMsR0FBRyxTQUFTO1FBQ25CLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSx3QkFBd0IsRUFBRSxTQUFTLENBQUM7UUFDeEQsQ0FBQyxDQUFDLHdCQUF3QixDQUFDO0lBRTdCLDRDQUE0QztJQUM1QyxJQUFJLG9CQUFvQixFQUFFO1FBQ3hCLDRDQUE0QztRQUM1QyxJQUFJLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUNwQixLQUFLLEdBQUcsWUFBWSxDQUFDO1FBQ3JCLGFBQWEsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDO0tBQzNDO1NBQU0sSUFBSSxlQUFlLEVBQUU7OztjQUVwQixPQUFPLEdBQUcscUJBQXFCLENBQUMsWUFBWSxDQUFDO1FBQ25ELElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDO1FBQ3JCLEtBQUssR0FBRyxPQUFPLENBQUM7UUFDaEIsYUFBYSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztLQUM1QztTQUFNLElBQUksZUFBZSxFQUFFOzs7Y0FFcEIsT0FBTyxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQztRQUNuRCxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUNyQixLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ2hCLGFBQWEsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7S0FDNUM7U0FBTSxJQUFJLGFBQWEsRUFBRTs7O2NBRWxCLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxZQUFZLENBQUM7UUFDL0MsSUFBSSxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUM7UUFDcEIsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNkLGFBQWEsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDO0tBQzNDO1NBQU07OztjQUVDLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDdEIsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNiLGFBQWEsR0FBRyxTQUFTLENBQUMsaUJBQWlCLENBQUM7S0FDN0M7O1VBRUssdUJBQXVCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDcEUsT0FBTyxHQUFHLHVCQUF1QixJQUFJLElBQUksRUFBRSxDQUFDO0FBQzlDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaWxsaXNlY29uZHNUb1NlY29uZHMgfSBmcm9tICcuLi9jb252ZXJzaW9uL21pbGxpc2Vjb25kcy10by1zZWNvbmRzLmZ1bmN0aW9uJztcbmltcG9ydCB7IG1pbGxpc2Vjb25kc1RvTWludXRlcyB9IGZyb20gJy4uL2NvbnZlcnNpb24vbWlsbGlzZWNvbmRzLXRvLW1pbnV0ZXMuZnVuY3Rpb24nO1xuaW1wb3J0IHsgbWlsbGlzZWNvbmRzVG9Ib3VycyB9IGZyb20gJy4uL2NvbnZlcnNpb24vbWlsbGlzZWNvbmRzLXRvLWhvdXJzLmZ1bmN0aW9uJztcbmltcG9ydCB7IG1pbGxpc2Vjb25kc1RvRGF5cyB9IGZyb20gJy4uL2NvbnZlcnNpb24vbWlsbGlzZWNvbmRzLXRvLWRheXMuZnVuY3Rpb24nO1xuaW1wb3J0IHtcbiAgTUlMTElTRUNPTkRTX1BFUl9TRUNPTkQsXG4gIE1JTExJU0VDT05EU19QRVJfTUlOVVRFLFxuICBNSUxMSVNFQ09ORFNfUEVSX0hPVVIsXG4gIE1JTExJU0VDT05EU19QRVJfREFZLFxuICBSRUFEQUJMRV9USU1FX1NVRkZJWF9NQVBcbn0gZnJvbSAnLi4vZGF0ZS10aW1lLmNvbnN0YW50cyc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmVhZGFibGVUaW1lKG1pbGxpc2Vjb25kczogbnVtYmVyLCBzdWZmaXhNYXA6IGFueSA9IHt9KTogc3RyaW5nIHtcbiAgLy8gVE9ETzogR2V0IHJpZCBvZiBtYWdpYyBudW1iZXJzIGJlbG93IC0gUkcuXG4gIGNvbnN0IGZvcm1hdEFzTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzIDwgTUlMTElTRUNPTkRTX1BFUl9TRUNPTkQ7XG4gIGNvbnN0IGZvcm1hdEFzU2Vjb25kcyA9IG1pbGxpc2Vjb25kcyA8IChNSUxMSVNFQ09ORFNfUEVSX01JTlVURSAtIDEpO1xuICBjb25zdCBmb3JtYXRBc01pbnV0ZXMgPSBtaWxsaXNlY29uZHMgPCAoTUlMTElTRUNPTkRTX1BFUl9IT1VSIC0gMjk5KTtcbiAgY29uc3QgZm9ybWF0QXNIb3VycyA9IG1pbGxpc2Vjb25kcyA8IChNSUxMSVNFQ09ORFNfUEVSX0RBWSAtIDE4MDAwKTtcbiAgbGV0IHZhbHVlOiBudW1iZXIgPSBtaWxsaXNlY29uZHM7XG4gIGxldCB1bml0OiBzdHJpbmc7XG4gIGxldCBkZWNpbWFsUGxhY2VzOiBudW1iZXI7XG5cbiAgc3VmZml4TWFwID0gc3VmZml4TWFwXG4gICAgPyBPYmplY3QuYXNzaWduKHt9LCBSRUFEQUJMRV9USU1FX1NVRkZJWF9NQVAsIHN1ZmZpeE1hcClcbiAgICA6IFJFQURBQkxFX1RJTUVfU1VGRklYX01BUDtcblxuICAvLyBXZSBhc3N1bWUgdGhlIG1pbGxpc2Vjb25kcyB3YXMgcGFzc2VkIGluLlxuICBpZiAoZm9ybWF0QXNNaWxsaXNlY29uZHMpIHtcbiAgICAvLyBUaGUgdGltZSBzaG91bGQgYmUgc2hvd24gaW4gbWlsbGlzZWNvbmRzLlxuICAgIHVuaXQgPSBzdWZmaXhNYXAubXM7XG4gICAgdmFsdWUgPSBtaWxsaXNlY29uZHM7XG4gICAgZGVjaW1hbFBsYWNlcyA9IHN1ZmZpeE1hcC5tc0RlY2ltYWxQbGFjZXM7XG4gIH0gZWxzZSBpZiAoZm9ybWF0QXNTZWNvbmRzKSB7XG4gICAgLy8gVGhlIHRpbWUgc2hvdWxkIGJlIHNob3duIGluIHNlY29uZHMuXG4gICAgY29uc3Qgc2Vjb25kcyA9IG1pbGxpc2Vjb25kc1RvU2Vjb25kcyhtaWxsaXNlY29uZHMpO1xuICAgIHVuaXQgPSBzdWZmaXhNYXAuc2VjO1xuICAgIHZhbHVlID0gc2Vjb25kcztcbiAgICBkZWNpbWFsUGxhY2VzID0gc3VmZml4TWFwLnNlY0RlY2ltYWxQbGFjZXM7XG4gIH0gZWxzZSBpZiAoZm9ybWF0QXNNaW51dGVzKSB7XG4gICAgLy8gVGhlIHRpbWUgc2hvdWxkIGJlIHNob3duIGluIGluIG1pbnV0ZXMuXG4gICAgY29uc3QgbWludXRlcyA9IG1pbGxpc2Vjb25kc1RvTWludXRlcyhtaWxsaXNlY29uZHMpO1xuICAgIHVuaXQgPSBzdWZmaXhNYXAubWluO1xuICAgIHZhbHVlID0gbWludXRlcztcbiAgICBkZWNpbWFsUGxhY2VzID0gc3VmZml4TWFwLm1pbkRlY2ltYWxQbGFjZXM7XG4gIH0gZWxzZSBpZiAoZm9ybWF0QXNIb3Vycykge1xuICAgIC8vIFRoZSB0aW1lIHNob3VsZCBiZSBzaG93biBpbiBob3Vycy5cbiAgICBjb25zdCBob3VycyA9IG1pbGxpc2Vjb25kc1RvSG91cnMobWlsbGlzZWNvbmRzKTtcbiAgICB1bml0ID0gc3VmZml4TWFwLmhyO1xuICAgIHZhbHVlID0gaG91cnM7XG4gICAgZGVjaW1hbFBsYWNlcyA9IHN1ZmZpeE1hcC5ockRlY2ltYWxQbGFjZXM7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIHRpbWUgc2hvdWxkIGJlIHNob3duIGluIGRheXMuXG4gICAgY29uc3QgZGF5cyA9IG1pbGxpc2Vjb25kc1RvRGF5cyhtaWxsaXNlY29uZHMpO1xuICAgIHVuaXQgPSBzdWZmaXhNYXAuZGF5cztcbiAgICB2YWx1ZSA9IGRheXM7XG4gICAgZGVjaW1hbFBsYWNlcyA9IHN1ZmZpeE1hcC5kYXlzRGVjaW1hbFBsYWNlcztcbiAgfVxuXG4gIGNvbnN0IG51bWJlcldpdGhTdHJpcHBlZFplcm9zID0gTnVtYmVyKHZhbHVlLnRvRml4ZWQoZGVjaW1hbFBsYWNlcykpO1xuICByZXR1cm4gYCR7bnVtYmVyV2l0aFN0cmlwcGVkWmVyb3N9ICR7dW5pdH1gO1xufVxuIl19