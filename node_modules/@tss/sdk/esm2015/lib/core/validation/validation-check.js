/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ValidationResult } from './validation-results';
/** @type {?} */
let BASE_ID = 1;
/**
 * @template T
 */
export class ValidationCheck {
    /**
     * @param {?} description
     * @param {?=} passCheck
     */
    constructor(description, passCheck) {
        this.subChecks = [];
        this.description = description;
        this.passCheck = passCheck;
        this.id = BASE_ID++;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    hasId(id) {
        this.id = id;
        return this;
    }
    /**
     * @param {?} description
     * @return {?}
     */
    message(description) {
        this.description = description;
        return this;
    }
    /**
     * @param {?=} passCheck
     * @return {?}
     */
    pass(passCheck) {
        this.passCheck = passCheck;
        return this;
    }
    /**
     * @param {?=} failCheck
     * @return {?}
     */
    fail(failCheck) {
        this.failCheck = failCheck;
        return this;
    }
    /**
     * @param {?=} warnCheck
     * @return {?}
     */
    warn(warnCheck) {
        this.warnCheck = warnCheck;
        return this;
    }
    /**
     * @param {?=} onlyIfCheck
     * @return {?}
     */
    onlyIf(onlyIfCheck) {
        this.onlyIfCheck = onlyIfCheck;
        return this;
    }
    /**
     * @param {...?} innerChecks
     * @return {?}
     */
    add(...innerChecks) {
        innerChecks.forEach((/**
         * @param {?} inner
         * @return {?}
         */
        inner => this.subChecks.push(inner)));
        return this;
    }
    /**
     * @param {?} target
     * @return {?}
     */
    check(target) {
        /** @type {?} */
        const result = new ValidationResult();
        if (this.onlyIfCheck && !this.onlyIfCheck(target)) {
            result.skipped = true;
            return result;
        }
        if (this.passCheck) {
            result.passed = this.passCheck(target);
        }
        if (this.failCheck) {
            result.passed = !this.failCheck(target);
        }
        if (this.warnCheck) {
            result.warned = !this.warnCheck(target);
        }
        if (this.subChecks) {
            this.subChecks.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                /** @type {?} */
                const innerResult = c.check(target);
                result.add(innerResult);
            }));
        }
        return result;
    }
}
if (false) {
    /** @type {?} */
    ValidationCheck.prototype.id;
    /** @type {?} */
    ValidationCheck.prototype.description;
    /**
     * @type {?}
     * @private
     */
    ValidationCheck.prototype.subChecks;
    /**
     * @type {?}
     * @private
     */
    ValidationCheck.prototype.passCheck;
    /**
     * @type {?}
     * @private
     */
    ValidationCheck.prototype.failCheck;
    /**
     * @type {?}
     * @private
     */
    ValidationCheck.prototype.warnCheck;
    /**
     * @type {?}
     * @private
     */
    ValidationCheck.prototype.onlyIfCheck;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1jaGVjay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvdmFsaWRhdGlvbi92YWxpZGF0aW9uLWNoZWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7SUFHcEQsT0FBTyxHQUFHLENBQUM7Ozs7QUFFZixNQUFNLE9BQU8sZUFBZTs7Ozs7SUFVMUIsWUFBWSxXQUFtQixFQUFFLFNBQW1DO1FBTjVELGNBQVMsR0FBeUIsRUFBRSxDQUFDO1FBTzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxLQUFLLENBQUMsRUFBVTtRQUNkLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxXQUFtQjtRQUN6QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLFNBQWlDO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFRCxJQUFJLENBQUMsU0FBaUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELElBQUksQ0FBQyxTQUFpQztRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLFdBQW1DO1FBQ3hDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBRyxXQUFpQztRQUN0QyxXQUFXLENBQUMsT0FBTzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztRQUN6RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLE1BQVM7O2NBQ1AsTUFBTSxHQUFHLElBQUksZ0JBQWdCLEVBQUU7UUFFckMsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNqRCxNQUFNLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUN0QixPQUFPLE1BQU0sQ0FBQztTQUNmO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN4QztRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6QztRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLENBQUMsRUFBRTs7c0JBQ25CLFdBQVcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztnQkFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMxQixDQUFDLEVBQUMsQ0FBQztTQUNKO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGOzs7SUEvRUMsNkJBQVc7O0lBQ1gsc0NBQW9COzs7OztJQUVwQixvQ0FBNkM7Ozs7O0lBQzdDLG9DQUEwQzs7Ozs7SUFDMUMsb0NBQTBDOzs7OztJQUMxQyxvQ0FBMEM7Ozs7O0lBQzFDLHNDQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICcuL3ZhbGlkYXRpb24tcmVzdWx0cyc7XG5cblxubGV0IEJBU0VfSUQgPSAxO1xuXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvbkNoZWNrPFQ+IHtcbiAgaWQ6IG51bWJlcjtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcblxuICBwcml2YXRlIHN1YkNoZWNrczogVmFsaWRhdGlvbkNoZWNrPFQ+W10gPSBbXTtcbiAgcHJpdmF0ZSBwYXNzQ2hlY2s/OiAodmFsdWU6IFQpID0+IGJvb2xlYW47XG4gIHByaXZhdGUgZmFpbENoZWNrPzogKHZhbHVlOiBUKSA9PiBib29sZWFuO1xuICBwcml2YXRlIHdhcm5DaGVjaz86ICh2YWx1ZTogVCkgPT4gYm9vbGVhbjtcbiAgcHJpdmF0ZSBvbmx5SWZDaGVjaz86ICh2YWx1ZTogVCkgPT4gYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihkZXNjcmlwdGlvbjogc3RyaW5nLCBwYXNzQ2hlY2s/OiAodmFsdWU6IGFueSkgPT4gYm9vbGVhbikge1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLnBhc3NDaGVjayA9IHBhc3NDaGVjaztcbiAgICB0aGlzLmlkID0gQkFTRV9JRCsrO1xuICB9XG5cbiAgaGFzSWQoaWQ6IG51bWJlcik6IFZhbGlkYXRpb25DaGVjazxUPiB7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWVzc2FnZShkZXNjcmlwdGlvbjogc3RyaW5nKTogVmFsaWRhdGlvbkNoZWNrPFQ+IHtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwYXNzKHBhc3NDaGVjaz86ICh2YWx1ZTogVCkgPT4gYm9vbGVhbik6IFZhbGlkYXRpb25DaGVjazxUPiB7XG4gICAgdGhpcy5wYXNzQ2hlY2sgPSBwYXNzQ2hlY2s7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmYWlsKGZhaWxDaGVjaz86ICh2YWx1ZTogVCkgPT4gYm9vbGVhbik6IFZhbGlkYXRpb25DaGVjazxUPiB7XG4gICAgdGhpcy5mYWlsQ2hlY2sgPSBmYWlsQ2hlY2s7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB3YXJuKHdhcm5DaGVjaz86ICh2YWx1ZTogVCkgPT4gYm9vbGVhbik6IFZhbGlkYXRpb25DaGVjazxUPiB7XG4gICAgdGhpcy53YXJuQ2hlY2sgPSB3YXJuQ2hlY2s7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvbmx5SWYob25seUlmQ2hlY2s/OiAodmFsdWU6IFQpID0+IGJvb2xlYW4pOiBWYWxpZGF0aW9uQ2hlY2s8VD4ge1xuICAgIHRoaXMub25seUlmQ2hlY2sgPSBvbmx5SWZDaGVjaztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZCguLi5pbm5lckNoZWNrczogVmFsaWRhdGlvbkNoZWNrPFQ+W10pOiBWYWxpZGF0aW9uQ2hlY2s8VD4ge1xuICAgIGlubmVyQ2hlY2tzLmZvckVhY2goaW5uZXIgPT4gdGhpcy5zdWJDaGVja3MucHVzaChpbm5lcikpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2hlY2sodGFyZ2V0OiBUKTogVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IFZhbGlkYXRpb25SZXN1bHQoKTtcblxuICAgIGlmICh0aGlzLm9ubHlJZkNoZWNrICYmICF0aGlzLm9ubHlJZkNoZWNrKHRhcmdldCkpIHtcbiAgICAgIHJlc3VsdC5za2lwcGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFzc0NoZWNrKSB7XG4gICAgICByZXN1bHQucGFzc2VkID0gdGhpcy5wYXNzQ2hlY2sodGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mYWlsQ2hlY2spIHtcbiAgICAgIHJlc3VsdC5wYXNzZWQgPSAhdGhpcy5mYWlsQ2hlY2sodGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy53YXJuQ2hlY2spIHtcbiAgICAgIHJlc3VsdC53YXJuZWQgPSAhdGhpcy53YXJuQ2hlY2sodGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdWJDaGVja3MpIHtcbiAgICAgIHRoaXMuc3ViQ2hlY2tzLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGNvbnN0IGlubmVyUmVzdWx0ID0gYy5jaGVjayh0YXJnZXQpO1xuICAgICAgICByZXN1bHQuYWRkKGlubmVyUmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==