/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { getMeasureExtent } from '../geometry/geometry/get-measure-extent.function';
import { isLine } from '../geometry/geometry/is-line.function';
import { getIdFieldFieldName, isFieldExpression } from './fields/layer-field';
import { getCodedValueNameOrDefault } from './fields/get-coded-value-name-or-default.function';
import { evaluteFeatureDataExpression } from '../lrs/data/evaluate-feature-data-expression.function';
import { isPoint } from '../geometry/geometry/is-point.function';
import { isPolygon } from '../geometry/geometry/is-polygon.function';
import { WGS_84_SRID } from '../geometry/geometry.constants';
import { clone } from '../core/clone/clone.function';
export class MapFeature {
    /**
     * @return {?}
     */
    get layerId() {
        return this.layer ? this.layer.id : null;
    }
    /**
     * @return {?}
     */
    get hasZ() {
        return this.layer.hasZ;
    }
    /**
     * @return {?}
     */
    get hasM() {
        return this.layer.hasM;
    }
    /**
     * @param {?} feature
     * @param {?} layer
     * @param {?=} spatialReferenceId
     */
    constructor(feature, layer, spatialReferenceId = WGS_84_SRID) {
        this.id = feature.id;
        this.properties = feature.properties;
        this.type = feature.type;
        this.bbox = feature.bbox;
        this.layer = layer;
        this.spatialReferenceId = spatialReferenceId;
        /** @type {?} */
        const idFieldName = this.getIdFieldName();
        this.id = this.id || this.getValue(idFieldName);
        this.displayValue = this.getValue(layer.displayField);
        this.setGeometry(feature.geometry);
    }
    /**
     * @return {?}
     */
    getIdFieldName() {
        return getIdFieldFieldName(this.layer.fields);
    }
    /**
     * @param {?} fieldNameOrExpression
     * @return {?}
     */
    getValue(fieldNameOrExpression) {
        return isFieldExpression(fieldNameOrExpression)
            ? evaluteFeatureDataExpression(fieldNameOrExpression, this)
            : this.properties && this.properties[fieldNameOrExpression];
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getCodedValueNameOrDefault(fieldName) {
        /** @type {?} */
        const value = this.getValue(fieldName);
        /** @type {?} */
        const field = this.layer.getField(fieldName);
        return getCodedValueNameOrDefault(field, value);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fieldName
     * @param {?} value
     * @return {THIS}
     */
    setValue(fieldName, value) {
        (/** @type {?} */ (this)).properties[fieldName] = value;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} id
     * @return {THIS}
     */
    setId(id) {
        (/** @type {?} */ (this)).id = id;
        (/** @type {?} */ (this)).setValue(getIdFieldFieldName((/** @type {?} */ (this)).layer.fields), id);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} geometry
     * @return {THIS}
     */
    setGeometry(geometry) {
        (/** @type {?} */ (this)).geometry = geometry;
        return (/** @type {?} */ (this)).setGeometryTypeProperties();
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    setMeasureFromGeometry() {
        if ((/** @type {?} */ (this)).geometry) {
            /** @type {?} */
            const extent = getMeasureExtent((/** @type {?} */ (this)).geometry);
            (/** @type {?} */ (this)).fromMeasure = extent.min;
            (/** @type {?} */ (this)).toMeasure = extent.max;
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    isSpatialReferenceWgs84() {
        return this.spatialReferenceId === WGS_84_SRID;
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const copyFeature = clone(this.toFeature());
        return new MapFeature(copyFeature, this.layer);
    }
    /**
     * @return {?}
     */
    toFeature() {
        /** @type {?} */
        const feature = {
            type: 'Feature',
            geometry: this.geometry,
            properties: this.properties,
            id: this.id,
            bbox: this.bbox,
        };
        return feature;
    }
    /**
     * @return {?}
     */
    toGeoJson() {
        return this.toFeature();
    }
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    setGeometryTypeProperties() {
        (/** @type {?} */ (this)).isLinear = isLine((/** @type {?} */ (this)).geometry);
        (/** @type {?} */ (this)).isPoint = isPoint((/** @type {?} */ (this)).geometry);
        (/** @type {?} */ (this)).isPolygon = isPolygon((/** @type {?} */ (this)).geometry);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    MapFeature.prototype.id;
    /** @type {?} */
    MapFeature.prototype.geometry;
    /** @type {?} */
    MapFeature.prototype.properties;
    /** @type {?} */
    MapFeature.prototype.bbox;
    /** @type {?} */
    MapFeature.prototype.type;
    /** @type {?} */
    MapFeature.prototype.routeId;
    /** @type {?} */
    MapFeature.prototype.fromMeasure;
    /** @type {?} */
    MapFeature.prototype.toMeasure;
    /** @type {?} */
    MapFeature.prototype.layer;
    /** @type {?} */
    MapFeature.prototype.displayValue;
    /** @type {?} */
    MapFeature.prototype.styleValue;
    /** @type {?} */
    MapFeature.prototype.isLinear;
    /** @type {?} */
    MapFeature.prototype.isPoint;
    /** @type {?} */
    MapFeature.prototype.isPolygon;
    /** @type {?} */
    MapFeature.prototype.viewDate;
    /** @type {?} */
    MapFeature.prototype.gdbVersion;
    /** @type {?} */
    MapFeature.prototype.spatialReferenceId;
}
//# sourceMappingURL=data:application/json;base64,