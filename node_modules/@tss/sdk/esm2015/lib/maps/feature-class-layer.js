/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getFieldAlias, getField } from './fields/layer-field';
import { LayerDrawingInfo } from './drawing/layer-drawing-info';
import { clone } from '../core/clone/clone.function';
/** @type {?} */
export const POINT_GEOMETRY_TYPES = ['point', 'esriGeometryPoint'];
/** @type {?} */
export const LINEAR_GEOMETRY_TYPES = ['line', 'esriGeometryPolyline'];
/** @type {?} */
export const POLYGON_GEOMETRY_TYPES = ['polygon', 'esriGeometryPolygon'];
/**
 * @param {?} geometryType
 * @return {?}
 */
export function isPointGeometryType(geometryType) {
    return POINT_GEOMETRY_TYPES.indexOf(geometryType) > -1;
}
/**
 * @param {?} geometryType
 * @return {?}
 */
export function isLinearGeometryType(geometryType) {
    return LINEAR_GEOMETRY_TYPES.indexOf(geometryType) > -1;
}
/**
 * @param {?} geometryType
 * @return {?}
 */
export function isPolygonGeometryType(geometryType) {
    return POLYGON_GEOMETRY_TYPES.indexOf(geometryType) > -1;
}
export class FeatureClassLayer {
    /**
     * @return {?}
     */
    get isPoint() {
        return isPointGeometryType(this.geometryType);
    }
    /**
     * @return {?}
     */
    get isLinear() {
        return isLinearGeometryType(this.geometryType);
    }
    /**
     * @return {?}
     */
    get isPolygon() {
        return isPolygonGeometryType(this.geometryType);
    }
    /**
     * @return {?}
     */
    get displayFieldAlias() {
        return this.getFieldAlias(this.displayField);
    }
    /**
     * @param {...?} sources
     */
    constructor(...sources) {
        Object.assign(this, ...sources);
        this.subLayers = this.subLayers || [];
        this.fields = this.fields || [];
        this.indexes = this.indexes || [];
        this.relationships = this.relationships || [];
        this.supportedQueryFormats = this.supportedQueryFormats || [];
        this.drawingInfo = new LayerDrawingInfo(this.drawingInfo);
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getField(fieldName) {
        return getField(fieldName, this.fields);
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getFieldAlias(fieldName) {
        return getFieldAlias(fieldName, this.fields);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} domains
     * @return {THIS}
     */
    applyFieldDomains(domains) {
        if (domains.length) {
            (/** @type {?} */ (this)).fields
                .filter((/**
             * @param {?} f
             * @return {?}
             */
            f => f.domainName))
                .forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => field.domain = domains.find((/**
             * @param {?} domain
             * @return {?}
             */
            domain => domain.name === field.domainName)) || field.domain));
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    clone() {
        /** @type {?} */
        const copy = clone(this);
        return new FeatureClassLayer(copy);
    }
}
if (false) {
    /** @type {?} */
    FeatureClassLayer.prototype.id;
    /** @type {?} */
    FeatureClassLayer.prototype.name;
    /** @type {?} */
    FeatureClassLayer.prototype.type;
    /** @type {?} */
    FeatureClassLayer.prototype.parentLayer;
    /** @type {?} */
    FeatureClassLayer.prototype.subLayers;
    /** @type {?} */
    FeatureClassLayer.prototype.description;
    /** @type {?} */
    FeatureClassLayer.prototype.hasAttachments;
    /** @type {?} */
    FeatureClassLayer.prototype.currentVersion;
    /** @type {?} */
    FeatureClassLayer.prototype.geometryType;
    /** @type {?} */
    FeatureClassLayer.prototype.sourceSpatialReference;
    /** @type {?} */
    FeatureClassLayer.prototype.minScale;
    /** @type {?} */
    FeatureClassLayer.prototype.maxScale;
    /** @type {?} */
    FeatureClassLayer.prototype.extent;
    /** @type {?} */
    FeatureClassLayer.prototype.displayField;
    /** @type {?} */
    FeatureClassLayer.prototype.typeIdField;
    /** @type {?} */
    FeatureClassLayer.prototype.fields;
    /** @type {?} */
    FeatureClassLayer.prototype.indexes;
    /** @type {?} */
    FeatureClassLayer.prototype.relationships;
    /** @type {?} */
    FeatureClassLayer.prototype.maxRecordCount;
    /** @type {?} */
    FeatureClassLayer.prototype.supportsStatistics;
    /** @type {?} */
    FeatureClassLayer.prototype.supportsAdvancedQueries;
    /** @type {?} */
    FeatureClassLayer.prototype.hasZ;
    /** @type {?} */
    FeatureClassLayer.prototype.hasM;
    /** @type {?} */
    FeatureClassLayer.prototype.supportedQueryFormats;
    /** @type {?} */
    FeatureClassLayer.prototype.supportsDatumTransformation;
    /** @type {?} */
    FeatureClassLayer.prototype.isDataVersioned;
    /** @type {?} */
    FeatureClassLayer.prototype.drawingInfo;
    /** @type {?} */
    FeatureClassLayer.prototype.order;
}
//# sourceMappingURL=data:application/json;base64,