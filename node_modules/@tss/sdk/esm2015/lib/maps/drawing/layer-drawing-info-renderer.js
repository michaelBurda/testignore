/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isClassBreakInfoEmpty } from './class-break-info';
import { isUniqueValueInfoEmpty } from './unique-value-info';
import { isArray } from '../../core/type-check/is-array.function';
import { rgbToHex } from '../../core/color/rgb-to-hex.function';
import { removeWhere } from '../../core/array/remove-where.function';
/** @type {?} */
export const DEFAULT_UNIQUE_VALUE_INFO = null;
/** @type {?} */
export const DEFAULT_CLASS_BREAK_VALUE_INFO = null;
/** @type {?} */
export const DEFAULT_RENDERER_SYMBOL = {
    type: 'esriSLS',
    style: 'esriSLSSolid',
    color: '#000000',
    width: 2
};
/**
 * @param {?} symbol
 * @return {?}
 */
export function isRendererSymbolDefault(symbol) {
    return Object.keys(symbol).length === Object.keys(DEFAULT_RENDERER_SYMBOL).length
        && symbol.type === DEFAULT_RENDERER_SYMBOL.type
        && symbol.style === DEFAULT_RENDERER_SYMBOL.style
        && symbol.color === DEFAULT_RENDERER_SYMBOL.color
        && symbol.width === DEFAULT_RENDERER_SYMBOL.width;
}
export class LayerDrawingInfoRenderer {
    /**
     * @return {?}
     */
    get isSimple() {
        return this.type === 'simple';
    }
    /**
     * @return {?}
     */
    get isUniqueValue() {
        return this.type === 'uniqueValue';
    }
    /**
     * @return {?}
     */
    get isClassBreak() {
        return this.type === 'classBreaks';
    }
    /**
     * @return {?}
     */
    get isEmpty() {
        return !this.minValue
            && !this.classBreakInfos.length
            && !this.uniqueValueInfos.length
            && isRendererSymbolDefault(this.symbol);
    }
    /**
     * @return {?}
     */
    get field() {
        return this.field1;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set field(value) {
        this.field1 = value;
    }
    /**
     * @param {?=} base
     */
    constructor(base) {
        Object.assign(this, base);
        this.type = this.type || 'simple';
        this.minValue = this.minValue || 0;
        this.classBreakInfos = this.classBreakInfos || [];
        this.uniqueValueInfos = this.uniqueValueInfos || [];
        this.symbol = Object.assign({}, DEFAULT_RENDERER_SYMBOL, this.symbol);
        this.label = this.label || '';
        this.description = this.description || '';
        this.standardizeRenderSymbols();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getSymbol(value) {
        /** @type {?} */
        let symbol = this.symbol || this.defaultSymbol;
        if (this.isUniqueValue) {
            /** @type {?} */
            const uniqueValueInfo = this.getUniqueValueInfoOrDefault(value);
            symbol = isUniqueValueInfoEmpty(uniqueValueInfo) ? null : uniqueValueInfo.symbol;
        }
        else if (this.isClassBreak) {
            /** @type {?} */
            const classBreakInfo = this.getClassBreakInfoOrDefault(value);
            symbol = isClassBreakInfoEmpty(classBreakInfo) ? null : classBreakInfo.symbol;
        }
        return symbol || this.defaultSymbol || null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getUniqueValueInfo(value) {
        if (!this.uniqueValueInfos || !this.uniqueValueInfos.length) {
            return null;
        }
        return this.uniqueValueInfos.find((/**
         * @param {?} info
         * @return {?}
         */
        info => info.value === value || String(info.value) === String(value)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getUniqueValueInfoOrDefault(value) {
        return this.getUniqueValueInfo(value) || DEFAULT_UNIQUE_VALUE_INFO;
    }
    /**
     * @param {?} classValue
     * @return {?}
     */
    getClassBreakInfo(classValue) {
        if (!this.classBreakInfos || !this.classBreakInfos.length) {
            return null;
        }
        return this.classBreakInfos.find((/**
         * @param {?} value
         * @param {?} index
         * @return {?}
         */
        (value, index) => this.isValueInClassBreakRange(value, classValue, index)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getClassBreakInfoOrDefault(value) {
        return this.getClassBreakInfo(value) || DEFAULT_CLASS_BREAK_VALUE_INFO;
    }
    /**
     * @param {?} classBreakInfo
     * @param {?} value
     * @param {?} index
     * @return {?}
     */
    isValueInClassBreakRange(classBreakInfo, value, index) {
        /** @type {?} */
        const rangeMin = index === 0 ? this.minValue : this.classBreakInfos[index - 1].classMaxValue;
        /** @type {?} */
        const rangeMax = classBreakInfo.classMaxValue;
        return rangeMin < value && rangeMax > value;
    }
    /**
     * @return {?}
     */
    clearEmptyInfos() {
        removeWhere(this.uniqueValueInfos, (/**
         * @param {?} info
         * @return {?}
         */
        info => isUniqueValueInfoEmpty(info)));
        removeWhere(this.classBreakInfos, (/**
         * @param {?} info
         * @return {?}
         */
        info => isClassBreakInfoEmpty(info)));
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getBestRepresentativeColor(value) {
        /** @type {?} */
        let symbol = this.defaultSymbol || this.symbol;
        if (this.isUniqueValue && this.uniqueValueInfos.length) {
            /** @type {?} */
            const foundInfo = this.getUniqueValueInfo(value);
            symbol = foundInfo ? foundInfo.symbol : this.uniqueValueInfos[0].symbol;
        }
        else if (this.isClassBreak && this.classBreakInfos.length) {
            /** @type {?} */
            const foundInfo = this.getClassBreakInfo(value);
            symbol = foundInfo ? foundInfo.symbol : this.classBreakInfos[0].symbol;
        }
        return (/** @type {?} */ (symbol.color));
    }
    /**
     * @return {?}
     */
    standardizeRenderSymbols() {
        standardizeRenderSymbol(this.defaultSymbol);
        standardizeRenderSymbol(this.symbol);
        this.uniqueValueInfos.forEach((/**
         * @param {?} info
         * @return {?}
         */
        info => standardizeRenderSymbol(info.symbol)));
        this.classBreakInfos.forEach((/**
         * @param {?} info
         * @return {?}
         */
        info => standardizeRenderSymbol(info.symbol)));
    }
}
if (false) {
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.type;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.field1;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.field2;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.field3;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.fieldDelimiter;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.valueExpression;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.classificationMethod;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.minValue;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.classBreakInfos;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.uniqueValueInfos;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.label;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.defaultLabel;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.description;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.defaultSymbol;
    /** @type {?} */
    LayerDrawingInfoRenderer.prototype.symbol;
}
/**
 * @param {?} symbol
 * @return {?}
 */
function standardizeRenderSymbol(symbol) {
    if (!symbol) {
        return;
    }
    if (isArray(symbol.color)) {
        symbol.color = rgbToHex((/** @type {?} */ (symbol.color)));
    }
    if (symbol.outline && isArray(symbol.outline.color)) {
        symbol.outline.color = rgbToHex((/** @type {?} */ (symbol.outline.color)));
    }
}
//# sourceMappingURL=data:application/json;base64,