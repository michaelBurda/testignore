/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LayerDrawingInfoRenderer } from './layer-drawing-info-renderer';
import { transparencyToOpacity } from '../../core/color/transparency-to-opacity.function';
/**
 * @record
 */
export function DrawingInfoProperties() { }
if (false) {
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.renderer;
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.transparency;
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.positionRenderer;
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.labelingInfo;
}
export class LayerDrawingInfo {
    /**
     * @return {?}
     */
    get isEmpty() {
        return !this.transparency
            && !this.zIndex
            && this.renderer.isEmpty
            && this.positionRenderer.isEmpty
            && !Object.keys(this.labelingInfo || {}).length;
    }
    /**
     * @return {?}
     */
    get opacity() {
        return transparencyToOpacity(this.transparency);
    }
    /**
     * @param {...?} baseDrawingInfos
     */
    constructor(...baseDrawingInfos) {
        this.merge(...baseDrawingInfos);
        this.transparency = this.transparency || 0;
        this.zIndex = this.zIndex || null;
        this.renderer = new LayerDrawingInfoRenderer(this.renderer);
        this.positionRenderer = new LayerDrawingInfoRenderer(this.positionRenderer);
        this.labelingInfo = this.labelingInfo || null;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {...?} targetDrawingInfos
     * @return {THIS}
     */
    merge(...targetDrawingInfos) {
        /** @type {?} */
        const properties = targetDrawingInfos.map((/**
         * @param {?} info
         * @return {?}
         */
        info => info && ((/** @type {?} */ (info))).toProperties
            ? ((/** @type {?} */ (info))).toProperties()
            : info));
        Object.assign((/** @type {?} */ (this)), ...properties);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getRendererSymbol(value) {
        return this.renderer.getSymbol(value);
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getPositionRendererSymbol(value) {
        return this.positionRenderer.getSymbol(value);
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getBestRepresentativeColor(value) {
        return this.renderer.getBestRepresentativeColor(value);
    }
    /**
     * @return {?}
     */
    toProperties() {
        /** @type {?} */
        const infoProperties = {};
        if (this.labelingInfo) {
            infoProperties.labelingInfo = this.labelingInfo;
        }
        if (this.positionRenderer && !this.positionRenderer.isEmpty) {
            infoProperties.positionRenderer = this.positionRenderer;
        }
        if (this.renderer && !this.renderer.isEmpty) {
            infoProperties.renderer = this.renderer;
        }
        if (this.transparency) {
            infoProperties.transparency = this.transparency;
        }
        return infoProperties;
    }
}
if (false) {
    /** @type {?} */
    LayerDrawingInfo.prototype.renderer;
    /** @type {?} */
    LayerDrawingInfo.prototype.transparency;
    /** @type {?} */
    LayerDrawingInfo.prototype.zIndex;
    /** @type {?} */
    LayerDrawingInfo.prototype.positionRenderer;
    /** @type {?} */
    LayerDrawingInfo.prototype.labelingInfo;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXItZHJhd2luZy1pbmZvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbWFwcy9kcmF3aW5nL2xheWVyLWRyYXdpbmctaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFekUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbURBQW1ELENBQUM7Ozs7QUFFMUYsMkNBS0M7OztJQUpDLHlDQUFvQzs7SUFDcEMsNkNBQXNCOztJQUN0QixpREFBNEM7O0lBQzVDLDZDQUFtQjs7QUFHckIsTUFBTSxPQUFPLGdCQUFnQjs7OztJQU8zQixJQUFJLE9BQU87UUFDVCxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVk7ZUFDcEIsQ0FBQyxJQUFJLENBQUMsTUFBTTtlQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTztlQUNyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTztlQUM3QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDcEQsQ0FBQzs7OztJQUVELElBQUksT0FBTztRQUNULE9BQU8scUJBQXFCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7SUFFRCxZQUFZLEdBQUcsZ0JBQThEO1FBQzNFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUM7SUFDaEQsQ0FBQzs7Ozs7OztJQUVELEtBQUssQ0FBQyxHQUFHLGtCQUFnRTs7Y0FDakUsVUFBVSxHQUFHLGtCQUFrQixDQUFDLEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUMvQyxJQUFJLElBQUksQ0FBQyxtQkFBQSxJQUFJLEVBQW9CLENBQUMsQ0FBQyxZQUFZO1lBQzdDLENBQUMsQ0FBQyxDQUFDLG1CQUFBLElBQUksRUFBb0IsQ0FBQyxDQUFDLFlBQVksRUFBRTtZQUMzQyxDQUFDLENBQUMsSUFBSSxFQUNUO1FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBQSxJQUFJLEVBQUEsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO1FBQ25DLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLEtBQXVCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFFRCx5QkFBeUIsQ0FBQyxLQUF1QjtRQUMvQyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFRCwwQkFBMEIsQ0FBQyxLQUF1QjtRQUNoRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7OztJQUVELFlBQVk7O2NBQ0osY0FBYyxHQUEwQixFQUFFO1FBQ2hELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixjQUFjLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDakQ7UUFFRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7WUFDM0QsY0FBYyxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUN6RDtRQUVELElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQzNDLGNBQWMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN6QztRQUVELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixjQUFjLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDakQ7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7OztJQXRFQyxvQ0FBbUM7O0lBQ25DLHdDQUFxQjs7SUFDckIsa0NBQXNCOztJQUN0Qiw0Q0FBMkM7O0lBQzNDLHdDQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExheWVyRHJhd2luZ0luZm9SZW5kZXJlciB9IGZyb20gJy4vbGF5ZXItZHJhd2luZy1pbmZvLXJlbmRlcmVyJztcbmltcG9ydCB7IExheWVyUmVuZGVyZXJTeW1ib2wgfSBmcm9tICcuL2xheWVyLXJlbmRlcmVyLXN5bWJvbCc7XG5pbXBvcnQgeyB0cmFuc3BhcmVuY3lUb09wYWNpdHkgfSBmcm9tICcuLi8uLi9jb3JlL2NvbG9yL3RyYW5zcGFyZW5jeS10by1vcGFjaXR5LmZ1bmN0aW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBEcmF3aW5nSW5mb1Byb3BlcnRpZXMge1xuICByZW5kZXJlcj86IExheWVyRHJhd2luZ0luZm9SZW5kZXJlcjtcbiAgdHJhbnNwYXJlbmN5PzogbnVtYmVyO1xuICBwb3NpdGlvblJlbmRlcmVyPzogTGF5ZXJEcmF3aW5nSW5mb1JlbmRlcmVyO1xuICBsYWJlbGluZ0luZm8/OiBhbnk7IC8vIFRPRE86IEFkZCB0eXBlIGZvciBsYWJlbGluZyBpbmZvIC0gUkcuXG59XG5cbmV4cG9ydCBjbGFzcyBMYXllckRyYXdpbmdJbmZvIGltcGxlbWVudHMgRHJhd2luZ0luZm9Qcm9wZXJ0aWVzIHtcbiAgcmVuZGVyZXI6IExheWVyRHJhd2luZ0luZm9SZW5kZXJlcjtcbiAgdHJhbnNwYXJlbmN5OiBudW1iZXI7XG4gIHpJbmRleDogbnVtYmVyIHwgbnVsbDtcbiAgcG9zaXRpb25SZW5kZXJlcjogTGF5ZXJEcmF3aW5nSW5mb1JlbmRlcmVyO1xuICBsYWJlbGluZ0luZm86IGFueTtcblxuICBnZXQgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMudHJhbnNwYXJlbmN5XG4gICAgICAmJiAhdGhpcy56SW5kZXhcbiAgICAgICYmIHRoaXMucmVuZGVyZXIuaXNFbXB0eVxuICAgICAgJiYgdGhpcy5wb3NpdGlvblJlbmRlcmVyLmlzRW1wdHlcbiAgICAgICYmICFPYmplY3Qua2V5cyh0aGlzLmxhYmVsaW5nSW5mbyB8fCB7fSkubGVuZ3RoO1xuICB9XG5cbiAgZ2V0IG9wYWNpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdHJhbnNwYXJlbmN5VG9PcGFjaXR5KHRoaXMudHJhbnNwYXJlbmN5KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKC4uLmJhc2VEcmF3aW5nSW5mb3M6IChMYXllckRyYXdpbmdJbmZvIHwgRHJhd2luZ0luZm9Qcm9wZXJ0aWVzKVtdKSB7XG4gICAgdGhpcy5tZXJnZSguLi5iYXNlRHJhd2luZ0luZm9zKTtcbiAgICB0aGlzLnRyYW5zcGFyZW5jeSA9IHRoaXMudHJhbnNwYXJlbmN5IHx8IDA7XG4gICAgdGhpcy56SW5kZXggPSB0aGlzLnpJbmRleCB8fCBudWxsO1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgTGF5ZXJEcmF3aW5nSW5mb1JlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xuICAgIHRoaXMucG9zaXRpb25SZW5kZXJlciA9IG5ldyBMYXllckRyYXdpbmdJbmZvUmVuZGVyZXIodGhpcy5wb3NpdGlvblJlbmRlcmVyKTtcbiAgICB0aGlzLmxhYmVsaW5nSW5mbyA9IHRoaXMubGFiZWxpbmdJbmZvIHx8IG51bGw7XG4gIH1cblxuICBtZXJnZSguLi50YXJnZXREcmF3aW5nSW5mb3M6IChMYXllckRyYXdpbmdJbmZvIHwgRHJhd2luZ0luZm9Qcm9wZXJ0aWVzKVtdKTogdGhpcyB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRhcmdldERyYXdpbmdJbmZvcy5tYXAoaW5mbyA9PlxuICAgICAgaW5mbyAmJiAoaW5mbyBhcyBMYXllckRyYXdpbmdJbmZvKS50b1Byb3BlcnRpZXNcbiAgICAgICAgPyAoaW5mbyBhcyBMYXllckRyYXdpbmdJbmZvKS50b1Byb3BlcnRpZXMoKVxuICAgICAgICA6IGluZm9cbiAgICApO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCAuLi5wcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldFJlbmRlcmVyU3ltYm9sKHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyKTogTGF5ZXJSZW5kZXJlclN5bWJvbCB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0U3ltYm9sKHZhbHVlKTtcbiAgfVxuXG4gIGdldFBvc2l0aW9uUmVuZGVyZXJTeW1ib2wodmFsdWU/OiBzdHJpbmcgfCBudW1iZXIpOiBMYXllclJlbmRlcmVyU3ltYm9sIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvblJlbmRlcmVyLmdldFN5bWJvbCh2YWx1ZSk7XG4gIH1cblxuICBnZXRCZXN0UmVwcmVzZW50YXRpdmVDb2xvcih2YWx1ZT86IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0QmVzdFJlcHJlc2VudGF0aXZlQ29sb3IodmFsdWUpO1xuICB9XG5cbiAgdG9Qcm9wZXJ0aWVzKCk6IERyYXdpbmdJbmZvUHJvcGVydGllcyB7XG4gICAgY29uc3QgaW5mb1Byb3BlcnRpZXM6IERyYXdpbmdJbmZvUHJvcGVydGllcyA9IHt9O1xuICAgIGlmICh0aGlzLmxhYmVsaW5nSW5mbykge1xuICAgICAgaW5mb1Byb3BlcnRpZXMubGFiZWxpbmdJbmZvID0gdGhpcy5sYWJlbGluZ0luZm87XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucG9zaXRpb25SZW5kZXJlciAmJiAhdGhpcy5wb3NpdGlvblJlbmRlcmVyLmlzRW1wdHkpIHtcbiAgICAgIGluZm9Qcm9wZXJ0aWVzLnBvc2l0aW9uUmVuZGVyZXIgPSB0aGlzLnBvc2l0aW9uUmVuZGVyZXI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyZXIgJiYgIXRoaXMucmVuZGVyZXIuaXNFbXB0eSkge1xuICAgICAgaW5mb1Byb3BlcnRpZXMucmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRyYW5zcGFyZW5jeSkge1xuICAgICAgaW5mb1Byb3BlcnRpZXMudHJhbnNwYXJlbmN5ID0gdGhpcy50cmFuc3BhcmVuY3k7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm9Qcm9wZXJ0aWVzO1xuICB9XG59XG4iXX0=