/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isFieldValueNumeric } from './fields/layer-field';
/** @type {?} */
export const FIELD_QUOTE = '"';
/** @enum {string} */
const CriteriaOperator = {
    Equals: '=',
    DoesNotEqual: '<>',
    // In = 'IN',
    // OneOf, NotOneOf, Between, NotBetween, Contains...
    GreaterThan: '>',
    LessThan: '<',
    GreaterOrEqualTo: '>=',
    LessThanOrEqualTo: '<=',
};
export { CriteriaOperator };
/** @enum {string} */
const TargetOperator = {
    Is: 'IS',
    Not: 'NOT',
    In: 'IN',
    Like: 'LIKE',
    Between: 'BETWEEN',
};
export { TargetOperator };
/** @enum {string} */
const ValueOperator = {
    Wildcard: '%',
    Null: 'NULL',
};
export { ValueOperator };
/** @enum {string} */
const GroupingOperator = {
    OpenParenthesis: '(',
    ClosedParenthesis: ')',
    Parenthesis: '()',
};
export { GroupingOperator };
/** @enum {string} */
const CombiningOperator = {
    And: 'AND',
    Or: 'OR',
};
export { CombiningOperator };
/**
 * @record
 */
export function WhereClauseBuilderOptions() { }
if (false) {
    /** @type {?|undefined} */
    WhereClauseBuilderOptions.prototype.quoteFields;
}
/** @type {?} */
export const DefaultWhereClauseBuilderOptions = {
    quoteFields: true
};
export class WhereClauseBuilder {
    /**
     * @param {?=} options
     */
    constructor(options) {
        this.statements = [];
        this.options = Object.assign({}, DefaultWhereClauseBuilderOptions, options);
    }
    /**
     * @return {?}
     */
    get criteriaCount() {
        return this.statements.length;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} statement
     * @return {THIS}
     */
    add(statement) {
        (/** @type {?} */ (this)).statements.push(statement);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    whereEqual(field, value) {
        return value === null
            ? (/** @type {?} */ (this)).whereIsNull(field.name)
            : (/** @type {?} */ (this)).where(field.name, CriteriaOperator.Equals, value, isFieldValueNumeric(field, value));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    whereLike(field, value) {
        return (/** @type {?} */ (this)).add(`${(/** @type {?} */ (this)).formatField(field)} ${TargetOperator.Like} '%${value}%'`);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    whereStartsWith(field, value) {
        return (/** @type {?} */ (this)).add(`${(/** @type {?} */ (this)).formatField(field)} ${TargetOperator.Like} '${value}%'`);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    whereEndsWith(field, value) {
        return (/** @type {?} */ (this)).add(`${(/** @type {?} */ (this)).formatField(field)} ${TargetOperator.Like} '%${value}'`);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    whereNotEqual(field, value) {
        return value === null
            ? (/** @type {?} */ (this)).whereIsNotNull(field.name)
            : (/** @type {?} */ (this)).where(field.name, CriteriaOperator.DoesNotEqual, value, isFieldValueNumeric(field, value));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @return {THIS}
     */
    whereIsNull(field) {
        return (/** @type {?} */ (this)).add(`${(/** @type {?} */ (this)).formatField(field)} ${TargetOperator.Is} ${ValueOperator.Null}`);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @return {THIS}
     */
    whereIsNotNull(field) {
        return (/** @type {?} */ (this)).add(`${(/** @type {?} */ (this)).formatField(field)} ${TargetOperator.Is} ${TargetOperator.Not} ${ValueOperator.Null}`);
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} operator
     * @param {?} value
     * @param {?=} isNumeric
     * @return {THIS}
     */
    where(field, operator, value, isNumeric = false) {
        value = isNumeric ? value : `'${value}'`;
        (/** @type {?} */ (this)).add(`${(/** @type {?} */ (this)).formatField(field)}${operator}${value}`);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    whereNumeric(field, value) {
        (/** @type {?} */ (this)).where(field, value, true);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    toWhereClause() {
        return this.statements.join(` ${CombiningOperator.And} `);
    }
    /**
     * @return {?}
     */
    toString() {
        return this.toWhereClause();
    }
    /**
     * @return {?}
     */
    clear() {
        this.statements.length = 0;
    }
    /**
     * @protected
     * @param {?} field
     * @return {?}
     */
    formatField(field) {
        field = field || '';
        /** @type {?} */
        const addQuotes = this.options.quoteFields;
        if (addQuotes) {
            if (!field.startsWith(FIELD_QUOTE)) {
                field = `${FIELD_QUOTE}${field}`;
            }
            if (!field.endsWith(FIELD_QUOTE)) {
                field = `${field}${FIELD_QUOTE}`;
            }
        }
        else {
            /** @type {?} */
            const quoteRegex = new RegExp(FIELD_QUOTE, 'i');
            return field.replace(quoteRegex, '');
        }
        return field;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    WhereClauseBuilder.prototype.statements;
    /**
     * @type {?}
     * @private
     */
    WhereClauseBuilder.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,