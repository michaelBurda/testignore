/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DataSourceConfig } from '../data-source-config';
import { toFormDataString } from '../../http/to-form-data-string.function';
import { AttachmentType } from './attachment-type';
import { base64toBlob } from '../../core/media/base64-to-blob.function';
import { ATTACHMENT_FILE_FORM_KEY, ATTACHMENT_DATA_FORM_KEY } from './attachments.constants';
import { BaseResourceService } from '../../core/resource/base-resource.service';
import { isString } from '../../core/type-check/is-string.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../data-source-config";
export class AttachmentService extends BaseResourceService {
    /**
     * @param {?} http
     * @param {?} dsConfig
     */
    constructor(http, dsConfig) {
        super(http, {
            url: dsConfig.serviceUrl,
            queryEndpoint: dsConfig.attachmentsEndpoint,
            getEndpoint: dsConfig.attachmentsEndpoint,
            updateEndpoint: dsConfig.attachmentsEndpoint,
            deleteEndpoint: dsConfig.attachmentsEndpoint,
            createEndpoint: dsConfig.attachmentsEndpoint,
        });
        this.http = http;
    }
    /**
     * @param {?} attachment
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    create(attachment, routeTokens, params) {
        /** @type {?} */
        const url = this.getUrl(this.config.createEndpoint, routeTokens);
        /** @type {?} */
        const formData = new FormData();
        /** @type {?} */
        let fileData;
        if (attachment.type === AttachmentType.Image && isString(attachment.data)) {
            fileData = base64toBlob((/** @type {?} */ (attachment.data)));
        }
        else if (attachment.type === AttachmentType.Text) {
            fileData = new Blob([attachment.data]);
        }
        else {
            fileData = (/** @type {?} */ (attachment.data));
        }
        delete attachment.data;
        formData.append(ATTACHMENT_FILE_FORM_KEY, fileData);
        formData.append(ATTACHMENT_DATA_FORM_KEY, toFormDataString(attachment));
        return this.http.post(url, formData, { params, reportProgress: true });
    }
    /**
     * @param {?} attachmentId
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    download(attachmentId, routeTokens, params) {
        // TODO: Complete - RG.
        // const url = this.getUrl(this.config.getEndpoint, Object.assign({ action: 'download' }, routeTokens));
        throw new Error('Not implemented yet');
    }
}
AttachmentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AttachmentService.ctorParameters = () => [
    { type: HttpClient },
    { type: DataSourceConfig }
];
/** @nocollapse */ AttachmentService.ngInjectableDef = i0.defineInjectable({ factory: function AttachmentService_Factory() { return new AttachmentService(i0.inject(i1.HttpClient), i0.inject(i2.DataSourceConfig)); }, token: AttachmentService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AttachmentService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNobWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zb3VyY2UvYXR0YWNobWVudHMvYXR0YWNobWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sc0JBQXNCLENBQUM7QUFPOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNoRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMENBQTBDLENBQUM7Ozs7QUFNcEUsTUFBTSxPQUFPLGlCQUFrQixTQUFRLG1CQUErQjs7Ozs7SUFDcEUsWUFBc0IsSUFBZ0IsRUFBRSxRQUEwQjtRQUNoRSxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ1YsR0FBRyxFQUFFLFFBQVEsQ0FBQyxVQUFVO1lBQ3hCLGFBQWEsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1lBQzNDLFdBQVcsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1lBQ3pDLGNBQWMsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1lBQzVDLGNBQWMsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1lBQzVDLGNBQWMsRUFBRSxRQUFRLENBQUMsbUJBQW1CO1NBQzdDLENBQUMsQ0FBQztRQVJpQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBU3RDLENBQUM7Ozs7Ozs7SUFFRCxNQUFNLENBQUMsVUFBc0IsRUFBRSxXQUFpQixFQUFFLE1BQW1COztjQUM3RCxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUM7O2NBQzFELFFBQVEsR0FBYSxJQUFJLFFBQVEsRUFBRTs7WUFDckMsUUFBdUI7UUFFM0IsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxLQUFLLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6RSxRQUFRLEdBQUcsWUFBWSxDQUFDLG1CQUFBLFVBQVUsQ0FBQyxJQUFJLEVBQVUsQ0FBQyxDQUFDO1NBQ3BEO2FBQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDbEQsUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDeEM7YUFBTTtZQUNMLFFBQVEsR0FBRyxtQkFBQSxVQUFVLENBQUMsSUFBSSxFQUFRLENBQUM7U0FDcEM7UUFFRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDdkIsUUFBUSxDQUFDLE1BQU0sQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNwRCxRQUFRLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFeEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBYSxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Ozs7Ozs7SUFFRCxRQUFRLENBQUMsWUFBb0IsRUFBRSxXQUFpQixFQUFFLE1BQW1CO1FBQ25FLHVCQUF1QjtRQUN2Qix3R0FBd0c7UUFDeEcsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OztZQXZDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFsQlEsVUFBVTtZQU9WLGdCQUFnQjs7Ozs7Ozs7SUFhWCxpQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBBdHRhY2htZW50IH0gZnJvbSAnLi9hdHRhY2htZW50JztcbmltcG9ydCB7IERhdGFTb3VyY2VDb25maWcgfSBmcm9tICcuLi9kYXRhLXNvdXJjZS1jb25maWcnO1xuaW1wb3J0IHsgdG9Gb3JtRGF0YVN0cmluZyB9IGZyb20gJy4uLy4uL2h0dHAvdG8tZm9ybS1kYXRhLXN0cmluZy5mdW5jdGlvbic7XG5pbXBvcnQgeyBBdHRhY2htZW50VHlwZSB9IGZyb20gJy4vYXR0YWNobWVudC10eXBlJztcbmltcG9ydCB7IGJhc2U2NHRvQmxvYiB9IGZyb20gJy4uLy4uL2NvcmUvbWVkaWEvYmFzZTY0LXRvLWJsb2IuZnVuY3Rpb24nO1xuaW1wb3J0IHsgQVRUQUNITUVOVF9GSUxFX0ZPUk1fS0VZLCBBVFRBQ0hNRU5UX0RBVEFfRk9STV9LRVkgfSBmcm9tICcuL2F0dGFjaG1lbnRzLmNvbnN0YW50cyc7XG5pbXBvcnQgeyBCYXNlUmVzb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29yZS9yZXNvdXJjZS9iYXNlLXJlc291cmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi8uLi9jb3JlL3R5cGUtY2hlY2svaXMtc3RyaW5nLmZ1bmN0aW9uJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBBdHRhY2htZW50U2VydmljZSBleHRlbmRzIEJhc2VSZXNvdXJjZVNlcnZpY2U8QXR0YWNobWVudD4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCwgZHNDb25maWc6IERhdGFTb3VyY2VDb25maWcpIHtcbiAgICBzdXBlcihodHRwLCB7XG4gICAgICB1cmw6IGRzQ29uZmlnLnNlcnZpY2VVcmwsXG4gICAgICBxdWVyeUVuZHBvaW50OiBkc0NvbmZpZy5hdHRhY2htZW50c0VuZHBvaW50LFxuICAgICAgZ2V0RW5kcG9pbnQ6IGRzQ29uZmlnLmF0dGFjaG1lbnRzRW5kcG9pbnQsXG4gICAgICB1cGRhdGVFbmRwb2ludDogZHNDb25maWcuYXR0YWNobWVudHNFbmRwb2ludCxcbiAgICAgIGRlbGV0ZUVuZHBvaW50OiBkc0NvbmZpZy5hdHRhY2htZW50c0VuZHBvaW50LFxuICAgICAgY3JlYXRlRW5kcG9pbnQ6IGRzQ29uZmlnLmF0dGFjaG1lbnRzRW5kcG9pbnQsXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGUoYXR0YWNobWVudDogQXR0YWNobWVudCwgcm91dGVUb2tlbnM/OiBhbnksIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPEF0dGFjaG1lbnQ+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmdldFVybCh0aGlzLmNvbmZpZy5jcmVhdGVFbmRwb2ludCwgcm91dGVUb2tlbnMpO1xuICAgIGNvbnN0IGZvcm1EYXRhOiBGb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGxldCBmaWxlRGF0YTogc3RyaW5nIHwgQmxvYjtcblxuICAgIGlmIChhdHRhY2htZW50LnR5cGUgPT09IEF0dGFjaG1lbnRUeXBlLkltYWdlICYmIGlzU3RyaW5nKGF0dGFjaG1lbnQuZGF0YSkpIHtcbiAgICAgIGZpbGVEYXRhID0gYmFzZTY0dG9CbG9iKGF0dGFjaG1lbnQuZGF0YSBhcyBzdHJpbmcpO1xuICAgIH0gZWxzZSBpZiAoYXR0YWNobWVudC50eXBlID09PSBBdHRhY2htZW50VHlwZS5UZXh0KSB7XG4gICAgICBmaWxlRGF0YSA9IG5ldyBCbG9iKFthdHRhY2htZW50LmRhdGFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZURhdGEgPSBhdHRhY2htZW50LmRhdGEgYXMgQmxvYjtcbiAgICB9XG5cbiAgICBkZWxldGUgYXR0YWNobWVudC5kYXRhO1xuICAgIGZvcm1EYXRhLmFwcGVuZChBVFRBQ0hNRU5UX0ZJTEVfRk9STV9LRVksIGZpbGVEYXRhKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoQVRUQUNITUVOVF9EQVRBX0ZPUk1fS0VZLCB0b0Zvcm1EYXRhU3RyaW5nKGF0dGFjaG1lbnQpKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxBdHRhY2htZW50Pih1cmwsIGZvcm1EYXRhLCB7IHBhcmFtcywgcmVwb3J0UHJvZ3Jlc3M6IHRydWUgfSk7XG4gIH1cblxuICBkb3dubG9hZChhdHRhY2htZW50SWQ6IHN0cmluZywgcm91dGVUb2tlbnM/OiBhbnksIHBhcmFtcz86IEh0dHBQYXJhbXMpIHtcbiAgICAvLyBUT0RPOiBDb21wbGV0ZSAtIFJHLlxuICAgIC8vIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsKHRoaXMuY29uZmlnLmdldEVuZHBvaW50LCBPYmplY3QuYXNzaWduKHsgYWN0aW9uOiAnZG93bmxvYWQnIH0sIHJvdXRlVG9rZW5zKSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0Jyk7XG4gIH1cbn1cbiJdfQ==