/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { DataSourceConfig } from '../data-source-config';
import { BaseEmptyResourceService } from '../../core/resource/base-empty-resource.service';
import { EMPTY_PARAM_VALUE } from '../../core/resource/resource.constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../data-source-config";
export class DataSourceEditService extends BaseEmptyResourceService {
    /**
     * @param {?} http
     * @param {?} dsConfig
     */
    constructor(http, dsConfig) {
        super(http, {
            url: dsConfig.serviceUrl
        });
        this.http = http;
        this.dsConfig = dsConfig;
    }
    /**
     * @param {?} data
     * @param {?=} params
     * @return {?}
     */
    applyEdits(data, params) {
        if (!data) {
            throw new Error('Missing or invalid apply edits seed data provided');
        }
        else if (!data.dataSourceId) {
            throw new Error(`Missing 'dataSourceId' from the apply edits seed data`);
        }
        /** @type {?} */
        const url = this.getUrlWithId(data.dataSourceId, this.dsConfig.applyEditsEndpoint, {});
        return this.http.post(url, data, { params });
    }
    /**
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?} feature
     * @param {?=} version
     * @param {?=} params
     * @return {?}
     */
    createRecord(dataSourceId, table, feature, version, params) {
        /** @type {?} */
        const url = this.getUrlWithId(dataSourceId, this.dsConfig.editDataEndpoint, { table });
        params = (params || new HttpParams())
            .set('version', version || EMPTY_PARAM_VALUE);
        return this.http.post(url, feature, { params });
    }
}
DataSourceEditService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DataSourceEditService.ctorParameters = () => [
    { type: HttpClient },
    { type: DataSourceConfig }
];
/** @nocollapse */ DataSourceEditService.ngInjectableDef = i0.defineInjectable({ factory: function DataSourceEditService_Factory() { return new DataSourceEditService(i0.inject(i1.HttpClient), i0.inject(i2.DataSourceConfig)); }, token: DataSourceEditService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    DataSourceEditService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DataSourceEditService.prototype.dsConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zb3VyY2UtZWRpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZGF0YS1zb3VyY2UvYXBwbHktZWRpdHMtc2VlZC9kYXRhLXNvdXJjZS1lZGl0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFROUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHekQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDM0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7Ozs7QUFNM0UsTUFBTSxPQUFPLHFCQUFzQixTQUFRLHdCQUF3Qzs7Ozs7SUFDakYsWUFBc0IsSUFBZ0IsRUFBVSxRQUEwQjtRQUN4RSxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ1YsR0FBRyxFQUFFLFFBQVEsQ0FBQyxVQUFVO1NBQ3pCLENBQUMsQ0FBQztRQUhpQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFJMUUsQ0FBQzs7Ozs7O0lBRUQsVUFBVSxDQUFDLElBQW1CLEVBQUUsTUFBbUI7UUFDakQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztTQUN0RTthQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztTQUMxRTs7Y0FFSyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxDQUFDO1FBQ3RGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQW1CLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7Ozs7OztJQUVELFlBQVksQ0FDVixZQUFvQixFQUNwQixLQUFhLEVBQ2IsT0FBZ0IsRUFDaEIsT0FBZ0IsRUFDaEIsTUFBbUI7O2NBRWIsR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN0RixNQUFNLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxVQUFVLEVBQUUsQ0FBQzthQUNsQyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxDQUFDO1FBRWhELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQW1CLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7OztZQWpDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFqQlEsVUFBVTtZQVFWLGdCQUFnQjs7Ozs7Ozs7SUFXWCxxQ0FBMEI7Ozs7O0lBQUUseUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8vIDNyZCBQYXJ0eS5cbmltcG9ydCB7IEZlYXR1cmUgfSBmcm9tICdnZW9qc29uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgQXBwbHlFZGl0c1NlZWQgfSBmcm9tICcuL2FwcGx5LWVkaXRzLXNlZWQnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZUNvbmZpZyB9IGZyb20gJy4uL2RhdGEtc291cmNlLWNvbmZpZyc7XG5pbXBvcnQgeyBBcHBseUVkaXRzUmVzdWx0IH0gZnJvbSAnLi9hcHBseS1lZGl0cy1yZXN1bHQnO1xuaW1wb3J0IHsgQXBwbHlFZGl0c1BvZCB9IGZyb20gJy4vYXBwbHktZWRpdHMtcG9kJztcbmltcG9ydCB7IEJhc2VFbXB0eVJlc291cmNlU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvcmVzb3VyY2UvYmFzZS1lbXB0eS1yZXNvdXJjZS5zZXJ2aWNlJztcbmltcG9ydCB7IEVNUFRZX1BBUkFNX1ZBTFVFIH0gZnJvbSAnLi4vLi4vY29yZS9yZXNvdXJjZS9yZXNvdXJjZS5jb25zdGFudHMnO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIERhdGFTb3VyY2VFZGl0U2VydmljZSBleHRlbmRzIEJhc2VFbXB0eVJlc291cmNlU2VydmljZTxBcHBseUVkaXRzU2VlZD4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBkc0NvbmZpZzogRGF0YVNvdXJjZUNvbmZpZykge1xuICAgIHN1cGVyKGh0dHAsIHtcbiAgICAgIHVybDogZHNDb25maWcuc2VydmljZVVybFxuICAgIH0pO1xuICB9XG5cbiAgYXBwbHlFZGl0cyhkYXRhOiBBcHBseUVkaXRzUG9kLCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxBcHBseUVkaXRzUmVzdWx0PiB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3Npbmcgb3IgaW52YWxpZCBhcHBseSBlZGl0cyBzZWVkIGRhdGEgcHJvdmlkZWQnKTtcbiAgICB9IGVsc2UgaWYgKCFkYXRhLmRhdGFTb3VyY2VJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nICdkYXRhU291cmNlSWQnIGZyb20gdGhlIGFwcGx5IGVkaXRzIHNlZWQgZGF0YWApO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsV2l0aElkKGRhdGEuZGF0YVNvdXJjZUlkLCB0aGlzLmRzQ29uZmlnLmFwcGx5RWRpdHNFbmRwb2ludCwge30pO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxBcHBseUVkaXRzUmVzdWx0Pih1cmwsIGRhdGEsIHsgcGFyYW1zIH0pO1xuICB9XG5cbiAgY3JlYXRlUmVjb3JkKFxuICAgIGRhdGFTb3VyY2VJZDogc3RyaW5nLFxuICAgIHRhYmxlOiBzdHJpbmcsXG4gICAgZmVhdHVyZTogRmVhdHVyZSxcbiAgICB2ZXJzaW9uPzogc3RyaW5nLFxuICAgIHBhcmFtcz86IEh0dHBQYXJhbXNcbiAgKTogT2JzZXJ2YWJsZTxBcHBseUVkaXRzUmVzdWx0PiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRVcmxXaXRoSWQoZGF0YVNvdXJjZUlkLCB0aGlzLmRzQ29uZmlnLmVkaXREYXRhRW5kcG9pbnQsIHsgdGFibGUgfSk7XG4gICAgcGFyYW1zID0gKHBhcmFtcyB8fCBuZXcgSHR0cFBhcmFtcygpKVxuICAgICAgLnNldCgndmVyc2lvbicsIHZlcnNpb24gfHwgRU1QVFlfUEFSQU1fVkFMVUUpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PEFwcGx5RWRpdHNSZXN1bHQ+KHVybCwgZmVhdHVyZSwgeyBwYXJhbXMgfSk7XG4gIH1cbn1cbiJdfQ==