/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
// TSS.
import { DataSourceConfig } from './data-source-config';
import { BaseResourceService } from '../core/resource/base-resource.service';
import { EMPTY_PARAM_VALUE } from '../core/resource/resource.constants';
import { isValue } from '../core/type-check/is-value.function';
import { SELECT_ALL_WHERE_CLAUSE } from './data-source.constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./data-source-config";
export class DataSourceService extends BaseResourceService {
    /**
     * @param {?} http
     * @param {?} dsConfig
     */
    constructor(http, dsConfig) {
        super(http, {
            url: dsConfig.serviceUrl,
            queryEndpoint: dsConfig.dataSourcesEndpoint,
            getEndpoint: dsConfig.dataSourcesEndpoint,
            updateEndpoint: dsConfig.dataSourcesEndpoint,
            deleteEndpoint: dsConfig.dataSourcesEndpoint,
            createEndpoint: dsConfig.dataSourcesEndpoint,
        });
        this.http = http;
        this.dsConfig = dsConfig;
    }
    /**
     * @param {?} entity
     * @param {?} useEntityFramework
     * @param {?=} params
     * @return {?}
     */
    testConnection(entity, useEntityFramework, params) {
        throw new Error('Not implemented yet');
    }
    /**
     * @param {?} id
     * @param {?=} params
     * @return {?}
     */
    testExistingConnection(id, params) {
        throw new Error('Not implemented yet');
    }
    // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables'
    /**
     * @param {?} dataSourceId
     * @param {?=} params
     * @return {?}
     */
    getTables(dataSourceId, params) {
        /** @type {?} */
        const url = this.getUrlWithId(dataSourceId, this.dsConfig.tablesEndpoint, {});
        return this.http.get(url, { params });
    }
    // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables/details'
    /**
     * @param {?} dataSourceId
     * @param {?=} params
     * @return {?}
     */
    getTableDetails(dataSourceId, params) {
        /** @type {?} */
        const url = this.getUrlWithId(dataSourceId, this.dsConfig.tableActionEndpoint, {
            action: 'details'
        });
        return this.http.get(url, { params });
    }
    // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables/:table/columns/:column/:action',
    /**
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?=} params
     * @return {?}
     */
    getColumns(dataSourceId, table, params) {
        /** @type {?} */
        const url = this.getUrlWithId(dataSourceId, this.dsConfig.columnsEndpoint, { table });
        return this.http.get(url, { params });
    }
    // api/data/sources/test_1051_sql/tables/RH.DIVIDED_ROADS/columns/SurveyDirection/values?unique=false
    /**
     * @template T
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?} column
     * @param {?=} unique
     * @param {?=} params
     * @return {?}
     */
    getColumnValues(dataSourceId, table, column, unique = false, params) {
        /** @type {?} */
        const url = this.getUrlWithId(dataSourceId, this.dsConfig.columnsEndpoint, {
            table,
            column,
            action: 'values'
        });
        params = (params || new HttpParams()).set('unique', String(unique));
        return this.http.get(url, { params });
    }
    // api/data/sources/test_1051_sql/tables/RH.DIVIDED_ROADS/columns/SurveyDirection/values?unique=true
    /**
     * @template T
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?} column
     * @param {?=} params
     * @return {?}
     */
    getUniqueColumnValues(dataSourceId, table, column, params) {
        return this.getColumnValues(dataSourceId, table, column, true, params);
    }
    // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables/:count'
    /**
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?=} whereClause
     * @param {?=} version
     * @param {?=} params
     * @return {?}
     */
    getRecordCount(dataSourceId, table, whereClause = SELECT_ALL_WHERE_CLAUSE, version, params) {
        /** @type {?} */
        const url = this.getUrlWithId(dataSourceId, this.dsConfig.tableActionEndpoint, {
            table,
            action: 'count'
        });
        params = (params || new HttpParams())
            .set('where', whereClause)
            .set('version', version || EMPTY_PARAM_VALUE);
        return this.http.get(url, { params });
    }
    // api/data/sources/test_1051_sql/tables/RH.DIVIDED_ROADS/query/details?page=1&pageSize=25&where=1%3D1
    /**
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?} whereClause
     * @param {?=} version
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} includeGeometry
     * @param {?=} shapeField
     * @param {?=} params
     * @return {?}
     */
    queryData(dataSourceId, table, whereClause, version, page, pageSize, includeGeometry, shapeField, params) {
        return this.querySpatialData(dataSourceId, table, whereClause, version, page, pageSize, includeGeometry, shapeField, 'json', params);
    }
    /**
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?} whereClause
     * @param {?=} version
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} includeGeometry
     * @param {?=} shapeField
     * @param {?=} params
     * @return {?}
     */
    queryGeoJsonData(dataSourceId, table, whereClause, version, page, pageSize, includeGeometry, shapeField, params) {
        return this.querySpatialData(dataSourceId, table, whereClause, version, page, pageSize, includeGeometry, shapeField, 'geojson', params);
    }
    /**
     * @template T
     * @param {?} dataSourceId
     * @param {?} table
     * @param {?} whereClause
     * @param {?=} version
     * @param {?=} page
     * @param {?=} pageSize
     * @param {?=} includeGeometry
     * @param {?=} shapeField
     * @param {?=} format
     * @param {?=} params
     * @return {?}
     */
    querySpatialData(dataSourceId, table, whereClause, version, page, pageSize, includeGeometry, shapeField, format, params) {
        /** @type {?} */
        const url = this.getUrlWithId(dataSourceId, this.dsConfig.tableActionEndpoint, {
            table,
            action: 'query/details'
        });
        params = (params || new HttpParams())
            .set('where', whereClause || EMPTY_PARAM_VALUE)
            .set('version', version || EMPTY_PARAM_VALUE)
            .set('page', isValue(page) ? String(page) : EMPTY_PARAM_VALUE)
            .set('pageSize', isValue(pageSize) ? String(pageSize) : EMPTY_PARAM_VALUE)
            .set('includeGeometry', isValue(includeGeometry) ? String(includeGeometry) : EMPTY_PARAM_VALUE)
            .set('shapeField', shapeField || EMPTY_PARAM_VALUE)
            .set('format', format || EMPTY_PARAM_VALUE);
        return this.http.get(url, { params });
    }
}
DataSourceService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DataSourceService.ctorParameters = () => [
    { type: HttpClient },
    { type: DataSourceConfig }
];
/** @nocollapse */ DataSourceService.ngInjectableDef = i0.defineInjectable({ factory: function DataSourceService_Factory() { return new DataSourceService(i0.inject(i1.HttpClient), i0.inject(i2.DataSourceConfig)); }, token: DataSourceService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    DataSourceService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    DataSourceService.prototype.dsConfig;
}
//# sourceMappingURL=data:application/json;base64,