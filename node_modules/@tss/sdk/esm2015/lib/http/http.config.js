/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { AutoConfig } from '../core/auto-config.decorator';
import { isRouteMatch } from './is-route-match.function';
import * as i0 from "@angular/core";
/**
 * Configuration class for storing global data caching settings.
 */
let HttpConfig = /**
 * Configuration class for storing global data caching settings.
 */
class HttpConfig {
    constructor() {
        this.paramInjectionsEnabled = true;
        this.paramInjectionDefitions = [];
    }
    /**
     * @return {?}
     */
    get hasInjections() {
        return Boolean(this.paramInjectionDefitions.length);
    }
    /**
     * @param {?} route
     * @param {?} paramName
     * @param {?} paramValue
     * @return {?}
     */
    addOrUpdateParameterInjection(route, paramName, paramValue) {
        /** @type {?} */
        const definition = {
            route,
            paramName,
            paramValue
        };
        /** @type {?} */
        const existingDefinition = this.paramInjectionDefitions.find((/**
         * @param {?} def
         * @return {?}
         */
        def => def.route === route && def.paramName === paramName));
        if (existingDefinition) {
            Object.assign(existingDefinition, definition);
            return existingDefinition;
        }
        else {
            this.paramInjectionDefitions.push(definition);
            return definition;
        }
    }
    /**
     * @param {?} route
     * @param {?} paramName
     * @param {?} paramValue
     * @return {?}
     */
    addParameterInjection(route, paramName, paramValue) {
        /** @type {?} */
        const definition = {
            route,
            paramName,
            paramValue
        };
        this.paramInjectionDefitions.push(definition);
        return definition;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    getInjectionDefinitions(route) {
        return this.paramInjectionDefitions.filter((/**
         * @param {?} def
         * @return {?}
         */
        def => isRouteMatch(route, def.route)));
    }
    /**
     * @param {?} route
     * @return {?}
     */
    getFirstInjectionDefinition(route) {
        return this.paramInjectionDefitions.find((/**
         * @param {?} def
         * @return {?}
         */
        def => isRouteMatch(route, def.route)));
    }
};
HttpConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ HttpConfig.ngInjectableDef = i0.defineInjectable({ factory: function HttpConfig_Factory() { return new HttpConfig(); }, token: HttpConfig, providedIn: "root" });
/**
 * Configuration class for storing global data caching settings.
 */
HttpConfig = tslib_1.__decorate([
    AutoConfig('HttpConfig')
], HttpConfig);
export { HttpConfig };
if (false) {
    /** @type {?} */
    HttpConfig.prototype.paramInjectionsEnabled;
    /** @type {?} */
    HttpConfig.prototype.paramInjectionDefitions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9odHRwL2h0dHAuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7O0lBVzVDLFVBQVU7OztNQUFWLFVBQVU7SUFKdkI7UUFTRSwyQkFBc0IsR0FBRyxJQUFJLENBQUM7UUFDOUIsNEJBQXVCLEdBQW1DLEVBQUUsQ0FBQztLQXFDOUQ7Ozs7SUExQ0MsSUFBSSxhQUFhO1FBQ2YsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7Ozs7SUFLRCw2QkFBNkIsQ0FBQyxLQUFzQixFQUFFLFNBQWlCLEVBQUUsVUFBa0I7O2NBQ25GLFVBQVUsR0FBaUM7WUFDL0MsS0FBSztZQUNMLFNBQVM7WUFDVCxVQUFVO1NBQ1g7O2NBRUssa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUk7Ozs7UUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFDO1FBQ3ZILElBQUksa0JBQWtCLEVBQUU7WUFDdEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUM5QyxPQUFPLGtCQUFrQixDQUFDO1NBQzNCO2FBQU07WUFDTCxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sVUFBVSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7Ozs7OztJQUVELHFCQUFxQixDQUFDLEtBQXNCLEVBQUUsU0FBaUIsRUFBRSxVQUFrQjs7Y0FDM0UsVUFBVSxHQUFHO1lBQ2pCLEtBQUs7WUFDTCxTQUFTO1lBQ1QsVUFBVTtTQUNYO1FBRUQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QyxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDOzs7OztJQUVELHVCQUF1QixDQUFDLEtBQWE7UUFDbkMsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTTs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztJQUNwRixDQUFDOzs7OztJQUVELDJCQUEyQixDQUFDLEtBQWE7UUFDdkMsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSTs7OztRQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQztJQUNsRixDQUFDO0NBQ0YsQ0FBQTs7WUEvQ0EsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7QUFFWSxVQUFVO0lBRHRCLFVBQVUsQ0FBQyxZQUFZLENBQUM7R0FDWixVQUFVLENBMkN0QjtTQTNDWSxVQUFVOzs7SUFLckIsNENBQThCOztJQUM5Qiw2Q0FBNkQiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBBdXRvQ29uZmlnIH0gZnJvbSAnLi4vY29yZS9hdXRvLWNvbmZpZy5kZWNvcmF0b3InO1xuaW1wb3J0IHsgSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbiB9IGZyb20gJy4vaHR0cC1wYXJhbS1pbmplY3Rpb24tZGVmaW5pdGlvbic7XG5pbXBvcnQgeyBpc1JvdXRlTWF0Y2ggfSBmcm9tICcuL2lzLXJvdXRlLW1hdGNoLmZ1bmN0aW9uJztcbmltcG9ydCB7IFJvdXRlRXhwcmVzc2lvbiB9IGZyb20gJy4vcm91dGUtZXhwcmVzc2lvbic7XG5cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGNsYXNzIGZvciBzdG9yaW5nIGdsb2JhbCBkYXRhIGNhY2hpbmcgc2V0dGluZ3MuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuQEF1dG9Db25maWcoJ0h0dHBDb25maWcnKVxuZXhwb3J0IGNsYXNzIEh0dHBDb25maWcge1xuICBnZXQgaGFzSW5qZWN0aW9ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnBhcmFtSW5qZWN0aW9uRGVmaXRpb25zLmxlbmd0aCk7XG4gIH1cblxuICBwYXJhbUluamVjdGlvbnNFbmFibGVkID0gdHJ1ZTtcbiAgcGFyYW1JbmplY3Rpb25EZWZpdGlvbnM6IEh0dHBQYXJhbUluamVjdGlvbkRlZmluaXRpb25bXSA9IFtdO1xuXG4gIGFkZE9yVXBkYXRlUGFyYW1ldGVySW5qZWN0aW9uKHJvdXRlOiBSb3V0ZUV4cHJlc3Npb24sIHBhcmFtTmFtZTogc3RyaW5nLCBwYXJhbVZhbHVlOiBzdHJpbmcpOiBIdHRwUGFyYW1JbmplY3Rpb25EZWZpbml0aW9uIHtcbiAgICBjb25zdCBkZWZpbml0aW9uOiBIdHRwUGFyYW1JbmplY3Rpb25EZWZpbml0aW9uID0ge1xuICAgICAgcm91dGUsXG4gICAgICBwYXJhbU5hbWUsXG4gICAgICBwYXJhbVZhbHVlXG4gICAgfTtcblxuICAgIGNvbnN0IGV4aXN0aW5nRGVmaW5pdGlvbiA9IHRoaXMucGFyYW1JbmplY3Rpb25EZWZpdGlvbnMuZmluZChkZWYgPT4gZGVmLnJvdXRlID09PSByb3V0ZSAmJiBkZWYucGFyYW1OYW1lID09PSBwYXJhbU5hbWUpO1xuICAgIGlmIChleGlzdGluZ0RlZmluaXRpb24pIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oZXhpc3RpbmdEZWZpbml0aW9uLCBkZWZpbml0aW9uKTtcbiAgICAgIHJldHVybiBleGlzdGluZ0RlZmluaXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyYW1JbmplY3Rpb25EZWZpdGlvbnMucHVzaChkZWZpbml0aW9uKTtcbiAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgIH1cbiAgfVxuXG4gIGFkZFBhcmFtZXRlckluamVjdGlvbihyb3V0ZTogUm91dGVFeHByZXNzaW9uLCBwYXJhbU5hbWU6IHN0cmluZywgcGFyYW1WYWx1ZTogc3RyaW5nKTogSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbiB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IHtcbiAgICAgIHJvdXRlLFxuICAgICAgcGFyYW1OYW1lLFxuICAgICAgcGFyYW1WYWx1ZVxuICAgIH07XG5cbiAgICB0aGlzLnBhcmFtSW5qZWN0aW9uRGVmaXRpb25zLnB1c2goZGVmaW5pdGlvbik7XG4gICAgcmV0dXJuIGRlZmluaXRpb247XG4gIH1cblxuICBnZXRJbmplY3Rpb25EZWZpbml0aW9ucyhyb3V0ZTogc3RyaW5nKTogSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbltdIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbUluamVjdGlvbkRlZml0aW9ucy5maWx0ZXIoZGVmID0+IGlzUm91dGVNYXRjaChyb3V0ZSwgZGVmLnJvdXRlKSk7XG4gIH1cblxuICBnZXRGaXJzdEluamVjdGlvbkRlZmluaXRpb24ocm91dGU6IHN0cmluZyk6IEh0dHBQYXJhbUluamVjdGlvbkRlZmluaXRpb24ge1xuICAgIHJldHVybiB0aGlzLnBhcmFtSW5qZWN0aW9uRGVmaXRpb25zLmZpbmQoZGVmID0+IGlzUm91dGVNYXRjaChyb3V0ZSwgZGVmLnJvdXRlKSk7XG4gIH1cbn1cbiJdfQ==