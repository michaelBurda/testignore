/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { Logger } from '../core/logging/logger.service';
import { HttpConfig } from './http.config';
import * as i0 from "@angular/core";
import * as i1 from "./http.config";
import * as i2 from "../core/logging/logger.service";
export class HttpParamInterceptor {
    /**
     * @param {?} config
     * @param {?} log
     */
    constructor(config, log) {
        this.config = config;
        this.log = log;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const httpParamInjections = this.config.paramInjectionsEnabled
            ? this.config.getInjectionDefinitions(request.urlWithParams)
            : [];
        if (httpParamInjections.length) {
            request = this.generateRequestWithParams(request, httpParamInjections);
        }
        return next.handle(request);
    }
    /**
     * @param {?} request
     * @param {?} httpParamInjections
     * @return {?}
     */
    generateRequestWithParams(request, httpParamInjections) {
        /** @type {?} */
        let params = request.params;
        httpParamInjections
            .forEach((/**
         * @param {?} paramInjection
         * @return {?}
         */
        paramInjection => {
            this.log.debug(`Injecting URL '${request.url}' with parameter value (name: '${paramInjection.paramName}')`);
            params = params.set(paramInjection.paramName, paramInjection.paramValue);
        }));
        return request.clone({ params });
    }
}
HttpParamInterceptor.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
HttpParamInterceptor.ctorParameters = () => [
    { type: HttpConfig },
    { type: Logger }
];
/** @nocollapse */ HttpParamInterceptor.ngInjectableDef = i0.defineInjectable({ factory: function HttpParamInterceptor_Factory() { return new HttpParamInterceptor(i0.inject(i1.HttpConfig), i0.inject(i2.Logger)); }, token: HttpParamInterceptor, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpParamInterceptor.prototype.config;
    /**
     * @type {?}
     * @private
     */
    HttpParamInterceptor.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1wYXJhbS5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2h0dHAvaHR0cC1wYXJhbS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBTzNDLE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBQy9CLFlBQW9CLE1BQWtCLEVBQVUsR0FBVztRQUF2QyxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBUTtJQUMzRCxDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsT0FBeUIsRUFBRSxJQUFpQjs7Y0FDOUMsbUJBQW1CLEdBQW1DLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCO1lBQzVGLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDNUQsQ0FBQyxDQUFDLEVBQUU7UUFFTixJQUFJLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUM5QixPQUFPLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7OztJQUVELHlCQUF5QixDQUFDLE9BQXlCLEVBQUUsbUJBQW1EOztZQUNsRyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU07UUFDM0IsbUJBQW1CO2FBQ2hCLE9BQU87Ozs7UUFBQyxjQUFjLENBQUMsRUFBRTtZQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsT0FBTyxDQUFDLEdBQUcsa0NBQWtDLGNBQWMsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDO1lBQzVHLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNFLENBQUMsRUFBQyxDQUFDO1FBRUwsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7WUE1QkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBTlEsVUFBVTtZQURWLE1BQU07Ozs7Ozs7O0lBU0Qsc0NBQTBCOzs7OztJQUFFLG1DQUFtQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cEhhbmRsZXIsIEh0dHBFdmVudCwgSHR0cEludGVyY2VwdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG4vLyAzcmQgUGFydHkuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvcmUvbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBIdHRwQ29uZmlnIH0gZnJvbSAnLi9odHRwLmNvbmZpZyc7XG5pbXBvcnQgeyBIdHRwUGFyYW1JbmplY3Rpb25EZWZpbml0aW9uIH0gZnJvbSAnLi9odHRwLXBhcmFtLWluamVjdGlvbi1kZWZpbml0aW9uJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBIdHRwUGFyYW1JbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBIdHRwQ29uZmlnLCBwcml2YXRlIGxvZzogTG9nZ2VyKSB7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgY29uc3QgaHR0cFBhcmFtSW5qZWN0aW9uczogSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbltdID0gdGhpcy5jb25maWcucGFyYW1JbmplY3Rpb25zRW5hYmxlZFxuICAgICAgPyB0aGlzLmNvbmZpZy5nZXRJbmplY3Rpb25EZWZpbml0aW9ucyhyZXF1ZXN0LnVybFdpdGhQYXJhbXMpXG4gICAgICA6IFtdO1xuXG4gICAgaWYgKGh0dHBQYXJhbUluamVjdGlvbnMubGVuZ3RoKSB7XG4gICAgICByZXF1ZXN0ID0gdGhpcy5nZW5lcmF0ZVJlcXVlc3RXaXRoUGFyYW1zKHJlcXVlc3QsIGh0dHBQYXJhbUluamVjdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KTtcbiAgfVxuXG4gIGdlbmVyYXRlUmVxdWVzdFdpdGhQYXJhbXMocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgaHR0cFBhcmFtSW5qZWN0aW9uczogSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbltdKTogSHR0cFJlcXVlc3Q8YW55PiB7XG4gICAgbGV0IHBhcmFtcyA9IHJlcXVlc3QucGFyYW1zO1xuICAgIGh0dHBQYXJhbUluamVjdGlvbnNcbiAgICAgIC5mb3JFYWNoKHBhcmFtSW5qZWN0aW9uID0+IHtcbiAgICAgICAgdGhpcy5sb2cuZGVidWcoYEluamVjdGluZyBVUkwgJyR7cmVxdWVzdC51cmx9JyB3aXRoIHBhcmFtZXRlciB2YWx1ZSAobmFtZTogJyR7cGFyYW1JbmplY3Rpb24ucGFyYW1OYW1lfScpYCk7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcy5zZXQocGFyYW1JbmplY3Rpb24ucGFyYW1OYW1lLCBwYXJhbUluamVjdGlvbi5wYXJhbVZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlcXVlc3QuY2xvbmUoeyBwYXJhbXMgfSk7XG4gIH1cbn1cbiJdfQ==