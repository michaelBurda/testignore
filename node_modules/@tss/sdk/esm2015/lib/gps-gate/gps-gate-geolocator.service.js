/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// 3rd Party.
import { Subject, of } from 'rxjs';
import { finalize, map, catchError } from 'rxjs/operators';
// TSS.
import { GeolocatorCapability } from '../geolocation/geolocator/geolocator-capability';
import { BaseGeolocator } from '../geolocation/geolocator/base-geolocator.service';
import { GeolocatorAccuracyUnit } from '../geolocation/geolocator/geolocator-accuracy-unit';
import { Logger } from '../core/logging/logger.service';
import { GpsGateConfig } from './gps-gate.config';
import { format } from '../core/formatting/format.function';
import { Geolocatable } from '../geolocation/geolocator/geolocatable.decorator';
import * as i0 from "@angular/core";
import * as i1 from "../core/logging/logger.service";
import * as i2 from "@angular/common/http";
import * as i3 from "./gps-gate.config";
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
let GpsGateGeolocator = /**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
class GpsGateGeolocator extends BaseGeolocator {
    /**
     * @param {?} log
     * @param {?} http
     * @param {?} config
     */
    constructor(log, http, config) {
        super(log);
        this.http = http;
        this.config = config;
        this.capabilities = [
            GeolocatorCapability.Altitude,
            GeolocatorCapability.AltitudeAccuracy,
            GeolocatorCapability.Heading,
            GeolocatorCapability.Speed,
            GeolocatorCapability.HDOP,
        ];
        this.accuracyUnit = GeolocatorAccuracyUnit.Hdop;
    }
    /**
     * @return {?}
     */
    get name() {
        return this.config.geolocatorName;
    }
    /**
     * @return {?}
     */
    get description() {
        return this.config.geolocatorDescription;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    getCurrentPosition(options) {
        /** @type {?} */
        const url = format(this.config.urlTemplate, {
            endpoint: this.config.getInfoEndpoint,
            cacheBuster: new Date().getTime()
        });
        return this.http.jsonp(url, this.config.jsonpParameterName)
            .pipe(map((/**
         * @param {?} info
         * @return {?}
         */
        (info) => {
            /** @type {?} */
            const timestamp = new Date(info.trackPoint.utc).getTime();
            /** @type {?} */
            const position = Object.assign({
                timestamp,
                // NOTE: We are setting accuracy to HDOP because since this geolocator does not have
                // accuracy capabilities (see capabilities property), accuracy will not be shown within
                // the UI - rather fallback PDOP, HDOP, VDOP, etc will be used. However, we want to set
                // the accuracy because this value is what will be used to do collection
                // accuracy/precision acceptance (acceptable, warning, unaceptable, etc) - RG.
                accuracy: info.trackPoint.precision.hdop,
                altitudeAccuracy: null,
                speed: info.trackPoint.velocity.groundSpeed,
                heading: info.trackPoint.velocity.heading,
                hdop: info.trackPoint.precision.hdop
            }, info.trackPoint.position);
            this.log.trace(`Received current position for ${this.name}`);
            return position;
        })))
            .toPromise();
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    watchPosition(options) {
        /** @type {?} */
        let lastPosition;
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const interval = setInterval((/**
         * @return {?}
         */
        () => {
            this.getCurrentPosition(options)
                .then((/**
             * @param {?} position
             * @return {?}
             */
            position => {
                if (notEqual(position, lastPosition)) {
                    subject.next(position);
                }
                this.log.trace(`Received watch position for ${this.name}`);
                lastPosition = position;
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            error => subject.error(error)));
        }), this.config.refreshInterval);
        return subject.pipe(finalize((/**
         * @return {?}
         */
        () => clearInterval(interval))));
    }
    /**
     * @return {?}
     */
    isAvailable() {
        return this.getVersion()
            .pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        result => Boolean(result))), catchError((/**
         * @return {?}
         */
        () => of(false))));
    }
    /**
     * @return {?}
     */
    getVersion() {
        /** @type {?} */
        const url = format(this.config.urlTemplate, {
            endpoint: this.config.getVersionEndpoint,
            cacheBuster: new Date().getTime()
        });
        return this.http.jsonp(url, this.config.jsonpParameterName);
    }
};
GpsGateGeolocator.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
GpsGateGeolocator.ctorParameters = () => [
    { type: Logger },
    { type: HttpClient },
    { type: GpsGateConfig }
];
/** @nocollapse */ GpsGateGeolocator.ngInjectableDef = i0.defineInjectable({ factory: function GpsGateGeolocator_Factory() { return new GpsGateGeolocator(i0.inject(i1.Logger), i0.inject(i2.HttpClient), i0.inject(i3.GpsGateConfig)); }, token: GpsGateGeolocator, providedIn: "root" });
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
GpsGateGeolocator = tslib_1.__decorate([
    Geolocatable('gps-gate'),
    tslib_1.__metadata("design:paramtypes", [Logger, HttpClient, GpsGateConfig])
], GpsGateGeolocator);
export { GpsGateGeolocator };
if (false) {
    /** @type {?} */
    GpsGateGeolocator.prototype.capabilities;
    /**
     * @type {?}
     * @private
     */
    GpsGateGeolocator.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GpsGateGeolocator.prototype.config;
}
/**
 * @param {?} position1
 * @param {?} position2
 * @return {?}
 */
function notEqual(position1, position2) {
    return !equal(position1, position2);
}
/**
 * @param {?} position1
 * @param {?} position2
 * @return {?}
 */
function equal(position1, position2) {
    return position1
        && position2
        && position1.timestamp === position2.timestamp
        && position1.latitude === position2.latitude
        && position1.longitude === position2.longitude
        && position1.accuracy === position2.accuracy
        && position1.speed === position2.speed
        && position1.heading === position2.heading
        && position1.altitude === position2.altitude
        && position1.altitudeAccuracy === position2.altitudeAccuracy
        && position1.pdop === position2.pdop
        && position1.hdop === position2.hdop
        && position1.vdop === position2.vdop
        && position1.tdop === position2.tdop;
}
//# sourceMappingURL=data:application/json;base64,