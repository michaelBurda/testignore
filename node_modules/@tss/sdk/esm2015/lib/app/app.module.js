/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Injector, CUSTOM_ELEMENTS_SCHEMA, APP_INITIALIZER } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { TssCoreModule } from '../core/core.module';
import { TssSecurityModule } from '../security/security.module';
import { TssDataSourceModule } from '../data-source/data-source.module';
import { TssPolyfillModule } from '../polyfill/polyfill.module';
import { AppInitializerFactory, AppInitializerService } from './app-initializer.service';
import { AppProfileService } from './app-profile.service';
import { ApiService } from './api.service';
import { TssQueueModule } from '../queuing/queue.module';
import { TssHttpModule } from '../http/http.module';
const ɵ0 = AppInitializerFactory;
export class TssAppModule {
}
TssAppModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpClientModule,
                    RouterModule,
                    TssCoreModule,
                    TssPolyfillModule,
                    TssHttpModule,
                    TssDataSourceModule,
                    TssQueueModule,
                    TssSecurityModule,
                ],
                declarations: [],
                exports: [],
                providers: [
                    AppProfileService,
                    ApiService,
                    AppInitializerService,
                    {
                        provide: APP_INITIALIZER,
                        useFactory: ɵ0,
                        multi: true,
                        deps: [Injector]
                    }
                ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA]
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHAubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVoRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7V0F3QmxDLHFCQUFxQjtBQU92QyxNQUFNLE9BQU8sWUFBWTs7O1lBNUJ4QixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLGdCQUFnQjtvQkFDaEIsWUFBWTtvQkFDWixhQUFhO29CQUNiLGlCQUFpQjtvQkFDakIsYUFBYTtvQkFDYixtQkFBbUI7b0JBQ25CLGNBQWM7b0JBQ2QsaUJBQWlCO2lCQUNsQjtnQkFDRCxZQUFZLEVBQUUsRUFDYjtnQkFDRCxPQUFPLEVBQUUsRUFDUjtnQkFDRCxTQUFTLEVBQUU7b0JBQ1QsaUJBQWlCO29CQUNqQixVQUFVO29CQUNWLHFCQUFxQjtvQkFDckI7d0JBQ0UsT0FBTyxFQUFFLGVBQWU7d0JBQ3hCLFVBQVUsSUFBdUI7d0JBQ2pDLEtBQUssRUFBRSxJQUFJO3dCQUNYLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQztxQkFDakI7aUJBQ0Y7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsc0JBQXNCLENBQUM7YUFDbEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0b3IsIENVU1RPTV9FTEVNRU5UU19TQ0hFTUEsIEFQUF9JTklUSUFMSVpFUiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IFRzc0NvcmVNb2R1bGUgfSBmcm9tICcuLi9jb3JlL2NvcmUubW9kdWxlJztcbmltcG9ydCB7IFRzc1NlY3VyaXR5TW9kdWxlIH0gZnJvbSAnLi4vc2VjdXJpdHkvc2VjdXJpdHkubW9kdWxlJztcbmltcG9ydCB7IFRzc0RhdGFTb3VyY2VNb2R1bGUgfSBmcm9tICcuLi9kYXRhLXNvdXJjZS9kYXRhLXNvdXJjZS5tb2R1bGUnO1xuaW1wb3J0IHsgVHNzUG9seWZpbGxNb2R1bGUgfSBmcm9tICcuLi9wb2x5ZmlsbC9wb2x5ZmlsbC5tb2R1bGUnO1xuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi9hcHAuY29uZmlnJztcbmltcG9ydCB7IEFwcEluaXRpYWxpemVyRmFjdG9yeSwgQXBwSW5pdGlhbGl6ZXJTZXJ2aWNlIH0gZnJvbSAnLi9hcHAtaW5pdGlhbGl6ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBQcm9maWxlU2VydmljZSB9IGZyb20gJy4vYXBwLXByb2ZpbGUuc2VydmljZSc7XG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBUc3NRdWV1ZU1vZHVsZSB9IGZyb20gJy4uL3F1ZXVpbmcvcXVldWUubW9kdWxlJztcbmltcG9ydCB7IFRzc0h0dHBNb2R1bGUgfSBmcm9tICcuLi9odHRwL2h0dHAubW9kdWxlJztcblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgSHR0cENsaWVudE1vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUsXG4gICAgVHNzQ29yZU1vZHVsZSxcbiAgICBUc3NQb2x5ZmlsbE1vZHVsZSxcbiAgICBUc3NIdHRwTW9kdWxlLFxuICAgIFRzc0RhdGFTb3VyY2VNb2R1bGUsXG4gICAgVHNzUXVldWVNb2R1bGUsXG4gICAgVHNzU2VjdXJpdHlNb2R1bGUsXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICBdLFxuICBleHBvcnRzOiBbXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIEFwcFByb2ZpbGVTZXJ2aWNlLFxuICAgIEFwaVNlcnZpY2UsXG4gICAgQXBwSW5pdGlhbGl6ZXJTZXJ2aWNlLFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgIHVzZUZhY3Rvcnk6IEFwcEluaXRpYWxpemVyRmFjdG9yeSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgZGVwczogW0luamVjdG9yXVxuICAgIH1cbiAgXSxcbiAgc2NoZW1hczogW0NVU1RPTV9FTEVNRU5UU19TQ0hFTUFdXG59KVxuZXhwb3J0IGNsYXNzIFRzc0FwcE1vZHVsZSB7XG59XG4iXX0=