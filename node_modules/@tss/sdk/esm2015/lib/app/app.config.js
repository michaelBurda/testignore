/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ResourceConfig } from '../core/resource.config';
import { AutoConfig } from '../core/auto-config.decorator';
import * as i0 from "@angular/core";
/** @type {?} */
export const DEFAULT_APP_ID = 'all';
/** @type {?} */
export const DEFAULT_PROFILE_ID = 'default';
/**
 * Application related configuration options. These settings are used to
 * drive all general "global" application related behaviour. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
let AppConfig = /**
 * Application related configuration options. These settings are used to
 * drive all general "global" application related behaviour. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
class AppConfig extends ResourceConfig {
    constructor() {
        super(...arguments);
        this.appId = DEFAULT_APP_ID;
        this.queryProfile = true;
        this.profileId = null;
        this.profile = null;
        this.defaultProfileId = DEFAULT_PROFILE_ID;
        this.allowQueryParamInjections = true;
        this.continueOnAppBootstrapError = false;
        this.appSettingsEndpoint = 'api/apps/{appId}/settings/{id}';
        this.appProfileEndpoint = 'api/apps/{appId}/profiles/{id}';
        this.pingEndpoint = 'api/ping';
        this.statusEndpoint = 'api/status';
    }
};
AppConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ AppConfig.ngInjectableDef = i0.defineInjectable({ factory: function AppConfig_Factory() { return new AppConfig(); }, token: AppConfig, providedIn: "root" });
/**
 * Application related configuration options. These settings are used to
 * drive all general "global" application related behaviour. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
AppConfig = tslib_1.__decorate([
    AutoConfig('AppConfig')
], AppConfig);
export { AppConfig };
if (false) {
    /** @type {?} */
    AppConfig.prototype.appId;
    /** @type {?} */
    AppConfig.prototype.queryProfile;
    /** @type {?} */
    AppConfig.prototype.profileId;
    /** @type {?} */
    AppConfig.prototype.profile;
    /** @type {?} */
    AppConfig.prototype.defaultProfileId;
    /** @type {?} */
    AppConfig.prototype.allowQueryParamInjections;
    /** @type {?} */
    AppConfig.prototype.continueOnAppBootstrapError;
    /** @type {?} */
    AppConfig.prototype.appSettingsEndpoint;
    /** @type {?} */
    AppConfig.prototype.appProfileEndpoint;
    /** @type {?} */
    AppConfig.prototype.pingEndpoint;
    /** @type {?} */
    AppConfig.prototype.statusEndpoint;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHAuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7QUFJM0QsTUFBTSxPQUFPLGNBQWMsR0FBRyxLQUFLOztBQUNuQyxNQUFNLE9BQU8sa0JBQWtCLEdBQUcsU0FBUzs7Ozs7O0lBWTlCLFNBQVM7Ozs7O01BQVQsU0FBVSxTQUFRLGNBQWM7SUFKN0M7O1FBS0UsVUFBSyxHQUFHLGNBQWMsQ0FBQztRQUN2QixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixjQUFTLEdBQVcsSUFBSSxDQUFDO1FBQ3pCLFlBQU8sR0FBZSxJQUFJLENBQUM7UUFDM0IscUJBQWdCLEdBQUcsa0JBQWtCLENBQUM7UUFDdEMsOEJBQXlCLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLGdDQUEyQixHQUFHLEtBQUssQ0FBQztRQUNwQyx3QkFBbUIsR0FBRyxnQ0FBZ0MsQ0FBQztRQUN2RCx1QkFBa0IsR0FBRyxnQ0FBZ0MsQ0FBQztRQUN0RCxpQkFBWSxHQUFHLFVBQVUsQ0FBQztRQUMxQixtQkFBYyxHQUFHLFlBQVksQ0FBQztLQUMvQjtDQUFBLENBQUE7O1lBaEJBLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7QUFFWSxTQUFTO0lBRHJCLFVBQVUsQ0FBQyxXQUFXLENBQUM7R0FDWCxTQUFTLENBWXJCO1NBWlksU0FBUzs7O0lBQ3BCLDBCQUF1Qjs7SUFDdkIsaUNBQW9COztJQUNwQiw4QkFBeUI7O0lBQ3pCLDRCQUEyQjs7SUFDM0IscUNBQXNDOztJQUN0Qyw4Q0FBaUM7O0lBQ2pDLGdEQUFvQzs7SUFDcEMsd0NBQXVEOztJQUN2RCx1Q0FBc0Q7O0lBQ3RELGlDQUEwQjs7SUFDMUIsbUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVzb3VyY2VDb25maWcgfSBmcm9tICcuLi9jb3JlL3Jlc291cmNlLmNvbmZpZyc7XG5pbXBvcnQgeyBBdXRvQ29uZmlnIH0gZnJvbSAnLi4vY29yZS9hdXRvLWNvbmZpZy5kZWNvcmF0b3InO1xuaW1wb3J0IHsgQXBwUHJvZmlsZSB9IGZyb20gJy4vYXBwLXByb2ZpbGUnO1xuXG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FQUF9JRCA9ICdhbGwnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJPRklMRV9JRCA9ICdkZWZhdWx0JztcblxuXG4vKipcbiAqIEFwcGxpY2F0aW9uIHJlbGF0ZWQgY29uZmlndXJhdGlvbiBvcHRpb25zLiBUaGVzZSBzZXR0aW5ncyBhcmUgdXNlZCB0b1xuICogZHJpdmUgYWxsIGdlbmVyYWwgXCJnbG9iYWxcIiBhcHBsaWNhdGlvbiByZWxhdGVkIGJlaGF2aW91ci4gVGhlIHNldHRpbmdzIGNhbiBiZVxuICogb3ZlcnJpZGRlbiBkaXJlY3RseSBpbiB0aGUgY29kZSwgYXBwbGljYXRpb24gbW9kdWxlLCBvciBmcm9tIHRoZSBURFMgc2VydmVyLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbkBBdXRvQ29uZmlnKCdBcHBDb25maWcnKVxuZXhwb3J0IGNsYXNzIEFwcENvbmZpZyBleHRlbmRzIFJlc291cmNlQ29uZmlnIHtcbiAgYXBwSWQgPSBERUZBVUxUX0FQUF9JRDtcbiAgcXVlcnlQcm9maWxlID0gdHJ1ZTtcbiAgcHJvZmlsZUlkOiBzdHJpbmcgPSBudWxsO1xuICBwcm9maWxlOiBBcHBQcm9maWxlID0gbnVsbDtcbiAgZGVmYXVsdFByb2ZpbGVJZCA9IERFRkFVTFRfUFJPRklMRV9JRDtcbiAgYWxsb3dRdWVyeVBhcmFtSW5qZWN0aW9ucyA9IHRydWU7XG4gIGNvbnRpbnVlT25BcHBCb290c3RyYXBFcnJvciA9IGZhbHNlO1xuICBhcHBTZXR0aW5nc0VuZHBvaW50ID0gJ2FwaS9hcHBzL3thcHBJZH0vc2V0dGluZ3Mve2lkfSc7XG4gIGFwcFByb2ZpbGVFbmRwb2ludCA9ICdhcGkvYXBwcy97YXBwSWR9L3Byb2ZpbGVzL3tpZH0nO1xuICBwaW5nRW5kcG9pbnQgPSAnYXBpL3BpbmcnO1xuICBzdGF0dXNFbmRwb2ludCA9ICdhcGkvc3RhdHVzJztcbn1cbiJdfQ==