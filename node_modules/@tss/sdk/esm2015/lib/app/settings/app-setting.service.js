/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// TSS.
import { BaseResourceService } from '../../core/resource/base-resource.service';
import { ALL_APP_SETTINGS_QUERY_ID } from './app-setting';
import { AppConfig } from '../app.config';
import { join } from '../../core/url/join.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../app.config";
export class AppSettingService extends BaseResourceService {
    /**
     * @param {?} http
     * @param {?} config
     */
    constructor(http, config) {
        super(http, {
            url: join(config.serviceUrl, config.appSettingsEndpoint),
            defaultRouteTokens: {
                appId: config.appId
            }
        });
        this.http = http;
    }
    /**
     * Retrieves a list of application settings.
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    queryAllApps(routeTokens, params) {
        routeTokens = routeTokens || {};
        routeTokens.appId = ALL_APP_SETTINGS_QUERY_ID;
        return super.query(routeTokens, params);
    }
}
AppSettingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AppSettingService.ctorParameters = () => [
    { type: HttpClient },
    { type: AppConfig }
];
/** @nocollapse */ AppSettingService.ngInjectableDef = i0.defineInjectable({ factory: function AppSettingService_Factory() { return new AppSettingService(i0.inject(i1.HttpClient), i0.inject(i2.AppConfig)); }, token: AppSettingService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AppSettingService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXNldHRpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2FwcC9zZXR0aW5ncy9hcHAtc2V0dGluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sc0JBQXNCLENBQUM7O0FBTTlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ2hGLE9BQU8sRUFBYyx5QkFBeUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQU1wRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsbUJBQStCOzs7OztJQUNwRSxZQUFzQixJQUFnQixFQUFFLE1BQWlCO1FBQ3ZELEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDVixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFDO1lBQ3hELGtCQUFrQixFQUFFO2dCQUNsQixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7YUFDcEI7U0FDRixDQUFDLENBQUM7UUFOaUIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQU90QyxDQUFDOzs7Ozs7O0lBS0QsWUFBWSxDQUFDLFdBQWlCLEVBQUUsTUFBbUI7UUFDakQsV0FBVyxHQUFHLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFDaEMsV0FBVyxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQztRQUM5QyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7OztZQXBCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFkUSxVQUFVO1lBUVYsU0FBUzs7Ozs7Ozs7SUFRSixpQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLy8gM3JkIHBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBCYXNlUmVzb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29yZS9yZXNvdXJjZS9iYXNlLXJlc291cmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwU2V0dGluZywgQUxMX0FQUF9TRVRUSU5HU19RVUVSWV9JRCB9IGZyb20gJy4vYXBwLXNldHRpbmcnO1xuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi4vYXBwLmNvbmZpZyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAnLi4vLi4vY29yZS91cmwvam9pbi5mdW5jdGlvbic7XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXBwU2V0dGluZ1NlcnZpY2UgZXh0ZW5kcyBCYXNlUmVzb3VyY2VTZXJ2aWNlPEFwcFNldHRpbmc+IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQsIGNvbmZpZzogQXBwQ29uZmlnKSB7XG4gICAgc3VwZXIoaHR0cCwge1xuICAgICAgdXJsOiBqb2luKGNvbmZpZy5zZXJ2aWNlVXJsLCBjb25maWcuYXBwU2V0dGluZ3NFbmRwb2ludCksXG4gICAgICBkZWZhdWx0Um91dGVUb2tlbnM6IHtcbiAgICAgICAgYXBwSWQ6IGNvbmZpZy5hcHBJZFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIGxpc3Qgb2YgYXBwbGljYXRpb24gc2V0dGluZ3MuXG4gICAqL1xuICBxdWVyeUFsbEFwcHMocm91dGVUb2tlbnM/OiBhbnksIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPEFwcFNldHRpbmdbXT4ge1xuICAgIHJvdXRlVG9rZW5zID0gcm91dGVUb2tlbnMgfHwge307XG4gICAgcm91dGVUb2tlbnMuYXBwSWQgPSBBTExfQVBQX1NFVFRJTkdTX1FVRVJZX0lEO1xuICAgIHJldHVybiBzdXBlci5xdWVyeShyb3V0ZVRva2VucywgcGFyYW1zKTtcbiAgfVxufVxuIl19