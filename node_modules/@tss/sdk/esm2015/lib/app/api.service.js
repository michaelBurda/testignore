/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
// TSS.
import { AppConfig } from './app.config';
import { BaseEmptyResourceService } from '../core/resource/base-empty-resource.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./app.config";
/**
 * @record
 */
export function ApiStatus() { }
if (false) {
    /** @type {?} */
    ApiStatus.prototype.up;
    /** @type {?} */
    ApiStatus.prototype.down;
    /** @type {?} */
    ApiStatus.prototype.configStoreUp;
    /** @type {?} */
    ApiStatus.prototype.configStoreDown;
    /** @type {?} */
    ApiStatus.prototype.upSince;
    /** @type {?} */
    ApiStatus.prototype.daysUp;
    /** @type {?} */
    ApiStatus.prototype.appCount;
}
export class ApiService extends BaseEmptyResourceService {
    /**
     * @param {?} http
     * @param {?} appConfig
     */
    constructor(http, appConfig) {
        super(http, appConfig.serviceUrl);
        this.appConfig = appConfig;
    }
    /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    ping(routeTokens, params) {
        /** @type {?} */
        const url = this.getUrl(this.appConfig.pingEndpoint, routeTokens);
        return this.http.get(url, { params });
    }
    /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    status(routeTokens, params) {
        /** @type {?} */
        const url = this.getUrl(this.appConfig.pingEndpoint, routeTokens);
        return this.http.get(url, { params });
    }
}
ApiService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ApiService.ctorParameters = () => [
    { type: HttpClient },
    { type: AppConfig }
];
/** @nocollapse */ ApiService.ngInjectableDef = i0.defineInjectable({ factory: function ApiService_Factory() { return new ApiService(i0.inject(i1.HttpClient), i0.inject(i2.AppConfig)); }, token: ApiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApiService.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9hcHAvYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFjLE1BQU0sc0JBQXNCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFNM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7Ozs7OztBQUd4RiwrQkFRQzs7O0lBUEMsdUJBQVk7O0lBQ1oseUJBQWM7O0lBQ2Qsa0NBQXVCOztJQUN2QixvQ0FBeUI7O0lBQ3pCLDRCQUFjOztJQUNkLDJCQUFlOztJQUNmLDZCQUFpQjs7QUFPbkIsTUFBTSxPQUFPLFVBQVcsU0FBUSx3QkFBbUM7Ozs7O0lBQ2pFLFlBQVksSUFBZ0IsRUFBVSxTQUFvQjtRQUN4RCxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQURFLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFFMUQsQ0FBQzs7Ozs7O0lBRUQsSUFBSSxDQUFDLFdBQWlCLEVBQUUsTUFBbUI7O2NBQ25DLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQztRQUNqRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFPLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7O0lBRUQsTUFBTSxDQUFDLFdBQWlCLEVBQUUsTUFBbUI7O2NBQ3JDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQztRQUNqRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFZLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBaEJGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQXhCUSxVQUFVO1lBT1YsU0FBUzs7Ozs7Ozs7SUFtQmMsK0JBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIDNyZCBwYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi9hcHAuY29uZmlnJztcbmltcG9ydCB7IEJhc2VFbXB0eVJlc291cmNlU2VydmljZSB9IGZyb20gJy4uL2NvcmUvcmVzb3VyY2UvYmFzZS1lbXB0eS1yZXNvdXJjZS5zZXJ2aWNlJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIEFwaVN0YXR1cyB7XG4gIHVwOiBib29sZWFuO1xuICBkb3duOiBib29sZWFuO1xuICBjb25maWdTdG9yZVVwOiBib29sZWFuO1xuICBjb25maWdTdG9yZURvd246IGJvb2xlYW47XG4gIHVwU2luY2U6IERhdGU7XG4gIGRheXNVcDogbnVtYmVyO1xuICBhcHBDb3VudDogbnVtYmVyO1xufVxuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFwaVNlcnZpY2UgZXh0ZW5kcyBCYXNlRW1wdHlSZXNvdXJjZVNlcnZpY2U8QXBpU3RhdHVzPiB7XG4gIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgYXBwQ29uZmlnOiBBcHBDb25maWcpIHtcbiAgICBzdXBlcihodHRwLCBhcHBDb25maWcuc2VydmljZVVybCk7XG4gIH1cblxuICBwaW5nKHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRVcmwodGhpcy5hcHBDb25maWcucGluZ0VuZHBvaW50LCByb3V0ZVRva2Vucyk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8dm9pZD4odXJsLCB7IHBhcmFtcyB9KTtcbiAgfVxuXG4gIHN0YXR1cyhyb3V0ZVRva2Vucz86IGFueSwgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8QXBpU3RhdHVzPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRVcmwodGhpcy5hcHBDb25maWcucGluZ0VuZHBvaW50LCByb3V0ZVRva2Vucyk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8QXBpU3RhdHVzPih1cmwsIHsgcGFyYW1zIH0pO1xuICB9XG59XG4iXX0=