/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
// 3rd Party.
import { PersistentCacheStorage } from './cache.storage';
import * as i0 from "@angular/core";
import * as i1 from "./cache.storage";
/**
 * Cache Service is an observables based in-memory cache implementation
 * Keeps track of in-flight observables and sets a default expiry for cached values
 */
export class CacheService {
    /**
     * @param {?} cache
     */
    constructor(cache) {
        this.cache = cache;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        /** @type {?} */
        const cacheItem = this.cache.getObject(key);
        /** @type {?} */
        const now = new Date();
        /** @type {?} */
        let cacheData;
        if (cacheItem && cacheItem.expires && cacheItem.expires.getTime() < now.getTime()) {
            this.cache.remove(key);
        }
        else if (cacheItem) {
            // NOTE: We can't just pull the serialized data, because
            // we need an actual instance of the HttpResponse class.
            cacheData = Object.assign(new HttpResponse(), cacheItem.value);
        }
        else {
            cacheData = null;
        }
        return cacheData;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} timeToLive
     * @return {?}
     */
    set(key, value, timeToLive = null) {
        /** @type {?} */
        const expires = timeToLive ? this.getExpireDate(timeToLive) : null;
        /** @type {?} */
        const cacheData = { expires, value };
        this.cache.setObject(key, cacheData);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    has(key) {
        return this.cache.has(key);
    }
    /**
     * @private
     * @param {?=} timeToLive
     * @return {?}
     */
    getExpireDate(timeToLive = null) {
        /** @type {?} */
        const expires = new Date();
        expires.setSeconds(expires.getSeconds() + timeToLive);
        return expires;
    }
}
CacheService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CacheService.ctorParameters = () => [
    { type: PersistentCacheStorage }
];
/** @nocollapse */ CacheService.ngInjectableDef = i0.defineInjectable({ factory: function CacheService_Factory() { return new CacheService(i0.inject(i1.PersistentCacheStorage)); }, token: CacheService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CacheService.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NhY2hlL2NhY2hlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFHcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7QUFXekQsTUFBTSxPQUFPLFlBQVk7Ozs7SUFDdkIsWUFBb0IsS0FBNkI7UUFBN0IsVUFBSyxHQUFMLEtBQUssQ0FBd0I7SUFDakQsQ0FBQzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBVzs7Y0FDUCxTQUFTLEdBQWlCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQzs7Y0FDbkQsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFOztZQUNsQixTQUE0QjtRQUVoQyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2pGLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO2FBQU0sSUFBSSxTQUFTLEVBQUU7WUFDcEIsd0RBQXdEO1lBQ3hELHdEQUF3RDtZQUN4RCxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksRUFBTyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyRTthQUFNO1lBQ0wsU0FBUyxHQUFHLElBQUksQ0FBQztTQUNsQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Ozs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQXdCLEVBQUUsYUFBcUIsSUFBSTs7Y0FDNUQsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTs7Y0FDNUQsU0FBUyxHQUFpQixFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7UUFFbEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7OztJQUVPLGFBQWEsQ0FBQyxhQUFxQixJQUFJOztjQUN2QyxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDMUIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsVUFBVSxDQUFDLENBQUM7UUFFdEQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7O1lBekNGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVZRLHNCQUFzQjs7Ozs7Ozs7SUFZakIsNkJBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgUGVyc2lzdGVudENhY2hlU3RvcmFnZSB9IGZyb20gJy4vY2FjaGUuc3RvcmFnZSc7XG5pbXBvcnQgeyBDYWNoZUNvbnRlbnQgfSBmcm9tICcuL2NhY2hlLWNvbnRlbnQnO1xuXG5cbi8qKlxuICogQ2FjaGUgU2VydmljZSBpcyBhbiBvYnNlcnZhYmxlcyBiYXNlZCBpbi1tZW1vcnkgY2FjaGUgaW1wbGVtZW50YXRpb25cbiAqIEtlZXBzIHRyYWNrIG9mIGluLWZsaWdodCBvYnNlcnZhYmxlcyBhbmQgc2V0cyBhIGRlZmF1bHQgZXhwaXJ5IGZvciBjYWNoZWQgdmFsdWVzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENhY2hlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FjaGU6IFBlcnNpc3RlbnRDYWNoZVN0b3JhZ2UpIHtcbiAgfVxuXG4gIGdldChrZXk6IHN0cmluZyk6IEh0dHBSZXNwb25zZTxhbnk+IHtcbiAgICBjb25zdCBjYWNoZUl0ZW06IENhY2hlQ29udGVudCA9IHRoaXMuY2FjaGUuZ2V0T2JqZWN0KGtleSk7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgY2FjaGVEYXRhOiBIdHRwUmVzcG9uc2U8YW55PjtcblxuICAgIGlmIChjYWNoZUl0ZW0gJiYgY2FjaGVJdGVtLmV4cGlyZXMgJiYgY2FjaGVJdGVtLmV4cGlyZXMuZ2V0VGltZSgpIDwgbm93LmdldFRpbWUoKSkge1xuICAgICAgdGhpcy5jYWNoZS5yZW1vdmUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGNhY2hlSXRlbSkge1xuICAgICAgLy8gTk9URTogV2UgY2FuJ3QganVzdCBwdWxsIHRoZSBzZXJpYWxpemVkIGRhdGEsIGJlY2F1c2VcbiAgICAgIC8vIHdlIG5lZWQgYW4gYWN0dWFsIGluc3RhbmNlIG9mIHRoZSBIdHRwUmVzcG9uc2UgY2xhc3MuXG4gICAgICBjYWNoZURhdGEgPSBPYmplY3QuYXNzaWduKG5ldyBIdHRwUmVzcG9uc2U8YW55PigpLCBjYWNoZUl0ZW0udmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZURhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZURhdGE7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBIdHRwUmVzcG9uc2U8YW55PiwgdGltZVRvTGl2ZTogbnVtYmVyID0gbnVsbCkge1xuICAgIGNvbnN0IGV4cGlyZXMgPSB0aW1lVG9MaXZlID8gdGhpcy5nZXRFeHBpcmVEYXRlKHRpbWVUb0xpdmUpIDogbnVsbDtcbiAgICBjb25zdCBjYWNoZURhdGE6IENhY2hlQ29udGVudCA9IHsgZXhwaXJlcywgdmFsdWUgfTtcblxuICAgIHRoaXMuY2FjaGUuc2V0T2JqZWN0KGtleSwgY2FjaGVEYXRhKTtcbiAgfVxuXG4gIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBpcmVEYXRlKHRpbWVUb0xpdmU6IG51bWJlciA9IG51bGwpOiBEYXRlIHtcbiAgICBjb25zdCBleHBpcmVzID0gbmV3IERhdGUoKTtcbiAgICBleHBpcmVzLnNldFNlY29uZHMoZXhwaXJlcy5nZXRTZWNvbmRzKCkgKyB0aW1lVG9MaXZlKTtcblxuICAgIHJldHVybiBleHBpcmVzO1xuICB9XG59XG4iXX0=