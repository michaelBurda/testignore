/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angualr.
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
// 3rd Party.
import { of, throwError } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
// TSS.
import { CacheService } from './cache.service';
import { CacheConfig } from './cache.config';
import { Logger } from '../core/logging/logger.service';
import { CacheStrategy } from './cache-strategy';
import { hasTokens } from '../core/tokens/has-tokens.function';
import { isString } from '../core/type-check/is-string.function';
import { extractTokenValuesFromTemplate } from '../core/tokens/extract-token-values-from-template.function';
import { format } from '../core/formatting/format.function';
import { CACHE_ONLY_NO_DATA_EXC_MSG } from './cache.constants';
import * as i0 from "@angular/core";
import * as i1 from "./cache.config";
import * as i2 from "./cache.service";
import * as i3 from "../core/logging/logger.service";
/**
 * @param {?} strategy
 * @return {?}
 */
function shouldCheckCacheFirst(strategy) {
    return strategy === CacheStrategy.CacheFirst
        || strategy === CacheStrategy.Fastest
        || strategy === CacheStrategy.CacheOnly;
}
/**
 * @param {?} definition
 * @param {?} requestUrl
 * @return {?}
 */
function getCacheKey(definition, requestUrl) {
    /** @type {?} */
    let cacheKey = definition.cacheId || requestUrl;
    if (hasTokens(cacheKey) && isString(definition.route)) {
        /** @type {?} */
        const tokenValues = extractTokenValuesFromTemplate((/** @type {?} */ (definition.route)), requestUrl);
        cacheKey = format(cacheKey, tokenValues, true);
    }
    return cacheKey;
}
export class CacheInterceptor {
    /**
     * @param {?} config
     * @param {?} cache
     * @param {?} log
     */
    constructor(config, cache, log) {
        this.config = config;
        this.cache = cache;
        this.log = log;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const allowCaching = request.method === 'GET' && this.config.cacheEnabled;
        /** @type {?} */
        let matchingCacheDefinition;
        // TODO: Handle request method type.
        // TDOO: Handle global use cache only.
        if (allowCaching) {
            matchingCacheDefinition = this.config.getCacheDefinition(request.urlWithParams);
            /** @type {?} */
            const strategy = matchingCacheDefinition
                ? this.config.forcedGlobalCacheStrategy || matchingCacheDefinition.strategy
                : null;
            if (matchingCacheDefinition && shouldCheckCacheFirst(strategy)) {
                /** @type {?} */
                const cacheKey = getCacheKey(matchingCacheDefinition, request.url);
                /** @type {?} */
                const isCacheOnly = strategy === CacheStrategy.CacheOnly;
                /** @type {?} */
                const cachedResponse = this.cache.get(cacheKey);
                if (cachedResponse) {
                    this.log.debug(`Resolving HTTP request from cache: '${request.url}'`);
                    return of(cachedResponse);
                }
                else if (isCacheOnly) {
                    return throwError(new Error(CACHE_ONLY_NO_DATA_EXC_MSG));
                }
            }
        }
        this.log.trace(`Making HTTP request: '${request.url}'`);
        /** @type {?} */
        let continuedResponse = next.handle(request);
        // If a matched cache definition is found, then we need to handle caching when the request when it is complete.
        if (allowCaching && matchingCacheDefinition) {
            continuedResponse = this.cacheResponse(continuedResponse, request, matchingCacheDefinition);
        }
        return continuedResponse;
    }
    /**
     * @private
     * @param {?} source
     * @param {?} request
     * @param {?} cacheDefinition
     * @return {?}
     */
    cacheResponse(source, request, cacheDefinition) {
        /** @type {?} */
        const cacheKey = getCacheKey(cacheDefinition, request.url);
        return source.pipe(tap((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (cacheDefinition && event instanceof HttpResponse) {
                this.log.debug(`Caching HTTP request: '${request.url}'`);
                this.cache.set(cacheKey, event, cacheDefinition.expires);
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            /** @type {?} */
            const cachedData = this.cache.get(cacheKey);
            if (cachedData) {
                this.log.debug(`Failed to resolve cacheable HTTP request from URL '${request.url}', fallingback to cache`);
                return of(cachedData);
            }
            else {
                this.log.debug(`Failed to resolve cacheable HTTP request from URL '${request.url}' and no cached data available`);
                throw error;
            }
        })));
    }
}
CacheInterceptor.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CacheInterceptor.ctorParameters = () => [
    { type: CacheConfig },
    { type: CacheService },
    { type: Logger }
];
/** @nocollapse */ CacheInterceptor.ngInjectableDef = i0.defineInjectable({ factory: function CacheInterceptor_Factory() { return new CacheInterceptor(i0.inject(i1.CacheConfig), i0.inject(i2.CacheService), i0.inject(i3.Logger)); }, token: CacheInterceptor, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CacheInterceptor.prototype.config;
    /**
     * @type {?}
     * @private
     */
    CacheInterceptor.prototype.cache;
    /**
     * @type {?}
     * @private
     */
    CacheInterceptor.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,