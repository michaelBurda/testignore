/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable, Injector } from '@angular/core';
// 3rd party.
import { forkJoin, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { GEOLOCATOR_REGISTRY } from '../geolocation.constants';
import * as i0 from "@angular/core";
export class GeolocatorSourceService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getGeolocator(id) {
        /** @type {?} */
        const registry = GEOLOCATOR_REGISTRY.find((/**
         * @param {?} registedSource
         * @return {?}
         */
        registedSource => registedSource.id === id));
        return this.getLocatorFromRegistry(registry);
    }
    /**
     * @return {?}
     */
    getGeolocators() {
        return GEOLOCATOR_REGISTRY
            .map((/**
         * @param {?} registry
         * @return {?}
         */
        registry => this.getLocatorFromRegistry(registry)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getGeolocatorSource(id) {
        return this.getGeolocatorSources()
            .pipe(map((/**
         * @param {?} devices
         * @return {?}
         */
        devices => devices.find((/**
         * @param {?} device
         * @return {?}
         */
        device => device.id === id)))));
    }
    /**
     * @return {?}
     */
    getAvailableGeolocatorSources() {
        return this.getGeolocatorSources()
            .pipe(map((/**
         * @param {?} devices
         * @return {?}
         */
        devices => devices.filter((/**
         * @param {?} device
         * @return {?}
         */
        device => device.isAvailable)))));
    }
    /**
     * @return {?}
     */
    getGeolocatorSources() {
        /** @type {?} */
        const availableObservables = GEOLOCATOR_REGISTRY
            .map((/**
         * @param {?} registry
         * @return {?}
         */
        registry => {
            /** @type {?} */
            const locator = this.getLocatorFromRegistry(registry);
            /** @type {?} */
            const source = {
                id: registry.id,
                name: locator.name,
                description: locator.description,
                accuracyUnit: locator.accuracyUnit,
                capabilities: locator.capabilities,
                isAvailable: false,
            };
            return locator.isAvailable()
                .pipe(tap((/**
             * @param {?} available
             * @return {?}
             */
            available => source.isAvailable = available)), map((/**
             * @return {?}
             */
            () => source)));
        }));
        return availableObservables.length === 0
            ? of([])
            : forkJoin(availableObservables);
    }
    /**
     * @private
     * @param {?} registry
     * @return {?}
     */
    getLocatorFromRegistry(registry) {
        /** @type {?} */
        const instance = this.injector.get(registry.constructor);
        return instance;
    }
}
GeolocatorSourceService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
GeolocatorSourceService.ctorParameters = () => [
    { type: Injector }
];
/** @nocollapse */ GeolocatorSourceService.ngInjectableDef = i0.defineInjectable({ factory: function GeolocatorSourceService_Factory() { return new GeolocatorSourceService(i0.inject(i0.INJECTOR)); }, token: GeolocatorSourceService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    GeolocatorSourceService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRvci1zb3VyY2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2dlb2xvY2F0aW9uL2dlb2xvY2F0b3IvZ2VvbG9jYXRvci1zb3VyY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUdyRCxPQUFPLEVBQWMsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOztBQUsvRCxNQUFNLE9BQU8sdUJBQXVCOzs7O0lBRWxDLFlBQTZCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDL0MsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsRUFBVTs7Y0FDaEIsUUFBUSxHQUFHLG1CQUFtQixDQUFDLElBQUk7Ozs7UUFBQyxjQUFjLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFDO1FBQ3JGLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1osT0FBTyxtQkFBbUI7YUFDdkIsR0FBRzs7OztRQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxFQUFDLENBQUM7SUFDNUQsQ0FBQzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxFQUFVO1FBQzVCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixFQUFFO2FBQy9CLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSTs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUMsRUFBQyxDQUN6RCxDQUFDO0lBQ04sQ0FBQzs7OztJQUVELDZCQUE2QjtRQUMzQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsRUFBRTthQUMvQixJQUFJLENBQ0gsR0FBRzs7OztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU07Ozs7UUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUMsRUFBQyxDQUM3RCxDQUFDO0lBQ04sQ0FBQzs7OztJQUVELG9CQUFvQjs7Y0FDWixvQkFBb0IsR0FBRyxtQkFBbUI7YUFDN0MsR0FBRzs7OztRQUFDLFFBQVEsQ0FBQyxFQUFFOztrQkFDUixPQUFPLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQzs7a0JBQy9DLE1BQU0sR0FBcUI7Z0JBQy9CLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDZixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7Z0JBQ2xCLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztnQkFDaEMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxZQUFZO2dCQUNsQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFlBQVk7Z0JBQ2xDLFdBQVcsRUFBRSxLQUFLO2FBQ25CO1lBRUQsT0FBTyxPQUFPLENBQUMsV0FBVyxFQUFFO2lCQUN6QixJQUFJLENBQ0gsR0FBRzs7OztZQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxTQUFTLEVBQUMsRUFDaEQsR0FBRzs7O1lBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFDLENBQ2xCLENBQUM7UUFDTixDQUFDLEVBQUM7UUFFSixPQUFPLG9CQUFvQixDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ3RDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7OztJQUVPLHNCQUFzQixDQUFDLFFBQTBDOztjQUNqRSxRQUFRLEdBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNwRSxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7WUExREYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztZQVpiLFFBQVE7Ozs7Ozs7O0lBZWYsMkNBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIDNyZCBwYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUsIGZvcmtKb2luLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IEdlb2xvY2F0b3JTb3VyY2UgfSBmcm9tICcuL2dlb2xvY2F0b3Itc291cmNlJztcbmltcG9ydCB7IEdFT0xPQ0FUT1JfUkVHSVNUUlkgfSBmcm9tICcuLi9nZW9sb2NhdGlvbi5jb25zdGFudHMnO1xuaW1wb3J0IHsgR2VvbG9jYXRvciB9IGZyb20gJy4vZ2VvbG9jYXRvcic7XG5cblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBHZW9sb2NhdG9yU291cmNlU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgfVxuXG4gIGdldEdlb2xvY2F0b3IoaWQ6IHN0cmluZyk6IEdlb2xvY2F0b3Ige1xuICAgIGNvbnN0IHJlZ2lzdHJ5ID0gR0VPTE9DQVRPUl9SRUdJU1RSWS5maW5kKHJlZ2lzdGVkU291cmNlID0+IHJlZ2lzdGVkU291cmNlLmlkID09PSBpZCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TG9jYXRvckZyb21SZWdpc3RyeShyZWdpc3RyeSk7XG4gIH1cblxuICBnZXRHZW9sb2NhdG9ycygpOiBHZW9sb2NhdG9yW10ge1xuICAgIHJldHVybiBHRU9MT0NBVE9SX1JFR0lTVFJZXG4gICAgICAubWFwKHJlZ2lzdHJ5ID0+IHRoaXMuZ2V0TG9jYXRvckZyb21SZWdpc3RyeShyZWdpc3RyeSkpO1xuICB9XG5cbiAgZ2V0R2VvbG9jYXRvclNvdXJjZShpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxHZW9sb2NhdG9yU291cmNlPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0R2VvbG9jYXRvclNvdXJjZXMoKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChkZXZpY2VzID0+IGRldmljZXMuZmluZChkZXZpY2UgPT4gZGV2aWNlLmlkID09PSBpZCkpXG4gICAgICApO1xuICB9XG5cbiAgZ2V0QXZhaWxhYmxlR2VvbG9jYXRvclNvdXJjZXMoKTogT2JzZXJ2YWJsZTxHZW9sb2NhdG9yU291cmNlW10+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRHZW9sb2NhdG9yU291cmNlcygpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKGRldmljZXMgPT4gZGV2aWNlcy5maWx0ZXIoZGV2aWNlID0+IGRldmljZS5pc0F2YWlsYWJsZSkpXG4gICAgICApO1xuICB9XG5cbiAgZ2V0R2VvbG9jYXRvclNvdXJjZXMoKTogT2JzZXJ2YWJsZTxHZW9sb2NhdG9yU291cmNlW10+IHtcbiAgICBjb25zdCBhdmFpbGFibGVPYnNlcnZhYmxlcyA9IEdFT0xPQ0FUT1JfUkVHSVNUUllcbiAgICAgIC5tYXAocmVnaXN0cnkgPT4ge1xuICAgICAgICBjb25zdCBsb2NhdG9yID0gdGhpcy5nZXRMb2NhdG9yRnJvbVJlZ2lzdHJ5KHJlZ2lzdHJ5KTtcbiAgICAgICAgY29uc3Qgc291cmNlOiBHZW9sb2NhdG9yU291cmNlID0ge1xuICAgICAgICAgIGlkOiByZWdpc3RyeS5pZCxcbiAgICAgICAgICBuYW1lOiBsb2NhdG9yLm5hbWUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGxvY2F0b3IuZGVzY3JpcHRpb24sXG4gICAgICAgICAgYWNjdXJhY3lVbml0OiBsb2NhdG9yLmFjY3VyYWN5VW5pdCxcbiAgICAgICAgICBjYXBhYmlsaXRpZXM6IGxvY2F0b3IuY2FwYWJpbGl0aWVzLFxuICAgICAgICAgIGlzQXZhaWxhYmxlOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbG9jYXRvci5pc0F2YWlsYWJsZSgpXG4gICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICB0YXAoYXZhaWxhYmxlID0+IHNvdXJjZS5pc0F2YWlsYWJsZSA9IGF2YWlsYWJsZSksXG4gICAgICAgICAgICBtYXAoKCkgPT4gc291cmNlKVxuICAgICAgICAgICk7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBhdmFpbGFibGVPYnNlcnZhYmxlcy5sZW5ndGggPT09IDBcbiAgICAgID8gb2YoW10pXG4gICAgICA6IGZvcmtKb2luKGF2YWlsYWJsZU9ic2VydmFibGVzKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TG9jYXRvckZyb21SZWdpc3RyeShyZWdpc3RyeTogeyBpZDogc3RyaW5nLCBjb25zdHJ1Y3RvcjogYW55IH0pOiBHZW9sb2NhdG9yIHtcbiAgICBjb25zdCBpbnN0YW5jZTogR2VvbG9jYXRvciA9IHRoaXMuaW5qZWN0b3IuZ2V0KHJlZ2lzdHJ5LmNvbnN0cnVjdG9yKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cbn1cbiJdfQ==