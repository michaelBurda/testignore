/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { GeolocatorAccuracyUnit } from './geolocator-accuracy-unit';
import { Logger } from '../../core/logging/logger.service';
import * as i0 from "@angular/core";
import * as i1 from "../../core/logging/logger.service";
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 * @abstract
 */
export class BaseGeolocator {
    /**
     * @param {?} log
     */
    constructor(log) {
        this.log = log;
        this.capabilities = [];
        this.accuracyUnit = GeolocatorAccuracyUnit.Meter;
    }
    /**
     * @param {?} capability
     * @return {?}
     */
    hasCapability(capability) {
        return this.capabilities.indexOf(capability) > -1;
    }
}
BaseGeolocator.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
BaseGeolocator.ctorParameters = () => [
    { type: Logger }
];
/** @nocollapse */ BaseGeolocator.ngInjectableDef = i0.defineInjectable({ factory: function BaseGeolocator_Factory() { return new BaseGeolocator(i0.inject(i1.Logger)); }, token: BaseGeolocator, providedIn: "root" });
if (false) {
    /** @type {?} */
    BaseGeolocator.prototype.capabilities;
    /** @type {?} */
    BaseGeolocator.prototype.accuracyUnit;
    /**
     * @type {?}
     * @protected
     */
    BaseGeolocator.prototype.log;
    /**
     * @abstract
     * @return {?}
     */
    BaseGeolocator.prototype.name = function () { };
    /**
     * @abstract
     * @return {?}
     */
    BaseGeolocator.prototype.description = function () { };
    /**
     * Get the device's current position.
     * @abstract
     * @param {?=} options
     * @return {?}
     */
    BaseGeolocator.prototype.getCurrentPosition = function (options) { };
    /**
     * Watch the current device's position.  Clear the watch by unsubscribing from
     * Observable changes.
     *
     * ```typescript
     * const subscription = this.geolocation.watchPosition()
     *                               .filter(p => Boolean(p.coords)) //Filter Out Errors
     *                               .subscribe(position =>
     *   console.log(position.coords.longitude + ' ' + position.coords.latitude)
     * );
     *
     * // To stop notifications
     * subscription.unsubscribe();
     * ```
     * @abstract
     * @param {?=} options
     * @return {?}
     */
    BaseGeolocator.prototype.watchPosition = function (options) { };
    /**
     * @abstract
     * @return {?}
     */
    BaseGeolocator.prototype.isAvailable = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1nZW9sb2NhdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9nZW9sb2NhdGlvbi9nZW9sb2NhdG9yL2Jhc2UtZ2VvbG9jYXRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUdwRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7Ozs7O0FBVzNELE1BQU0sT0FBZ0IsY0FBYzs7OztJQU1sQyxZQUErQixHQUFXO1FBQVgsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUwxQyxpQkFBWSxHQUEyQixFQUFFLENBQUM7UUFDMUMsaUJBQVksR0FBMkIsc0JBQXNCLENBQUMsS0FBSyxDQUFDO0lBS3BFLENBQUM7Ozs7O0lBeUJELGFBQWEsQ0FBQyxVQUFnQztRQUM1QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7OztZQXJDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFWUSxNQUFNOzs7OztJQVliLHNDQUEwQzs7SUFDMUMsc0NBQW9FOzs7OztJQUl4RCw2QkFBOEI7Ozs7O0lBSDFDLGdEQUE0Qjs7Ozs7SUFDNUIsdURBQW1DOzs7Ozs7O0lBUW5DLHFFQUE2RTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWlCN0UsZ0VBQTJFOzs7OztJQUMzRSx1REFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyAzcmQgUGFydHkuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBHZW9sb2NhdG9yQWNjdXJhY3lVbml0IH0gZnJvbSAnLi9nZW9sb2NhdG9yLWFjY3VyYWN5LXVuaXQnO1xuaW1wb3J0IHsgR3BzUG9zaXRpb24gfSBmcm9tICcuLi9ncHMtcG9zaXRpb24vZ3BzLXBvc2l0aW9uJztcbmltcG9ydCB7IEdlb2xvY2F0b3JDYXBhYmlsaXR5IH0gZnJvbSAnLi9nZW9sb2NhdG9yLWNhcGFiaWxpdHknO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vY29yZS9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IEdlb2xvY2F0b3IgfSBmcm9tICcuL2dlb2xvY2F0b3InO1xuXG5cbi8qKlxuICogV3JhcHBlciBmb3IgZ2VvbG9jYXRpb24gc2VydmljZS4gVGhlIHdyYXBwZXIgcHJpbWFyaWx5IGV4aXN0cyB0byBhYnN0cmFjdCB0aGUgZGlyZWN0IGludGVyYWN0aW9uIHdpdGhcbiAqIHRoZSBcIm5hdmlnYXRvclwiIG9iamVjdCBhbmQgdG8gYWxsb3cgZm9yIGluamVjdGluZyBvdGhlciBpbXBsZW1lbnRhdGlvbnMgb2YgZ2VvbG9jYXRpb24gZnVuY3Rpb25hbGl0eS5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUdlb2xvY2F0b3IgaW1wbGVtZW50cyBHZW9sb2NhdG9yIHtcbiAgY2FwYWJpbGl0aWVzOiBHZW9sb2NhdG9yQ2FwYWJpbGl0eVtdID0gW107XG4gIGFjY3VyYWN5VW5pdDogR2VvbG9jYXRvckFjY3VyYWN5VW5pdCA9IEdlb2xvY2F0b3JBY2N1cmFjeVVuaXQuTWV0ZXI7XG4gIGFic3RyYWN0IGdldCBuYW1lKCk6IHN0cmluZztcbiAgYWJzdHJhY3QgZ2V0IGRlc2NyaXB0aW9uKCk6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZG9ubHkgbG9nOiBMb2dnZXIpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRldmljZSdzIGN1cnJlbnQgcG9zaXRpb24uXG4gICAqL1xuICBhYnN0cmFjdCBnZXRDdXJyZW50UG9zaXRpb24ob3B0aW9ucz86IFBvc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8R3BzUG9zaXRpb24+O1xuXG4gIC8qKlxuICAgKiBXYXRjaCB0aGUgY3VycmVudCBkZXZpY2UncyBwb3NpdGlvbi4gIENsZWFyIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb21cbiAgICogT2JzZXJ2YWJsZSBjaGFuZ2VzLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbigpXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIocCA9PiBCb29sZWFuKHAuY29vcmRzKSkgLy9GaWx0ZXIgT3V0IEVycm9yc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHBvc2l0aW9uID0+XG4gICAqICAgY29uc29sZS5sb2cocG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSArICcgJyArIHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSlcbiAgICogKTtcbiAgICpcbiAgICogLy8gVG8gc3RvcCBub3RpZmljYXRpb25zXG4gICAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgKiBgYGBcbiAgICovXG4gIGFic3RyYWN0IHdhdGNoUG9zaXRpb24ob3B0aW9ucz86IFBvc2l0aW9uT3B0aW9ucyk6IE9ic2VydmFibGU8R3BzUG9zaXRpb24+O1xuICBhYnN0cmFjdCBpc0F2YWlsYWJsZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIGhhc0NhcGFiaWxpdHkoY2FwYWJpbGl0eTogR2VvbG9jYXRvckNhcGFiaWxpdHkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jYXBhYmlsaXRpZXMuaW5kZXhPZihjYXBhYmlsaXR5KSA+IC0xO1xuICB9XG59XG4iXX0=