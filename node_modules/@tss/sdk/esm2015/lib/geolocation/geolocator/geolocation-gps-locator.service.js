/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
// 3rd Party.
import { Subject, of } from 'rxjs';
import { finalize } from 'rxjs/operators';
// TSS.
import { Geolocatable } from './geolocatable.decorator';
import { BaseGeolocator } from './base-geolocator.service';
import { positionToGpsPosition } from '../gps-position/position-to-gps-position.function';
import { GeolocatorCapability } from './geolocator-capability';
import { Logger } from '../../core/logging/logger.service';
import { GeolocationConfig } from '../geolocation.config';
import { GEOLOCATION_GEOLOCATOR_ID } from '../geolocation.constants';
import * as i0 from "@angular/core";
import * as i1 from "../../core/logging/logger.service";
import * as i2 from "../geolocation.config";
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
let GeolocationGeolocator = /**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
class GeolocationGeolocator extends BaseGeolocator {
    /**
     * @param {?} log
     * @param {?} config
     */
    constructor(log, config) {
        super(log);
        this.config = config;
        this.capabilities = [
            GeolocatorCapability.Accuracy,
            GeolocatorCapability.Altitude,
            GeolocatorCapability.AltitudeAccuracy,
            GeolocatorCapability.Heading,
            GeolocatorCapability.Speed,
        ];
    }
    /**
     * @return {?}
     */
    get name() {
        return this.config.geolocationGeolocatorName;
    }
    /**
     * @return {?}
     */
    get description() {
        return this.config.geolocationGeolocatorDescription;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    getCurrentPosition(options) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => navigator.geolocation
            .getCurrentPosition((/**
         * @param {?} position
         * @return {?}
         */
        (position) => {
            this.log.trace(`Received current position for ${this.name}`);
            resolve(positionToGpsPosition(position));
        }), reject, options)));
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    watchPosition(options) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const watchId = navigator.geolocation.watchPosition((/**
         * @param {?} position
         * @return {?}
         */
        position => {
            this.log.trace(`Received watch position for ${this.name}`);
            subject.next(positionToGpsPosition(position));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => subject.error(error)), options);
        return subject.pipe(finalize((/**
         * @return {?}
         */
        () => navigator.geolocation.clearWatch(watchId))));
    }
    /**
     * @return {?}
     */
    isAvailable() {
        return of('geolocation' in navigator);
    }
};
GeolocationGeolocator.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
GeolocationGeolocator.ctorParameters = () => [
    { type: Logger },
    { type: GeolocationConfig }
];
/** @nocollapse */ GeolocationGeolocator.ngInjectableDef = i0.defineInjectable({ factory: function GeolocationGeolocator_Factory() { return new GeolocationGeolocator(i0.inject(i1.Logger), i0.inject(i2.GeolocationConfig)); }, token: GeolocationGeolocator, providedIn: "root" });
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
GeolocationGeolocator = tslib_1.__decorate([
    Geolocatable(GEOLOCATION_GEOLOCATOR_ID),
    tslib_1.__metadata("design:paramtypes", [Logger, GeolocationConfig])
], GeolocationGeolocator);
export { GeolocationGeolocator };
if (false) {
    /** @type {?} */
    GeolocationGeolocator.prototype.capabilities;
    /**
     * @type {?}
     * @private
     */
    GeolocationGeolocator.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24tZ3BzLWxvY2F0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2dlb2xvY2F0aW9uL2dlb2xvY2F0b3IvZ2VvbG9jYXRpb24tZ3BzLWxvY2F0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxPQUFPLEVBQWMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFM0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDMUYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7OztJQVN4RCxxQkFBcUI7Ozs7TUFBckIscUJBQXNCLFNBQVEsY0FBYzs7Ozs7SUFpQnZELFlBQVksR0FBVyxFQUFtQixNQUF5QjtRQUNqRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFENkIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFoQm5FLGlCQUFZLEdBQUc7WUFDYixvQkFBb0IsQ0FBQyxRQUFRO1lBQzdCLG9CQUFvQixDQUFDLFFBQVE7WUFDN0Isb0JBQW9CLENBQUMsZ0JBQWdCO1lBQ3JDLG9CQUFvQixDQUFDLE9BQU87WUFDNUIsb0JBQW9CLENBQUMsS0FBSztTQUMzQixDQUFDO0lBWUYsQ0FBQzs7OztJQVZELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDO0lBQ3RELENBQUM7Ozs7O0lBTUQsa0JBQWtCLENBQUMsT0FBeUI7UUFDMUMsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FDbEQsU0FBUyxDQUFDLFdBQVc7YUFDbEIsa0JBQWtCOzs7O1FBQUMsQ0FBQyxRQUFrQixFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzdELE9BQU8sQ0FDTCxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FDaEMsQ0FBQztRQUNKLENBQUMsR0FBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQ3RCLENBQUM7SUFDSixDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxPQUF5Qjs7Y0FDL0IsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFlOztjQUNwQyxPQUFPLEdBQUcsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhOzs7O1FBQ2pELFFBQVEsQ0FBQyxFQUFFO1lBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsK0JBQStCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzNELE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDOzs7O1FBQ0QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUM3QixPQUFPLENBQ1I7UUFFRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLFFBQVE7OztRQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQzFELENBQUM7SUFDSixDQUFDOzs7O0lBRUQsV0FBVztRQUNULE9BQU8sRUFBRSxDQUFDLGFBQWEsSUFBSSxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0YsQ0FBQTs7WUF0REEsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztZQVR6QixNQUFNO1lBQ04saUJBQWlCOzs7Ozs7O0FBVWIscUJBQXFCO0lBRGpDLFlBQVksQ0FBQyx5QkFBeUIsQ0FBQzs2Q0FrQnJCLE1BQU0sRUFBMkIsaUJBQWlCO0dBakJ4RCxxQkFBcUIsQ0FvRGpDO1NBcERZLHFCQUFxQjs7O0lBQ2hDLDZDQU1FOzs7OztJQVV1Qix1Q0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyAzcmQgUGFydHkuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IEdlb2xvY2F0YWJsZSB9IGZyb20gJy4vZ2VvbG9jYXRhYmxlLmRlY29yYXRvcic7XG5pbXBvcnQgeyBCYXNlR2VvbG9jYXRvciB9IGZyb20gJy4vYmFzZS1nZW9sb2NhdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3BzUG9zaXRpb24gfSBmcm9tICcuLi9ncHMtcG9zaXRpb24vZ3BzLXBvc2l0aW9uJztcbmltcG9ydCB7IHBvc2l0aW9uVG9HcHNQb3NpdGlvbiB9IGZyb20gJy4uL2dwcy1wb3NpdGlvbi9wb3NpdGlvbi10by1ncHMtcG9zaXRpb24uZnVuY3Rpb24nO1xuaW1wb3J0IHsgR2VvbG9jYXRvckNhcGFiaWxpdHkgfSBmcm9tICcuL2dlb2xvY2F0b3ItY2FwYWJpbGl0eSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi8uLi9jb3JlL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgR2VvbG9jYXRpb25Db25maWcgfSBmcm9tICcuLi9nZW9sb2NhdGlvbi5jb25maWcnO1xuaW1wb3J0IHsgR0VPTE9DQVRJT05fR0VPTE9DQVRPUl9JRCB9IGZyb20gJy4uL2dlb2xvY2F0aW9uLmNvbnN0YW50cyc7XG5cblxuLyoqXG4gKiBXcmFwcGVyIGZvciBnZW9sb2NhdGlvbiBzZXJ2aWNlLiBUaGUgd3JhcHBlciBwcmltYXJpbHkgZXhpc3RzIHRvIGFic3RyYWN0IHRoZSBkaXJlY3QgaW50ZXJhY3Rpb24gd2l0aFxuICogdGhlIFwibmF2aWdhdG9yXCIgb2JqZWN0IGFuZCB0byBhbGxvdyBmb3IgaW5qZWN0aW5nIG90aGVyIGltcGxlbWVudGF0aW9ucyBvZiBnZW9sb2NhdGlvbiBmdW5jdGlvbmFsaXR5LlxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuQEdlb2xvY2F0YWJsZShHRU9MT0NBVElPTl9HRU9MT0NBVE9SX0lEKVxuZXhwb3J0IGNsYXNzIEdlb2xvY2F0aW9uR2VvbG9jYXRvciBleHRlbmRzIEJhc2VHZW9sb2NhdG9yIHtcbiAgY2FwYWJpbGl0aWVzID0gW1xuICAgIEdlb2xvY2F0b3JDYXBhYmlsaXR5LkFjY3VyYWN5LFxuICAgIEdlb2xvY2F0b3JDYXBhYmlsaXR5LkFsdGl0dWRlLFxuICAgIEdlb2xvY2F0b3JDYXBhYmlsaXR5LkFsdGl0dWRlQWNjdXJhY3ksXG4gICAgR2VvbG9jYXRvckNhcGFiaWxpdHkuSGVhZGluZyxcbiAgICBHZW9sb2NhdG9yQ2FwYWJpbGl0eS5TcGVlZCxcbiAgXTtcblxuICBnZXQgbmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5nZW9sb2NhdGlvbkdlb2xvY2F0b3JOYW1lO1xuICB9XG5cbiAgZ2V0IGRlc2NyaXB0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmdlb2xvY2F0aW9uR2VvbG9jYXRvckRlc2NyaXB0aW9uO1xuICB9XG5cbiAgY29uc3RydWN0b3IobG9nOiBMb2dnZXIsIHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBHZW9sb2NhdGlvbkNvbmZpZykge1xuICAgIHN1cGVyKGxvZyk7XG4gIH1cblxuICBnZXRDdXJyZW50UG9zaXRpb24ob3B0aW9ucz86IFBvc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8R3BzUG9zaXRpb24+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8R3BzUG9zaXRpb24+KChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb25cbiAgICAgICAgLmdldEN1cnJlbnRQb3NpdGlvbigocG9zaXRpb246IFBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgdGhpcy5sb2cudHJhY2UoYFJlY2VpdmVkIGN1cnJlbnQgcG9zaXRpb24gZm9yICR7dGhpcy5uYW1lfWApO1xuICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICBwb3NpdGlvblRvR3BzUG9zaXRpb24ocG9zaXRpb24pXG4gICAgICAgICAgKTtcbiAgICAgICAgfSwgcmVqZWN0LCBvcHRpb25zKVxuICAgICk7XG4gIH1cblxuICB3YXRjaFBvc2l0aW9uKG9wdGlvbnM/OiBQb3NpdGlvbk9wdGlvbnMpOiBPYnNlcnZhYmxlPEdwc1Bvc2l0aW9uPiB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0PEdwc1Bvc2l0aW9uPigpO1xuICAgIGNvbnN0IHdhdGNoSWQgPSBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihcbiAgICAgIHBvc2l0aW9uID0+IHtcbiAgICAgICAgdGhpcy5sb2cudHJhY2UoYFJlY2VpdmVkIHdhdGNoIHBvc2l0aW9uIGZvciAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgc3ViamVjdC5uZXh0KHBvc2l0aW9uVG9HcHNQb3NpdGlvbihwb3NpdGlvbikpO1xuICAgICAgfSxcbiAgICAgIGVycm9yID0+IHN1YmplY3QuZXJyb3IoZXJyb3IpLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG5cbiAgICByZXR1cm4gc3ViamVjdC5waXBlKFxuICAgICAgZmluYWxpemUoKCkgPT4gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2god2F0Y2hJZCkpXG4gICAgKTtcbiAgfVxuXG4gIGlzQXZhaWxhYmxlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBvZignZ2VvbG9jYXRpb24nIGluIG5hdmlnYXRvcik7XG4gIH1cbn1cbiJdfQ==