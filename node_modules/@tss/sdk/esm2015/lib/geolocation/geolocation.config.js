/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { AutoConfig } from '../core/auto-config.decorator';
import { DEFAULT_POINT_EQUALITY_PRECISION } from '../core/equality/equality.constants';
import * as i0 from "@angular/core";
/**
 * Configuration class for storing geolocation-related settings.
 */
let GeolocationConfig = /**
 * Configuration class for storing geolocation-related settings.
 */
class GeolocationConfig {
    constructor() {
        this.gpsDisplayDecimalPlaces = 3;
        this.gpsWarnableAccuracyMeters = 5;
        this.gpsRequiredAccuracyMeters = 10;
        this.gpsWarnableDilutionOfPrecision = 2;
        this.gpsRequiredDilutionOfPrecision = 5;
        this.gpsEnableHighAccuracy = true;
        this.gpsNoAccuracyReading = '--';
        this.allowGpsMocking = true;
        this.emitDuplicateGpsPositions = false;
        this.gpsPositionDuplicatePrecision = DEFAULT_POINT_EQUALITY_PRECISION;
        this.gpsAntennaHeight = 0;
        this.adjustForGpsAntennaHeight = true;
        this.calculateMissingPositionValues = true;
        this.geolocationGeolocatorName = 'Built-in (default)';
        this.geolocationGeolocatorDescription = `Uses the device's built-in GPS sensor within the hardware. ` +
            `Devices without a GPS sensor will defer the location retrieval to the Inernet Service Provider (ISP).`;
    }
};
GeolocationConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ GeolocationConfig.ngInjectableDef = i0.defineInjectable({ factory: function GeolocationConfig_Factory() { return new GeolocationConfig(); }, token: GeolocationConfig, providedIn: "root" });
/**
 * Configuration class for storing geolocation-related settings.
 */
GeolocationConfig = tslib_1.__decorate([
    AutoConfig('GeolocationConfig')
], GeolocationConfig);
export { GeolocationConfig };
if (false) {
    /** @type {?} */
    GeolocationConfig.prototype.gpsDisplayDecimalPlaces;
    /** @type {?} */
    GeolocationConfig.prototype.gpsWarnableAccuracyMeters;
    /** @type {?} */
    GeolocationConfig.prototype.gpsRequiredAccuracyMeters;
    /** @type {?} */
    GeolocationConfig.prototype.gpsWarnableDilutionOfPrecision;
    /** @type {?} */
    GeolocationConfig.prototype.gpsRequiredDilutionOfPrecision;
    /** @type {?} */
    GeolocationConfig.prototype.gpsEnableHighAccuracy;
    /** @type {?} */
    GeolocationConfig.prototype.gpsNoAccuracyReading;
    /** @type {?} */
    GeolocationConfig.prototype.allowGpsMocking;
    /** @type {?} */
    GeolocationConfig.prototype.emitDuplicateGpsPositions;
    /** @type {?} */
    GeolocationConfig.prototype.gpsPositionDuplicatePrecision;
    /** @type {?} */
    GeolocationConfig.prototype.gpsAntennaHeight;
    /** @type {?} */
    GeolocationConfig.prototype.adjustForGpsAntennaHeight;
    /** @type {?} */
    GeolocationConfig.prototype.calculateMissingPositionValues;
    /** @type {?} */
    GeolocationConfig.prototype.geolocationGeolocatorName;
    /** @type {?} */
    GeolocationConfig.prototype.geolocationGeolocatorDescription;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24uY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZ2VvbG9jYXRpb24vZ2VvbG9jYXRpb24uY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7Ozs7SUFVMUUsaUJBQWlCOzs7TUFBakIsaUJBQWlCO0lBSjlCO1FBS0UsNEJBQXVCLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLDhCQUF5QixHQUFHLENBQUMsQ0FBQztRQUM5Qiw4QkFBeUIsR0FBRyxFQUFFLENBQUM7UUFDL0IsbUNBQThCLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLG1DQUE4QixHQUFHLENBQUMsQ0FBQztRQUNuQywwQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDN0IseUJBQW9CLEdBQUcsSUFBSSxDQUFDO1FBQzVCLG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLDhCQUF5QixHQUFHLEtBQUssQ0FBQztRQUNsQyxrQ0FBNkIsR0FBRyxnQ0FBZ0MsQ0FBQztRQUNqRSxxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIsOEJBQXlCLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLG1DQUE4QixHQUFHLElBQUksQ0FBQztRQUN0Qyw4QkFBeUIsR0FBRyxvQkFBb0IsQ0FBQztRQUNqRCxxQ0FBZ0MsR0FBRyw2REFBNkQ7WUFDOUYsdUdBQXVHLENBQUM7S0FDM0c7Q0FBQSxDQUFBOztZQXJCQSxVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7OztBQUVZLGlCQUFpQjtJQUQ3QixVQUFVLENBQUMsbUJBQW1CLENBQUM7R0FDbkIsaUJBQWlCLENBaUI3QjtTQWpCWSxpQkFBaUI7OztJQUM1QixvREFBNEI7O0lBQzVCLHNEQUE4Qjs7SUFDOUIsc0RBQStCOztJQUMvQiwyREFBbUM7O0lBQ25DLDJEQUFtQzs7SUFDbkMsa0RBQTZCOztJQUM3QixpREFBNEI7O0lBQzVCLDRDQUF1Qjs7SUFDdkIsc0RBQWtDOztJQUNsQywwREFBaUU7O0lBQ2pFLDZDQUFxQjs7SUFDckIsc0RBQWlDOztJQUNqQywyREFBc0M7O0lBQ3RDLHNEQUFpRDs7SUFDakQsNkRBQzBHIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgQXV0b0NvbmZpZyB9IGZyb20gJy4uL2NvcmUvYXV0by1jb25maWcuZGVjb3JhdG9yJztcbmltcG9ydCB7IERFRkFVTFRfUE9JTlRfRVFVQUxJVFlfUFJFQ0lTSU9OIH0gZnJvbSAnLi4vY29yZS9lcXVhbGl0eS9lcXVhbGl0eS5jb25zdGFudHMnO1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBjbGFzcyBmb3Igc3RvcmluZyBnZW9sb2NhdGlvbi1yZWxhdGVkIHNldHRpbmdzLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbkBBdXRvQ29uZmlnKCdHZW9sb2NhdGlvbkNvbmZpZycpXG5leHBvcnQgY2xhc3MgR2VvbG9jYXRpb25Db25maWcge1xuICBncHNEaXNwbGF5RGVjaW1hbFBsYWNlcyA9IDM7XG4gIGdwc1dhcm5hYmxlQWNjdXJhY3lNZXRlcnMgPSA1O1xuICBncHNSZXF1aXJlZEFjY3VyYWN5TWV0ZXJzID0gMTA7XG4gIGdwc1dhcm5hYmxlRGlsdXRpb25PZlByZWNpc2lvbiA9IDI7XG4gIGdwc1JlcXVpcmVkRGlsdXRpb25PZlByZWNpc2lvbiA9IDU7XG4gIGdwc0VuYWJsZUhpZ2hBY2N1cmFjeSA9IHRydWU7XG4gIGdwc05vQWNjdXJhY3lSZWFkaW5nID0gJy0tJztcbiAgYWxsb3dHcHNNb2NraW5nID0gdHJ1ZTtcbiAgZW1pdER1cGxpY2F0ZUdwc1Bvc2l0aW9ucyA9IGZhbHNlO1xuICBncHNQb3NpdGlvbkR1cGxpY2F0ZVByZWNpc2lvbiA9IERFRkFVTFRfUE9JTlRfRVFVQUxJVFlfUFJFQ0lTSU9OO1xuICBncHNBbnRlbm5hSGVpZ2h0ID0gMDtcbiAgYWRqdXN0Rm9yR3BzQW50ZW5uYUhlaWdodCA9IHRydWU7XG4gIGNhbGN1bGF0ZU1pc3NpbmdQb3NpdGlvblZhbHVlcyA9IHRydWU7XG4gIGdlb2xvY2F0aW9uR2VvbG9jYXRvck5hbWUgPSAnQnVpbHQtaW4gKGRlZmF1bHQpJztcbiAgZ2VvbG9jYXRpb25HZW9sb2NhdG9yRGVzY3JpcHRpb24gPSBgVXNlcyB0aGUgZGV2aWNlJ3MgYnVpbHQtaW4gR1BTIHNlbnNvciB3aXRoaW4gdGhlIGhhcmR3YXJlLiBgICtcbiAgICBgRGV2aWNlcyB3aXRob3V0IGEgR1BTIHNlbnNvciB3aWxsIGRlZmVyIHRoZSBsb2NhdGlvbiByZXRyaWV2YWwgdG8gdGhlIEluZXJuZXQgU2VydmljZSBQcm92aWRlciAoSVNQKS5gO1xufVxuIl19