/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// 3rd Party.
import { ReplaySubject, Subject } from 'rxjs';
import distance from '@turf/distance';
import bearing from '@turf/bearing';
// App.
import { isPositionAcceptable } from './is-position-acceptable.function';
import { Logger } from '../core/logging/logger.service';
import { NotifyService } from '../core/notify/notify.service';
import { GeolocationConfig } from './geolocation.config';
import { GeolocatorAccuracyUnit } from './geolocator/geolocator-accuracy-unit';
import { GeolocatorCapability } from './geolocator/geolocator-capability';
import { isPositionError } from './gps-position/is-position-error.function';
import { toReadableTime } from '../core/date-time/readable/to-readable-time.function';
import { isNumber } from '../core/type-check/is-number.function';
import { isNotNumber } from '../core/type-check/is-not-number.function';
import { formatNumber } from '../core/formatting/format-number.function';
import { errorMsg } from '../core/error/error-msg.function';
import { isNotValue } from '../core/type-check/is-not-value.function';
import { gpsPositionToPoint } from './gps-position/gps-position-to-point';
import { millisecondsToSeconds } from '../core/date-time/conversion/milliseconds-to-seconds.function';
import { convertLengthUnits } from '../core/units/convert-length-units.function';
import { LengthUnit } from '../core/units/length-unit';
import { BaseGeolocator } from './geolocator/base-geolocator.service';
import { isNotValidLocation } from './gps-position/is-not-valid-location.function';
import { gpsPositionsAlmostEqual } from './gps-position/gps-positions-almost-equal';
import * as i0 from "@angular/core";
import * as i1 from "./geolocator/base-geolocator.service";
import * as i2 from "../core/logging/logger.service";
import * as i3 from "../core/notify/notify.service";
import * as i4 from "./geolocation.config";
/**
 * Geolocator service. Provides a single point of GPS interaction.
 */
export class GeolocationService {
    /**
     * @param {?} geolocator
     * @param {?} log
     * @param {?} notify
     * @param {?} config
     */
    constructor(geolocator, log, notify, config) {
        this.log = log;
        this.notify = notify;
        this.config = config;
        this.isTrackingPosition = false;
        this.geolocator = geolocator;
        this.positionChangeSubject = new ReplaySubject(1);
        this.positionRecievedSubject = new Subject();
        this.positionChange = this.positionChangeSubject.asObservable();
        this.positionRecieved = this.positionRecievedSubject.asObservable();
    }
    /**
     * @return {?}
     */
    get positionText() {
        return this.position
            ? `${this.position.longitude.toFixed(this.config.gpsDisplayDecimalPlaces)}
       , ${this.position.latitude.toFixed(this.config.gpsDisplayDecimalPlaces)}`
            : '';
    }
    /**
     * @return {?}
     */
    get positionReceivedEllapsedTime() {
        if (!this.positionRecievedTime) {
            return '';
        }
        /** @type {?} */
        const differenceMilliseconds = Date.now() - this.positionRecievedTime.getTime();
        return `${toReadableTime(differenceMilliseconds)} ago`;
    }
    /**
     * @return {?}
     */
    get isPositionAcceptable() {
        /** @type {?} */
        const accuracyThreshold = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter
            ? this.config.gpsRequiredAccuracyMeters
            : this.config.gpsRequiredDilutionOfPrecision;
        return isPositionAcceptable(this.position, accuracyThreshold);
    }
    /**
     * @return {?}
     */
    get isPositionUnacceptable() {
        return !this.isPositionAcceptable;
    }
    /**
     * @return {?}
     */
    get isPositionWarnable() {
        /** @type {?} */
        const accuracyThreshold = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter
            ? this.config.gpsWarnableAccuracyMeters
            : this.config.gpsWarnableDilutionOfPrecision;
        return !isPositionAcceptable(this.position, accuracyThreshold);
    }
    /**
     * @return {?}
     */
    get hasAccuracyCapability() {
        return this.geolocator.capabilities.indexOf(GeolocatorCapability.Accuracy) > -1;
    }
    /**
     * @return {?}
     */
    get isPositionAccuracyKnown() {
        return this.position && isNumber(this.position.accuracy);
    }
    /**
     * @return {?}
     */
    get isPositionAccuracyUnknown() {
        return !this.isPositionAccuracyKnown;
    }
    /**
     * @return {?}
     */
    get isPositionAccuracyInMeters() {
        return this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter;
    }
    /**
     * @return {?}
     */
    get isPositionAccuracyInDilutionOfPrecision() {
        return this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Pdop
            || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Hdop
            || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Vdop
            || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Tdop;
    }
    /**
     * @return {?}
     */
    get geolocatorService() {
        return this.geolocator;
    }
    /**
     * @return {?}
     */
    get accuracyStatement() {
        /** @type {?} */
        const noPosition = !this.position;
        if (noPosition) {
            return this.config.gpsNoAccuracyReading;
        }
        /** @type {?} */
        const isPositionAccuracyKnown = this.isPositionAccuracyKnown;
        /** @type {?} */
        let accuracy = isPositionAccuracyKnown ? this.position.accuracy : null;
        /** @type {?} */
        let suffix;
        if (isPositionAccuracyKnown && this.geolocator.hasCapability(GeolocatorCapability.Accuracy)) {
            suffix = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter
                ? 'm'
                : String(this.geolocator.accuracyUnit).toUpperCase();
        }
        else if (this.geolocator.hasCapability(GeolocatorCapability.PDOP)) {
            accuracy = this.position.pdop;
            suffix = String(GeolocatorCapability.PDOP).toUpperCase();
        }
        else if (this.geolocator.hasCapability(GeolocatorCapability.HDOP)) {
            accuracy = this.position.hdop;
            suffix = String(GeolocatorCapability.HDOP).toUpperCase();
        }
        else if (this.geolocator.hasCapability(GeolocatorCapability.VDOP)) {
            accuracy = this.position.vdop;
            suffix = String(GeolocatorCapability.VDOP).toUpperCase();
        }
        else if (this.geolocator.hasCapability(GeolocatorCapability.TDOP)) {
            accuracy = this.position.tdop;
            suffix = String(GeolocatorCapability.TDOP).toUpperCase();
        }
        if (isNotNumber(accuracy)) {
            return this.config.gpsNoAccuracyReading;
        }
        return `${formatNumber(accuracy)} ${suffix}`;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    enableGpsTracking() {
        /** @type {?} */
        const geoOptions = {
            enableHighAccuracy: (/** @type {?} */ (this)).config.gpsEnableHighAccuracy
        };
        (/** @type {?} */ (this)).position = null;
        (/** @type {?} */ (this)).tryUnsubscribe();
        (/** @type {?} */ (this)).log.debug(`Subscribing to GPS watching for '${(/** @type {?} */ (this)).geolocator.name}' with high accuracy set to '${geoOptions.enableHighAccuracy}'`);
        (/** @type {?} */ (this)).gpsLocatorSubscription = (/** @type {?} */ (this)).geolocator.watchPosition(geoOptions)
            .subscribe((/**
         * @template THIS
         * @this {THIS}
         * @param {?} position
         * @return {THIS}
         */
        position => (/** @type {?} */ (this)).onPositionRecieved(position)), (/**
         * @template THIS
         * @this {THIS}
         * @param {?} error
         * @return {THIS}
         */
        error => (/** @type {?} */ (this)).onLocationError(error)));
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    disableGpsTracking() {
        (/** @type {?} */ (this)).isTrackingPosition = false;
        (/** @type {?} */ (this)).tryUnsubscribe();
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} geolocator
     * @return {THIS}
     */
    setGeoLocator(geolocator) {
        (/** @type {?} */ (this)).tryUnsubscribe();
        (/** @type {?} */ (this)).geolocator = geolocator;
        if ((/** @type {?} */ (this)).isTrackingPosition) {
            (/** @type {?} */ (this)).enableGpsTracking();
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} isTrackingLocation
     * @return {THIS}
     */
    setGpsTracking(isTrackingLocation) {
        if (isTrackingLocation) {
            (/** @type {?} */ (this)).enableGpsTracking();
        }
        else {
            (/** @type {?} */ (this)).disableGpsTracking();
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    toggleGpsTracking() {
        (/** @type {?} */ (this)).setGpsTracking(!(/** @type {?} */ (this)).isTrackingPosition);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    mockGpsPosition(position) {
        if (!(/** @type {?} */ (this)).config.allowGpsMocking) {
            throw new Error('Permission denied to mock GPS location');
        }
        return (/** @type {?} */ (this)).onPositionRecieved(position);
    }
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    onPositionRecieved(position) {
        if (isPositionError(position)) {
            (/** @type {?} */ (this)).onLocationError((/** @type {?} */ (position)));
            return (/** @type {?} */ (this));
        }
        /** @type {?} */
        const gpsPosition = (/** @type {?} */ (position));
        if (isNotValidLocation(gpsPosition)) {
            return (/** @type {?} */ (this));
        }
        /** @type {?} */
        const isPreviousPointSameAsNew = (/** @type {?} */ (this)).position
            && gpsPositionsAlmostEqual((/** @type {?} */ (this)).position, gpsPosition, (/** @type {?} */ (this)).config.gpsPositionDuplicatePrecision);
        if (isPreviousPointSameAsNew && !(/** @type {?} */ (this)).config.emitDuplicateGpsPositions) {
            (/** @type {?} */ (this)).positionRecievedSubject.next(gpsPosition);
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).log.trace(`Location recieved from '${(/** @type {?} */ (this)).geolocator.name}': ${gpsPosition.latitude}, ${gpsPosition.longitude}`);
        (/** @type {?} */ (this)).adjustCoordinates(gpsPosition);
        (/** @type {?} */ (this)).position = gpsPosition;
        (/** @type {?} */ (this)).isTrackingPosition = true;
        (/** @type {?} */ (this)).positionRecievedTime = new Date((/** @type {?} */ (this)).position.timestamp || Date.now());
        (/** @type {?} */ (this)).positionRecievedSubject.next((/** @type {?} */ (this)).position);
        (/** @type {?} */ (this)).positionChangeSubject.next((/** @type {?} */ (this)).position);
        return (/** @type {?} */ (this));
    }
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    onLocationError(error) {
        /** @type {?} */
        const errorMessage = errorMsg('Failed to retrieve location position. {error}', error);
        (/** @type {?} */ (this)).positionChangeSubject.error(error);
        (/** @type {?} */ (this)).log.error(errorMessage);
        (/** @type {?} */ (this)).notify.error(errorMessage);
        return (/** @type {?} */ (this));
    }
    /**
     * @private
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    adjustCoordinates(position) {
        (/** @type {?} */ (this)).tryAdjustMissingPositionValues(position);
        if ((/** @type {?} */ (this)).config.adjustForGpsAntennaHeight && (/** @type {?} */ (this)).config.gpsAntennaHeight) {
            /** @type {?} */
            let adjustedHeight = position.altitude - (/** @type {?} */ (this)).config.gpsAntennaHeight;
            adjustedHeight = adjustedHeight < 0 ? 0 : adjustedHeight;
            (/** @type {?} */ (this)).log.trace(`Adjusting coordinate altitude from ${position.altitude} to ${adjustedHeight}`);
            Object.assign(position, {
                altitude: adjustedHeight
            });
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @private
     * @param {?} newPosition
     * @return {?}
     */
    tryAdjustMissingPositionValues(newPosition) {
        /** @type {?} */
        const missingSpeed = isNotValue(newPosition.speed);
        /** @type {?} */
        const missingHeading = isNotValue(newPosition.heading);
        /** @type {?} */
        const positionValuesMissing = missingSpeed || missingHeading;
        /** @type {?} */
        const shouldAdjustPositionValues = this.position && positionValuesMissing && this.config.calculateMissingPositionValues;
        if (shouldAdjustPositionValues) {
            /** @type {?} */
            const fromPoint = gpsPositionToPoint(this.position);
            /** @type {?} */
            const toPoint = gpsPositionToPoint(newPosition);
            if (missingSpeed) {
                // meters per second
                /** @type {?} */
                const kilometersTraveled = distance(fromPoint, toPoint, { units: 'kilometers' });
                if (kilometersTraveled) {
                    /** @type {?} */
                    const metersTraveled = convertLengthUnits(kilometersTraveled, LengthUnit.Kilometer, LengthUnit.Meter);
                    /** @type {?} */
                    const secondsDelta = millisecondsToSeconds(Math.abs(newPosition.timestamp - this.position.timestamp));
                    /** @type {?} */
                    const speed = metersTraveled / secondsDelta;
                    Object.assign(newPosition, { speed });
                }
            }
            if (missingHeading) {
                /** @type {?} */
                const heading = bearing(fromPoint, toPoint);
                Object.assign(newPosition, { heading });
            }
        }
    }
    /**
     * @private
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    tryUnsubscribe() {
        if ((/** @type {?} */ (this)).gpsLocatorSubscription) {
            (/** @type {?} */ (this)).log.debug(`Unsubscribing from watching GPS stream from '${(/** @type {?} */ (this)).geolocator.name}'`);
            (/** @type {?} */ (this)).gpsLocatorSubscription.unsubscribe();
        }
        return (/** @type {?} */ (this));
    }
}
GeolocationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
GeolocationService.ctorParameters = () => [
    { type: BaseGeolocator },
    { type: Logger },
    { type: NotifyService },
    { type: GeolocationConfig }
];
/** @nocollapse */ GeolocationService.ngInjectableDef = i0.defineInjectable({ factory: function GeolocationService_Factory() { return new GeolocationService(i0.inject(i1.BaseGeolocator), i0.inject(i2.Logger), i0.inject(i3.NotifyService), i0.inject(i4.GeolocationConfig)); }, token: GeolocationService, providedIn: "root" });
if (false) {
    /** @type {?} */
    GeolocationService.prototype.position;
    /** @type {?} */
    GeolocationService.prototype.positionRecievedTime;
    /** @type {?} */
    GeolocationService.prototype.isTrackingPosition;
    /**
     * Fired when ever a new position is received and the value is different than the previous (unless the Geolocation config
     * value "emitDuplicateGpsPositions" is set to true - in which case duplicates will be published).
     * This value will alway emit the last recieved position (if you subscribe after it was emitted you will still receive it).
     * @type {?}
     */
    GeolocationService.prototype.positionChange;
    /**
     * Fired when ever a new position is received regardless of whether the position has changed since the last position was recieved.
     * @type {?}
     */
    GeolocationService.prototype.positionRecieved;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.positionChangeSubject;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.positionRecievedSubject;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.gpsLocatorSubscription;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.geolocator;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.log;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    GeolocationService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,