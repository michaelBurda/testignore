import { LayerField } from './fields/layer-field';
export declare const FIELD_QUOTE = "\"";
export declare enum CriteriaOperator {
    Equals = "=",
    DoesNotEqual = "<>",
    GreaterThan = ">",
    LessThan = "<",
    GreaterOrEqualTo = ">=",
    LessThanOrEqualTo = "<="
}
export declare enum TargetOperator {
    Is = "IS",
    Not = "NOT",
    In = "IN",
    Like = "LIKE",
    Between = "BETWEEN"
}
export declare enum ValueOperator {
    Wildcard = "%",
    Null = "NULL"
}
export declare enum GroupingOperator {
    OpenParenthesis = "(",
    ClosedParenthesis = ")",
    Parenthesis = "()"
}
export declare enum CombiningOperator {
    And = "AND",
    Or = "OR"
}
export interface WhereClauseBuilderOptions {
    quoteFields?: boolean;
}
export declare const DefaultWhereClauseBuilderOptions: {
    quoteFields: boolean;
};
export declare class WhereClauseBuilder {
    private readonly statements;
    private readonly options;
    constructor(options?: WhereClauseBuilderOptions);
    readonly criteriaCount: number;
    add(statement: string): this;
    whereEqual(field: LayerField, value: any): this;
    whereLike(field: string, value: any): this;
    whereStartsWith(field: string, value: any): this;
    whereEndsWith(field: string, value: any): this;
    whereNotEqual(field: LayerField, value: any): this;
    whereIsNull(field: string): this;
    whereIsNotNull(field: string): this;
    where(field: string, operator: CriteriaOperator | TargetOperator, value: any, isNumeric?: boolean): this;
    whereNumeric(field: string, value: any): this;
    toWhereClause(): string;
    toString(): string;
    clear(): void;
    protected formatField(field: string): string;
}
