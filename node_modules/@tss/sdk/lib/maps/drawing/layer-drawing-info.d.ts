import { LayerDrawingInfoRenderer } from './layer-drawing-info-renderer';
import { LayerRendererSymbol } from './layer-renderer-symbol';
export interface DrawingInfoProperties {
    renderer?: LayerDrawingInfoRenderer;
    transparency?: number;
    positionRenderer?: LayerDrawingInfoRenderer;
    labelingInfo?: any;
}
export declare class LayerDrawingInfo implements DrawingInfoProperties {
    renderer: LayerDrawingInfoRenderer;
    transparency: number;
    zIndex: number | null;
    positionRenderer: LayerDrawingInfoRenderer;
    labelingInfo: any;
    readonly isEmpty: boolean;
    readonly opacity: number;
    constructor(...baseDrawingInfos: (LayerDrawingInfo | DrawingInfoProperties)[]);
    merge(...targetDrawingInfos: (LayerDrawingInfo | DrawingInfoProperties)[]): this;
    getRendererSymbol(value?: string | number): LayerRendererSymbol;
    getPositionRendererSymbol(value?: string | number): LayerRendererSymbol;
    getBestRepresentativeColor(value?: string | number): string;
    toProperties(): DrawingInfoProperties;
}
