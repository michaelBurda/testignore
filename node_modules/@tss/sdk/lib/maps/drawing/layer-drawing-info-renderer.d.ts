import { LayerRendererClassificationMethod, LayerRendererType } from './types';
import { ClassBreakInfo } from './class-break-info';
import { UniqueValueInfo } from './unique-value-info';
import { LayerRendererSymbol } from './layer-renderer-symbol';
export declare const DEFAULT_UNIQUE_VALUE_INFO: any;
export declare const DEFAULT_CLASS_BREAK_VALUE_INFO: any;
export declare const DEFAULT_RENDERER_SYMBOL: {
    type: string;
    style: string;
    color: string;
    width: number;
};
export declare function isRendererSymbolDefault(symbol: LayerRendererSymbol): boolean;
export declare class LayerDrawingInfoRenderer {
    type: LayerRendererType;
    field1?: string;
    field2?: string;
    field3?: string;
    fieldDelimiter?: string;
    valueExpression?: string;
    classificationMethod?: LayerRendererClassificationMethod;
    minValue?: number;
    classBreakInfos?: ClassBreakInfo[];
    uniqueValueInfos?: UniqueValueInfo[];
    label?: string;
    defaultLabel?: string;
    description?: string;
    defaultSymbol?: LayerRendererSymbol;
    symbol?: LayerRendererSymbol;
    readonly isSimple: boolean;
    readonly isUniqueValue: boolean;
    readonly isClassBreak: boolean;
    readonly isEmpty: boolean;
    field: string;
    constructor(base?: LayerDrawingInfoRenderer);
    getSymbol(value: string | number): LayerRendererSymbol | null;
    getUniqueValueInfo(value: string | number): UniqueValueInfo;
    getUniqueValueInfoOrDefault(value: string | number): UniqueValueInfo;
    getClassBreakInfo(classValue: string | number): ClassBreakInfo;
    getClassBreakInfoOrDefault(value: string | number): ClassBreakInfo;
    isValueInClassBreakRange(classBreakInfo: ClassBreakInfo, value: string | number, index: number): boolean;
    clearEmptyInfos(): void;
    getBestRepresentativeColor(value?: string | number): string;
    standardizeRenderSymbols(): void;
}
