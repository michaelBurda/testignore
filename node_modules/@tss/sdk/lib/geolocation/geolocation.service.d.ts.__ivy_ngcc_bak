import { Observable } from 'rxjs';
import { Logger } from '../core/logging/logger.service';
import { NotifyService } from '../core/notify/notify.service';
import { GeolocationConfig } from './geolocation.config';
import { GpsPosition } from './gps-position/gps-position';
import { Geolocator } from './geolocator/geolocator';
import { BaseGeolocator } from './geolocator/base-geolocator.service';
/**
 * Geolocator service. Provides a single point of GPS interaction.
 */
export declare class GeolocationService {
    private readonly log;
    private readonly notify;
    protected readonly config: GeolocationConfig;
    position: GpsPosition;
    positionRecievedTime: Date;
    isTrackingPosition: boolean;
    /**
     * Fired when ever a new position is received and the value is different than the previous (unless the Geolocation config
     * value "emitDuplicateGpsPositions" is set to true - in which case duplicates will be published).
     * This value will alway emit the last recieved position (if you subscribe after it was emitted you will still receive it).
     */
    readonly positionChange: Observable<GpsPosition>;
    /**
     * Fired when ever a new position is received regardless of whether the position has changed since the last position was recieved.
     */
    readonly positionRecieved: Observable<GpsPosition>;
    private positionChangeSubject;
    private positionRecievedSubject;
    private gpsLocatorSubscription;
    private geolocator;
    readonly positionText: string;
    readonly positionReceivedEllapsedTime: string;
    readonly isPositionAcceptable: boolean;
    readonly isPositionUnacceptable: boolean;
    readonly isPositionWarnable: boolean;
    readonly hasAccuracyCapability: boolean;
    readonly isPositionAccuracyKnown: boolean;
    readonly isPositionAccuracyUnknown: boolean;
    readonly isPositionAccuracyInMeters: boolean;
    readonly isPositionAccuracyInDilutionOfPrecision: boolean;
    readonly geolocatorService: Geolocator;
    readonly accuracyStatement: string;
    constructor(geolocator: BaseGeolocator, log: Logger, notify: NotifyService, config: GeolocationConfig);
    enableGpsTracking(): this;
    disableGpsTracking(): this;
    setGeoLocator(geolocator: Geolocator): this;
    setGpsTracking(isTrackingLocation: boolean): this;
    toggleGpsTracking(): this;
    mockGpsPosition(position: GpsPosition | PositionError): this;
    protected onPositionRecieved(position: GpsPosition | PositionError): this;
    protected onLocationError(error: PositionError): this;
    private adjustCoordinates;
    private tryAdjustMissingPositionValues;
    private tryUnsubscribe;
}
