import { Observable } from 'rxjs';
import { BaseGeolocator } from './base-geolocator.service';
import { GpsPosition } from '../gps-position/gps-position';
import { GeolocatorCapability } from './geolocator-capability';
import { Logger } from '../../core/logging/logger.service';
import { GeolocationConfig } from '../geolocation.config';
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
import * as ɵngcc0 from '@angular/core';
export declare class GeolocationGeolocator extends BaseGeolocator {
    private readonly config;
    capabilities: GeolocatorCapability[];
    readonly name: string;
    readonly description: string;
    constructor(log: Logger, config: GeolocationConfig);
    getCurrentPosition(options?: PositionOptions): Promise<GpsPosition>;
    watchPosition(options?: PositionOptions): Observable<GpsPosition>;
    isAvailable(): Observable<boolean>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GeolocationGeolocator, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GeolocationGeolocator>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24tZ3BzLWxvY2F0b3Iuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJnZW9sb2NhdGlvbi1ncHMtbG9jYXRvci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJhc2VHZW9sb2NhdG9yIH0gZnJvbSAnLi9iYXNlLWdlb2xvY2F0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBHcHNQb3NpdGlvbiB9IGZyb20gJy4uL2dwcy1wb3NpdGlvbi9ncHMtcG9zaXRpb24nO1xuaW1wb3J0IHsgR2VvbG9jYXRvckNhcGFiaWxpdHkgfSBmcm9tICcuL2dlb2xvY2F0b3ItY2FwYWJpbGl0eSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi8uLi9jb3JlL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgR2VvbG9jYXRpb25Db25maWcgfSBmcm9tICcuLi9nZW9sb2NhdGlvbi5jb25maWcnO1xuLyoqXG4gKiBXcmFwcGVyIGZvciBnZW9sb2NhdGlvbiBzZXJ2aWNlLiBUaGUgd3JhcHBlciBwcmltYXJpbHkgZXhpc3RzIHRvIGFic3RyYWN0IHRoZSBkaXJlY3QgaW50ZXJhY3Rpb24gd2l0aFxuICogdGhlIFwibmF2aWdhdG9yXCIgb2JqZWN0IGFuZCB0byBhbGxvdyBmb3IgaW5qZWN0aW5nIG90aGVyIGltcGxlbWVudGF0aW9ucyBvZiBnZW9sb2NhdGlvbiBmdW5jdGlvbmFsaXR5LlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHZW9sb2NhdGlvbkdlb2xvY2F0b3IgZXh0ZW5kcyBCYXNlR2VvbG9jYXRvciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb25maWc7XG4gICAgY2FwYWJpbGl0aWVzOiBHZW9sb2NhdG9yQ2FwYWJpbGl0eVtdO1xuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgICByZWFkb25seSBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGxvZzogTG9nZ2VyLCBjb25maWc6IEdlb2xvY2F0aW9uQ29uZmlnKTtcbiAgICBnZXRDdXJyZW50UG9zaXRpb24ob3B0aW9ucz86IFBvc2l0aW9uT3B0aW9ucyk6IFByb21pc2U8R3BzUG9zaXRpb24+O1xuICAgIHdhdGNoUG9zaXRpb24ob3B0aW9ucz86IFBvc2l0aW9uT3B0aW9ucyk6IE9ic2VydmFibGU8R3BzUG9zaXRpb24+O1xuICAgIGlzQXZhaWxhYmxlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG59XG4iXX0=