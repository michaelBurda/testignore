import { Observable } from 'rxjs';
import { GeolocatorAccuracyUnit } from './geolocator-accuracy-unit';
import { GpsPosition } from '../gps-position/gps-position';
import { GeolocatorCapability } from './geolocator-capability';
import { Logger } from '../../core/logging/logger.service';
import { Geolocator } from './geolocator';
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
export declare abstract class BaseGeolocator implements Geolocator {
    protected readonly log: Logger;
    capabilities: GeolocatorCapability[];
    accuracyUnit: GeolocatorAccuracyUnit;
    abstract readonly name: string;
    abstract readonly description: string;
    constructor(log: Logger);
    /**
     * Get the device's current position.
     */
    abstract getCurrentPosition(options?: PositionOptions): Promise<GpsPosition>;
    /**
     * Watch the current device's position.  Clear the watch by unsubscribing from
     * Observable changes.
     *
     * ```typescript
     * const subscription = this.geolocation.watchPosition()
     *                               .filter(p => Boolean(p.coords)) //Filter Out Errors
     *                               .subscribe(position =>
     *   console.log(position.coords.longitude + ' ' + position.coords.latitude)
     * );
     *
     * // To stop notifications
     * subscription.unsubscribe();
     * ```
     */
    abstract watchPosition(options?: PositionOptions): Observable<GpsPosition>;
    abstract isAvailable(): Observable<boolean>;
    hasCapability(capability: GeolocatorCapability): boolean;
}
