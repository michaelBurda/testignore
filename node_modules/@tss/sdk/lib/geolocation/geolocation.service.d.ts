import { Observable } from 'rxjs';
import { Logger } from '../core/logging/logger.service';
import { NotifyService } from '../core/notify/notify.service';
import { GeolocationConfig } from './geolocation.config';
import { GpsPosition } from './gps-position/gps-position';
import { Geolocator } from './geolocator/geolocator';
import { BaseGeolocator } from './geolocator/base-geolocator.service';
/**
 * Geolocator service. Provides a single point of GPS interaction.
 */
import * as ɵngcc0 from '@angular/core';
export declare class GeolocationService {
    private readonly log;
    private readonly notify;
    protected readonly config: GeolocationConfig;
    position: GpsPosition;
    positionRecievedTime: Date;
    isTrackingPosition: boolean;
    /**
     * Fired when ever a new position is received and the value is different than the previous (unless the Geolocation config
     * value "emitDuplicateGpsPositions" is set to true - in which case duplicates will be published).
     * This value will alway emit the last recieved position (if you subscribe after it was emitted you will still receive it).
     */
    readonly positionChange: Observable<GpsPosition>;
    /**
     * Fired when ever a new position is received regardless of whether the position has changed since the last position was recieved.
     */
    readonly positionRecieved: Observable<GpsPosition>;
    private positionChangeSubject;
    private positionRecievedSubject;
    private gpsLocatorSubscription;
    private geolocator;
    readonly positionText: string;
    readonly positionReceivedEllapsedTime: string;
    readonly isPositionAcceptable: boolean;
    readonly isPositionUnacceptable: boolean;
    readonly isPositionWarnable: boolean;
    readonly hasAccuracyCapability: boolean;
    readonly isPositionAccuracyKnown: boolean;
    readonly isPositionAccuracyUnknown: boolean;
    readonly isPositionAccuracyInMeters: boolean;
    readonly isPositionAccuracyInDilutionOfPrecision: boolean;
    readonly geolocatorService: Geolocator;
    readonly accuracyStatement: string;
    constructor(geolocator: BaseGeolocator, log: Logger, notify: NotifyService, config: GeolocationConfig);
    enableGpsTracking(): this;
    disableGpsTracking(): this;
    setGeoLocator(geolocator: Geolocator): this;
    setGpsTracking(isTrackingLocation: boolean): this;
    toggleGpsTracking(): this;
    mockGpsPosition(position: GpsPosition | PositionError): this;
    protected onPositionRecieved(position: GpsPosition | PositionError): this;
    protected onLocationError(error: PositionError): this;
    private adjustCoordinates;
    private tryAdjustMissingPositionValues;
    private tryUnsubscribe;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GeolocationService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GeolocationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24uc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJnZW9sb2NhdGlvbi5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvcmUvbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9ub3RpZnkvbm90aWZ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgR2VvbG9jYXRpb25Db25maWcgfSBmcm9tICcuL2dlb2xvY2F0aW9uLmNvbmZpZyc7XG5pbXBvcnQgeyBHcHNQb3NpdGlvbiB9IGZyb20gJy4vZ3BzLXBvc2l0aW9uL2dwcy1wb3NpdGlvbic7XG5pbXBvcnQgeyBHZW9sb2NhdG9yIH0gZnJvbSAnLi9nZW9sb2NhdG9yL2dlb2xvY2F0b3InO1xuaW1wb3J0IHsgQmFzZUdlb2xvY2F0b3IgfSBmcm9tICcuL2dlb2xvY2F0b3IvYmFzZS1nZW9sb2NhdG9yLnNlcnZpY2UnO1xuLyoqXG4gKiBHZW9sb2NhdG9yIHNlcnZpY2UuIFByb3ZpZGVzIGEgc2luZ2xlIHBvaW50IG9mIEdQUyBpbnRlcmFjdGlvbi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2VvbG9jYXRpb25TZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmeTtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29uZmlnOiBHZW9sb2NhdGlvbkNvbmZpZztcbiAgICBwb3NpdGlvbjogR3BzUG9zaXRpb247XG4gICAgcG9zaXRpb25SZWNpZXZlZFRpbWU6IERhdGU7XG4gICAgaXNUcmFja2luZ1Bvc2l0aW9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gZXZlciBhIG5ldyBwb3NpdGlvbiBpcyByZWNlaXZlZCBhbmQgdGhlIHZhbHVlIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBwcmV2aW91cyAodW5sZXNzIHRoZSBHZW9sb2NhdGlvbiBjb25maWdcbiAgICAgKiB2YWx1ZSBcImVtaXREdXBsaWNhdGVHcHNQb3NpdGlvbnNcIiBpcyBzZXQgdG8gdHJ1ZSAtIGluIHdoaWNoIGNhc2UgZHVwbGljYXRlcyB3aWxsIGJlIHB1Ymxpc2hlZCkuXG4gICAgICogVGhpcyB2YWx1ZSB3aWxsIGFsd2F5IGVtaXQgdGhlIGxhc3QgcmVjaWV2ZWQgcG9zaXRpb24gKGlmIHlvdSBzdWJzY3JpYmUgYWZ0ZXIgaXQgd2FzIGVtaXR0ZWQgeW91IHdpbGwgc3RpbGwgcmVjZWl2ZSBpdCkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9zaXRpb25DaGFuZ2U6IE9ic2VydmFibGU8R3BzUG9zaXRpb24+O1xuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gZXZlciBhIG5ldyBwb3NpdGlvbiBpcyByZWNlaXZlZCByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHBvc2l0aW9uIGhhcyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHBvc2l0aW9uIHdhcyByZWNpZXZlZC5cbiAgICAgKi9cbiAgICByZWFkb25seSBwb3NpdGlvblJlY2lldmVkOiBPYnNlcnZhYmxlPEdwc1Bvc2l0aW9uPjtcbiAgICBwcml2YXRlIHBvc2l0aW9uQ2hhbmdlU3ViamVjdDtcbiAgICBwcml2YXRlIHBvc2l0aW9uUmVjaWV2ZWRTdWJqZWN0O1xuICAgIHByaXZhdGUgZ3BzTG9jYXRvclN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGdlb2xvY2F0b3I7XG4gICAgcmVhZG9ubHkgcG9zaXRpb25UZXh0OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgcG9zaXRpb25SZWNlaXZlZEVsbGFwc2VkVGltZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGlzUG9zaXRpb25BY2NlcHRhYmxlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzUG9zaXRpb25VbmFjY2VwdGFibGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNQb3NpdGlvbldhcm5hYmxlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhhc0FjY3VyYWN5Q2FwYWJpbGl0eTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc1Bvc2l0aW9uQWNjdXJhY3lLbm93bjogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc1Bvc2l0aW9uQWNjdXJhY3lVbmtub3duOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzUG9zaXRpb25BY2N1cmFjeUluTWV0ZXJzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzUG9zaXRpb25BY2N1cmFjeUluRGlsdXRpb25PZlByZWNpc2lvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBnZW9sb2NhdG9yU2VydmljZTogR2VvbG9jYXRvcjtcbiAgICByZWFkb25seSBhY2N1cmFjeVN0YXRlbWVudDogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGdlb2xvY2F0b3I6IEJhc2VHZW9sb2NhdG9yLCBsb2c6IExvZ2dlciwgbm90aWZ5OiBOb3RpZnlTZXJ2aWNlLCBjb25maWc6IEdlb2xvY2F0aW9uQ29uZmlnKTtcbiAgICBlbmFibGVHcHNUcmFja2luZygpOiB0aGlzO1xuICAgIGRpc2FibGVHcHNUcmFja2luZygpOiB0aGlzO1xuICAgIHNldEdlb0xvY2F0b3IoZ2VvbG9jYXRvcjogR2VvbG9jYXRvcik6IHRoaXM7XG4gICAgc2V0R3BzVHJhY2tpbmcoaXNUcmFja2luZ0xvY2F0aW9uOiBib29sZWFuKTogdGhpcztcbiAgICB0b2dnbGVHcHNUcmFja2luZygpOiB0aGlzO1xuICAgIG1vY2tHcHNQb3NpdGlvbihwb3NpdGlvbjogR3BzUG9zaXRpb24gfCBQb3NpdGlvbkVycm9yKTogdGhpcztcbiAgICBwcm90ZWN0ZWQgb25Qb3NpdGlvblJlY2lldmVkKHBvc2l0aW9uOiBHcHNQb3NpdGlvbiB8IFBvc2l0aW9uRXJyb3IpOiB0aGlzO1xuICAgIHByb3RlY3RlZCBvbkxvY2F0aW9uRXJyb3IoZXJyb3I6IFBvc2l0aW9uRXJyb3IpOiB0aGlzO1xuICAgIHByaXZhdGUgYWRqdXN0Q29vcmRpbmF0ZXM7XG4gICAgcHJpdmF0ZSB0cnlBZGp1c3RNaXNzaW5nUG9zaXRpb25WYWx1ZXM7XG4gICAgcHJpdmF0ZSB0cnlVbnN1YnNjcmliZTtcbn1cbiJdfQ==