import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { UserAccount } from './user-account';
import { RoleManagerService } from './role-manager.service';
import { SecurityConfig } from './security-config';
import { Logger } from '../core/logging/logger.service';
import { PersistentStorage } from '../core/storage/persistent-storage.service';
import * as ɵngcc0 from '@angular/core';
export declare enum SignInState {
    SignedIn = 0,
    SignedOut = 1,
    SignInFailed = 2,
    SignOutFailed = 3
}
export declare class AuthService {
    private http;
    private roleMgr;
    private config;
    private storage;
    private log;
    rememberMe: boolean;
    account: UserAccount;
    isAuthenticated: boolean;
    isDomainAccount: boolean;
    isFederatedAccount: boolean;
    readonly stateChange: Observable<SignInState>;
    private readonly stateChangeSubject;
    constructor(http: HttpClient, roleMgr: RoleManagerService, config: SecurityConfig, storage: PersistentStorage, log: Logger);
    signIn(userName: string, password: string, rememberMe?: boolean): Observable<UserAccount>;
    signOut(): Observable<any>;
    getUserInfo(): Observable<UserAccount>;
    getToken(): string;
    loadStoredToken(): boolean;
    onSignedIn(account: UserAccount, skipLocalStorage?: boolean): void;
    onSignedOut(): void;
    private onSignInFailed;
    private onSignedOutFailed;
    private getLocalToken;
    private setLocalToken;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImF1dGguc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBVc2VyQWNjb3VudCB9IGZyb20gJy4vdXNlci1hY2NvdW50JztcbmltcG9ydCB7IFJvbGVNYW5hZ2VyU2VydmljZSB9IGZyb20gJy4vcm9sZS1tYW5hZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VjdXJpdHlDb25maWcgfSBmcm9tICcuL3NlY3VyaXR5LWNvbmZpZyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb3JlL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGVyc2lzdGVudFN0b3JhZ2UgfSBmcm9tICcuLi9jb3JlL3N0b3JhZ2UvcGVyc2lzdGVudC1zdG9yYWdlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBTaWduSW5TdGF0ZSB7XG4gICAgU2lnbmVkSW4gPSAwLFxuICAgIFNpZ25lZE91dCA9IDEsXG4gICAgU2lnbkluRmFpbGVkID0gMixcbiAgICBTaWduT3V0RmFpbGVkID0gM1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXV0aFNlcnZpY2Uge1xuICAgIHByaXZhdGUgaHR0cDtcbiAgICBwcml2YXRlIHJvbGVNZ3I7XG4gICAgcHJpdmF0ZSBjb25maWc7XG4gICAgcHJpdmF0ZSBzdG9yYWdlO1xuICAgIHByaXZhdGUgbG9nO1xuICAgIHJlbWVtYmVyTWU6IGJvb2xlYW47XG4gICAgYWNjb3VudDogVXNlckFjY291bnQ7XG4gICAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xuICAgIGlzRG9tYWluQWNjb3VudDogYm9vbGVhbjtcbiAgICBpc0ZlZGVyYXRlZEFjY291bnQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc3RhdGVDaGFuZ2U6IE9ic2VydmFibGU8U2lnbkluU3RhdGU+O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RhdGVDaGFuZ2VTdWJqZWN0O1xuICAgIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQsIHJvbGVNZ3I6IFJvbGVNYW5hZ2VyU2VydmljZSwgY29uZmlnOiBTZWN1cml0eUNvbmZpZywgc3RvcmFnZTogUGVyc2lzdGVudFN0b3JhZ2UsIGxvZzogTG9nZ2VyKTtcbiAgICBzaWduSW4odXNlck5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZywgcmVtZW1iZXJNZT86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFVzZXJBY2NvdW50PjtcbiAgICBzaWduT3V0KCk6IE9ic2VydmFibGU8YW55PjtcbiAgICBnZXRVc2VySW5mbygpOiBPYnNlcnZhYmxlPFVzZXJBY2NvdW50PjtcbiAgICBnZXRUb2tlbigpOiBzdHJpbmc7XG4gICAgbG9hZFN0b3JlZFRva2VuKCk6IGJvb2xlYW47XG4gICAgb25TaWduZWRJbihhY2NvdW50OiBVc2VyQWNjb3VudCwgc2tpcExvY2FsU3RvcmFnZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uU2lnbmVkT3V0KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBvblNpZ25JbkZhaWxlZDtcbiAgICBwcml2YXRlIG9uU2lnbmVkT3V0RmFpbGVkO1xuICAgIHByaXZhdGUgZ2V0TG9jYWxUb2tlbjtcbiAgICBwcml2YXRlIHNldExvY2FsVG9rZW47XG59XG4iXX0=