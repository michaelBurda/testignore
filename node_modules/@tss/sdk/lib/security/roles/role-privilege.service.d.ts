import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { SecurityConfig } from '../security-config';
import { Privilege } from '../privileges/privilege';
import { BaseResourceService } from '../../core/resource/base-resource.service';
import * as ɵngcc0 from '@angular/core';
export declare const MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG = "Missing privilege identifier parameter";
/**
 * Service to provide all CRUD operations for privilege/role assignment.
 *
 * @example
 * ## Gets privileges for a given role:
 * service.privilegesByRole('879e27e1-b139-4348-86ca-ec4d5651475f')
 *
 * // Which is just a shortcut for:
 * service.query({ roleId: 'admin' });
 *
 */
export declare class RolePrivilegeService extends BaseResourceService<Privilege> {
    protected http: HttpClient;
    constructor(http: HttpClient, config: SecurityConfig);
    /**
     * Retrieves a list of privileges for a given role ID.
     */
    query(routeTokens?: any, params?: HttpParams): Observable<Privilege[]>;
    /**
     * This method is not supported for this resource. Please use "privilegesByRole".
     */
    get(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Privilege>;
    /**
     * This method is not supported for this resource. Please use "addPrivilegeToRole".
     */
    create(entity: Privilege, routeTokens?: any, params?: HttpParams): Observable<Privilege>;
    /**
     * Updates a privilege assignment (adds a privilege to a role).
     */
    update(entity: Privilege, routeTokens?: any, params?: HttpParams): Observable<any>;
    /**
     * Removes a privilege from a role assignment.
     */
    delete(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Privilege>;
    /**
     * Retrieves all privileges assigned to the given role ID.
     */
    privilegesByRole(roleId: string, params?: HttpParams): Observable<Privilege[]>;
    /**
     * Adds a privilege to role.
     */
    addPrivilegeToRole(roleId: string, privilegeId: string): Observable<Privilege>;
    /**
     * Removes a privilege from the given role.
     */
    removePrivilegeFromRole(roleId: string, privilegeId: string): Observable<Privilege>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RolePrivilegeService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<RolePrivilegeService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS1wcml2aWxlZ2Uuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJyb2xlLXByaXZpbGVnZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTZWN1cml0eUNvbmZpZyB9IGZyb20gJy4uL3NlY3VyaXR5LWNvbmZpZyc7XG5pbXBvcnQgeyBQcml2aWxlZ2UgfSBmcm9tICcuLi9wcml2aWxlZ2VzL3ByaXZpbGVnZSc7XG5pbXBvcnQgeyBCYXNlUmVzb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29yZS9yZXNvdXJjZS9iYXNlLXJlc291cmNlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTUlTU0lOR19QUklWSUxFR0VfUEFSQU1fRVhDRVBUSU9OX01TRyA9IFwiTWlzc2luZyBwcml2aWxlZ2UgaWRlbnRpZmllciBwYXJhbWV0ZXJcIjtcbi8qKlxuICogU2VydmljZSB0byBwcm92aWRlIGFsbCBDUlVEIG9wZXJhdGlvbnMgZm9yIHByaXZpbGVnZS9yb2xlIGFzc2lnbm1lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIEdldHMgcHJpdmlsZWdlcyBmb3IgYSBnaXZlbiByb2xlOlxuICogc2VydmljZS5wcml2aWxlZ2VzQnlSb2xlKCc4NzllMjdlMS1iMTM5LTQzNDgtODZjYS1lYzRkNTY1MTQ3NWYnKVxuICpcbiAqIC8vIFdoaWNoIGlzIGp1c3QgYSBzaG9ydGN1dCBmb3I6XG4gKiBzZXJ2aWNlLnF1ZXJ5KHsgcm9sZUlkOiAnYWRtaW4nIH0pO1xuICpcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUm9sZVByaXZpbGVnZVNlcnZpY2UgZXh0ZW5kcyBCYXNlUmVzb3VyY2VTZXJ2aWNlPFByaXZpbGVnZT4ge1xuICAgIHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50O1xuICAgIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQsIGNvbmZpZzogU2VjdXJpdHlDb25maWcpO1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIGxpc3Qgb2YgcHJpdmlsZWdlcyBmb3IgYSBnaXZlbiByb2xlIElELlxuICAgICAqL1xuICAgIHF1ZXJ5KHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxQcml2aWxlZ2VbXT47XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyByZXNvdXJjZS4gUGxlYXNlIHVzZSBcInByaXZpbGVnZXNCeVJvbGVcIi5cbiAgICAgKi9cbiAgICBnZXQoaWQ6IHN0cmluZyB8IG51bWJlciwgcm91dGVUb2tlbnM/OiBhbnksIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPFByaXZpbGVnZT47XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyByZXNvdXJjZS4gUGxlYXNlIHVzZSBcImFkZFByaXZpbGVnZVRvUm9sZVwiLlxuICAgICAqL1xuICAgIGNyZWF0ZShlbnRpdHk6IFByaXZpbGVnZSwgcm91dGVUb2tlbnM/OiBhbnksIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPFByaXZpbGVnZT47XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhIHByaXZpbGVnZSBhc3NpZ25tZW50IChhZGRzIGEgcHJpdmlsZWdlIHRvIGEgcm9sZSkuXG4gICAgICovXG4gICAgdXBkYXRlKGVudGl0eTogUHJpdmlsZWdlLCByb3V0ZVRva2Vucz86IGFueSwgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcHJpdmlsZWdlIGZyb20gYSByb2xlIGFzc2lnbm1lbnQuXG4gICAgICovXG4gICAgZGVsZXRlKGlkOiBzdHJpbmcgfCBudW1iZXIsIHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxQcml2aWxlZ2U+O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbGwgcHJpdmlsZWdlcyBhc3NpZ25lZCB0byB0aGUgZ2l2ZW4gcm9sZSBJRC5cbiAgICAgKi9cbiAgICBwcml2aWxlZ2VzQnlSb2xlKHJvbGVJZDogc3RyaW5nLCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxQcml2aWxlZ2VbXT47XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHByaXZpbGVnZSB0byByb2xlLlxuICAgICAqL1xuICAgIGFkZFByaXZpbGVnZVRvUm9sZShyb2xlSWQ6IHN0cmluZywgcHJpdmlsZWdlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8UHJpdmlsZWdlPjtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgcHJpdmlsZWdlIGZyb20gdGhlIGdpdmVuIHJvbGUuXG4gICAgICovXG4gICAgcmVtb3ZlUHJpdmlsZWdlRnJvbVJvbGUocm9sZUlkOiBzdHJpbmcsIHByaXZpbGVnZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByaXZpbGVnZT47XG59XG4iXX0=