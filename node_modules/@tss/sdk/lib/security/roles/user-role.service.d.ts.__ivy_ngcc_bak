import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Role } from './role';
import { SecurityConfig } from '../security-config';
import { BaseResourceService } from '../../core/resource/base-resource.service';
/**
 * Service to provide all CRUD operations for user/role assignment.
 *
 * @example
 * ## Gets roles for a given user:
 * service.rolesByUser('879e27e1-b139-4348-86ca-ec4d5651475f')
 *
 * // Which is just a shortcut for:
 * service.query({ userId: '879e27e1-b139-4348-86ca-ec4d5651475f' });
 *
 */
export declare class UserRoleService extends BaseResourceService<Role> {
    protected http: HttpClient;
    constructor(http: HttpClient, config: SecurityConfig);
    /**
     * Retrieves a list of roles for a given user ID.
     */
    query(routeTokens?: any, params?: HttpParams): Observable<Role[]>;
    /**
     * This method is not supported for this resource. Please use "rolesByUser".
     */
    get(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Role>;
    /**
     * This method is not supported for this resource. Please use "addUserToRole".
     */
    create(entity: Role, routeTokens?: any, params?: HttpParams): Observable<Role>;
    /**
     * Updates a users role assignment (adds a role to a user).
     */
    update(entity: Role, routeTokens?: any, params?: HttpParams): Observable<any>;
    /**
     * Removes a user from a role assignment.
     */
    delete(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Role>;
    /**
     * Retrieves all roles assigned to the given user ID.
     */
    rolesByUser(userId: string, params?: HttpParams): Observable<Role[]>;
    /**
     * Adds a user to role.
     */
    addUserToRole(userId: string, role: Role, params?: HttpParams): Observable<Role>;
    /**
     * Adds a user to role.
     */
    addUserToRoleByName(userId: string, roleName: string, params?: HttpParams): Observable<Role>;
    /**
     * Removes a user from the given role.
     */
    removeUserFromRole(userId: string, role: Role, params?: HttpParams): Observable<Role>;
    /**
     * Removes a user from the given role.
     */
    removeUserFromRoleByName(userId: string, roleName: string, params?: HttpParams): Observable<Role>;
}
