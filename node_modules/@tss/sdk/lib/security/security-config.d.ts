import { ResourceConfig } from '../core/resource.config';
import * as ɵngcc0 from '@angular/core';
export declare type AuthorizationTypes = 'Bearer';
/**
 * Security related configuration options. These settings are used to drive all
 * security related behaviour throughout the application. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
export declare class SecurityConfig extends ResourceConfig {
    rolesEnabled: boolean;
    storeToken: boolean;
    autoSignIn: boolean;
    authorizationType: AuthorizationTypes;
    tokenEndpoint: string;
    signOutEndpoint: string;
    userInfoEndpoint: string;
    usersEndpoint: string;
    rolesEndpoint: string;
    privilegesEndpoint: string;
    userRolesEndpoint: string;
    rolesPrivilegesEndpoint: string;
    tokenStorageKey: string;
    tokenInvalidationDateLookup: string;
    tdsTokenInclusionExpression: string;
    withCredentialsInclusionExpression: string;
    setWithCredentials: boolean;
    accessToken: string;
    defaultUserName: string;
    defaultPassword: string;
    roleSplitterExp: string;
    tokenBody: (userName: any, password: any) => string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SecurityConfig, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SecurityConfig>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHktY29uZmlnLmQudHMiLCJzb3VyY2VzIjpbInNlY3VyaXR5LWNvbmZpZy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzb3VyY2VDb25maWcgfSBmcm9tICcuLi9jb3JlL3Jlc291cmNlLmNvbmZpZyc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEF1dGhvcml6YXRpb25UeXBlcyA9ICdCZWFyZXInO1xuLyoqXG4gKiBTZWN1cml0eSByZWxhdGVkIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy4gVGhlc2Ugc2V0dGluZ3MgYXJlIHVzZWQgdG8gZHJpdmUgYWxsXG4gKiBzZWN1cml0eSByZWxhdGVkIGJlaGF2aW91ciB0aHJvdWdob3V0IHRoZSBhcHBsaWNhdGlvbi4gVGhlIHNldHRpbmdzIGNhbiBiZVxuICogb3ZlcnJpZGRlbiBkaXJlY3RseSBpbiB0aGUgY29kZSwgYXBwbGljYXRpb24gbW9kdWxlLCBvciBmcm9tIHRoZSBURFMgc2VydmVyLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWN1cml0eUNvbmZpZyBleHRlbmRzIFJlc291cmNlQ29uZmlnIHtcbiAgICByb2xlc0VuYWJsZWQ6IGJvb2xlYW47XG4gICAgc3RvcmVUb2tlbjogYm9vbGVhbjtcbiAgICBhdXRvU2lnbkluOiBib29sZWFuO1xuICAgIGF1dGhvcml6YXRpb25UeXBlOiBBdXRob3JpemF0aW9uVHlwZXM7XG4gICAgdG9rZW5FbmRwb2ludDogc3RyaW5nO1xuICAgIHNpZ25PdXRFbmRwb2ludDogc3RyaW5nO1xuICAgIHVzZXJJbmZvRW5kcG9pbnQ6IHN0cmluZztcbiAgICB1c2Vyc0VuZHBvaW50OiBzdHJpbmc7XG4gICAgcm9sZXNFbmRwb2ludDogc3RyaW5nO1xuICAgIHByaXZpbGVnZXNFbmRwb2ludDogc3RyaW5nO1xuICAgIHVzZXJSb2xlc0VuZHBvaW50OiBzdHJpbmc7XG4gICAgcm9sZXNQcml2aWxlZ2VzRW5kcG9pbnQ6IHN0cmluZztcbiAgICB0b2tlblN0b3JhZ2VLZXk6IHN0cmluZztcbiAgICB0b2tlbkludmFsaWRhdGlvbkRhdGVMb29rdXA6IHN0cmluZztcbiAgICB0ZHNUb2tlbkluY2x1c2lvbkV4cHJlc3Npb246IHN0cmluZztcbiAgICB3aXRoQ3JlZGVudGlhbHNJbmNsdXNpb25FeHByZXNzaW9uOiBzdHJpbmc7XG4gICAgc2V0V2l0aENyZWRlbnRpYWxzOiBib29sZWFuO1xuICAgIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gICAgZGVmYXVsdFVzZXJOYW1lOiBzdHJpbmc7XG4gICAgZGVmYXVsdFBhc3N3b3JkOiBzdHJpbmc7XG4gICAgcm9sZVNwbGl0dGVyRXhwOiBzdHJpbmc7XG4gICAgdG9rZW5Cb2R5OiAodXNlck5hbWU6IGFueSwgcGFzc3dvcmQ6IGFueSkgPT4gc3RyaW5nO1xufVxuIl19