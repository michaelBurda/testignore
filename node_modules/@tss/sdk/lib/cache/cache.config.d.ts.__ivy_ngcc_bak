import { CacheDefinition } from './cache-definition';
import { CacheStrategy } from './cache-strategy';
import { CacheConfigOptions } from './cache-config-options';
/**
 * Configuration class for storing global data caching settings.
 */
export declare class CacheConfig {
    /**
     * Determines whether caching should be used or not. When disabled, all
     * caching-related functionality is ignored (not used).
     */
    cacheEnabled: boolean;
    /**
     * List of configurations that describe what to cache and how to cache it.
     * The main parts of this configuration include the "route" (how to match what
     * to cache) and the "strategy" (whether to look for content in the cache first
     * or try to make the HTTP request first).
     */
    cacheDefitions: CacheDefinition[];
    /**
     * When set, this strategy will trump all strategies defined in the "Cache Defintions".
     * WARNING: This is a global setting and can have adverse affects when used improperly.
     * The main use case for this setting is to allow for the global cache strategy of
     * 'cacheOnly', which will allow an application to force an "offline" state (forcing
     * requests to pull from cache only).
     */
    forcedGlobalCacheStrategy: CacheStrategy;
    static create(config: CacheConfigOptions): CacheConfig;
    static enable(...defs: CacheDefinition[]): CacheConfig;
    getCacheDefinition(route: string): CacheDefinition;
}
