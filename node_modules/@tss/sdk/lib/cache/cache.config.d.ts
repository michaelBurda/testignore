import { CacheDefinition } from './cache-definition';
import { CacheStrategy } from './cache-strategy';
import { CacheConfigOptions } from './cache-config-options';
/**
 * Configuration class for storing global data caching settings.
 */
import * as ɵngcc0 from '@angular/core';
export declare class CacheConfig {
    /**
     * Determines whether caching should be used or not. When disabled, all
     * caching-related functionality is ignored (not used).
     */
    cacheEnabled: boolean;
    /**
     * List of configurations that describe what to cache and how to cache it.
     * The main parts of this configuration include the "route" (how to match what
     * to cache) and the "strategy" (whether to look for content in the cache first
     * or try to make the HTTP request first).
     */
    cacheDefitions: CacheDefinition[];
    /**
     * When set, this strategy will trump all strategies defined in the "Cache Defintions".
     * WARNING: This is a global setting and can have adverse affects when used improperly.
     * The main use case for this setting is to allow for the global cache strategy of
     * 'cacheOnly', which will allow an application to force an "offline" state (forcing
     * requests to pull from cache only).
     */
    forcedGlobalCacheStrategy: CacheStrategy;
    static create(config: CacheConfigOptions): CacheConfig;
    static enable(...defs: CacheDefinition[]): CacheConfig;
    getCacheDefinition(route: string): CacheDefinition;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CacheConfig, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CacheConfig>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuY29uZmlnLmQudHMiLCJzb3VyY2VzIjpbImNhY2hlLmNvbmZpZy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGVEZWZpbml0aW9uIH0gZnJvbSAnLi9jYWNoZS1kZWZpbml0aW9uJztcbmltcG9ydCB7IENhY2hlU3RyYXRlZ3kgfSBmcm9tICcuL2NhY2hlLXN0cmF0ZWd5JztcbmltcG9ydCB7IENhY2hlQ29uZmlnT3B0aW9ucyB9IGZyb20gJy4vY2FjaGUtY29uZmlnLW9wdGlvbnMnO1xuLyoqXG4gKiBDb25maWd1cmF0aW9uIGNsYXNzIGZvciBzdG9yaW5nIGdsb2JhbCBkYXRhIGNhY2hpbmcgc2V0dGluZ3MuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhY2hlQ29uZmlnIHtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgY2FjaGluZyBzaG91bGQgYmUgdXNlZCBvciBub3QuIFdoZW4gZGlzYWJsZWQsIGFsbFxuICAgICAqIGNhY2hpbmctcmVsYXRlZCBmdW5jdGlvbmFsaXR5IGlzIGlnbm9yZWQgKG5vdCB1c2VkKS5cbiAgICAgKi9cbiAgICBjYWNoZUVuYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBjb25maWd1cmF0aW9ucyB0aGF0IGRlc2NyaWJlIHdoYXQgdG8gY2FjaGUgYW5kIGhvdyB0byBjYWNoZSBpdC5cbiAgICAgKiBUaGUgbWFpbiBwYXJ0cyBvZiB0aGlzIGNvbmZpZ3VyYXRpb24gaW5jbHVkZSB0aGUgXCJyb3V0ZVwiIChob3cgdG8gbWF0Y2ggd2hhdFxuICAgICAqIHRvIGNhY2hlKSBhbmQgdGhlIFwic3RyYXRlZ3lcIiAod2hldGhlciB0byBsb29rIGZvciBjb250ZW50IGluIHRoZSBjYWNoZSBmaXJzdFxuICAgICAqIG9yIHRyeSB0byBtYWtlIHRoZSBIVFRQIHJlcXVlc3QgZmlyc3QpLlxuICAgICAqL1xuICAgIGNhY2hlRGVmaXRpb25zOiBDYWNoZURlZmluaXRpb25bXTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCwgdGhpcyBzdHJhdGVneSB3aWxsIHRydW1wIGFsbCBzdHJhdGVnaWVzIGRlZmluZWQgaW4gdGhlIFwiQ2FjaGUgRGVmaW50aW9uc1wiLlxuICAgICAqIFdBUk5JTkc6IFRoaXMgaXMgYSBnbG9iYWwgc2V0dGluZyBhbmQgY2FuIGhhdmUgYWR2ZXJzZSBhZmZlY3RzIHdoZW4gdXNlZCBpbXByb3Blcmx5LlxuICAgICAqIFRoZSBtYWluIHVzZSBjYXNlIGZvciB0aGlzIHNldHRpbmcgaXMgdG8gYWxsb3cgZm9yIHRoZSBnbG9iYWwgY2FjaGUgc3RyYXRlZ3kgb2ZcbiAgICAgKiAnY2FjaGVPbmx5Jywgd2hpY2ggd2lsbCBhbGxvdyBhbiBhcHBsaWNhdGlvbiB0byBmb3JjZSBhbiBcIm9mZmxpbmVcIiBzdGF0ZSAoZm9yY2luZ1xuICAgICAqIHJlcXVlc3RzIHRvIHB1bGwgZnJvbSBjYWNoZSBvbmx5KS5cbiAgICAgKi9cbiAgICBmb3JjZWRHbG9iYWxDYWNoZVN0cmF0ZWd5OiBDYWNoZVN0cmF0ZWd5O1xuICAgIHN0YXRpYyBjcmVhdGUoY29uZmlnOiBDYWNoZUNvbmZpZ09wdGlvbnMpOiBDYWNoZUNvbmZpZztcbiAgICBzdGF0aWMgZW5hYmxlKC4uLmRlZnM6IENhY2hlRGVmaW5pdGlvbltdKTogQ2FjaGVDb25maWc7XG4gICAgZ2V0Q2FjaGVEZWZpbml0aW9uKHJvdXRlOiBzdHJpbmcpOiBDYWNoZURlZmluaXRpb247XG59XG4iXX0=