import { LayerField, LayerFieldDomain } from '../maps/fields/layer-field';
import { LrsMetadata } from './lrs-metadata';
import { MapServerMetadata } from '../maps/map-server-metadata';
import { MapLayer } from '../maps/map-layer';
import { NetworkLayer } from './networks/network-layer';
import { DataSource } from '../data-source/data-source';
export declare function mergeFieldDomains(target: LayerFieldDomain, source: LayerFieldDomain): void;
export declare function mergeFields(target: LayerField[], source: LayerField[]): void;
export declare function mergeLayer(target: MapLayer, source: MapLayer): void;
export declare function mergeLayers(target: MapLayer[], source: MapLayer[], sourceMetadata?: LrsMetadata, sort?: boolean, onMergeComplete?: (target: MapLayer, source: MapLayer) => any): void;
export declare function mergeNetworkLayers(target: NetworkLayer[], source: NetworkLayer[], sourceMetadata?: LrsMetadata): void;
export declare function onMergeNetworkLayerComplete(targetLayer: NetworkLayer, sourceLayer: NetworkLayer): void;
export declare function mergeLrsMetadata(target: LrsMetadata, ...source: LrsMetadata[]): void;
export declare function mergeMapMetadata(target: LrsMetadata, ...source: MapServerMetadata[]): void;
export declare function deepMergeMapMetadata(target: LrsMetadata, ...source: MapServerMetadata[]): void;
export declare function mergeLrsMetadataSources(dataSource: DataSource, dataSourceLrsMetadata: LrsMetadata, mapServerLrsMetadata: LrsMetadata, mapServerMetadata: MapServerMetadata): LrsMetadata;
