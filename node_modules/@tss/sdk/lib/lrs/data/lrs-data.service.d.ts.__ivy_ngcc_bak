import { Observable } from 'rxjs';
import { LayerField } from '../../maps/fields/layer-field';
import { LrsLayer } from '../lrs-layer';
import { DataSource } from '../../data-source/data-source';
import { EsriMapServerService } from '../../esri/esri-map-server.service';
import { DataSourceService } from '../../data-source/data-source.service';
import { NetworkFeatureCollection } from '../networks/network-feature-collection';
import { NetworkLayer } from '../networks/network-layer';
import { DataSourceConfig } from '../../data-source/data-source-config';
export declare class LrsDataService {
    private mapService;
    private dataSourceService;
    private dataSourceConfig;
    constructor(mapService: EsriMapServerService, dataSourceService: DataSourceService, dataSourceConfig: DataSourceConfig);
    getUniqueValues<T>(dataSource: DataSource, layer: LrsLayer, field: string | LayerField, whereClause?: string): Observable<T[]>;
    getQueryCount(dataSource: DataSource, layer: LrsLayer, whereClause: string): Observable<number>;
    queryRoutesByIds(dataSource: DataSource, layer: NetworkLayer, routeIds: string[]): Observable<NetworkFeatureCollection>;
    queryRoutes(dataSource: DataSource, layer: NetworkLayer, whereClause?: string): Observable<NetworkFeatureCollection>;
    searchRoutesByText(dataSource: DataSource, layer: NetworkLayer, searchText: string): Observable<NetworkFeatureCollection>;
}
