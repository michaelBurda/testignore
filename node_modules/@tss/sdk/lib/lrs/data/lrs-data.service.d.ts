import { Observable } from 'rxjs';
import { LayerField } from '../../maps/fields/layer-field';
import { LrsLayer } from '../lrs-layer';
import { DataSource } from '../../data-source/data-source';
import { EsriMapServerService } from '../../esri/esri-map-server.service';
import { DataSourceService } from '../../data-source/data-source.service';
import { NetworkFeatureCollection } from '../networks/network-feature-collection';
import { NetworkLayer } from '../networks/network-layer';
import { DataSourceConfig } from '../../data-source/data-source-config';
import * as ɵngcc0 from '@angular/core';
export declare class LrsDataService {
    private mapService;
    private dataSourceService;
    private dataSourceConfig;
    constructor(mapService: EsriMapServerService, dataSourceService: DataSourceService, dataSourceConfig: DataSourceConfig);
    getUniqueValues<T>(dataSource: DataSource, layer: LrsLayer, field: string | LayerField, whereClause?: string): Observable<T[]>;
    getQueryCount(dataSource: DataSource, layer: LrsLayer, whereClause: string): Observable<number>;
    queryRoutesByIds(dataSource: DataSource, layer: NetworkLayer, routeIds: string[]): Observable<NetworkFeatureCollection>;
    queryRoutes(dataSource: DataSource, layer: NetworkLayer, whereClause?: string): Observable<NetworkFeatureCollection>;
    searchRoutesByText(dataSource: DataSource, layer: NetworkLayer, searchText: string): Observable<NetworkFeatureCollection>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LrsDataService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<LrsDataService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHJzLWRhdGEuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJscnMtZGF0YS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExheWVyRmllbGQgfSBmcm9tICcuLi8uLi9tYXBzL2ZpZWxkcy9sYXllci1maWVsZCc7XG5pbXBvcnQgeyBMcnNMYXllciB9IGZyb20gJy4uL2xycy1sYXllcic7XG5pbXBvcnQgeyBEYXRhU291cmNlIH0gZnJvbSAnLi4vLi4vZGF0YS1zb3VyY2UvZGF0YS1zb3VyY2UnO1xuaW1wb3J0IHsgRXNyaU1hcFNlcnZlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9lc3JpL2VzcmktbWFwLXNlcnZlci5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFTb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZGF0YS1zb3VyY2UvZGF0YS1zb3VyY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOZXR3b3JrRmVhdHVyZUNvbGxlY3Rpb24gfSBmcm9tICcuLi9uZXR3b3Jrcy9uZXR3b3JrLWZlYXR1cmUtY29sbGVjdGlvbic7XG5pbXBvcnQgeyBOZXR3b3JrTGF5ZXIgfSBmcm9tICcuLi9uZXR3b3Jrcy9uZXR3b3JrLWxheWVyJztcbmltcG9ydCB7IERhdGFTb3VyY2VDb25maWcgfSBmcm9tICcuLi8uLi9kYXRhLXNvdXJjZS9kYXRhLXNvdXJjZS1jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTHJzRGF0YVNlcnZpY2Uge1xuICAgIHByaXZhdGUgbWFwU2VydmljZTtcbiAgICBwcml2YXRlIGRhdGFTb3VyY2VTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0YVNvdXJjZUNvbmZpZztcbiAgICBjb25zdHJ1Y3RvcihtYXBTZXJ2aWNlOiBFc3JpTWFwU2VydmVyU2VydmljZSwgZGF0YVNvdXJjZVNlcnZpY2U6IERhdGFTb3VyY2VTZXJ2aWNlLCBkYXRhU291cmNlQ29uZmlnOiBEYXRhU291cmNlQ29uZmlnKTtcbiAgICBnZXRVbmlxdWVWYWx1ZXM8VD4oZGF0YVNvdXJjZTogRGF0YVNvdXJjZSwgbGF5ZXI6IExyc0xheWVyLCBmaWVsZDogc3RyaW5nIHwgTGF5ZXJGaWVsZCwgd2hlcmVDbGF1c2U/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFRbXT47XG4gICAgZ2V0UXVlcnlDb3VudChkYXRhU291cmNlOiBEYXRhU291cmNlLCBsYXllcjogTHJzTGF5ZXIsIHdoZXJlQ2xhdXNlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gICAgcXVlcnlSb3V0ZXNCeUlkcyhkYXRhU291cmNlOiBEYXRhU291cmNlLCBsYXllcjogTmV0d29ya0xheWVyLCByb3V0ZUlkczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPE5ldHdvcmtGZWF0dXJlQ29sbGVjdGlvbj47XG4gICAgcXVlcnlSb3V0ZXMoZGF0YVNvdXJjZTogRGF0YVNvdXJjZSwgbGF5ZXI6IE5ldHdvcmtMYXllciwgd2hlcmVDbGF1c2U/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPE5ldHdvcmtGZWF0dXJlQ29sbGVjdGlvbj47XG4gICAgc2VhcmNoUm91dGVzQnlUZXh0KGRhdGFTb3VyY2U6IERhdGFTb3VyY2UsIGxheWVyOiBOZXR3b3JrTGF5ZXIsIHNlYXJjaFRleHQ6IHN0cmluZyk6IE9ic2VydmFibGU8TmV0d29ya0ZlYXR1cmVDb2xsZWN0aW9uPjtcbn1cbiJdfQ==