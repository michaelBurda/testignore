import { DataSource } from '../data-source/data-source';
import { FeatureClassLayer } from '../maps/feature-class-layer';
import { IntersectionLayer } from './intersections/intersection-layer';
import { EventLayer } from './events/event-layer';
import { NetworkLayer } from './networks/network-layer';
import { RedlineLayer } from './redlines/redline-layer';
import { CenterlineLayer } from './centerlines/centerline-layer';
import { CalibrationPointLayer } from './calibration-points/calibration-point-layer';
import { MapServerMetadata } from '../maps/map-server-metadata';
import { LayerFieldDomain } from '../maps/fields/layer-field';
import { MapLayer } from '../maps/map-layer';
import { LrsLayer } from './lrs-layer';
import { LrsLayerDetail } from './lrs-layer-detail';
import { LrsInfo } from './lrs-info';
import { Cloneable } from '../core/clone/cloneable';
import { ValidationResult } from '../core/validation/validation-results';
export declare class LrsMetadata extends MapServerMetadata implements Cloneable<LrsMetadata> {
    dataSource: DataSource;
    dataSourceId: string;
    name: string;
    serviceHasLrsMeta: boolean;
    networkLayers: NetworkLayer[];
    eventLayers: EventLayer[];
    redlineLayers: RedlineLayer[];
    centerlineLayers: CenterlineLayer[];
    calibrationPointLayers: CalibrationPointLayer[];
    intersectionLayers: IntersectionLayer[];
    nonLRSLayers: FeatureClassLayer[];
    lrs: LrsInfo[];
    domains: LayerFieldDomain[];
    constructor(dataSource?: DataSource);
    /**
     * Gets a layer by ID - searching across all types (event layers, network layers, etc).
     */
    getLayer(layerId: number): MapLayer;
    getLrsLayer(layerId: number): LrsLayer;
    getLayerDetail(layerId: number): LrsLayerDetail;
    isLrsLayer(layerId: number): boolean;
    isNetworkLayer(layerId: number): boolean;
    isEventLayer(layerId: number): boolean;
    isIntersectionLayer(layerId: number): boolean;
    isRedlineLayer(layerId: number): boolean;
    isCenterlineLayer(layerId: number): boolean;
    isCalibrationPointLayer(layerId: number): boolean;
    isNonLRSLayer(layerId: number): boolean;
    isTable(layerId: number): boolean;
    /**
     * Merges map server general information into this LRS metadata instance.
     */
    mergeMapMetadata(mapMetadata: MapServerMetadata): LrsMetadata;
    deepMergeMapMetadata(mapMetadata: MapServerMetadata): LrsMetadata;
    /**
     * Merges other LRS metadata into this LRS metdata instance.
     */
    mergeLrsMetadata(lrsMetadata: LrsMetadata): LrsMetadata;
    getNetworkLayer(layerId: number): NetworkLayer;
    getEventLayer(layerId: number): EventLayer;
    getIntersectionLayer(layerId: number): IntersectionLayer;
    getLrsLayers(): LrsLayer[];
    getFeatureClassLayers(): FeatureClassLayer[];
    getAllLayers(): MapLayer[];
    getNetworkIdForLayer(layer: LrsLayer): number | null;
    getEventLayersByNetwork(networkLayerId: number): EventLayer[];
    rebuildLayers(): this;
    assignCodedValueDomainsToFields(): this;
    assign(source: any): this;
    clone(): LrsMetadata;
    validate(): ValidationResult;
}
