import { WhereClauseBuilder, WhereClauseBuilderOptions } from '../maps/where-clause-builder';
import { LrsReferenceLayer, TemporalLayer } from './lrs-layer';
import { NetworkLayer } from './networks/network-layer';
import { EventLayer } from './events/event-layer';
import { DataSource } from '../data-source/data-source';
import { DataSourceProviderType } from '../data-source/data-source-provider-type';
export declare const NO_TEMPORAL_LAYER_SUPPLIED_ERROR_MSG = "No LRS temporal layers supplied";
export declare const NO_REFERENCE_LAYER_SUPPLIED_ERROR_MSG = "No LRS reference layer supplied";
export declare const LRS_DATE_WHERE_CLAUSE_TEMPLATE: string;
export declare const LRS_POINT_EVENT_WHERE_CLAUSE_TEMPLATE = "({fromMeasureFieldName} between {fromMeasure} and {toMeasure})";
export declare const LRS_LINEAR_EVENT_WHERE_CLAUSE_TEMPLATE: string;
export declare function getLrsViewDateWhereStatement(fromDateFieldName: string, toDateFieldName: string, dbType?: DataSourceProviderType, viewDate?: Date): string;
export declare class LrsWhereClauseBuilder extends WhereClauseBuilder {
    private temporalLayer;
    private referenceLayer;
    private sourceDbType;
    constructor(options?: WhereClauseBuilderOptions);
    withDataSource(sourceData: DataSource): this;
    withDataProvider(sourceDbType: DataSourceProviderType): this;
    withEventLayer(eventLayer: EventLayer): this;
    withReferenceLayer(referenceLayer: LrsReferenceLayer): this;
    withNetworkLayer(networkLayer: NetworkLayer): this;
    withTemporalLayer(temporalLayer: TemporalLayer): this;
    withRouteId(routeId: string | number, routeIdFieldName?: string): this;
    withViewDate(viewDate?: Date, fromDateFieldName?: string, toDateFieldName?: string): this;
    betweenMeasures(fromMeasure: number, toMeasure: number, fromMeasureFieldName?: string, toMeasureFieldName?: string): this;
}
