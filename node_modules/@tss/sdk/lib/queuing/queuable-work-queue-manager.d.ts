import { Observable } from 'rxjs';
import { WorkQueueManager } from './work-queue-manager';
import { Queuable } from './queuable';
import { QueuableWorkerQueueOptions } from './queuable-worker-queue-options';
import { QueuePayload } from './queue-payload';
export declare abstract class QueuableWorkQueueManager<TInput, TOutput> extends WorkQueueManager<TInput, TOutput> implements Queuable<TInput> {
    readonly options: QueuableWorkerQueueOptions;
    abstract enqueue(item: TInput): Observable<TInput>;
    abstract dequeue(item: TInput): Observable<TInput>;
    /**
     * Enqueues multiple items into an array.
     * @param items Items to enqueue.
     *
     * TODO: We want to change this to use "mergeAll" once we
     *  upgrade to rxjs 6, as that is the desired behavior here.
     *
     * // The following works in rxjs 6, but not in 5:
     * of(...sources)
     * .pipe(
     *   mergeAll(),
     *   // NOTE: in rxjs 5
     *   tap((x: TInput) => x)
     * )
     */
    enqueuMany(...items: TInput[]): Observable<TInput>;
    /**
     * Deque many items from the queue.
     * @param items Items do deque.
     */
    dequeuMany(...items: TInput[]): Observable<TInput>;
    protected onWorkComplete(payload: QueuePayload<TInput, TOutput>): Observable<QueuePayload<TInput, TOutput>>;
}
