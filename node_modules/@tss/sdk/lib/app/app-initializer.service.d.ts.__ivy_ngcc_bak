import { Router } from '@angular/router';
import { Injector } from '@angular/core';
import { Logger } from '../core/logging/logger.service';
import { PersistentStorage } from '../core/storage/persistent-storage.service';
import { AuthService } from '../security/auth.service';
import { SecurityConfig } from '../security/security-config';
import { RoleManagerService } from '../security/role-manager.service';
import { AppProfileService } from './app-profile.service';
import { AppConfig } from './app.config';
import { AppProfile } from './app-profile';
/**
 * Application initialization service that is responsible for bootstrapping
 * the application.
 */
export declare class AppInitializerService {
    private router;
    private auth;
    private appProfiles;
    private log;
    private config;
    private storage;
    private securityConfig;
    private roleMgr;
    private injector;
    private static readonly tokenExpireDateKey;
    ready: boolean;
    loading: boolean;
    onReady: Promise<AppProfile>;
    private readonly moduleConfigInstances;
    private readonly queryParameters;
    private resolveFn;
    private rejectFn;
    constructor(router: Router, auth: AuthService, appProfiles: AppProfileService, log: Logger, config: AppConfig, storage: PersistentStorage, securityConfig: SecurityConfig, roleMgr: RoleManagerService, injector: Injector);
    /**
     * Initializes/bootstraps a standard TSS application.
     */
    initialize(): void;
    private queryProfile;
    /**
     * Gets the date of the cached "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     */
    private getCachedTokenInvalidationDate;
    /**
     * Caches the "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     */
    private setCachedTokenExpireDate;
    /**
     * Compares the cached token validation data with the invalidation date from the server.
     * If the invalidation date from the server is new than the cached date, then the user
     * must be forcibly signed out.
     */
    private checkTokenInvalidationDate;
    /**
     * Retrieves the user account if the user is already signed in, logs the user out if
     * the token is expired, or refreshes the user account information - depending on
     * the configured authentication provider.
     */
    private retrieveUserAccount;
    /**
     * Set module configuration properties based on overrides from an object.
     * This object can come from multiple places - such as the server or query params.
     * See: the "applyModuleConfigurations" and "overrideModuleConfigurations" methods.
     */
    private applyModuleConfigurationsFromObject;
    /**
     * Set module configuration properties based on overrides from the server.
     * This functionality lets us dynamically override client side configuration
     * through the use of "App Settings" from the server.
     */
    private applyModuleConfigurations;
    /**
     * Set module configuration properties based on overrides from the URL query parameters.
     * This functionality lets us dynamically override client side and server side configurations
     * by passing explicit settings through query parameters. A good use case for this is to pass
     * "coreConfig.logLevel=1" as a query parameter in production to debug an issue in a production
     * environment.
     */
    private overrideModuleConfigurationsFromQueryParams;
    /**
     * Instantiates instances of each configured module configuration object. Properties of
     * these module config instances will later be set based on server-side overides.
     */
    private populateModuleConfigInstances;
    /**
     * Updates security options based on information retrieved form the application profile.
     * For example, security may be enabled or disabled, guest roles will be set, etc.
     */
    private configureRoleManager;
}
/**
 * Application initialization factory that provides a hook into
 * the Angular bootstrapping process.
 */
export declare function AppInitializerFactory(injector: Injector): () => Promise<any>;
