import { Router } from '@angular/router';
import { Injector } from '@angular/core';
import { Logger } from '../core/logging/logger.service';
import { PersistentStorage } from '../core/storage/persistent-storage.service';
import { AuthService } from '../security/auth.service';
import { SecurityConfig } from '../security/security-config';
import { RoleManagerService } from '../security/role-manager.service';
import { AppProfileService } from './app-profile.service';
import { AppConfig } from './app.config';
import { AppProfile } from './app-profile';
/**
 * Application initialization service that is responsible for bootstrapping
 * the application.
 */
import * as ɵngcc0 from '@angular/core';
export declare class AppInitializerService {
    private router;
    private auth;
    private appProfiles;
    private log;
    private config;
    private storage;
    private securityConfig;
    private roleMgr;
    private injector;
    private static readonly tokenExpireDateKey;
    ready: boolean;
    loading: boolean;
    onReady: Promise<AppProfile>;
    private readonly moduleConfigInstances;
    private readonly queryParameters;
    private resolveFn;
    private rejectFn;
    constructor(router: Router, auth: AuthService, appProfiles: AppProfileService, log: Logger, config: AppConfig, storage: PersistentStorage, securityConfig: SecurityConfig, roleMgr: RoleManagerService, injector: Injector);
    /**
     * Initializes/bootstraps a standard TSS application.
     */
    initialize(): void;
    private queryProfile;
    /**
     * Gets the date of the cached "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     */
    private getCachedTokenInvalidationDate;
    /**
     * Caches the "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     */
    private setCachedTokenExpireDate;
    /**
     * Compares the cached token validation data with the invalidation date from the server.
     * If the invalidation date from the server is new than the cached date, then the user
     * must be forcibly signed out.
     */
    private checkTokenInvalidationDate;
    /**
     * Retrieves the user account if the user is already signed in, logs the user out if
     * the token is expired, or refreshes the user account information - depending on
     * the configured authentication provider.
     */
    private retrieveUserAccount;
    /**
     * Set module configuration properties based on overrides from an object.
     * This object can come from multiple places - such as the server or query params.
     * See: the "applyModuleConfigurations" and "overrideModuleConfigurations" methods.
     */
    private applyModuleConfigurationsFromObject;
    /**
     * Set module configuration properties based on overrides from the server.
     * This functionality lets us dynamically override client side configuration
     * through the use of "App Settings" from the server.
     */
    private applyModuleConfigurations;
    /**
     * Set module configuration properties based on overrides from the URL query parameters.
     * This functionality lets us dynamically override client side and server side configurations
     * by passing explicit settings through query parameters. A good use case for this is to pass
     * "coreConfig.logLevel=1" as a query parameter in production to debug an issue in a production
     * environment.
     */
    private overrideModuleConfigurationsFromQueryParams;
    /**
     * Instantiates instances of each configured module configuration object. Properties of
     * these module config instances will later be set based on server-side overides.
     */
    private populateModuleConfigInstances;
    /**
     * Updates security options based on information retrieved form the application profile.
     * For example, security may be enabled or disabled, guest roles will be set, etc.
     */
    private configureRoleManager;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AppInitializerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AppInitializerService>;
}
/**
 * Application initialization factory that provides a hook into
 * the Angular bootstrapping process.
 */
export declare function AppInitializerFactory(injector: Injector): () => Promise<any>;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLWluaXRpYWxpemVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXBwLWluaXRpYWxpemVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvcmUvbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQZXJzaXN0ZW50U3RvcmFnZSB9IGZyb20gJy4uL2NvcmUvc3RvcmFnZS9wZXJzaXN0ZW50LXN0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4uL3NlY3VyaXR5L2F1dGguc2VydmljZSc7XG5pbXBvcnQgeyBTZWN1cml0eUNvbmZpZyB9IGZyb20gJy4uL3NlY3VyaXR5L3NlY3VyaXR5LWNvbmZpZyc7XG5pbXBvcnQgeyBSb2xlTWFuYWdlclNlcnZpY2UgfSBmcm9tICcuLi9zZWN1cml0eS9yb2xlLW1hbmFnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBQcm9maWxlU2VydmljZSB9IGZyb20gJy4vYXBwLXByb2ZpbGUuc2VydmljZSc7XG5pbXBvcnQgeyBBcHBDb25maWcgfSBmcm9tICcuL2FwcC5jb25maWcnO1xuaW1wb3J0IHsgQXBwUHJvZmlsZSB9IGZyb20gJy4vYXBwLXByb2ZpbGUnO1xuLyoqXG4gKiBBcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbiBzZXJ2aWNlIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIGJvb3RzdHJhcHBpbmdcbiAqIHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXBwSW5pdGlhbGl6ZXJTZXJ2aWNlIHtcbiAgICBwcml2YXRlIHJvdXRlcjtcbiAgICBwcml2YXRlIGF1dGg7XG4gICAgcHJpdmF0ZSBhcHBQcm9maWxlcztcbiAgICBwcml2YXRlIGxvZztcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBwcml2YXRlIHN0b3JhZ2U7XG4gICAgcHJpdmF0ZSBzZWN1cml0eUNvbmZpZztcbiAgICBwcml2YXRlIHJvbGVNZ3I7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSB0b2tlbkV4cGlyZURhdGVLZXk7XG4gICAgcmVhZHk6IGJvb2xlYW47XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICBvblJlYWR5OiBQcm9taXNlPEFwcFByb2ZpbGU+O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbW9kdWxlQ29uZmlnSW5zdGFuY2VzO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcXVlcnlQYXJhbWV0ZXJzO1xuICAgIHByaXZhdGUgcmVzb2x2ZUZuO1xuICAgIHByaXZhdGUgcmVqZWN0Rm47XG4gICAgY29uc3RydWN0b3Iocm91dGVyOiBSb3V0ZXIsIGF1dGg6IEF1dGhTZXJ2aWNlLCBhcHBQcm9maWxlczogQXBwUHJvZmlsZVNlcnZpY2UsIGxvZzogTG9nZ2VyLCBjb25maWc6IEFwcENvbmZpZywgc3RvcmFnZTogUGVyc2lzdGVudFN0b3JhZ2UsIHNlY3VyaXR5Q29uZmlnOiBTZWN1cml0eUNvbmZpZywgcm9sZU1ncjogUm9sZU1hbmFnZXJTZXJ2aWNlLCBpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzL2Jvb3RzdHJhcHMgYSBzdGFuZGFyZCBUU1MgYXBwbGljYXRpb24uXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgcXVlcnlQcm9maWxlO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGUgb2YgdGhlIGNhY2hlZCBcImludmFsaWRhdGlvblwiIGRhdGUuXG4gICAgICogVGhlIGludmFsaWRhdGlvbiBkYXRlIGlzIHVzZWQgdG8gbGV0IHRoZSBzZXJ2ZXIgZm9yY2UgdXNlcnMgdG8gcmUtYXV0aGVudGljYXRlLlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q2FjaGVkVG9rZW5JbnZhbGlkYXRpb25EYXRlO1xuICAgIC8qKlxuICAgICAqIENhY2hlcyB0aGUgXCJpbnZhbGlkYXRpb25cIiBkYXRlLlxuICAgICAqIFRoZSBpbnZhbGlkYXRpb24gZGF0ZSBpcyB1c2VkIHRvIGxldCB0aGUgc2VydmVyIGZvcmNlIHVzZXJzIHRvIHJlLWF1dGhlbnRpY2F0ZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIHNldENhY2hlZFRva2VuRXhwaXJlRGF0ZTtcbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0aGUgY2FjaGVkIHRva2VuIHZhbGlkYXRpb24gZGF0YSB3aXRoIHRoZSBpbnZhbGlkYXRpb24gZGF0ZSBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICogSWYgdGhlIGludmFsaWRhdGlvbiBkYXRlIGZyb20gdGhlIHNlcnZlciBpcyBuZXcgdGhhbiB0aGUgY2FjaGVkIGRhdGUsIHRoZW4gdGhlIHVzZXJcbiAgICAgKiBtdXN0IGJlIGZvcmNpYmx5IHNpZ25lZCBvdXQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjaGVja1Rva2VuSW52YWxpZGF0aW9uRGF0ZTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHVzZXIgYWNjb3VudCBpZiB0aGUgdXNlciBpcyBhbHJlYWR5IHNpZ25lZCBpbiwgbG9ncyB0aGUgdXNlciBvdXQgaWZcbiAgICAgKiB0aGUgdG9rZW4gaXMgZXhwaXJlZCwgb3IgcmVmcmVzaGVzIHRoZSB1c2VyIGFjY291bnQgaW5mb3JtYXRpb24gLSBkZXBlbmRpbmcgb25cbiAgICAgKiB0aGUgY29uZmlndXJlZCBhdXRoZW50aWNhdGlvbiBwcm92aWRlci5cbiAgICAgKi9cbiAgICBwcml2YXRlIHJldHJpZXZlVXNlckFjY291bnQ7XG4gICAgLyoqXG4gICAgICogU2V0IG1vZHVsZSBjb25maWd1cmF0aW9uIHByb3BlcnRpZXMgYmFzZWQgb24gb3ZlcnJpZGVzIGZyb20gYW4gb2JqZWN0LlxuICAgICAqIFRoaXMgb2JqZWN0IGNhbiBjb21lIGZyb20gbXVsdGlwbGUgcGxhY2VzIC0gc3VjaCBhcyB0aGUgc2VydmVyIG9yIHF1ZXJ5IHBhcmFtcy5cbiAgICAgKiBTZWU6IHRoZSBcImFwcGx5TW9kdWxlQ29uZmlndXJhdGlvbnNcIiBhbmQgXCJvdmVycmlkZU1vZHVsZUNvbmZpZ3VyYXRpb25zXCIgbWV0aG9kcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFwcGx5TW9kdWxlQ29uZmlndXJhdGlvbnNGcm9tT2JqZWN0O1xuICAgIC8qKlxuICAgICAqIFNldCBtb2R1bGUgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIGJhc2VkIG9uIG92ZXJyaWRlcyBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAgICogVGhpcyBmdW5jdGlvbmFsaXR5IGxldHMgdXMgZHluYW1pY2FsbHkgb3ZlcnJpZGUgY2xpZW50IHNpZGUgY29uZmlndXJhdGlvblxuICAgICAqIHRocm91Z2ggdGhlIHVzZSBvZiBcIkFwcCBTZXR0aW5nc1wiIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFwcGx5TW9kdWxlQ29uZmlndXJhdGlvbnM7XG4gICAgLyoqXG4gICAgICogU2V0IG1vZHVsZSBjb25maWd1cmF0aW9uIHByb3BlcnRpZXMgYmFzZWQgb24gb3ZlcnJpZGVzIGZyb20gdGhlIFVSTCBxdWVyeSBwYXJhbWV0ZXJzLlxuICAgICAqIFRoaXMgZnVuY3Rpb25hbGl0eSBsZXRzIHVzIGR5bmFtaWNhbGx5IG92ZXJyaWRlIGNsaWVudCBzaWRlIGFuZCBzZXJ2ZXIgc2lkZSBjb25maWd1cmF0aW9uc1xuICAgICAqIGJ5IHBhc3NpbmcgZXhwbGljaXQgc2V0dGluZ3MgdGhyb3VnaCBxdWVyeSBwYXJhbWV0ZXJzLiBBIGdvb2QgdXNlIGNhc2UgZm9yIHRoaXMgaXMgdG8gcGFzc1xuICAgICAqIFwiY29yZUNvbmZpZy5sb2dMZXZlbD0xXCIgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgaW4gcHJvZHVjdGlvbiB0byBkZWJ1ZyBhbiBpc3N1ZSBpbiBhIHByb2R1Y3Rpb25cbiAgICAgKiBlbnZpcm9ubWVudC5cbiAgICAgKi9cbiAgICBwcml2YXRlIG92ZXJyaWRlTW9kdWxlQ29uZmlndXJhdGlvbnNGcm9tUXVlcnlQYXJhbXM7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGVzIGluc3RhbmNlcyBvZiBlYWNoIGNvbmZpZ3VyZWQgbW9kdWxlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBQcm9wZXJ0aWVzIG9mXG4gICAgICogdGhlc2UgbW9kdWxlIGNvbmZpZyBpbnN0YW5jZXMgd2lsbCBsYXRlciBiZSBzZXQgYmFzZWQgb24gc2VydmVyLXNpZGUgb3ZlcmlkZXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBwb3B1bGF0ZU1vZHVsZUNvbmZpZ0luc3RhbmNlcztcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHNlY3VyaXR5IG9wdGlvbnMgYmFzZWQgb24gaW5mb3JtYXRpb24gcmV0cmlldmVkIGZvcm0gdGhlIGFwcGxpY2F0aW9uIHByb2ZpbGUuXG4gICAgICogRm9yIGV4YW1wbGUsIHNlY3VyaXR5IG1heSBiZSBlbmFibGVkIG9yIGRpc2FibGVkLCBndWVzdCByb2xlcyB3aWxsIGJlIHNldCwgZXRjLlxuICAgICAqL1xuICAgIHByaXZhdGUgY29uZmlndXJlUm9sZU1hbmFnZXI7XG59XG4vKipcbiAqIEFwcGxpY2F0aW9uIGluaXRpYWxpemF0aW9uIGZhY3RvcnkgdGhhdCBwcm92aWRlcyBhIGhvb2sgaW50b1xuICogdGhlIEFuZ3VsYXIgYm9vdHN0cmFwcGluZyBwcm9jZXNzLlxuICovXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBBcHBJbml0aWFsaXplckZhY3RvcnkoaW5qZWN0b3I6IEluamVjdG9yKTogKCkgPT4gUHJvbWlzZTxhbnk+O1xuIl19