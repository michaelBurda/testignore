import { Observable, Subscription } from 'rxjs';
import { NotifyService } from './notify.service';
import { Logger } from '../logging/logger.service';
import { BaseNotificationTracker } from './base-notification-tracker';
import { NotificationConfig } from './notification-config';
export declare class NotificationSubscriptionTracker<T> extends BaseNotificationTracker<T> {
    source: Observable<T>;
    constructor(source: Observable<T>, notify: NotifyService, log?: Logger, config?: NotificationConfig);
    wait(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T>;
    waitIf(predicate: boolean | (() => boolean), message: string, title?: string, config?: any): NotificationSubscriptionTracker<T>;
    success(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T>;
    error(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T>;
    warn(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T>;
    info(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T>;
    finally(onDone: (value: T | undefined | null | PromiseLike<T>) => void): NotificationSubscriptionTracker<T>;
    subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;
}
