import { NotifyService } from './notify.service';
import { Logger } from '../logging/logger.service';
import { BaseNotificationTracker } from './base-notification-tracker';
import { NotificationConfig } from './notification-config';
export declare class NotificationPromiseTracker<T> extends BaseNotificationTracker<T> {
    source: Promise<T>;
    constructor(source: Promise<T>, notify: NotifyService, log?: Logger, config?: NotificationConfig);
    wait(message: string, title?: string): NotificationPromiseTracker<T>;
    waitIf(predicate: boolean | (() => boolean), message: string, title?: string): NotificationPromiseTracker<T>;
    success(message: string, title?: string): NotificationPromiseTracker<T>;
    error(message: string, title?: string): NotificationPromiseTracker<T>;
    warn(message: string, title?: string): NotificationPromiseTracker<T>;
    info(message: string, title?: string): NotificationPromiseTracker<T>;
    finally(onDone: (value: T | undefined | null | PromiseLike<T>) => void): NotificationPromiseTracker<T>;
    then(onfulfilled?: ((value: T) => T | PromiseLike<T>) | undefined | null): Promise<T>;
    catch(onrejected?: ((reason: any) => T | PromiseLike<T>) | undefined | null): Promise<T>;
}
