import { Observable } from 'rxjs';
import { CoreConfig } from '../core.config';
import { NotifyType } from './notify-type';
import { Notify } from './notify';
import { Logger } from '../logging/logger.service';
import { NotificationSubscriptionTracker } from './notification-subscription-tracker';
import { NotificationPromiseTracker } from './notification-promise-tracker';
import { NotifyResponse } from './notify-response';
/**
 * Notification service.
 */
export declare class NotifyService implements Notify {
    protected config: CoreConfig;
    protected log: Logger;
    constructor(config: CoreConfig, log: Logger);
    notify(type: NotifyType, message: string, title: string, config?: any): NotifyResponse;
    clear(notifyId?: string, containerId?: string): void;
    with<T>(source: Observable<T>): NotificationSubscriptionTracker<T>;
    promise<T>(source: Promise<T>): NotificationPromiseTracker<T>;
    wait(message: string, title?: string, config?: any): NotifyResponse;
    success(message: string, title?: string, config?: any): NotifyResponse;
    error(message: string, title?: string, error?: any, config?: any): NotifyResponse;
    warn(message: string, title?: string, error?: any, config?: any): NotifyResponse;
    info(message: string, title?: string, config?: any): NotifyResponse;
}
