import { NotificationTracker } from './notification-tracker';
import { NotifyResponse } from './notify-response';
import { NotifyEventType } from './notify-event-type';
import { NotifyService } from './notify.service';
import { Logger } from '../logging/logger.service';
import { NotificationConfig } from './notification-config';
export declare abstract class BaseNotificationTracker<T> implements NotificationTracker<T> {
    protected notify: NotifyService;
    protected log?: Logger;
    protected config: NotificationConfig;
    protected onDone: (value: T | undefined | null | PromiseLike<T>) => void;
    protected waitResponse: NotifyResponse;
    protected eventWatchers: {
        eventType: NotifyEventType;
        callback: ((e?: any) => void);
    }[];
    constructor(notify: NotifyService, log?: Logger, config?: NotificationConfig);
    wait(message: string, title?: string, config?: any): NotificationTracker<T>;
    waitIf(predicate: boolean | (() => boolean), message: string, title?: string, config?: any): NotificationTracker<T>;
    success(message: string, title?: string, config?: any): NotificationTracker<T>;
    error(message: string, title?: string, config?: any): NotificationTracker<T>;
    warn(message: string, title?: string, config?: any): NotificationTracker<T>;
    info(message: string, title?: string, config?: any): NotificationTracker<T>;
    finally(onDone: (value: T | undefined | null | PromiseLike<T>) => void): NotificationTracker<T>;
    on(eventType: NotifyEventType, callback: (e?: any) => void): void;
    protected emit(eventType: NotifyEventType, event?: any): void;
    protected done(response?: any): void;
    protected onSuccess(response: any): void;
    protected onFail(error: any): void;
}
