import { HttpClient, HttpParams } from '@angular/common/http';
import { FeatureCollection } from 'geojson';
import { Observable } from 'rxjs';
import { DataSourceConfig } from './data-source-config';
import { DataSource } from './data-source';
import { DataTableInfo } from './data-table-info';
import { DataColumn } from './data-column';
import { DataTable } from './data-table';
import { DataSourceSpatialExportFormat } from './data-source-spatial-export-format';
import { BaseResourceService } from '../core/resource/base-resource.service';
export declare class DataSourceService extends BaseResourceService<DataSource> {
    protected http: HttpClient;
    private dsConfig;
    constructor(http: HttpClient, dsConfig: DataSourceConfig);
    testConnection(entity: DataSource, useEntityFramework: boolean, params?: HttpParams): Observable<DataTable>;
    testExistingConnection(id: string, params?: HttpParams): Observable<DataTable>;
    getTables(dataSourceId: string, params?: HttpParams): Observable<DataTableInfo[]>;
    getTableDetails(dataSourceId: string, params?: HttpParams): Observable<DataTable>;
    getColumns(dataSourceId: string, table: string, params?: HttpParams): Observable<DataColumn[]>;
    getColumnValues<T>(dataSourceId: string, table: string, column: string, unique?: boolean, params?: HttpParams): Observable<T[]>;
    getUniqueColumnValues<T>(dataSourceId: string, table: string, column: string, params?: HttpParams): Observable<T[]>;
    getRecordCount(dataSourceId: string, table: string, whereClause?: string, version?: string, params?: HttpParams): Observable<number>;
    queryData(dataSourceId: string, table: string, whereClause: string, version?: string, page?: number, pageSize?: number, includeGeometry?: boolean, shapeField?: string, params?: HttpParams): Observable<DataTable>;
    queryGeoJsonData(dataSourceId: string, table: string, whereClause: string, version?: string, page?: number, pageSize?: number, includeGeometry?: boolean, shapeField?: string, params?: HttpParams): Observable<FeatureCollection>;
    querySpatialData<T extends DataTable | FeatureCollection>(dataSourceId: string, table: string, whereClause: string, version?: string, page?: number, pageSize?: number, includeGeometry?: boolean, shapeField?: string, format?: DataSourceSpatialExportFormat, params?: HttpParams): Observable<T>;
}
