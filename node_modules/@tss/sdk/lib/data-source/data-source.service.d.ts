import { HttpClient, HttpParams } from '@angular/common/http';
import { FeatureCollection } from 'geojson';
import { Observable } from 'rxjs';
import { DataSourceConfig } from './data-source-config';
import { DataSource } from './data-source';
import { DataTableInfo } from './data-table-info';
import { DataColumn } from './data-column';
import { DataTable } from './data-table';
import { DataSourceSpatialExportFormat } from './data-source-spatial-export-format';
import { BaseResourceService } from '../core/resource/base-resource.service';
import * as ɵngcc0 from '@angular/core';
export declare class DataSourceService extends BaseResourceService<DataSource> {
    protected http: HttpClient;
    private dsConfig;
    constructor(http: HttpClient, dsConfig: DataSourceConfig);
    testConnection(entity: DataSource, useEntityFramework: boolean, params?: HttpParams): Observable<DataTable>;
    testExistingConnection(id: string, params?: HttpParams): Observable<DataTable>;
    getTables(dataSourceId: string, params?: HttpParams): Observable<DataTableInfo[]>;
    getTableDetails(dataSourceId: string, params?: HttpParams): Observable<DataTable>;
    getColumns(dataSourceId: string, table: string, params?: HttpParams): Observable<DataColumn[]>;
    getColumnValues<T>(dataSourceId: string, table: string, column: string, unique?: boolean, params?: HttpParams): Observable<T[]>;
    getUniqueColumnValues<T>(dataSourceId: string, table: string, column: string, params?: HttpParams): Observable<T[]>;
    getRecordCount(dataSourceId: string, table: string, whereClause?: string, version?: string, params?: HttpParams): Observable<number>;
    queryData(dataSourceId: string, table: string, whereClause: string, version?: string, page?: number, pageSize?: number, includeGeometry?: boolean, shapeField?: string, params?: HttpParams): Observable<DataTable>;
    queryGeoJsonData(dataSourceId: string, table: string, whereClause: string, version?: string, page?: number, pageSize?: number, includeGeometry?: boolean, shapeField?: string, params?: HttpParams): Observable<FeatureCollection>;
    querySpatialData<T extends DataTable | FeatureCollection>(dataSourceId: string, table: string, whereClause: string, version?: string, page?: number, pageSize?: number, includeGeometry?: boolean, shapeField?: string, format?: DataSourceSpatialExportFormat, params?: HttpParams): Observable<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataSourceService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DataSourceService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zb3VyY2Uuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJkYXRhLXNvdXJjZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBGZWF0dXJlQ29sbGVjdGlvbiB9IGZyb20gJ2dlb2pzb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZUNvbmZpZyB9IGZyb20gJy4vZGF0YS1zb3VyY2UtY29uZmlnJztcbmltcG9ydCB7IERhdGFTb3VyY2UgfSBmcm9tICcuL2RhdGEtc291cmNlJztcbmltcG9ydCB7IERhdGFUYWJsZUluZm8gfSBmcm9tICcuL2RhdGEtdGFibGUtaW5mbyc7XG5pbXBvcnQgeyBEYXRhQ29sdW1uIH0gZnJvbSAnLi9kYXRhLWNvbHVtbic7XG5pbXBvcnQgeyBEYXRhVGFibGUgfSBmcm9tICcuL2RhdGEtdGFibGUnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZVNwYXRpYWxFeHBvcnRGb3JtYXQgfSBmcm9tICcuL2RhdGEtc291cmNlLXNwYXRpYWwtZXhwb3J0LWZvcm1hdCc7XG5pbXBvcnQgeyBCYXNlUmVzb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9yZXNvdXJjZS9iYXNlLXJlc291cmNlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0YVNvdXJjZVNlcnZpY2UgZXh0ZW5kcyBCYXNlUmVzb3VyY2VTZXJ2aWNlPERhdGFTb3VyY2U+IHtcbiAgICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudDtcbiAgICBwcml2YXRlIGRzQ29uZmlnO1xuICAgIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHBDbGllbnQsIGRzQ29uZmlnOiBEYXRhU291cmNlQ29uZmlnKTtcbiAgICB0ZXN0Q29ubmVjdGlvbihlbnRpdHk6IERhdGFTb3VyY2UsIHVzZUVudGl0eUZyYW1ld29yazogYm9vbGVhbiwgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8RGF0YVRhYmxlPjtcbiAgICB0ZXN0RXhpc3RpbmdDb25uZWN0aW9uKGlkOiBzdHJpbmcsIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPERhdGFUYWJsZT47XG4gICAgZ2V0VGFibGVzKGRhdGFTb3VyY2VJZDogc3RyaW5nLCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxEYXRhVGFibGVJbmZvW10+O1xuICAgIGdldFRhYmxlRGV0YWlscyhkYXRhU291cmNlSWQ6IHN0cmluZywgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8RGF0YVRhYmxlPjtcbiAgICBnZXRDb2x1bW5zKGRhdGFTb3VyY2VJZDogc3RyaW5nLCB0YWJsZTogc3RyaW5nLCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxEYXRhQ29sdW1uW10+O1xuICAgIGdldENvbHVtblZhbHVlczxUPihkYXRhU291cmNlSWQ6IHN0cmluZywgdGFibGU6IHN0cmluZywgY29sdW1uOiBzdHJpbmcsIHVuaXF1ZT86IGJvb2xlYW4sIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPFRbXT47XG4gICAgZ2V0VW5pcXVlQ29sdW1uVmFsdWVzPFQ+KGRhdGFTb3VyY2VJZDogc3RyaW5nLCB0YWJsZTogc3RyaW5nLCBjb2x1bW46IHN0cmluZywgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8VFtdPjtcbiAgICBnZXRSZWNvcmRDb3VudChkYXRhU291cmNlSWQ6IHN0cmluZywgdGFibGU6IHN0cmluZywgd2hlcmVDbGF1c2U/OiBzdHJpbmcsIHZlcnNpb24/OiBzdHJpbmcsIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPG51bWJlcj47XG4gICAgcXVlcnlEYXRhKGRhdGFTb3VyY2VJZDogc3RyaW5nLCB0YWJsZTogc3RyaW5nLCB3aGVyZUNsYXVzZTogc3RyaW5nLCB2ZXJzaW9uPzogc3RyaW5nLCBwYWdlPzogbnVtYmVyLCBwYWdlU2l6ZT86IG51bWJlciwgaW5jbHVkZUdlb21ldHJ5PzogYm9vbGVhbiwgc2hhcGVGaWVsZD86IHN0cmluZywgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8RGF0YVRhYmxlPjtcbiAgICBxdWVyeUdlb0pzb25EYXRhKGRhdGFTb3VyY2VJZDogc3RyaW5nLCB0YWJsZTogc3RyaW5nLCB3aGVyZUNsYXVzZTogc3RyaW5nLCB2ZXJzaW9uPzogc3RyaW5nLCBwYWdlPzogbnVtYmVyLCBwYWdlU2l6ZT86IG51bWJlciwgaW5jbHVkZUdlb21ldHJ5PzogYm9vbGVhbiwgc2hhcGVGaWVsZD86IHN0cmluZywgcGFyYW1zPzogSHR0cFBhcmFtcyk6IE9ic2VydmFibGU8RmVhdHVyZUNvbGxlY3Rpb24+O1xuICAgIHF1ZXJ5U3BhdGlhbERhdGE8VCBleHRlbmRzIERhdGFUYWJsZSB8IEZlYXR1cmVDb2xsZWN0aW9uPihkYXRhU291cmNlSWQ6IHN0cmluZywgdGFibGU6IHN0cmluZywgd2hlcmVDbGF1c2U6IHN0cmluZywgdmVyc2lvbj86IHN0cmluZywgcGFnZT86IG51bWJlciwgcGFnZVNpemU/OiBudW1iZXIsIGluY2x1ZGVHZW9tZXRyeT86IGJvb2xlYW4sIHNoYXBlRmllbGQ/OiBzdHJpbmcsIGZvcm1hdD86IERhdGFTb3VyY2VTcGF0aWFsRXhwb3J0Rm9ybWF0LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxUPjtcbn1cbiJdfQ==