import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { EsriServerToken } from '../esri-server-token';
import { EsriConfig } from '../esri-config';
import { DataSourceConfig } from '../../data-source/data-source-config';
import { BaseEsriService } from '../base-esri.service';
import { Logger } from '../../core/logging/logger.service';
import { EsriPortalAccessToken } from './esri-portal-access-token';
import * as ɵngcc0 from '@angular/core';
export declare class EsriPortalService extends BaseEsriService {
    constructor(http: HttpClient, config: EsriConfig, dataConfig: DataSourceConfig, log: Logger);
    getTokenByCode(portalUrl: string, clientId: string, code: string, bodyData?: {}, params?: HttpParams): Observable<EsriPortalAccessToken>;
    refreshToken(portalUrl: string, clientId: string, refreshToken: string, bodyData?: {}, params?: HttpParams): Observable<EsriPortalAccessToken>;
    getServerToken(portalUrl: string, portalAccessToken: string, serverUrl: string, params?: HttpParams): Observable<EsriServerToken>;
    protected doGet<T>(portalUrl: string, endpoint: string, queryParams: {}, params?: HttpParams): Observable<T>;
    protected doPost<T>(portalUrl: string, endpoint: string, formData: FormData, params?: HttpParams): Observable<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EsriPortalService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EsriPortalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXNyaS1wb3J0YWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJlc3JpLXBvcnRhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRXNyaVNlcnZlclRva2VuIH0gZnJvbSAnLi4vZXNyaS1zZXJ2ZXItdG9rZW4nO1xuaW1wb3J0IHsgRXNyaUNvbmZpZyB9IGZyb20gJy4uL2VzcmktY29uZmlnJztcbmltcG9ydCB7IERhdGFTb3VyY2VDb25maWcgfSBmcm9tICcuLi8uLi9kYXRhLXNvdXJjZS9kYXRhLXNvdXJjZS1jb25maWcnO1xuaW1wb3J0IHsgQmFzZUVzcmlTZXJ2aWNlIH0gZnJvbSAnLi4vYmFzZS1lc3JpLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vY29yZS9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IEVzcmlQb3J0YWxBY2Nlc3NUb2tlbiB9IGZyb20gJy4vZXNyaS1wb3J0YWwtYWNjZXNzLXRva2VuJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEVzcmlQb3J0YWxTZXJ2aWNlIGV4dGVuZHMgQmFzZUVzcmlTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50LCBjb25maWc6IEVzcmlDb25maWcsIGRhdGFDb25maWc6IERhdGFTb3VyY2VDb25maWcsIGxvZzogTG9nZ2VyKTtcbiAgICBnZXRUb2tlbkJ5Q29kZShwb3J0YWxVcmw6IHN0cmluZywgY2xpZW50SWQ6IHN0cmluZywgY29kZTogc3RyaW5nLCBib2R5RGF0YT86IHt9LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxFc3JpUG9ydGFsQWNjZXNzVG9rZW4+O1xuICAgIHJlZnJlc2hUb2tlbihwb3J0YWxVcmw6IHN0cmluZywgY2xpZW50SWQ6IHN0cmluZywgcmVmcmVzaFRva2VuOiBzdHJpbmcsIGJvZHlEYXRhPzoge30sIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPEVzcmlQb3J0YWxBY2Nlc3NUb2tlbj47XG4gICAgZ2V0U2VydmVyVG9rZW4ocG9ydGFsVXJsOiBzdHJpbmcsIHBvcnRhbEFjY2Vzc1Rva2VuOiBzdHJpbmcsIHNlcnZlclVybDogc3RyaW5nLCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxFc3JpU2VydmVyVG9rZW4+O1xuICAgIHByb3RlY3RlZCBkb0dldDxUPihwb3J0YWxVcmw6IHN0cmluZywgZW5kcG9pbnQ6IHN0cmluZywgcXVlcnlQYXJhbXM6IHt9LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxUPjtcbiAgICBwcm90ZWN0ZWQgZG9Qb3N0PFQ+KHBvcnRhbFVybDogc3RyaW5nLCBlbmRwb2ludDogc3RyaW5nLCBmb3JtRGF0YTogRm9ybURhdGEsIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPFQ+O1xufVxuIl19