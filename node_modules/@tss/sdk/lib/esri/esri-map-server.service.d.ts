import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Logger } from '../core/logging/logger.service';
import { NetworkFeature } from '../lrs/networks/network-feature';
import { NetworkLayer } from '../lrs/networks/network-layer';
import { EventLayer } from '../lrs/events/event-layer';
import { LrsMetadata } from '../lrs/lrs-metadata';
import { EventFeature } from '../lrs/events/event-feature';
import { EventFeatureCollection } from '../lrs/events/event-feature-collection';
import { NetworkFeatureCollection } from '../lrs/networks/network-feature-collection';
import { MapServerMetadata } from '../maps/map-server-metadata';
import { EsriMapServiceQueryOptions } from './query/esi-map-service-query-options';
import { EsriConfig } from './esri-config';
import { FeatureCollection } from 'geojson';
import { MapLayer } from '../maps/map-layer';
import { LayerField } from '../maps/fields/layer-field';
import { DataSourceConfig } from '../data-source/data-source-config';
import { GeodatbaseVersion } from '../maps/geodatabase-version';
import { EsriApplyEditsResponse } from './lrs-server/esri-apply-edits-response';
import { EsriEventEdits } from './lrs-server/esri-event-edits';
import { EsriMapServiceGeometryToMeasureOptions } from './geometry-to-measure/esri-geometry-to-measure-options';
import { EsriGeometryToMeasureResult } from './geometry-to-measure/esri-geometry-to-measure-result';
import { BaseEsriService } from './base-esri.service';
import { FeatureClassLayer } from '../maps/feature-class-layer';
import * as ɵngcc0 from '@angular/core';
export declare class EsriMapServerService extends BaseEsriService {
    constructor(http: HttpClient, config: EsriConfig, dataConfig: DataSourceConfig, log: Logger);
    /**
     * Retrieves the map service metadata for all layers.
     */
    getMapLayers(serviceUrl: string): Observable<MapServerMetadata>;
    /**
     * Retrieves the map service metadata for a given layer (by it's ID).
     */
    getMapLayer(serviceUrl: string, layerId: number): Observable<FeatureClassLayer>;
    /**
     * Retrieves the LRS Layers Metadata information from the map service
     */
    getLrsLayers(serviceUrl: string): Observable<LrsMetadata>;
    /**
     * Retrieves the LRS Server Metadata information from the map service
     */
    getLrsServer(serviceUrl: string): Observable<LrsMetadata>;
    getVersions(serviceUrl: string, lrsId?: string): Observable<GeodatbaseVersion[]>;
    singleGeometryToMeasure(serviceUrl: string, networkLayerId: number, routeId: string, x: number, y: number, viewDate?: Date, inSpatialReferenceId?: number, outputSpatialReferenceId?: number): Observable<{
        m: number;
        x: number;
        y: number;
        z?: number;
    }>;
    geometryToMeasure(serviceUrl: string, networkLayerId: number, options: EsriMapServiceGeometryToMeasureOptions): Observable<EsriGeometryToMeasureResult>;
    applyEdits(serviceUrl: string, edits: EsriEventEdits[], gdbVersion?: string): Observable<EsriApplyEditsResponse>;
    getUniqueValues<T>(serviceUrl: string, layer: MapLayer | number, field: string | LayerField, options?: EsriMapServiceQueryOptions): Observable<T[]>;
    getQueryCount(serviceUrl: string, layer: MapLayer | number, whereClause: string, options?: EsriMapServiceQueryOptions): Observable<number>;
    getEvent(serviceUrl: string, layer: EventLayer, eventId: string | number, options?: EsriMapServiceQueryOptions): Observable<EventFeature>;
    queryEvents(serviceUrl: string, layer: EventLayer, routeId: string | number, fromMeasure: number, toMeasure: number, viewDate?: Date, options?: EsriMapServiceQueryOptions): Observable<EventFeatureCollection>;
    searchEventsByText(serviceUrl: string, layer: EventLayer, searchText: string, options?: EsriMapServiceQueryOptions): Observable<EventFeatureCollection>;
    getRoute(serviceUrl: string, routeId: string | number, layer: NetworkLayer, viewDate?: Date, options?: EsriMapServiceQueryOptions): Observable<NetworkFeature>;
    queryRoutes(serviceUrl: string, layer: NetworkLayer, whereClause: string, options?: EsriMapServiceQueryOptions): Observable<NetworkFeatureCollection>;
    searchRoutesByText(serviceUrl: string, layer: NetworkLayer, searchText: string, options?: EsriMapServiceQueryOptions): Observable<NetworkFeatureCollection>;
    searchByText(serviceUrl: string, layerId: number | MapLayer, searchText: string, options?: EsriMapServiceQueryOptions): Observable<FeatureCollection>;
    query(serviceUrl: string, layerId: number | MapLayer, options: EsriMapServiceQueryOptions): Observable<FeatureCollection>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EsriMapServerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<EsriMapServerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXNyaS1tYXAtc2VydmVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZXNyaS1tYXAtc2VydmVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvcmUvbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOZXR3b3JrRmVhdHVyZSB9IGZyb20gJy4uL2xycy9uZXR3b3Jrcy9uZXR3b3JrLWZlYXR1cmUnO1xuaW1wb3J0IHsgTmV0d29ya0xheWVyIH0gZnJvbSAnLi4vbHJzL25ldHdvcmtzL25ldHdvcmstbGF5ZXInO1xuaW1wb3J0IHsgRXZlbnRMYXllciB9IGZyb20gJy4uL2xycy9ldmVudHMvZXZlbnQtbGF5ZXInO1xuaW1wb3J0IHsgTHJzTWV0YWRhdGEgfSBmcm9tICcuLi9scnMvbHJzLW1ldGFkYXRhJztcbmltcG9ydCB7IEV2ZW50RmVhdHVyZSB9IGZyb20gJy4uL2xycy9ldmVudHMvZXZlbnQtZmVhdHVyZSc7XG5pbXBvcnQgeyBFdmVudEZlYXR1cmVDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbHJzL2V2ZW50cy9ldmVudC1mZWF0dXJlLWNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgTmV0d29ya0ZlYXR1cmVDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbHJzL25ldHdvcmtzL25ldHdvcmstZmVhdHVyZS1jb2xsZWN0aW9uJztcbmltcG9ydCB7IE1hcFNlcnZlck1ldGFkYXRhIH0gZnJvbSAnLi4vbWFwcy9tYXAtc2VydmVyLW1ldGFkYXRhJztcbmltcG9ydCB7IEVzcmlNYXBTZXJ2aWNlUXVlcnlPcHRpb25zIH0gZnJvbSAnLi9xdWVyeS9lc2ktbWFwLXNlcnZpY2UtcXVlcnktb3B0aW9ucyc7XG5pbXBvcnQgeyBFc3JpQ29uZmlnIH0gZnJvbSAnLi9lc3JpLWNvbmZpZyc7XG5pbXBvcnQgeyBGZWF0dXJlQ29sbGVjdGlvbiB9IGZyb20gJ2dlb2pzb24nO1xuaW1wb3J0IHsgTWFwTGF5ZXIgfSBmcm9tICcuLi9tYXBzL21hcC1sYXllcic7XG5pbXBvcnQgeyBMYXllckZpZWxkIH0gZnJvbSAnLi4vbWFwcy9maWVsZHMvbGF5ZXItZmllbGQnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZUNvbmZpZyB9IGZyb20gJy4uL2RhdGEtc291cmNlL2RhdGEtc291cmNlLWNvbmZpZyc7XG5pbXBvcnQgeyBHZW9kYXRiYXNlVmVyc2lvbiB9IGZyb20gJy4uL21hcHMvZ2VvZGF0YWJhc2UtdmVyc2lvbic7XG5pbXBvcnQgeyBFc3JpQXBwbHlFZGl0c1Jlc3BvbnNlIH0gZnJvbSAnLi9scnMtc2VydmVyL2VzcmktYXBwbHktZWRpdHMtcmVzcG9uc2UnO1xuaW1wb3J0IHsgRXNyaUV2ZW50RWRpdHMgfSBmcm9tICcuL2xycy1zZXJ2ZXIvZXNyaS1ldmVudC1lZGl0cyc7XG5pbXBvcnQgeyBFc3JpTWFwU2VydmljZUdlb21ldHJ5VG9NZWFzdXJlT3B0aW9ucyB9IGZyb20gJy4vZ2VvbWV0cnktdG8tbWVhc3VyZS9lc3JpLWdlb21ldHJ5LXRvLW1lYXN1cmUtb3B0aW9ucyc7XG5pbXBvcnQgeyBFc3JpR2VvbWV0cnlUb01lYXN1cmVSZXN1bHQgfSBmcm9tICcuL2dlb21ldHJ5LXRvLW1lYXN1cmUvZXNyaS1nZW9tZXRyeS10by1tZWFzdXJlLXJlc3VsdCc7XG5pbXBvcnQgeyBCYXNlRXNyaVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZXNyaS5zZXJ2aWNlJztcbmltcG9ydCB7IEZlYXR1cmVDbGFzc0xheWVyIH0gZnJvbSAnLi4vbWFwcy9mZWF0dXJlLWNsYXNzLWxheWVyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEVzcmlNYXBTZXJ2ZXJTZXJ2aWNlIGV4dGVuZHMgQmFzZUVzcmlTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50LCBjb25maWc6IEVzcmlDb25maWcsIGRhdGFDb25maWc6IERhdGFTb3VyY2VDb25maWcsIGxvZzogTG9nZ2VyKTtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIG1hcCBzZXJ2aWNlIG1ldGFkYXRhIGZvciBhbGwgbGF5ZXJzLlxuICAgICAqL1xuICAgIGdldE1hcExheWVycyhzZXJ2aWNlVXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPE1hcFNlcnZlck1ldGFkYXRhPjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIG1hcCBzZXJ2aWNlIG1ldGFkYXRhIGZvciBhIGdpdmVuIGxheWVyIChieSBpdCdzIElEKS5cbiAgICAgKi9cbiAgICBnZXRNYXBMYXllcihzZXJ2aWNlVXJsOiBzdHJpbmcsIGxheWVySWQ6IG51bWJlcik6IE9ic2VydmFibGU8RmVhdHVyZUNsYXNzTGF5ZXI+O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgTFJTIExheWVycyBNZXRhZGF0YSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBtYXAgc2VydmljZVxuICAgICAqL1xuICAgIGdldExyc0xheWVycyhzZXJ2aWNlVXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPExyc01ldGFkYXRhPjtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIExSUyBTZXJ2ZXIgTWV0YWRhdGEgaW5mb3JtYXRpb24gZnJvbSB0aGUgbWFwIHNlcnZpY2VcbiAgICAgKi9cbiAgICBnZXRMcnNTZXJ2ZXIoc2VydmljZVVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxMcnNNZXRhZGF0YT47XG4gICAgZ2V0VmVyc2lvbnMoc2VydmljZVVybDogc3RyaW5nLCBscnNJZD86IHN0cmluZyk6IE9ic2VydmFibGU8R2VvZGF0YmFzZVZlcnNpb25bXT47XG4gICAgc2luZ2xlR2VvbWV0cnlUb01lYXN1cmUoc2VydmljZVVybDogc3RyaW5nLCBuZXR3b3JrTGF5ZXJJZDogbnVtYmVyLCByb3V0ZUlkOiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCB2aWV3RGF0ZT86IERhdGUsIGluU3BhdGlhbFJlZmVyZW5jZUlkPzogbnVtYmVyLCBvdXRwdXRTcGF0aWFsUmVmZXJlbmNlSWQ/OiBudW1iZXIpOiBPYnNlcnZhYmxlPHtcbiAgICAgICAgbTogbnVtYmVyO1xuICAgICAgICB4OiBudW1iZXI7XG4gICAgICAgIHk6IG51bWJlcjtcbiAgICAgICAgej86IG51bWJlcjtcbiAgICB9PjtcbiAgICBnZW9tZXRyeVRvTWVhc3VyZShzZXJ2aWNlVXJsOiBzdHJpbmcsIG5ldHdvcmtMYXllcklkOiBudW1iZXIsIG9wdGlvbnM6IEVzcmlNYXBTZXJ2aWNlR2VvbWV0cnlUb01lYXN1cmVPcHRpb25zKTogT2JzZXJ2YWJsZTxFc3JpR2VvbWV0cnlUb01lYXN1cmVSZXN1bHQ+O1xuICAgIGFwcGx5RWRpdHMoc2VydmljZVVybDogc3RyaW5nLCBlZGl0czogRXNyaUV2ZW50RWRpdHNbXSwgZ2RiVmVyc2lvbj86IHN0cmluZyk6IE9ic2VydmFibGU8RXNyaUFwcGx5RWRpdHNSZXNwb25zZT47XG4gICAgZ2V0VW5pcXVlVmFsdWVzPFQ+KHNlcnZpY2VVcmw6IHN0cmluZywgbGF5ZXI6IE1hcExheWVyIHwgbnVtYmVyLCBmaWVsZDogc3RyaW5nIHwgTGF5ZXJGaWVsZCwgb3B0aW9ucz86IEVzcmlNYXBTZXJ2aWNlUXVlcnlPcHRpb25zKTogT2JzZXJ2YWJsZTxUW10+O1xuICAgIGdldFF1ZXJ5Q291bnQoc2VydmljZVVybDogc3RyaW5nLCBsYXllcjogTWFwTGF5ZXIgfCBudW1iZXIsIHdoZXJlQ2xhdXNlOiBzdHJpbmcsIG9wdGlvbnM/OiBFc3JpTWFwU2VydmljZVF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8bnVtYmVyPjtcbiAgICBnZXRFdmVudChzZXJ2aWNlVXJsOiBzdHJpbmcsIGxheWVyOiBFdmVudExheWVyLCBldmVudElkOiBzdHJpbmcgfCBudW1iZXIsIG9wdGlvbnM/OiBFc3JpTWFwU2VydmljZVF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8RXZlbnRGZWF0dXJlPjtcbiAgICBxdWVyeUV2ZW50cyhzZXJ2aWNlVXJsOiBzdHJpbmcsIGxheWVyOiBFdmVudExheWVyLCByb3V0ZUlkOiBzdHJpbmcgfCBudW1iZXIsIGZyb21NZWFzdXJlOiBudW1iZXIsIHRvTWVhc3VyZTogbnVtYmVyLCB2aWV3RGF0ZT86IERhdGUsIG9wdGlvbnM/OiBFc3JpTWFwU2VydmljZVF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8RXZlbnRGZWF0dXJlQ29sbGVjdGlvbj47XG4gICAgc2VhcmNoRXZlbnRzQnlUZXh0KHNlcnZpY2VVcmw6IHN0cmluZywgbGF5ZXI6IEV2ZW50TGF5ZXIsIHNlYXJjaFRleHQ6IHN0cmluZywgb3B0aW9ucz86IEVzcmlNYXBTZXJ2aWNlUXVlcnlPcHRpb25zKTogT2JzZXJ2YWJsZTxFdmVudEZlYXR1cmVDb2xsZWN0aW9uPjtcbiAgICBnZXRSb3V0ZShzZXJ2aWNlVXJsOiBzdHJpbmcsIHJvdXRlSWQ6IHN0cmluZyB8IG51bWJlciwgbGF5ZXI6IE5ldHdvcmtMYXllciwgdmlld0RhdGU/OiBEYXRlLCBvcHRpb25zPzogRXNyaU1hcFNlcnZpY2VRdWVyeU9wdGlvbnMpOiBPYnNlcnZhYmxlPE5ldHdvcmtGZWF0dXJlPjtcbiAgICBxdWVyeVJvdXRlcyhzZXJ2aWNlVXJsOiBzdHJpbmcsIGxheWVyOiBOZXR3b3JrTGF5ZXIsIHdoZXJlQ2xhdXNlOiBzdHJpbmcsIG9wdGlvbnM/OiBFc3JpTWFwU2VydmljZVF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8TmV0d29ya0ZlYXR1cmVDb2xsZWN0aW9uPjtcbiAgICBzZWFyY2hSb3V0ZXNCeVRleHQoc2VydmljZVVybDogc3RyaW5nLCBsYXllcjogTmV0d29ya0xheWVyLCBzZWFyY2hUZXh0OiBzdHJpbmcsIG9wdGlvbnM/OiBFc3JpTWFwU2VydmljZVF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8TmV0d29ya0ZlYXR1cmVDb2xsZWN0aW9uPjtcbiAgICBzZWFyY2hCeVRleHQoc2VydmljZVVybDogc3RyaW5nLCBsYXllcklkOiBudW1iZXIgfCBNYXBMYXllciwgc2VhcmNoVGV4dDogc3RyaW5nLCBvcHRpb25zPzogRXNyaU1hcFNlcnZpY2VRdWVyeU9wdGlvbnMpOiBPYnNlcnZhYmxlPEZlYXR1cmVDb2xsZWN0aW9uPjtcbiAgICBxdWVyeShzZXJ2aWNlVXJsOiBzdHJpbmcsIGxheWVySWQ6IG51bWJlciB8IE1hcExheWVyLCBvcHRpb25zOiBFc3JpTWFwU2VydmljZVF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8RmVhdHVyZUNvbGxlY3Rpb24+O1xufVxuIl19