import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Logger } from '../core/logging/logger.service';
import { NetworkFeature } from '../lrs/networks/network-feature';
import { NetworkLayer } from '../lrs/networks/network-layer';
import { EventLayer } from '../lrs/events/event-layer';
import { LrsMetadata } from '../lrs/lrs-metadata';
import { EventFeature } from '../lrs/events/event-feature';
import { EventFeatureCollection } from '../lrs/events/event-feature-collection';
import { NetworkFeatureCollection } from '../lrs/networks/network-feature-collection';
import { MapServerMetadata } from '../maps/map-server-metadata';
import { EsriMapServiceQueryOptions } from './query/esi-map-service-query-options';
import { EsriConfig } from './esri-config';
import { FeatureCollection } from 'geojson';
import { MapLayer } from '../maps/map-layer';
import { LayerField } from '../maps/fields/layer-field';
import { DataSourceConfig } from '../data-source/data-source-config';
import { GeodatbaseVersion } from '../maps/geodatabase-version';
import { EsriApplyEditsResponse } from './lrs-server/esri-apply-edits-response';
import { EsriEventEdits } from './lrs-server/esri-event-edits';
import { EsriMapServiceGeometryToMeasureOptions } from './geometry-to-measure/esri-geometry-to-measure-options';
import { EsriGeometryToMeasureResult } from './geometry-to-measure/esri-geometry-to-measure-result';
import { BaseEsriService } from './base-esri.service';
import { FeatureClassLayer } from '../maps/feature-class-layer';
export declare class EsriMapServerService extends BaseEsriService {
    constructor(http: HttpClient, config: EsriConfig, dataConfig: DataSourceConfig, log: Logger);
    /**
     * Retrieves the map service metadata for all layers.
     */
    getMapLayers(serviceUrl: string): Observable<MapServerMetadata>;
    /**
     * Retrieves the map service metadata for a given layer (by it's ID).
     */
    getMapLayer(serviceUrl: string, layerId: number): Observable<FeatureClassLayer>;
    /**
     * Retrieves the LRS Layers Metadata information from the map service
     */
    getLrsLayers(serviceUrl: string): Observable<LrsMetadata>;
    /**
     * Retrieves the LRS Server Metadata information from the map service
     */
    getLrsServer(serviceUrl: string): Observable<LrsMetadata>;
    getVersions(serviceUrl: string, lrsId?: string): Observable<GeodatbaseVersion[]>;
    singleGeometryToMeasure(serviceUrl: string, networkLayerId: number, routeId: string, x: number, y: number, viewDate?: Date, inSpatialReferenceId?: number, outputSpatialReferenceId?: number): Observable<{
        m: number;
        x: number;
        y: number;
        z?: number;
    }>;
    geometryToMeasure(serviceUrl: string, networkLayerId: number, options: EsriMapServiceGeometryToMeasureOptions): Observable<EsriGeometryToMeasureResult>;
    applyEdits(serviceUrl: string, edits: EsriEventEdits[], gdbVersion?: string): Observable<EsriApplyEditsResponse>;
    getUniqueValues<T>(serviceUrl: string, layer: MapLayer | number, field: string | LayerField, options?: EsriMapServiceQueryOptions): Observable<T[]>;
    getQueryCount(serviceUrl: string, layer: MapLayer | number, whereClause: string, options?: EsriMapServiceQueryOptions): Observable<number>;
    getEvent(serviceUrl: string, layer: EventLayer, eventId: string | number, options?: EsriMapServiceQueryOptions): Observable<EventFeature>;
    queryEvents(serviceUrl: string, layer: EventLayer, routeId: string | number, fromMeasure: number, toMeasure: number, viewDate?: Date, options?: EsriMapServiceQueryOptions): Observable<EventFeatureCollection>;
    searchEventsByText(serviceUrl: string, layer: EventLayer, searchText: string, options?: EsriMapServiceQueryOptions): Observable<EventFeatureCollection>;
    getRoute(serviceUrl: string, routeId: string | number, layer: NetworkLayer, viewDate?: Date, options?: EsriMapServiceQueryOptions): Observable<NetworkFeature>;
    queryRoutes(serviceUrl: string, layer: NetworkLayer, whereClause: string, options?: EsriMapServiceQueryOptions): Observable<NetworkFeatureCollection>;
    searchRoutesByText(serviceUrl: string, layer: NetworkLayer, searchText: string, options?: EsriMapServiceQueryOptions): Observable<NetworkFeatureCollection>;
    searchByText(serviceUrl: string, layerId: number | MapLayer, searchText: string, options?: EsriMapServiceQueryOptions): Observable<FeatureCollection>;
    query(serviceUrl: string, layerId: number | MapLayer, options: EsriMapServiceQueryOptions): Observable<FeatureCollection>;
}
