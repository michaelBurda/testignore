import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GeolocatorCapability } from '../geolocation/geolocator/geolocator-capability';
import { BaseGeolocator } from '../geolocation/geolocator/base-geolocator.service';
import { Logger } from '../core/logging/logger.service';
import { GpsGateConfig } from './gps-gate.config';
import { GpsGateVersionInfo } from './gps-gate-version-info';
import { GpsPosition } from '../geolocation/gps-position/gps-position';
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
import * as ɵngcc0 from '@angular/core';
export declare class GpsGateGeolocator extends BaseGeolocator {
    private readonly http;
    private readonly config;
    capabilities: GeolocatorCapability[];
    readonly name: string;
    readonly description: string;
    constructor(log: Logger, http: HttpClient, config: GpsGateConfig);
    getCurrentPosition(options?: PositionOptions): Promise<GpsPosition>;
    watchPosition(options?: PositionOptions): Observable<GpsPosition>;
    isAvailable(): Observable<boolean>;
    getVersion(): Observable<GpsGateVersionInfo>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GpsGateGeolocator, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GpsGateGeolocator>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3BzLWdhdGUtZ2VvbG9jYXRvci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImdwcy1nYXRlLWdlb2xvY2F0b3Iuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBHZW9sb2NhdG9yQ2FwYWJpbGl0eSB9IGZyb20gJy4uL2dlb2xvY2F0aW9uL2dlb2xvY2F0b3IvZ2VvbG9jYXRvci1jYXBhYmlsaXR5JztcbmltcG9ydCB7IEJhc2VHZW9sb2NhdG9yIH0gZnJvbSAnLi4vZ2VvbG9jYXRpb24vZ2VvbG9jYXRvci9iYXNlLWdlb2xvY2F0b3Iuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb3JlL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3BzR2F0ZUNvbmZpZyB9IGZyb20gJy4vZ3BzLWdhdGUuY29uZmlnJztcbmltcG9ydCB7IEdwc0dhdGVWZXJzaW9uSW5mbyB9IGZyb20gJy4vZ3BzLWdhdGUtdmVyc2lvbi1pbmZvJztcbmltcG9ydCB7IEdwc1Bvc2l0aW9uIH0gZnJvbSAnLi4vZ2VvbG9jYXRpb24vZ3BzLXBvc2l0aW9uL2dwcy1wb3NpdGlvbic7XG4vKipcbiAqIFdyYXBwZXIgZm9yIGdlb2xvY2F0aW9uIHNlcnZpY2UuIFRoZSB3cmFwcGVyIHByaW1hcmlseSBleGlzdHMgdG8gYWJzdHJhY3QgdGhlIGRpcmVjdCBpbnRlcmFjdGlvbiB3aXRoXG4gKiB0aGUgXCJuYXZpZ2F0b3JcIiBvYmplY3QgYW5kIHRvIGFsbG93IGZvciBpbmplY3Rpbmcgb3RoZXIgaW1wbGVtZW50YXRpb25zIG9mIGdlb2xvY2F0aW9uIGZ1bmN0aW9uYWxpdHkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdwc0dhdGVHZW9sb2NhdG9yIGV4dGVuZHMgQmFzZUdlb2xvY2F0b3Ige1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaHR0cDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZztcbiAgICBjYXBhYmlsaXRpZXM6IEdlb2xvY2F0b3JDYXBhYmlsaXR5W107XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IobG9nOiBMb2dnZXIsIGh0dHA6IEh0dHBDbGllbnQsIGNvbmZpZzogR3BzR2F0ZUNvbmZpZyk7XG4gICAgZ2V0Q3VycmVudFBvc2l0aW9uKG9wdGlvbnM/OiBQb3NpdGlvbk9wdGlvbnMpOiBQcm9taXNlPEdwc1Bvc2l0aW9uPjtcbiAgICB3YXRjaFBvc2l0aW9uKG9wdGlvbnM/OiBQb3NpdGlvbk9wdGlvbnMpOiBPYnNlcnZhYmxlPEdwc1Bvc2l0aW9uPjtcbiAgICBpc0F2YWlsYWJsZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIGdldFZlcnNpb24oKTogT2JzZXJ2YWJsZTxHcHNHYXRlVmVyc2lvbkluZm8+O1xufVxuIl19