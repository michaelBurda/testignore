{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@tss/sdk/lib/core/resource.config.ts","ng://@tss/sdk/lib/core/logging/log-level.ts","ng://@tss/sdk/lib/core/units/measurement-unit.ts","ng://@tss/sdk/lib/core/core.config.ts","ng://@tss/sdk/lib/core/type-check/is-type.function.ts","ng://@tss/sdk/lib/core/type-check/is-string.function.ts","ng://@tss/sdk/lib/core/auto-config.decorator.ts","ng://@tss/sdk/lib/app/app.config.ts","ng://@tss/sdk/lib/core/url/join.function.ts","ng://@tss/sdk/lib/core/tokens/tokens.constants.ts","ng://@tss/sdk/lib/core/tokens/replace-tokens.function.ts","ng://@tss/sdk/lib/core/tokens/replace-token.function.ts","ng://@tss/sdk/lib/core/formatting/format.function.ts","ng://@tss/sdk/lib/core/url/clean.function.ts","ng://@tss/sdk/lib/core/resource/resource.constants.ts","ng://@tss/sdk/lib/core/resource/base-empty-resource.service.ts","ng://@tss/sdk/lib/app/api.service.ts","ng://@tss/sdk/lib/core/logging/logger.service.ts","ng://@tss/sdk/lib/core/storage/get-byte-size.function.ts","ng://@tss/sdk/lib/core/storage/storage.constants.ts","ng://@tss/sdk/lib/core/type-check/is-defined.function.ts","ng://@tss/sdk/lib/core/type-check/is-value.function.ts","ng://@tss/sdk/lib/core/storage/format-byte-size.function.ts","ng://@tss/sdk/lib/core/storage/base-storage.service.ts","ng://@tss/sdk/lib/core/storage/persistent-storage.service.ts","ng://@tss/sdk/lib/core/environment/has-window.function.ts","ng://@tss/sdk/lib/core/url/get-full-url.function.ts","ng://@tss/sdk/lib/core/url/get-query-params.function.ts","ng://@tss/sdk/lib/core/array/get-last-item.function.ts","ng://@tss/sdk/lib/core/url/get-post-hash-route-paths.function.ts","ng://@tss/sdk/lib/core/url/get-first-hash-route-path.function.ts","ng://@tss/sdk/lib/core/type-check/is-date.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-value.function.ts","ng://@tss/sdk/lib/core/type-check/can-not-be-number.function.ts","ng://@tss/sdk/lib/core/type-check/can-be-number.function.ts","ng://@tss/sdk/lib/core/type-conversion/to-primitive-type.function.ts","ng://@tss/sdk/lib/core/formatting/lower-case-first.function.ts","ng://@tss/sdk/lib/core/object/set-value.function.ts","ng://@tss/sdk/lib/security/security-config.ts","ng://@tss/sdk/lib/core/type-check/is-array.function.ts","ng://@tss/sdk/lib/core/type-check/is-number.function.ts","ng://@tss/sdk/lib/security/role-manager.service.ts","ng://@tss/sdk/lib/security/auth.service.ts","ng://@tss/sdk/lib/core/resource/base-resource.service.ts","ng://@tss/sdk/lib/app/app-profile.service.ts","ng://@tss/sdk/lib/app/app-initializer.service.ts","ng://@tss/sdk/lib/app/app-profile.ts","ng://@tss/sdk/lib/core/keys.pipe.ts","ng://@tss/sdk/lib/core/storage/file-size.pipe.ts","ng://@tss/sdk/lib/core/date-time/date-time.constants.ts","ng://@tss/sdk/lib/core/date-time/conversion/to-milliseconds.function.ts","ng://@tss/sdk/lib/core/date-time/conversion/milliseconds-to-seconds.function.ts","ng://@tss/sdk/lib/core/date-time/conversion/milliseconds-to-minutes.function.ts","ng://@tss/sdk/lib/core/date-time/conversion/milliseconds-to-hours.function.ts","ng://@tss/sdk/lib/core/date-time/conversion/milliseconds-to-days.function.ts","ng://@tss/sdk/lib/core/date-time/readable/to-readable-time.function.ts","ng://@tss/sdk/lib/core/date-time/readable/readable-time.pipe.ts","ng://@tss/sdk/lib/core/safe-url.pipe.ts","ng://@tss/sdk/lib/core/core.module.ts","ng://@tss/sdk/lib/geometry/geometry.module.ts","ng://@tss/sdk/lib/data-source/data-source.module.ts","ng://@tss/sdk/lib/esri/esri.module.ts","ng://@tss/sdk/lib/maps/drawing/layer-renderer-type-definition.ts","ng://@tss/sdk/lib/maps/drawing/layer-renderer-type.pipe.ts","ng://@tss/sdk/lib/maps/map.module.ts","ng://@tss/sdk/lib/lrs/lrs.module.ts","ng://@tss/sdk/lib/security/token.interceptor.ts","ng://@tss/sdk/lib/security/has-roles.directive.ts","ng://@tss/sdk/lib/security/security.module.ts","ng://@tss/sdk/lib/polyfill/prevent-default-link.directive.ts","ng://@tss/sdk/lib/polyfill/polyfill.module.ts","ng://@tss/sdk/lib/queuing/queue.module.ts","ng://@tss/sdk/lib/core/type-check/is-function.function.ts","ng://@tss/sdk/lib/http/is-route-match.function.ts","ng://@tss/sdk/lib/http/http.config.ts","ng://@tss/sdk/lib/http/http-param.interceptor.ts","ng://@tss/sdk/lib/http/http.module.ts","ng://@tss/sdk/lib/app/app.module.ts","ng://@tss/sdk/lib/app/app-spatial.module.ts","ng://@tss/sdk/lib/app/settings/app-setting.service.ts","ng://@tss/sdk/lib/app/settings/app-setting.ts","ng://@tss/sdk/lib/cache/cache-strategy.ts","ng://@tss/sdk/lib/cache/cache.config.ts","ng://@tss/sdk/lib/cache/cache.constants.ts","ng://@tss/sdk/lib/cache/cache.storage.ts","ng://@tss/sdk/lib/cache/cache.service.ts","ng://@tss/sdk/lib/core/tokens/has-tokens.function.ts","ng://@tss/sdk/lib/core/tokens/standardize-tokens.function.ts","ng://@tss/sdk/lib/core/tokens/strip-token-braces.function.ts","ng://@tss/sdk/lib/core/tokens/extract-token-values-from-template.function.ts","ng://@tss/sdk/lib/cache/cache.interceptor.ts","ng://@tss/sdk/lib/cache/cache.module.ts","ng://@tss/sdk/lib/core/array/add-range.function.ts","ng://@tss/sdk/lib/core/array/remove-item.function.ts","ng://@tss/sdk/lib/core/array/remove-where.function.ts","ng://@tss/sdk/lib/core/clone/clone.function.ts","ng://@tss/sdk/lib/core/color/rgb-to-hex.function.ts","ng://@tss/sdk/lib/core/color/transparency-to-opacity.function.ts","ng://@tss/sdk/lib/core/date-time/add/add-milliseconds.function.ts","ng://@tss/sdk/lib/core/date-time/add/add-minutes.function.ts","ng://@tss/sdk/lib/core/date-time/add/add-days.function.ts","ng://@tss/sdk/lib/core/date-time/add/add-hours.function.ts","ng://@tss/sdk/lib/core/date-time/add/add-seconds.function.ts","ng://@tss/sdk/lib/core/date-time/conversion/to-utc-date.function.ts","ng://@tss/sdk/lib/core/date-time/format/format-date.function.ts","ng://@tss/sdk/lib/core/date-time/conversion/to-utc-epoch-date.function.ts","ng://@tss/sdk/lib/core/date-time/format/format-date-for-query.function.ts","ng://@tss/sdk/lib/core/date-time/format/sql-date-format.ts","ng://@tss/sdk/lib/core/date-time/get-elapsed-milliseconds.function.ts","ng://@tss/sdk/lib/core/date-time/get-elapsed-seconds.function.ts","ng://@tss/sdk/lib/core/date-time/set-date-to-beginning-of-date.function.ts","ng://@tss/sdk/lib/core/environment/online-state.service.ts","ng://@tss/sdk/lib/core/equality/equality.constants.ts","ng://@tss/sdk/lib/core/equality/almost-equal.function.ts","ng://@tss/sdk/lib/core/equality/points-almost-equal.function.ts","ng://@tss/sdk/lib/core/error/error.constants.ts","ng://@tss/sdk/lib/core/error/error-msg.function.ts","ng://@tss/sdk/lib/core/formatting/format-number.function.ts","ng://@tss/sdk/lib/core/formatting/formatting.constants.ts","ng://@tss/sdk/lib/core/formatting/upper-case-each-word.function.ts","ng://@tss/sdk/lib/core/formatting/upper-case-first-letter.function.ts","ng://@tss/sdk/lib/core/formatting/trim-end.function.ts","ng://@tss/sdk/lib/core/formatting/trip-start.function.ts","ng://@tss/sdk/lib/core/media/media.constants.ts","ng://@tss/sdk/lib/core/media/base64-mime-type.function.ts","ng://@tss/sdk/lib/core/media/strip-base64-metadata.function.ts","ng://@tss/sdk/lib/core/media/base64-to-byte-array.function.ts","ng://@tss/sdk/lib/core/media/base64-to-blob.function.ts","ng://@tss/sdk/lib/core/type-check/is-object.function.ts","ng://@tss/sdk/lib/core/merge/merge-deep.function.ts","ng://@tss/sdk/lib/core/merge/merge-deep-array.function.ts","ng://@tss/sdk/lib/core/notify/base-notification-tracker.ts","ng://@tss/sdk/lib/core/notify/notification-promise-tracker.ts","ng://@tss/sdk/lib/core/notify/notification-subscription-tracker.ts","ng://@tss/sdk/lib/core/notify/notify-type.ts","ng://@tss/sdk/lib/core/notify/notify.service.ts","ng://@tss/sdk/lib/core/sort/sort-by-order.function.ts","ng://@tss/sdk/lib/core/sort/sort-direction.ts","ng://@tss/sdk/lib/core/sort/sort.function.ts","ng://@tss/sdk/lib/core/stats/average.function.ts","ng://@tss/sdk/lib/core/stats/calculate-cross-product.function.ts","ng://@tss/sdk/lib/core/stats/calculate-remaining-seconds.function.ts","ng://@tss/sdk/lib/core/stats/is-number-between-or-equal.function.ts","ng://@tss/sdk/lib/core/stats/sum.function.ts","ng://@tss/sdk/lib/core/stats/stats-tracker.ts","ng://@tss/sdk/lib/core/stats/sum-values.function.ts","ng://@tss/sdk/lib/core/storage/in-memory-storage.service.ts","ng://@tss/sdk/lib/core/tokens/extract-tokens.function.ts","ng://@tss/sdk/lib/core/tokens/extract-token-expressions.function.ts","ng://@tss/sdk/lib/core/type-check/is-boolean.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-array.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-function.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-number.function.ts","ng://@tss/sdk/lib/core/type-check/is-primitive.function.ts","ng://@tss/sdk/lib/core/units/length-unit.ts","ng://@tss/sdk/lib/core/units/unit-conversion.constants.ts","ng://@tss/sdk/lib/core/units/to-meters.function.ts","ng://@tss/sdk/lib/core/units/from-meters.function.ts","ng://@tss/sdk/lib/core/units/convert-length-units.function.ts","ng://@tss/sdk/lib/core/url/join-and-format.function.ts","ng://@tss/sdk/lib/core/url/url.constants.ts","ng://@tss/sdk/lib/core/url/strip-trailing-slash.function.ts","ng://@tss/sdk/lib/core/uuid/guid.constants.ts","ng://@tss/sdk/lib/core/uuid/uuid-value-replacer.function.ts","ng://@tss/sdk/lib/core/uuid/uuid.function.ts","ng://@tss/sdk/lib/core/uuid/guid.ts","ng://@tss/sdk/lib/core/validation/validation-results.ts","ng://@tss/sdk/lib/core/validation/validation-check.ts","ng://@tss/sdk/lib/csv/csv.config.ts","ng://@tss/sdk/lib/csv/csv.constants.ts","ng://@tss/sdk/lib/csv/csv.module.ts","ng://@tss/sdk/lib/csv/to-csv.function.ts","ng://@tss/sdk/lib/geometry/geometry/is-line.function.ts","ng://@tss/sdk/lib/geometry/line/is-multi-part.function.ts","ng://@tss/sdk/lib/geometry/line/to-multi-part-paths.function.ts","ng://@tss/sdk/lib/geometry/line/flatten-line.function.ts","ng://@tss/sdk/lib/geometry/geometry/is-point.function.ts","ng://@tss/sdk/lib/geometry/point/is-multi-part-point.function.ts","ng://@tss/sdk/lib/geometry/point/to-multi-part-point.function.ts","ng://@tss/sdk/lib/geometry/geometry/is-polygon.function.ts","ng://@tss/sdk/lib/data-source/apply-edits-seed/apply-edits.constants.ts","ng://@tss/sdk/lib/data-source/data-source-config.ts","ng://@tss/sdk/lib/data-source/apply-edits-seed/data-source-edit.service.ts","ng://@tss/sdk/lib/data-source/attachments/attachment-type.ts","ng://@tss/sdk/lib/http/to-form-data-string.function.ts","ng://@tss/sdk/lib/data-source/attachments/attachments.constants.ts","ng://@tss/sdk/lib/data-source/attachments/attachment.service.ts","ng://@tss/sdk/lib/data-source/data-source-provider-type.ts","ng://@tss/sdk/lib/data-source/data-source.constants.ts","ng://@tss/sdk/lib/data-source/data-source.service.ts","ng://@tss/sdk/lib/data-source/data-table.ts","ng://@tss/sdk/lib/data-source/get-data-source-id.function.ts","ng://@tss/sdk/lib/data-source/is-oracle-provider.function.ts","ng://@tss/sdk/lib/data-source/get-date-format-for-provider.function.ts","ng://@tss/sdk/lib/data-source/seed/seed-pod.constants.ts","ng://@tss/sdk/lib/maps/fields/layer-field.ts","ng://@tss/sdk/lib/maps/where-clause-builder.ts","ng://@tss/sdk/lib/lrs/lrs-where-clause-builder.ts","ng://@tss/sdk/lib/esri/base-esri.service.ts","ng://@tss/sdk/lib/esri/esri-config.ts","ng://@tss/sdk/lib/geometry/geometry.constants.ts","ng://@tss/sdk/lib/geometry/point/to-single-part-point.function.ts","ng://@tss/sdk/lib/geometry/point/sort-points.function.ts","ng://@tss/sdk/lib/geometry/line/single-line-to-coordinates.ts","ng://@tss/sdk/lib/geometry/line/multi-line-to-coordinates.ts","ng://@tss/sdk/lib/geometry/line/has-measure-values.function.ts","ng://@tss/sdk/lib/geometry/line/sort-line-by-measure.function.ts","ng://@tss/sdk/lib/geometry/point/get-measure-from-point.function.ts","ng://@tss/sdk/lib/geometry/line/get-measure-extent-from-line.function.ts","ng://@tss/sdk/lib/geometry/point/get-measure-extent-from-point.function.ts","ng://@tss/sdk/lib/geometry/geometry/get-measure-extent.function.ts","ng://@tss/sdk/lib/maps/fields/get-coded-value-domain.function.ts","ng://@tss/sdk/lib/maps/fields/get-coded-value-name.function.ts","ng://@tss/sdk/lib/maps/fields/get-coded-value-name-or-default.function.ts","ng://@tss/sdk/lib/lrs/data/is-dynamic-data-expression.function.ts","ng://@tss/sdk/lib/lrs/data/extract-feature-data.function.ts","ng://@tss/sdk/lib/lrs/data/evaluate-feature-data-expression.function.ts","ng://@tss/sdk/lib/maps/map-feature.ts","ng://@tss/sdk/lib/lrs/lrs-feature.ts","ng://@tss/sdk/lib/lrs/events/event-feature.ts","ng://@tss/sdk/lib/lrs/feature.ts","ng://@tss/sdk/lib/geometry/line/get-point.function.ts","ng://@tss/sdk/lib/geometry/line/to-multi-line-string.function.ts","ng://@tss/sdk/lib/geometry/line/to-line-string.function.ts","ng://@tss/sdk/lib/geometry/line/to-line-or-multi-line-string.function.ts","ng://@tss/sdk/lib/geometry/geometry/degrees-to-radians.function.ts","ng://@tss/sdk/lib/geometry/point/get-distance-between-points.function.ts","ng://@tss/sdk/lib/geometry/line/get-measure.function.ts","ng://@tss/sdk/lib/lrs/networks/network-feature.ts","ng://@tss/sdk/lib/lrs/lrs-feature-collection.ts","ng://@tss/sdk/lib/lrs/events/event-feature-collection.ts","ng://@tss/sdk/lib/lrs/networks/network-feature-collection.ts","ng://@tss/sdk/lib/esri/esri-map-service-request.ts","ng://@tss/sdk/lib/http/to-form-data.function.ts","ng://@tss/sdk/lib/esri/esri.constants.ts","ng://@tss/sdk/lib/esri/geometry-to-measure/geometry-to-measure.constants.ts","ng://@tss/sdk/lib/esri/geometry-to-measure/get-geometry-to-measure-options.function.ts","ng://@tss/sdk/lib/esri/query/esri-query.constants.ts","ng://@tss/sdk/lib/esri/query/get-map-query-options.function.ts","ng://@tss/sdk/lib/esri/query/to-http-query-params.function.ts","ng://@tss/sdk/lib/esri/try-strip-gdb-version.function.ts","ng://@tss/sdk/lib/maps/to-layer-id.function.ts","ng://@tss/sdk/lib/esri/join-and-format-with-layer.function.ts","ng://@tss/sdk/lib/maps/drawing/class-break-info.ts","ng://@tss/sdk/lib/maps/drawing/unique-value-info.ts","ng://@tss/sdk/lib/maps/drawing/layer-drawing-info-renderer.ts","ng://@tss/sdk/lib/maps/drawing/layer-drawing-info.ts","ng://@tss/sdk/lib/maps/feature-class-layer.ts","ng://@tss/sdk/lib/esri/esri-map-server.service.ts","ng://@tss/sdk/lib/esri/feature-server/is-feature-server-service-url.ts","ng://@tss/sdk/lib/esri/map-server/is-map-server-service-url.ts","ng://@tss/sdk/lib/esri/lrs-server/is-lrs-server-service-url.function.ts","ng://@tss/sdk/lib/esri/lrs-server/is-lrs-server-layers-service-url.function.ts","ng://@tss/sdk/lib/esri/portal/get-portal-url.function.ts","ng://@tss/sdk/lib/esri/portal/to-esri-portal-access-token.function.ts","ng://@tss/sdk/lib/esri/to-esri-server-token.function.ts","ng://@tss/sdk/lib/esri/portal/remove-portal-access-token-from-hash.function.ts","ng://@tss/sdk/lib/esri/portal/esri-portal.service.ts","ng://@tss/sdk/lib/export/export.config.ts","ng://@tss/sdk/lib/export/export.constants.ts","ng://@tss/sdk/lib/export/export.module.ts","ng://@tss/sdk/lib/export/export.service.ts","ng://@tss/sdk/lib/geolocation/geolocation.config.ts","ng://@tss/sdk/lib/geolocation/geolocation.constants.ts","ng://@tss/sdk/lib/geolocation/geolocator/geolocatable.decorator.ts","ng://@tss/sdk/lib/geolocation/geolocator/geolocator-accuracy-unit.ts","ng://@tss/sdk/lib/geolocation/geolocator/base-geolocator.service.ts","ng://@tss/sdk/lib/geolocation/gps-position/position-to-gps-position.function.ts","ng://@tss/sdk/lib/geolocation/geolocator/geolocator-capability.ts","ng://@tss/sdk/lib/geolocation/geolocator/geolocation-gps-locator.service.ts","ng://@tss/sdk/lib/geolocation/geolocation.module.ts","ng://@tss/sdk/lib/geolocation/is-position-acceptable.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/is-position-error.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/gps-position-to-point.ts","ng://@tss/sdk/lib/geolocation/gps-position/is-valid-latitude.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/is-valid-longitude.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/is-valid-location.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/is-not-valid-location.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/gps-positions-almost-equal.ts","ng://@tss/sdk/lib/geolocation/geolocation.service.ts","ng://@tss/sdk/lib/geolocation/geolocator/geolocator-source.service.ts","ng://@tss/sdk/lib/geometry/geometry/set-measures-by-geometric-length.function.ts","ng://@tss/sdk/lib/geolocation/position-path-builder.ts","ng://@tss/sdk/lib/geometry/geometry/radians-to-degrees.function.ts","ng://@tss/sdk/lib/geometry/geometry.config.ts","ng://@tss/sdk/lib/geometry/line/get-distance-to-line.function.ts","ng://@tss/sdk/lib/geometry/line/get-nearest-point-by-geometry.function.ts","ng://@tss/sdk/lib/geometry/point/bounds.function.ts","ng://@tss/sdk/lib/geometry/line/is-point-on-line.function.ts","ng://@tss/sdk/lib/gps-gate/gps-gate.config.ts","ng://@tss/sdk/lib/gps-gate/gps-gate-geolocator.service.ts","ng://@tss/sdk/lib/gps-gate/gps-gate.module.ts","ng://@tss/sdk/lib/lrs/calibration-points/calibration-point-layer.ts","ng://@tss/sdk/lib/lrs/capture-position.ts","ng://@tss/sdk/lib/lrs/centerlines/centerline-layer.ts","ng://@tss/sdk/lib/lrs/data/lrs-data.service.ts","ng://@tss/sdk/lib/lrs/lrs.config.ts","ng://@tss/sdk/lib/lrs/data-source-lrs-metadata.service.ts","ng://@tss/sdk/lib/lrs/lrs-layer.ts","ng://@tss/sdk/lib/lrs/events/event-layer.ts","ng://@tss/sdk/lib/lrs/hierarchy/generate-hierarchy-filters.function.ts","ng://@tss/sdk/lib/lrs/intersections/intersection-layer.ts","ng://@tss/sdk/lib/lrs/layer-search.ts","ng://@tss/sdk/lib/lrs/networks/network-layer.ts","ng://@tss/sdk/lib/lrs/redlines/redline-layer.ts","ng://@tss/sdk/lib/maps/map-server-metadata.ts","ng://@tss/sdk/lib/lrs/lrs-metadata-validations.ts","ng://@tss/sdk/lib/lrs/non-lrs/non-lrs-layer.ts","ng://@tss/sdk/lib/lrs/lrs-metadata.ts","ng://@tss/sdk/lib/lrs/lrs-metadata-merge.ts","ng://@tss/sdk/lib/lrs/lrs-metadata-retriever.ts","ng://@tss/sdk/lib/lrs/lrs-metadata.service.ts","ng://@tss/sdk/lib/lrs/redlines/redline-feature.ts","ng://@tss/sdk/lib/maps/map-table.ts","ng://@tss/sdk/lib/maps/maps.config.ts","ng://@tss/sdk/lib/motion/motion.config.ts","ng://@tss/sdk/lib/motion/device-motion.service.ts","ng://@tss/sdk/lib/motion/motion.module.ts","ng://@tss/sdk/lib/orientation/heading/get-heading-from-orientation.function.ts","ng://@tss/sdk/lib/orientation/orientation.config.ts","ng://@tss/sdk/lib/orientation/device-orientation.service.ts","ng://@tss/sdk/lib/orientation/orientation.module.ts","ng://@tss/sdk/lib/queuing/queue-worker-token.ts","ng://@tss/sdk/lib/queuing/work-queue-status-event-type.ts","ng://@tss/sdk/lib/queuing/work-queue-status-tracker.ts","ng://@tss/sdk/lib/queuing/work-queue-manager.ts","ng://@tss/sdk/lib/queuing/queuable-work-queue-manager.ts","ng://@tss/sdk/lib/queuing/queue-item-status.ts","ng://@tss/sdk/lib/queuing/queue.config.ts","ng://@tss/sdk/lib/security/privileges/privilege.service.ts","ng://@tss/sdk/lib/security/roles/role.ts","ng://@tss/sdk/lib/security/roles/role-privilege.service.ts","ng://@tss/sdk/lib/security/roles/role.service.ts","ng://@tss/sdk/lib/security/security.constants.ts","ng://@tss/sdk/lib/security/roles/user-role.service.ts","ng://@tss/sdk/lib/security/users/user.service.ts","ng://@tss/sdk/lib/cache/cache-persistance.ts","ng://@tss/sdk/lib/core/array/add-if-not-exist.function.ts","ng://@tss/sdk/lib/core/array/add-range-to-beginning.function.ts","ng://@tss/sdk/lib/core/array/remove-duplicates.function.ts","ng://@tss/sdk/lib/core/color/hex-to-rgb.function.ts","ng://@tss/sdk/lib/core/color/is-hex-color.function.ts","ng://@tss/sdk/lib/core/cookie/get-cookie.function.ts","ng://@tss/sdk/lib/core/date-time/conversion/to-standardized-query-date-format.function.ts","ng://@tss/sdk/lib/core/date-time/get-current-date-as-utc.function.ts","ng://@tss/sdk/lib/core/date-time/get-current-date-epoch-as-utc.ts","ng://@tss/sdk/lib/core/date-time/readable/seconds-to-readable-time.function.ts","ng://@tss/sdk/lib/core/date-time/set-date-to-end-of-date.function.ts","ng://@tss/sdk/lib/core/date-time/subtract/subract-days.function.ts","ng://@tss/sdk/lib/core/date-time/subtract/subract-minutes.function.ts","ng://@tss/sdk/lib/core/date-time/subtract/subract-seconds.function.ts","ng://@tss/sdk/lib/core/date-time/subtract/subtract-hours.function.ts","ng://@tss/sdk/lib/core/date-time/subtract/subtract-milliseconds.function.ts","ng://@tss/sdk/lib/core/environment/has-local-storage.function.ts","ng://@tss/sdk/lib/core/formatting/humanize.function.ts","ng://@tss/sdk/lib/core/formatting/trim.function.ts","ng://@tss/sdk/lib/core/grouping/group-by.function.ts","ng://@tss/sdk/lib/core/object/assign-valid-values.function.ts","ng://@tss/sdk/lib/core/object/get-value.function.ts","ng://@tss/sdk/lib/core/random/get-random-integer.function.ts","ng://@tss/sdk/lib/core/random/get-random-number.function.ts","ng://@tss/sdk/lib/core/rounding/round.function.ts","ng://@tss/sdk/lib/core/sort/sort-and-reorder.function.ts","ng://@tss/sdk/lib/core/stats/calculate-percent-complete.function.ts","ng://@tss/sdk/lib/core/stats/is-number-between.function.ts","ng://@tss/sdk/lib/core/stats/sum-property.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-boolean.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-date.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-defined.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-object.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-primitive.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-string.function.ts","ng://@tss/sdk/lib/core/type-check/is-not-type.function.ts","ng://@tss/sdk/lib/core/units/area-unit.ts","ng://@tss/sdk/lib/core/units/convert-area-units.function.ts","ng://@tss/sdk/lib/core/units/meters-per-second-to-kilometers-per-hour.function.ts","ng://@tss/sdk/lib/core/units/meters-per-second-to-miles-per-hour.function.ts","ng://@tss/sdk/lib/core/url/ensure-protocol.function.ts","ng://@tss/sdk/lib/core/url/get-base-url.function.ts","ng://@tss/sdk/lib/core/url/parameters-to-string.function.ts","ng://@tss/sdk/lib/core/url/remove-empty-params.function.ts","ng://@tss/sdk/lib/core/using.function.ts","ng://@tss/sdk/lib/csv/geometry-to-csv.function.ts","ng://@tss/sdk/lib/data-source/is-enterprise-provider.function.ts","ng://@tss/sdk/lib/esri/feature-server/is-feature-server-layer-url.function.ts","ng://@tss/sdk/lib/esri/is-cacheable-esri-service-route.function.ts","ng://@tss/sdk/lib/esri/map-server/extract-map-server-layer-id.function.ts","ng://@tss/sdk/lib/esri/map-server/extract-map-server-url.function.ts","ng://@tss/sdk/lib/esri/map-server/is-map-server-layer-url.function.ts","ng://@tss/sdk/lib/esri/portal/does-path-include-portal-access-code.function.ts","ng://@tss/sdk/lib/esri/portal/does-path-include-portal-access-token.function.ts","ng://@tss/sdk/lib/esri/portal/extract-portal-access-token.function.ts","ng://@tss/sdk/lib/esri/portal/get-portal-oauth-redirect-url.function.ts","ng://@tss/sdk/lib/esri/portal/get-portal-sharing-url.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/gps-positions-to-point.ts","ng://@tss/sdk/lib/geolocation/gps-position/is-not-valid-latitude.function.ts","ng://@tss/sdk/lib/geolocation/gps-position/is-not-valid-longitude.function.ts","ng://@tss/sdk/lib/geometry/line/extract-measures-from-line.function.ts","ng://@tss/sdk/lib/geometry/line/get-measure-from-flat-coordinate-system.function.ts","ng://@tss/sdk/lib/geometry/line/get-measure-from-lat-lng.function.ts","ng://@tss/sdk/lib/geometry/line/is-line-within-bounds.function.ts","ng://@tss/sdk/lib/geometry/point/calculate-cross-product-by-points.function.ts","ng://@tss/sdk/lib/maps/drawing/symbol-location-type-definition.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","n","v","step","op","TypeError","call","done","value","pop","push","e","__read","o","m","ar","error","__spread","concat","ResourceConfig","Boolean","serviceUrl","Trace","Debug","Info","Warn","Error","Fatal","typeToLevel","type","LogLevel","Imperial","Metric","CoreConfig","autoConfig","logEnabled","logLevel","defaultNotifyInfoMsg","defaultNotifyWarnMsg","defaultNotifyErrorMsg","defaultNotifySuccessMsg","defaultNotifyWaitMsg","measurementUnit","MeasurementUnit","moduleConfigs","className","injectorToken","Injectable","args","providedIn","isType","val","expectedType","isString","AutoConfig","config","autoConf","DEFAULT_PROFILE_ID","AppConfig","_this","_super","apply","appId","queryProfile","profileId","profile","defaultProfileId","allowQueryParamInjections","continueOnAppBootstrapError","appSettingsEndpoint","appProfileEndpoint","pingEndpoint","statusEndpoint","tslib_1.__extends","join","parts","_i","resultArray","isArray","match","first","shift","replace","component","urlParts","split","TOKEN_EXPRESSION","RegExp","FULL_TOKEN_EXPRESSION","WILDCARD_EXPRESSION_VALUE","replaceTokens","template","replaceValue","replaceToken","tokenKey","tokenValue","format","tokens","removeEmptyTokens","keys","forEach","clean","url","NO_URL_ERROR_MSG","UNSUPPORTED_GET_EXCEPTION_MSG","UNSUPPORTED_CREATE_EXCEPTION_MSG","EMPTY_PARAM_VALUE","BaseEmptyResourceService","http","paramsOrUrl","idFieldName","cleanUrl","assign","getUrlWithEntity","entity","endpoint","getUrlWithId","id","inferredRouteTokens","getUrl","defaultRouteTokens","ApiService","appConfig","ping","routeTokens","params","get","status","HttpClient","Logger","logs","level","count","logType","logsByType","logsByLevel","filter","l","logEntry","log","isDebug","console","msg","created","Date","trace","debug","info","warn","fatal","clear","getByteSize","encodeURIComponent","STORAGE_FORMAT_UNITS","isDefined","isValue","formatByteSize","numberOfBytes","decimalPlaces","lowerCaseUnits","len","toFixed","toLowerCase","BaseStorage","keyPrefix","keySuffix","has","size","sizeFormatted","getObject","JSON","parse","setObject","set","stringify","formatKey","PersistentStorage","localStorage","getItem","setItem","remove","removeItem","hasWindow","window","getFullUrl","location","href","getQueryParams","search","hashes","slice","indexOf","String","includes","reduce","hash","_b","_a","decodeURIComponent","getLastItem","list","getPostHashRoutePaths","hashPart","part","getFirstHashRoutePath","isDate","isNotValue","canNotBeNumber","isNaN","Number","canBeNumber","toPrimitiveType","lowerCaseFirst","charAt","setValue","ka","SecurityConfig","rolesEnabled","storeToken","autoSignIn","authorizationType","tokenEndpoint","signOutEndpoint","userInfoEndpoint","usersEndpoint","rolesEndpoint","privilegesEndpoint","userRolesEndpoint","rolesPrivilegesEndpoint","tokenStorageKey","tokenInvalidationDateLookup","tdsTokenInclusionExpression","withCredentialsInclusionExpression","setWithCredentials","accessToken","defaultUserName","defaultPassword","roleSplitterExp","tokenBody","userName","password","isNumber","RoleManagerService","roles","Set","roleSplitterExpr","getRoles","from","setRoles","clearRoles","addRoles","toArray","addRole","role","add","trim","hasRole","enabled","hasRoles","splitRoles","hasAllRoles","hasAnyRoles","toStringArray","every","forRealHasRole","bind","some","rolesList","SignedIn","SignedOut","SignInFailed","SignOutFailed","AuthService","roleMgr","storage","stateChangeSubject","Subject","rememberMe","stateChange","asObservable","isAuthenticated","loadStoredToken","signIn","observable","post","pipe","publishReplay","subscribe","onSignedIn","onSignInFailed","signOut","signOutUrl","isFederatedAccount","obserable","onSignedOut","onSignedOutFailed","getUserInfo","getToken","account","access_token","token","getLocalToken","loaded","skipLocalStorage","isDomainAccount","foundContextType","authenticationType","privileges","lastSignIn","setLocalToken","SignInState","err","BaseResourceService","query","queryEndpoint","getEndpoint","createEndpoint","update","updateEndpoint","put","delete","deleteEndpoint","AppProfileService","AppInitializerService","router","auth","appProfiles","securityConfig","injector","ready","loading","moduleConfigInstances","Map","queryParameters","onReady","Promise","resolve","reject","resolveFn","rejectFn","initialize","firstRoutePath","overrideModuleConfigurationsFromQueryParams","populateModuleConfigInstances","hasServiceUrl","then","catch","name","checkTokenInvalidationDate","applyModuleConfigurations","retrieveUserAccount","configureRoleManager","getCachedTokenInvalidationDate","setCachedTokenExpireDate","setDate","tokenExpireDate","siteInfo","app","tokenExpireDateKey","lastTokenInvalidateDate","lastTokenValidationDatesMatch","setMilliseconds","queryingInfo","app_1","security","expiresDate","getDate","accessTokenExpireDays",".expires","applyModuleConfigurationsFromObject","sourceMapping","moduleConfigName","configInstance","instance","modulePrefix","rootKey","startsWith","moduleAutoConfig","guestPrivileges","roleCount","Router","Injector","AppInitializerFactory","initializer","KeysPipe","transform","Pipe","FileSizePipe","bytes","STANDARDIZED_QUERY_DATE_FORMAT","ORACLE_DATE_FORMAT","DEFAULT_DATE_FORMAT","HOURS_PER_DAY","MINUTES_PER_HOUR","MILLISECONDS_PER_SECOND","MILLISECONDS_PER_MINUTE","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","READABLE_TIME_SUFFIX_MAP","ms","msDecimalPlaces","sec","secDecimalPlaces","min","minDecimalPlaces","hr","hrDecimalPlaces","days","daysDecimalPlaces","toMilliseconds","unitOfTime","conversionFactor","millisecondsToSeconds","milliseconds","millisecondsToMinutes","millisecondsToHours","millisecondsToDays","toReadableTime","suffixMap","unit","formatAsMilliseconds","formatAsSeconds","formatAsMinutes","formatAsHours","seconds","minutes","hours","ReadableTimePipe","time","SafeUrlPipe","sanitizer","bypassSecurityTrustResourceUrl","DomSanitizer","TssCoreModule","NgModule","imports","declarations","exports","providers","schemas","CUSTOM_ELEMENTS_SCHEMA","TssGeometryModule","CommonModule","TssDataSourceModule","HttpClientModule","TssEsriModule","LAYER_RENDER_TYPES","alias","renderType","description","LayerRendererTypePipe","input","find","TssMapsModule","TssLrsModule","TokenInterceptor","intercept","request","withCredsExpr","test","clone","withCredentials","setHeaders","Authorization","handle","HasRolesDirective","templateRef","viewContainer","createEmbeddedView","Directive","selector","TemplateRef","ViewContainerRef","Input","TssSecurityModule","FormsModule","provide","HTTP_INTERCEPTORS","useClass","multi","PreventDefaultLinkDirective","preventDefault","event","HostListener","TssPolyfillModule","TssQueueModule","isFunction","isRouteMatch","route","routeExpression","exp","wildcardExp","resolvedRoute","HttpConfig","paramInjectionsEnabled","paramInjectionDefitions","addOrUpdateParameterInjection","paramName","paramValue","definition","existingDefinition","def","addParameterInjection","getInjectionDefinitions","getFirstInjectionDefinition","HttpParamInterceptor","httpParamInjections","urlWithParams","generateRequestWithParams","paramInjection","TssHttpModule","ɵ0","TssAppModule","RouterModule","APP_INITIALIZER","useFactory","deps","TssAppSpatialModule","AppSettingService","queryAllApps","NetworkFirst","CacheFirst","Fastest","CacheOnly","CacheConfig","cacheEnabled","cacheDefitions","forcedGlobalCacheStrategy","CacheConfig_1","enable","defs","getCacheDefinition","CACHE_ONLY_NO_DATA_EXC_MSG","CACHE_STORAGE_KEY_PREFIX","PersistentCacheStorage","CacheService","cache","cacheData","cacheItem","now","expires","getTime","HttpResponse","timeToLive","getExpireDate","setSeconds","getSeconds","hasTokens","standardizeTokens","stripTokenBraces","extractTokenValuesFromTemplate","resolvedPath","wildcardTemplate","exec","tokensList_1","templateValue","index","getCacheKey","requestUrl","cacheKey","cacheId","CacheInterceptor","matchingCacheDefinition","allowCaching","method","strategy","shouldCheckCacheFirst","CacheStrategy","isCacheOnly","cachedResponse","of","throwError","continuedResponse","cacheResponse","source","cacheDefinition","tap","catchError","cachedData","TssCacheModule","addRange","itemsToAdd","itemsToDelete","itemToDelete","splice","removeWhere","predicate","itemsToRemove","objectToClone","rgbToHex","rgb","toString","transparencyToOpacity","transparency","addMilliseconds","date","newTime","setTime","addMinutes","addDays","addHours","addSeconds","toUtcDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","formatDate","dateFormat","dateTransformer","DatePipe","toUtcEpochDate","formatDateForQuery","quoteDate","formattedDate","Standardized","Literal","Oracle","getElapsedMilliseconds","start","end","Math","abs","getElapsedSeconds","setDateToBeginningOfDay","setHours","OnlineOfflineService","internalConnectionChanged","connectionChanged","addEventListener","updateOnlineStatus","navigator","onLine","DEFAULT_POINT_EQUALITY_PRECISION","almostEqual","number1","number2","precision","tolerance","pow","pointsAlmostEqual","x1","y1","x2","y2","DEFAULT_ERROR_MSG","errorMsg","errorOrMsg","innerException","InnerException","exceptionMessage","ExceptionMessage","message","Message","Msg","error_description","data","Data","exception","Exception","formatNumber","digits","locale","DecimalPipe","FIRST_LETTER_SEPERATED_BY_SPACE_MATCH_REGEX","PASCAL_CASE_FIRST_LETTER_MATCH_REGEX","LEADING_AND_TRAILING_UNDERSCORE_MATCH_REGEX","LEADING_AND_TRAILING_HYPHEN_MATCH_REGEX","UNDERSCORE_MATCH_REGEX","HYPHEN_MATCH_REGEX","upperCaseEachWord","text","toUpperCase","upperCaseFirstLetter","trimEnd","trimCharacter","endsWith","substr","trimStart","BASE_64_METADATA_REGEX","JSON_MIME_TYPE","TEXT_MIME_TYPE","base64MimeType","encoded","result","mime","stripBase64Metadata","base64","base64toByteArray","base64Data","sliceIndex","strippedBase64Data","byteCharacters","atob","bytesLength","slicesCount","ceil","byteArrays","begin","offset","charCodeAt","Uint8Array","base64toBlob","contentType","Blob","isObject","mergeDeep","options","doCopy","ignoreArrays","copyFunctions","mergeDeepArray","identifier","addMissing","beforeMerge","undefined","afterMerge","targetItem","targetId","s","src","x","missing","BaseNotificationTracker","notify","logErrors","eventWatchers","wait","title","waitResponse","emit","waitIf","success","showSuccess","successMsg","successTitle","successConfiguration","showError","errorTitle","errorConfiguration","showWarn","warnMsg","warnTitle","warnConfiguration","showInfo","infoMsg","infoTitle","infoConfiguration","finally","onDone","on","eventType","callback","watcher","response","notifyId","containerId","onSuccess","onFail","responseError","NotificationPromiseTracker","onfulfilled","onrejected","NotificationSubscriptionTracker","setTimeout","useSingletonSubscriptionEmission","complete","Wait","Success","NotifyService","with","promise","NotifyType","sortByOrder","compareResult","sort","compare1","compare2","order","Ascending","Descending","sortAscending","sortProperties","SortDirection","direction","item1","item2","sortResponse","property","value1","getPropertyValue","value2","getSortResultForString","item","getSortResultForStringAscending","ensureValue","getSortResultForStringDescending","average","current","accumulating","calculateCrossProduct","testX","testY","calculateRemainingSeconds","totalProcessed","ellapsedSeconds","remainingCount","estimatedSecondsRemaining","isNumberBetweenOrEqual","testNumber","rangeStart","rangeEnd","minRange","maxRange","max","sum","a","StatsTracker","progressables","progressable","getPercentComplete","overallComplete","percentComplete","round","sumValues","InMemoryStorage","extractTokens","extractTokenExpressions","map","tokenDefinition","isBoolean","isNotArray","isNotFunction","isNotNumber","isPrimitive","isNotObject","Foot","Degree","Radian","Mile","Meter","Kilometer","LENGTH_UNIT_METER_CONVERSION_FACTOR","getMeterConversionFactors","factors","LengthUnit","toMeters","fromUnit","fromMeters","toUnit","convertLengthUnits","fromValue","joinAndFomat","EMPTY_PARAMS_REGEX","stripTrailingSlash","INVALID_GUID_ERROR_MSG","uuidValueReplacer","randomValue","random","uuid","Guid","empty","isValid","newGuid","str","equals","guid","toJSON","ValidationResult","violaters","ran","passed","validationSkipped","inner","failed","warned","BASE_ID","ValidationCheck","passCheck","subChecks","hasId","pass","fail","failCheck","warnCheck","onlyIf","onlyIfCheck","innerChecks","check","skipped","innerResult","CsvConfig","CSV_NEW_LINE","CSV_SEPARATOR","TssCsvModule","toCsv","properties","firstItem","csv","header","csvLines","point","isLine","geometry","isMultiPartLine","line","toMultiPartPaths","lineAsArray","lineGeometry","coordinates","flattenLine","flattenedPoints","position","isPoint","isMultiPartPoint","toMultiPartPoint","isPolygon","DataSourceConfig","dataSourcesEndpoint","tablesEndpoint","columnsEndpoint","tableActionEndpoint","editDataEndpoint","applyEditsEndpoint","attachmentsEndpoint","skipColumnQuotes","DataSourceEditService","dsConfig","applyEdits","dataSourceId","createRecord","table","feature","version","HttpParams","Video","Image","Audio","Text","toFormDataString","encodeData","stringValue","ATTACHMENT_DATA_FORM_KEY","AttachmentService","attachment","fileData","formData","FormData","AttachmentType","append","reportProgress","download","attachmentId","SqlServer","SqlLite","SqlCompactEdition","OracleDevArt","DATA_SOURCE_PROVIDERS","provider","DataSourceProviderType","canUseEF","schedulingCompatible","efOnly","DATA_SOURCE_EXAMPLES","providerName","connectionString","DataSourceService","testConnection","useEntityFramework","testExistingConnection","getTables","getTableDetails","action","getColumns","getColumnValues","column","unique","getUniqueColumnValues","getRecordCount","whereClause","queryData","page","pageSize","includeGeometry","shapeField","querySpatialData","queryGeoJsonData","stripTableName","tableName","getDataSourceId","dataSource","isOracleProvider","providerType","getDateFormatForProvider","FIELD_TYPE_OID_STRING","FIELD_TYPE_GEOMETRY","FIELD_TYPE_GLOBALID","FIELD_TYPE_INTEGER","ESRI_FIELD_TYPE_OID","ESRI_FIELD_TYPE_STRING","ESRI_FIELD_TYPE_NUMBER","ESRI_FIELD_TYPE_XML","ESRI_FIELD_TYPE_BLOB","ESRI_FIELD_TYPE_DATE","ESRI_FIELD_TYPE_DOUBLE","ESRI_FIELD_TYPE_GUID","ESRI_FIELD_TYPE_GEOMETRY","ESRI_FIELD_TYPE_GLOBALID","ESRI_FIELD_TYPE_INTEGER","ESRI_FIELD_TYPE_RASTER","ESRI_FIELD_TYPE_SINGLE","ESRI_FIELD_TYPE_SMALL_INTEGER","FIELD_METADATA","isNumeric","types","isFieldGeometryType","fieldType","isObjectIdType","getGeometryField","fields","getGeometryFieldName","field","getIdField","getIdFieldFieldName","isFieldExpression","fieldNameOrExpression","toFieldType","toFieldName","getField","fieldName","getFieldAlias","fieldAlias","isFieldNumeric","isFieldValueNumeric","Equals","DoesNotEqual","GreaterThan","LessThan","GreaterOrEqualTo","LessThanOrEqualTo","Is","Not","In","Like","Between","Wildcard","Null","And","Or","DefaultWhereClauseBuilderOptions","quoteFields","WhereClauseBuilder","statements","statement","whereEqual","whereIsNull","where","CriteriaOperator","whereLike","formatField","TargetOperator","whereStartsWith","whereEndsWith","whereNotEqual","whereIsNotNull","ValueOperator","operator","whereNumeric","toWhereClause","CombiningOperator","quoteRegex","NO_TEMPORAL_LAYER_SUPPLIED_ERROR_MSG","NO_REFERENCE_LAYER_SUPPLIED_ERROR_MSG","LRS_DATE_WHERE_CLAUSE_TEMPLATE","LRS_POINT_EVENT_WHERE_CLAUSE_TEMPLATE","LRS_LINEAR_EVENT_WHERE_CLAUSE_TEMPLATE","getLrsViewDateWhereStatement","fromDateFieldName","toDateFieldName","dbType","viewDate","dateEndOfDay","LrsWhereClauseBuilder","withDataSource","sourceData","withDataProvider","sourceDbType","withEventLayer","eventLayer","withTemporalLayer","withReferenceLayer","referenceLayer","withNetworkLayer","networkLayer","temporalLayer","withRouteId","routeId","routeIdFieldName","withViewDate","dateClause","betweenMeasures","fromMeasure","toMeasure","fromMeasureFieldName","toMeasureFieldName","measureClause","BaseEsriService","dataConfig","shouldUsePostMethod","payload","arcgisQueryMethodStrategy","arcgisMaxWhereLengthGetThreshold","handleEsriResponseError","returnError","getWhereBuilder","EsriConfig","arcgis","geometryUrl","hasGeometryUrl","SORTED_BY_MEASURE_PROPERTY_FLAG","EARTH_RADIUS_IN_KILOMETERS","WGS_84_SRID","toSinglePartPointArray","getSortResultForPoints","firstPoint","secondPoint","second","sortPointsByMeasure","points","cacheSort","singleLineToCoordinates","multiLineToCoordinates","singleLineHasMeasureValues","multiLineHasMeasureValues","sortLineByMeasure","paths","firstCoordinate","secondCoordinate","getMeasureFromPoint","coordinate","getMeasureExtentFromLine","firstPath","lastPath","lastCoordinate","getMeasureExtentFromPoint","lastPoint","getMeasureExtent","extent","getCodedValue","domain","codedValues","codedValue","code","getCodedValueName","getCodedValueNameOrDefault","DYNAMIC_DATA_REGEX","isDynamicDataExpression","expression","ALL_FIELD_CRITERIA","extractFeatureDataByLayer","layerId","features","extractFeatureData","dataValuesToNumbers","dataValues","evaluateDynamicDataExpression","tokenExpressions","evaluationResult","tokenExpression","evaluateSingleDynamicDataExpression","expressionValue","parsedValue","subsetKeyword","toLocaleLowerCase","numberValues","evaluteFeatureDataExpression","firstFeatureProperties","RecordCount","MapFeature","layer","spatialReferenceId","bbox","getIdFieldName","getValue","displayValue","displayField","setGeometry","hasZ","hasM","setId","setGeometryTypeProperties","setMeasureFromGeometry","isSpatialReferenceWgs84","toFeature","toGeoJson","isLinear","LrsFeature","isGeometryTypeInvalid","toDate","isRetired","setFromDate","setToDate","retire","isGeometryTypeValid","EventFeature","setRouteId","setFromMeasure","measure","setToMeasure","setMeasureExtent","getPoint","pointComparisionDetails","details","comparePathWithMeasure","measureToCompare","compareCoordinateWithMeasure","measureFromCoordinate","pointCoordinate","distance","pointMeasure","minPoint","accumulator","minPointCloserToMeasure","isPointCloserToMeasure","isPointLessThanMeasure","maxPoint","maxPointCloserToMeasure","point1","point2","isPointGreaterThanMeasure","measureDeltaPercent","calculateMeasureDelta","minMeasure","maxMeasure","interpolateX","delta","minX","maxX","interpolateY","minY","maxY","toMultiLineString","toLineString","toLineOrMultiLineString","degreesToRadians","degrees","PI","getDistanceBetweenPoints","coordinate1","coordinate2","getDistanceBetweenPointValues","xLength","yLength","sqrt","getKilometersBetweenLatLng","lat1","lng1","lat2","lng2","dLat","dLon","sin","cos","circumference","atan2","getMetersBetweenLatLng","getDistanceBetweenLatLng","lon1","lon2","outputUnit","getMeasure","lengthUnit","coordinateSystem","closestPointFeature","nearestPointOnLine","foundPointMeasure","interpolateMeasure","pointOnLine","pointCoordinates","firstFeature","lineSplit","splitVertex","lastVertexWithMeasureIndex","lastVertexWithMeasure","newLineSegment","lineString","measureOffset","units","NetworkFeature","compositeRouteIdFieldName","LrsFeatureCollection","collection","EventFeatureCollection","fromFeatures","NetworkFeatureCollection","getEsriMapServiceHttOptions","headers","HttpHeaders","addParamsToHttpOptions","httpOption","toFormData","keyValue","MAP_SERVER_SERVICE_MATCH_IDENTIFIER","MAP_SERVER_SERVICE_IDENTIFIER","FEATURE_SERVER_SERVICE_IDENTIFIER","FEATURE_SERVER_LAYER_SERVICE_IDENTIFIER","MAP_SERVER_LAYER_SERVICE_MATCH_IDENTIFIER","MAP_SERVER_LAYER_SERVICE_IDENTIFIER","LRS_SERVER_SERVICE_IDENTIFIER","LRS_SERVER_LAYERS_SERVICE_IDENTIFIER","MAP_LAYER_SERVICE_ENDPOINT","MAP_LAYER_QUERY_SERVICE_ENDPOINT","LRS_SERVER_META_ENDPOINT","LRS_LAYERS_SERVICE_ENDPOINT","LRS_SERVER_APPLY_EDITS_ENDPOINT","LRS_GEOMETRY_TO_MEASURE","PORTAL_SHARING_ENDPOINT","PORTAL_OAUTH_AUTHORIZE_ENDPOINT","PORTAL_OAUTH_TOKEN_ENDPOINT","PORTAL_GENERATE_TOKEN_ENDPOINT","DEFAULT_PORTAL_OAUTH_REDIRECT_OPTIONS","responseType","urlParamsBreak","redirectUrl","DEFAULT_GEOMETRY_TO_MEASURE_OPTIONS","locations","inSR","outSR","getGeometryToMeasureOptions","mergedOption","option","temporalViewDate","DEFAULT_MAP_QUERY_OPTIONS","objectIds","geometryType","spatialRel","relationParam","outFields","returnGeometry","returnTrueCurves","maxAllowableOffset","geometryPrecision","returnIdsOnly","returnCountOnly","orderByFields","groupByFieldsForStatistics","outStatistics","returnZ","returnM","gdbVersion","returnDistinctValues","resultOffset","resultRecordCount","queryByDistance","returnExtentsOnly","datumTransformation","parameterValues","rangeValues","getMapQueryOptions","toHttpQueryParams","httpParams","k","tryStripGdbVersion","versionName","toLayerId","joinAndFomatWithLayer","isClassBreakInfoEmpty","classMaxValue","symbol","isUniqueValueInfoEmpty","DEFAULT_RENDERER_SYMBOL","style","color","width","isRendererSymbolDefault","LayerDrawingInfoRenderer","base","minValue","classBreakInfos","uniqueValueInfos","standardizeRenderSymbols","field1","getSymbol","defaultSymbol","isUniqueValue","uniqueValueInfo","getUniqueValueInfoOrDefault","isClassBreak","classBreakInfo","getClassBreakInfoOrDefault","getUniqueValueInfo","getClassBreakInfo","classValue","isValueInClassBreakRange","rangeMin","rangeMax","clearEmptyInfos","getBestRepresentativeColor","foundInfo","standardizeRenderSymbol","outline","LayerDrawingInfo","baseDrawingInfos","merge","zIndex","renderer","positionRenderer","labelingInfo","isEmpty","targetDrawingInfos","toProperties","getRendererSymbol","getPositionRendererSymbol","infoProperties","POINT_GEOMETRY_TYPES","LINEAR_GEOMETRY_TYPES","POLYGON_GEOMETRY_TYPES","isPointGeometryType","isLinearGeometryType","isPolygonGeometryType","FeatureClassLayer","sources","subLayers","indexes","relationships","supportedQueryFormats","drawingInfo","applyFieldDomains","domains","domainName","EsriMapServerService","getMapLayers","getMapLayer","mapLayerMetadata","getLrsLayers","getLrsServer","getVersions","lrsId","lrs","lrsInfo","versions","singleGeometryToMeasure","networkLayerId","inSpatialReferenceId","outputSpatialReferenceId","geometryToMeasure","z","results","found","serviceOptions","useGetMethod","edits","getUniqueValues","queryOptions","getQueryCount","getEvent","eventId","queryEvents","featureCollection","searchEventsByText","searchText","searchByText","getRoute","queryRoutes","searchRoutesByText","usePostMethod","isFeatureServerServiceUrl","isMapServerServiceUrl","isLrsServerServiceUrl","isLrsServerLayersServiceUrl","getPortalUrl","portalUrlComponent","basePortalUrl","toEsriPortalAccessToken","portalUrl","portalToken","refreshToken","refresh_token","expiresIn","expires_in","isSecure","ssl","server","username","toEsriServerToken","serverToken","removePortalAccessTokenFromHash","urlHash","portalParamsStartIndex","lastIndexOf","portaAaccessTokenHash","EsriPortalService","getTokenByCode","clientId","bodyData","client_id","redirect_uri","grant_type","doPost","rawToken","getServerToken","portalAccessToken","serverUrl","additionalParams","referer","host","doGet","queryParams","ExportConfig","DEFAULT_EXPORT_GEOJSON_FILE_NAME","TssExportModule","ExportService","fileNameTemplate","getReplaceTokens","exportFeatureCollection","fileName","featureLength","exportFile","exportFeature","exportJson","jsonString","exportBase64","blob","exportFromUrl","URL","createObjectURL","exportBlob","link","document","createElement","click","shortDate","year","getFullYear","GeolocationConfig","gpsDisplayDecimalPlaces","gpsWarnableAccuracyMeters","gpsRequiredAccuracyMeters","gpsWarnableDilutionOfPrecision","gpsRequiredDilutionOfPrecision","gpsEnableHighAccuracy","gpsNoAccuracyReading","allowGpsMocking","emitDuplicateGpsPositions","gpsPositionDuplicatePrecision","gpsAntennaHeight","adjustForGpsAntennaHeight","calculateMissingPositionValues","geolocationGeolocatorName","geolocationGeolocatorDescription","PATH_BUILDER_CALCULATED_M_DEVICE_SOURCE","GEOLOCATOR_REGISTRY","GEOLOCATION_GEOLOCATOR_ID","Geolocatable","Pdop","Hdop","Vdop","Tdop","BaseGeolocator","capabilities","accuracyUnit","GeolocatorAccuracyUnit","hasCapability","capability","positionToGpsPosition","timestamp","accuracy","coords","altitude","altitudeAccuracy","latitude","longitude","heading","speed","Accuracy","Altitude","AltitudeAccuracy","Heading","Speed","MagneticVariation","Satellites","PDOP","HDOP","VDOP","TDOP","GeolocationGeolocator","GeolocatorCapability","getCurrentPosition","geolocation","watchPosition","subject","watchId","finalize","clearWatch","isAvailable","TssGeolocationModule","isPositionAcceptable","acceptanceThreshold","isPositionError","gpsPositionToPoint","isValidLatitude","latitide","isValidLongitude","isValidLocation","isNotValidLocation","gpsPositionsAlmostEqual","position1","position2","GeolocationService","geolocator","isTrackingPosition","positionChangeSubject","ReplaySubject","positionRecievedSubject","positionChange","positionRecieved","positionRecievedTime","accuracyThreshold","isPositionAccuracyKnown","suffix","pdop","hdop","vdop","tdop","enableGpsTracking","geoOptions","enableHighAccuracy","tryUnsubscribe","gpsLocatorSubscription","onPositionRecieved","onLocationError","disableGpsTracking","setGeoLocator","setGpsTracking","isTrackingLocation","toggleGpsTracking","mockGpsPosition","gpsPosition","adjustCoordinates","errorMessage","tryAdjustMissingPositionValues","adjustedHeight","newPosition","missingSpeed","missingHeading","positionValuesMissing","fromPoint","toPoint","kilometersTraveled","bearing","unsubscribe","GeolocatorSourceService","getGeolocator","registry","registedSource","getLocatorFromRegistry","getGeolocators","getGeolocatorSource","getGeolocatorSources","devices","device","getAvailableGeolocatorSources","availableObservables","locator","available","forkJoin","DEFAULT_EMPTY_Z_VALUE","DEFAULT_OPTIONS","hasZValues","calibrationPositions","setMeasuresByGeometricLength","martiPart","lastMeasure","linePart","partIndex","setMeasureForLine","startMeasure","calibrationPosition","calibrateLinePart","fromVertexIndex","calibration","fromVertex","toVertex","vertexIndex","numberOfVerticesInBetween","measureDistributionIncrement","setMeasure","getVerticesBetween","vertice","remainingPoints","setLinePartMeasuresByGeometricLength","startRangeIndex","endRangeIndex","vertices","previousVertex","vertexMeasure","vertex","distanceBetweenVerticees","accountForZValue","ensureZValue","UNPLACED_CALIBRATION_MEASURE_KEY","requireAccuracy","pointEquivalencyPrecision","returnZValues","returnMValues","mValueUnit","storeUnfilteredPath","calibrationMeasureSnappingDistanceDelta","calibrationMeasureSnappingDistanceDeltaUnit","PositionPathBuilder","unfilteredPath","calibratedMeasures","currentPartIndex","currentPart","lastPosition","trackPosition","positionStream","trackSubscription","addPosition","calibrationMeasure","accuracyCriteriaMet","tryStoreUnfilteredPath","forceAddPosition","pointsAtSameLocation","arePositionsEquivalent","replaceLastPositionIfBetter","addCalibrationMeasureToLastPosition","startNewPart","removePositionByIndex","getCalibrationMeasureLookupKey","removePosition","foundPositionIndex","removeCalibrationMeasure","values","removeCalibrationMeasureByIndex","addCalibrationMeasure","lastVertex","lastVertexIndex","addCalibrationMeasureAtIndex","addPositionToPath","toPointFeature","toPointGeometry","toLineFeature","toLineGeometry","toSingleLineFeature","toSingleLineGeometry","toMultiLineFeature","toMultiLineGeometry","toPolygonFeature","toPolygonGeometry","toMultiPolygonFeature","toMultiPolygonGeometry","toSinglePolygonFeature","toSinglePolygonGeometry","isSinglePoint","toGeometry","calibrateMeasures","toMultiPartArray","poly","ensurePolygonIsClosed","wasPositionAdded","replaceLastPosition","getBestPosition","getUnfilteredPath","included","pathContains","getGeometryPathSummary","getGeometryLinePartSummary","getPositionByIndex","dispose","calibrationKey","calibrationPointMeasureValue","geometricMeasure","polygonPoints","last","firstLng","firstLat","firstZ","_c","lastLng","lastLat","arePointsEquivalent","closingPoint","addPendingCalibrationPoint","calibratonPosition","calibrationTimestamp","secondToLastPosition","totalTimeDelta","percentOfDistance","distanceBetweenVerticesKilometers","distanceToPreviousVertexKilometers","trySnapCalibrationMeasureToVertex","newPoint","destination","spliceIndexForSecondToLastPosition","deviceSource","totalVerticeDistanceKilometers","distanceToNextVertexKilometers","distanceThresholdKilometers","previousVertexIndex","nextVertexIndex","longitude1","latitude1","longitude2","latitude2","radiansToDegrees","radians","GeometryConfig","squareRoot","squareRootDistance","w","distToSegment","testPoint","lineStartPoint","lineEndPoint","distanceToSegmentSquared","lengthSquared","getDistanceToLine","testPointArray","lineStartPointArray","lineEndPointArray","testPointX","testPointY","lineStartX","lineStartY","getVerticeeInfos","isPointDegrees","nearestPoint","furthestPoint","pointComparisonDetails","comparePathWithPoint","pointToCompare","compareCoordinateWithPoint","getDegreeDistance","distance$$1","pointCandidate","pointBefore","pointAfter","nextPoint","previousPoint","getClosestVerticees","isPointWithinButNotIncludingBounds","boundStart","boundEnd","testValue","isLatLngOnLine","lineStartLat","lineStartLng","lineEndLat","lineEndLng","testPointLat","testPointLng","isPointOnLine","startPoint","endPoint","startPointX","startPointY","endPointX","endPointY","GpsGateConfig","refreshInterval","urlTemplate","getInfoEndpoint","getVersionEndpoint","jsonpParameterName","geolocatorName","geolocatorDescription","GpsGateGeolocator","cacheBuster","jsonp","trackPoint","utc","velocity","groundSpeed","toPromise","interval","setInterval","notEqual","equal","clearInterval","getVersion","TssGpsGateModule","CalibrationPointLayer","Center","Left","Right","Sld","Lane","Shoulder","Curb","CenterlineLayer","LrsDataService","mapService","dataSourceService","dataSourceConfig","mapServiceParams","featureClassName","queryRoutesByIds","routeIds","shapeFieldName","useMapService","LrsConfig","dataSourceLrsMetadataEndpoint","cacheInSessionLrsMetadata","DataSourceLrsMetadataService","LrsLayer","capturePositions","getPositionByValue","positionDef","getPositions","hasPosition","CapturePosition","EventLayer","generateHierarchyFilters","routeIdFields","isFirst","isRoot","networkLayerIdFieldName","IntersectionLayer","findLayer","layerList","layers","NetworkLayer","eventLayers","intersectionLayers","hierarchyFilter","RedlineLayer","effectiveDateFieldName","MapServerMetadata","copy","LRS_LAYER_VALIDATIONS","LRS_NETWORK_LAYER_VALIDATIONS","LRS_EVENT_LAYER_VALIDATIONS","LRS_METADATA_VALIDATIONS","networkLayers","NonLrsLayer","LrsMetadata","redlineLayers","centerlineLayers","calibrationPointLayers","nonLRSLayers","getLayer","getAllLayers","getLrsLayer","getLayerDetail","isLrsLayer","isEventLayer","isNetworkLayer","isCalibrationPointLayer","isCenterlineLayer","isIntersectionLayer","isRedlineLayer","isTable","isNonLRSLayer","idField","tables","mergeMapMetadata","mapMetadata","deepMergeMapMetadata","mergeLrsMetadata","lrsMetadata","getNetworkLayer","getEventLayer","getIntersectionLayer","getFeatureClassLayers","getNetworkIdForLayer","networkId","parentNetwork","network","getEventLayersByNetwork","rebuildLayers","redlineLayer","centerlineLayer","calibrationPointLayer","intersectionLayer","nonLrsLayer","assignCodedValueDomainsToFields","validate","setLayerDefaults","setNetworkLayerDefaults","mergeFieldDomains","mergeFields","targetField","sourceField","doValuesNeedMerged","mergeLayer","lrsTarget","lrsSource","targetCapturePositions","sourceCapturePositions","targetDrawingInfo","sourceDrawingInfo","hasDrawingInfo","mergeLayers","sourceMetadata","onMergeComplete","targetLayer","sourceLayer","newLayer","merger","layer1","layer2","mergeNetworkLayers","onMergeNetworkLayerComplete","srcMeta","meta","nonLrsLayerInfo","baseFields","mergeLrsMetadataSources","dataSourceLrsMetadata","mapServerLrsMetadata","mapServerMetadata","hasMapServerLrsMetadata","fullLrsMeta","LrsMetadataRetriever","mapServer","dataSourceLrsMetadataService","withLrsMetadata","lrsMeta","retrieve","mergeMap","getDataSource","getDataSourceLrsMetadata","getMapServiceLayers","getMapServiceLrsMetadata","mergeAll","serviceHasLrsMeta","lrsServerMeta","lrsLayersMeta","LrsMetadataService","lrsCache","cachedMeta","metaData","tryCacheLrsMetadata","RedlineFeature","MapTable","MapsConfig","MotionConfig","allowMotionMocking","DeviceMotionService","motionChangeSource","motionChange","fromEvent","emitMotionChange","mockMotion","motion","acceleration","withGravityX","accelerationIncludingGravity","withGravityY","withGravityZ","rotationRateAlpha","rotationRate","alpha","rotationRateBeta","beta","rotationRateGamma","gamma","TssMotionModule","getHeadingFromOrientation","orientation","alphaRad","betaRad","gammaRad","cA","sA","sB","cG","sG","rA","rB","compassHeading","atan","OrientationConfig","allowOrientationMocking","allowHeadingMocking","DeviceOrientationService","internalDeviceNeedsCalibrated","headingChangeSource","orientationChangeSource","orientationChange","headingChange","emitOrientationChange","mockOrientation","mockHeading","TssOrientationModule","QueueWorkerToken","isWorking","isCanceled","startTime","totalComplete","totalFailed","recordsProcessedPerSecond","reset","endTime","isComplete","cancel","UnitOfWorkStarted","UnitOfWorkComplete","UnitOfWorkStatusUpdate","QueueWorkerStarted","QueueWorkerComplete","QueueStarted","QueueComplete","WorkQueueStatusTracker","totalQueueSize","workers","runningWorkerCount","canceledWorkersCount","worker","startTimes","remainingQueueSize","recordsProcessedPerMinute","setQueueSize","addWorker","getStatus","estimatedSecondsLeft","workerCount","DEFAULT_WORK_QUEUE_OPTIONS","autoStartWorkers","WorkQueueManager","workerTokens","tracker","setOptions","queueChangeObserver","queueChange","queueStarted","change","WorkQueueStatusEventType","queueComplete","startWork","starterSource","iif","getRemainingQueueCount","queueCount","workersToStart","emitQueueChange","getNextAndDoWork","stopWork","onBeforeWorkStarted","onWorkComplete","onWorkFailed","output","tokenId","emitWorkStarted","emitWorkComplete","onWorkerCompleted","checkIfWorkerComplete","processingData","getNext","takeWhile","doWork","QueuableWorkQueueManager","autoDequeu","enqueuMany","items","enqueue","dequeuMany","dequeue","Queued","InProgress","Complete","Canceled","Failed","QueueConfig","PrivilegeService","MISSING_ROLE_PARAM_EXCEPTION_MSG","MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG","RolePrivilegeService","roleId","privilegeId","privilegesByRole","addPrivilegeToRole","removePrivilegeFromRole","RoleService","MISSING_USER_PARAM_EXCEPTION_MSG","UserRoleService","userId","roleName","rolesByUser","addUserToRole","addUserToRoleByName","removeUserFromRole","removeUserFromRoleByName","UserService","usersByRoleId","usersByRoleName","Persistent","InMemory","addIfNotExist","addRangeToBeginning","unshift","removeDuplicates","element","filteredList","hexToRgb","hex","red","green","blue","matchResult","parseInt","isHexColor","colorTest","getCookie","nameMatchLength","cookie","substring","toStandardizedQueryDateFormat","getCurrentDateAsUtc","getCurrentDateEpochAsUtc","secondsToReadableTime","setDateToEndOfDay","subtractDays","subtractMinutes","subtractSeconds","subtractHours","subtractMilliseconds","hasLocalStorage","humanize","upperCaseAllWords","groupBy","keyGetter","levelToType","assignValidValues","sourceItem","restrictionProperties","obj","path","arr","getRandomInteger","floor","getRandomNumber","numberToRound","sortAndReorder","sortDescending","calculatePercentComplete","partialValue","totalValue","isNumberBetween","sumProperty","isNotBoolean","isNotDate","isNotDefined","isNotPrimitive","isNotString","isNotType","Acres","Hectares","SquareFeet","SquareMeters","SquareMiles","convertAreaUnits","metersPerSecondToKilometersPerHour","metersPerSecond","metersPerSecondToMilesPerHour","ensureProtocol","protocol","getBaseUrl","someUrl","parametersToString","removeEmptyParams","using","resource","func","__awaiter","_arguments","P","generator","fulfilled","rejected","geometryToCsv","verticeeOrdinalNames","pointInfos","verticees","verticee","isEnterpriseProvider","isFeatureServerLayerUrl","isCacheableEsriServiceRoute","urlPattern","testUrl","extractMapServerLayerId","layerIdPart","extractMapServerUrl","isMapServerLayerUrl","doesPathIncludePortalAccessCode","urlPath","doesPathIncludePortalAccessToken","extractPortalAccessToken","portalParams","getPortalOAuthRedirectUrl","getPortalSharingUrl","gpsPositionsToPoint","positions","isNotValidLatitude","isNotValidLongitude","extractMeasuresFromLine","measures","pathMeasures","getMeasureFromFlatCoordinateSystem","getMeasureFromLatLng","lat","lng","getClosestVerticee","hasMeasureValues","isLineWithinBounds","testStartValue","testEndValue","runsThrough","isFullMatch","isStartInBounds","isEndInBounds","isPointOnLineString","isLatLngOnLineString","isPointWithinBounds","calculateCrossProductByPoints","getFeetBetweenLatLng","getMilesBetweenLatLng","toLrsFeature","lrsFeature","layerInfo","getLayerTableName","stripLayerTableName","datasetName","locationType","OpenParenthesis","ClosedParenthesis","Parenthesis"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class ResourceConfig {\n  serviceUrl: string;\n\n  get hasServiceUrl(): boolean {\n    return Boolean(this.serviceUrl);\n  }\n}\n","export enum LogLevel {\n  Trace = 0,\n  Debug = 1,\n  Info = 2,\n  Warn = 3,\n  Error = 4,\n  Fatal = 5\n}\n\n\nexport type LogType = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';\n\n\nexport function typeToLevel(type: LogType): LogLevel {\n  if (type === 'trace') {\n    return LogLevel.Trace;\n  } else if (type === 'debug') {\n    return LogLevel.Debug;\n  } else if (type === 'info') {\n    return LogLevel.Info;\n  } else if (type === 'warn') {\n    return LogLevel.Warn;\n  } else if (type === 'error') {\n    return LogLevel.Error;\n  } else if (type === 'fatal') {\n    return LogLevel.Fatal;\n  } else {\n    throw new Error(`Unknown log type: '${type}'`);\n  }\n}\n\n\nexport function levelToType(level: LogLevel): LogType {\n  if (level === LogLevel.Trace) {\n    return 'trace';\n  } else if (level === LogLevel.Debug) {\n    return 'debug';\n  } else if (level === LogLevel.Info) {\n    return 'info';\n  } else if (level === LogLevel.Warn) {\n    return 'warn';\n  } else if (level === LogLevel.Error) {\n    return 'error';\n  } else if (level === LogLevel.Fatal) {\n    return 'fatal';\n  } else {\n    throw new Error(`Unknown log level: '${level}'`);\n  }\n}\n","export enum MeasurementUnit {\n  Imperial = 'imperial',\n  Metric = 'metric'\n}\n","import { Injectable } from '@angular/core';\nimport { LogLevel } from './logging/log-level';\nimport { AutoConfigData } from './auto-config-data';\nimport { MeasurementUnit } from './units/measurement-unit';\n\n\n/**\n * A simple settings/config class for storing key/value pairs with persistence.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoreConfig {\n  static readonly moduleConfigs: AutoConfigData[] = [{ className: 'CoreConfig', injectorToken: CoreConfig }];\n\n  autoConfig = true;\n  logEnabled = true;\n  logLevel = LogLevel.Info;\n  defaultNotifyInfoMsg = 'Info';\n  defaultNotifyWarnMsg = 'Warning';\n  defaultNotifyErrorMsg = 'Error';\n  defaultNotifySuccessMsg = 'Success';\n  defaultNotifyWaitMsg = 'Wait';\n  measurementUnit = MeasurementUnit.Imperial;\n}\n","export function isType(val: any, expectedType: string): boolean {\n  return typeof val === expectedType;\n}\n","import { isType } from './is-type.function';\n\n\nexport function isString(val: any): boolean {\n  return isType(val, 'string');\n}\n","import { CoreConfig } from './core.config';\nimport { AutoConfigData } from './auto-config-data';\nimport { isString } from './type-check/is-string.function';\n\n\nexport function AutoConfig(config: AutoConfigData | string): ClassDecorator {\n  return (constructor: any) => {\n    const autoConf: AutoConfigData = isString(config)\n      ? { className: config as string, injectorToken: constructor }\n      : config as AutoConfigData;\n\n    CoreConfig.moduleConfigs.push(autoConf);\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { ResourceConfig } from '../core/resource.config';\nimport { AutoConfig } from '../core/auto-config.decorator';\nimport { AppProfile } from './app-profile';\n\n\nexport const DEFAULT_APP_ID = 'all';\nexport const DEFAULT_PROFILE_ID = 'default';\n\n\n/**\n * Application related configuration options. These settings are used to\n * drive all general \"global\" application related behaviour. The settings can be\n * overridden directly in the code, application module, or from the TDS server.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('AppConfig')\nexport class AppConfig extends ResourceConfig {\n  appId = DEFAULT_APP_ID;\n  queryProfile = true;\n  profileId: string = null;\n  profile: AppProfile = null;\n  defaultProfileId = DEFAULT_PROFILE_ID;\n  allowQueryParamInjections = true;\n  continueOnAppBootstrapError = false;\n  appSettingsEndpoint = 'api/apps/{appId}/settings/{id}';\n  appProfileEndpoint = 'api/apps/{appId}/profiles/{id}';\n  pingEndpoint = 'api/ping';\n  statusEndpoint = 'api/status';\n}\n","// Port from: https://github.com/jfromaniello/url-join\n// TODO: Refactor this to be cleaner - RG.\nexport function join(...parts): string {\n  const resultArray = [];\n  let str;\n\n  if (Array.isArray(parts[0])) {\n    parts = parts[0];\n  }\n\n  parts[0] = parts[0] || '';\n  // If the first part is a plain protocol, we combine it with the next part.\n  if (parts[0].match(/^[^/:]+:\\/*$/) && parts.length > 1) {\n    const first = parts.shift();\n    parts[0] = first + parts[0];\n  }\n\n  // There must be two or three slashes in the file protocol, two slashes in anything else.\n  if (parts[0].match(/^file:\\/\\/\\//)) {\n    parts[0] = parts[0].replace(/^([^/:]+):\\/*/, '$1:///');\n  } else {\n    parts[0] = parts[0].replace(/^([^/:]+):\\/*/, '$1://');\n  }\n\n  for (let i = 0; i < parts.length; i++) {\n    let component = parts[i];\n\n    if (typeof component !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + component);\n    }\n\n    if (component === '') { continue; }\n\n    if (i > 0) {\n      // Removing the starting slashes for each component but the first.\n      component = component.replace(/^[\\/]+/, '');\n    }\n\n    if (i < parts.length - 1) {\n      // Removing the ending slashes for each component but the last.\n      component = component.replace(/[\\/]+$/, '');\n    } else {\n      // For the last component we will combine multiple slashes to a single one.\n      component = component.replace(/[\\/]+$/, '/');\n    }\n\n    resultArray.push(component);\n  }\n\n  str = resultArray.join('/');\n  // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n  // Remove trailing slash before parameters or hash.\n  str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n  // Replace ? in parameters with &.\n  const urlParts = str.split('?');\n  str = urlParts.shift() + (urlParts.length > 0 ? '?' : '') + urlParts.join('&');\n\n  return str;\n}\n","export const TOKEN_EXPRESSION = new RegExp('{(.*?)}', 'gi');\nexport const FULL_TOKEN_EXPRESSION = new RegExp('{{(.*?)}}', 'gi');\nexport const WILDCARD_EXPRESSION_VALUE = '(.*)';\n","import { FULL_TOKEN_EXPRESSION, TOKEN_EXPRESSION } from './tokens.constants';\n\n\nexport function replaceTokens(template: string, replaceValue = ''): string {\n  return (template || '')\n    .replace(FULL_TOKEN_EXPRESSION, replaceValue)\n    .replace(TOKEN_EXPRESSION, replaceValue);\n}\n","export function replaceToken(template: string, tokenKey: string, tokenValue: string): string {\n  return (template || '')\n    .replace(new RegExp(`{{${tokenKey}}}`, 'gi'), tokenValue)\n    .replace(new RegExp(`{${tokenKey}}`, 'gi'), tokenValue);\n}\n","import { replaceTokens } from '../tokens/replace-tokens.function';\nimport { replaceToken } from '../tokens/replace-token.function';\n\n\n// TODO: Expand this to have the full functionality of:\n// https://github.com/davidchambers/string-format\n// -RG.\nexport function format(template: string, tokens: any, removeEmptyTokens = false): string {\n  Object.keys(tokens || {})\n    .forEach(key => template = replaceToken(template, key, tokens[key]));\n\n  if (removeEmptyTokens) {\n    template = replaceTokens(template);\n  }\n\n  return template;\n}\n","import { isString } from '../type-check/is-string.function';\n\n\n/**\n * Cleans a URL:\n *  - Removes double-slashes\n */\nexport function clean(url: string): string {\n  return isString(url)\n    ? url.replace(/([^:]\\/)\\/+/g, '$1')\n    : url;\n}\n","export const NO_URL_ERROR_MSG = 'No URL configured for resource service.';\nexport const UNSUPPORTED_GET_EXCEPTION_MSG = `The 'Get' method is unsupported for this resource`;\nexport const UNSUPPORTED_CREATE_EXCEPTION_MSG = `The 'Create' method is unsupported for this resource`;\nexport const EMPTY_PARAM_VALUE = '';\n","// Angular.\nimport { HttpClient } from '@angular/common/http';\n\n// TSS.\nimport { join } from '../url/join.function';\nimport { format } from '../formatting/format.function';\nimport { clean } from '../url/clean.function';\nimport { isString } from '../type-check/is-string.function';\nimport { ResourceServiceConfig } from './resource-service-config';\nimport { NO_URL_ERROR_MSG } from './resource.constants';\n\n\nexport abstract class BaseEmptyResourceService<T> {\n  protected config: ResourceServiceConfig = {\n    url: null,\n    idFieldName: 'id',\n    cleanUrl: true,\n  };\n\n  constructor(protected http: HttpClient, paramsOrUrl: string | ResourceServiceConfig) {\n    if (isString(paramsOrUrl)) {\n      this.config.url = paramsOrUrl as string;\n    } else {\n      Object.assign(this.config, paramsOrUrl);\n    }\n\n    if (!this.config.url) {\n      throw NO_URL_ERROR_MSG;\n    }\n  }\n\n  protected getUrlWithEntity(entity: T, endpoint: string, tokens: any): string {\n    return this.getUrlWithId(entity ? entity[this.config.idFieldName] : null, endpoint, tokens);\n  }\n\n  protected getUrlWithId(id: string | number, endpoint: string, tokens: any): string {\n    const inferredRouteTokens = {};\n    inferredRouteTokens[this.config.idFieldName] = id;\n\n    return this.getUrl(endpoint, Object.assign(inferredRouteTokens, tokens));\n  }\n\n  protected getUrl(endpoint: string, tokens: any): string {\n    const url = endpoint\n      ? join(this.config.url, endpoint)\n      : this.config.url;\n\n    return this.replaceTokens(url, tokens);\n  }\n\n  protected replaceTokens(url: string, tokens: any): string {\n    tokens = tokens || {};\n    if (this.config.defaultRouteTokens) {\n      tokens = Object.assign({}, this.config.defaultRouteTokens, tokens);\n    }\n\n    url = format(url, tokens, true);\n    if (this.config.cleanUrl) {\n      url = clean(url);\n    }\n\n    return url;\n  }\n}\n","// Angular.\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n// 3rd party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { AppConfig } from './app.config';\nimport { BaseEmptyResourceService } from '../core/resource/base-empty-resource.service';\n\n\nexport interface ApiStatus {\n  up: boolean;\n  down: boolean;\n  configStoreUp: boolean;\n  configStoreDown: boolean;\n  upSince: Date;\n  daysUp: number;\n  appCount: number;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService extends BaseEmptyResourceService<ApiStatus> {\n  constructor(http: HttpClient, private appConfig: AppConfig) {\n    super(http, appConfig.serviceUrl);\n  }\n\n  ping(routeTokens?: any, params?: HttpParams): Observable<void> {\n    const url = this.getUrl(this.appConfig.pingEndpoint, routeTokens);\n    return this.http.get<void>(url, { params });\n  }\n\n  status(routeTokens?: any, params?: HttpParams): Observable<ApiStatus> {\n    const url = this.getUrl(this.appConfig.pingEndpoint, routeTokens);\n    return this.http.get<ApiStatus>(url, { params });\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { LogEntry } from './log-entry';\nimport { LogLevel, LogType, typeToLevel } from './log-level';\nimport { CoreConfig } from '../core.config';\nimport { format } from '../formatting/format.function';\n\n\n/**\n * Console logger.\n */\n@Injectable({ providedIn: 'root' })\nexport class Logger {\n  public logs: Array<LogEntry> = [];\n\n  constructor(private config: CoreConfig) {\n  }\n\n  get level(): LogLevel {\n    return this.config.logLevel;\n  }\n\n  get enabled(): boolean {\n    return this.config.logEnabled;\n  }\n\n  get isTrace(): boolean {\n    return this.level >= LogLevel.Trace;\n  }\n\n  get isDebug(): boolean {\n    return this.level >= LogLevel.Debug;\n  }\n\n  get isWarn(): boolean {\n    return this.level >= LogLevel.Warn;\n  }\n\n  get isError(): boolean {\n    return this.level >= LogLevel.Error;\n  }\n\n  get isFatal(): boolean {\n    return this.level >= LogLevel.Fatal;\n  }\n\n  get traceCount(): number {\n    return this.count('trace');\n  }\n\n  get debugCount(): number {\n    return this.count('debug');\n  }\n\n  get warnCount(): number {\n    return this.count('warn');\n  }\n\n  get errorCount(): number {\n    return this.count('error');\n  }\n\n  get fatalCount(): number {\n    return this.count('fatal');\n  }\n\n  count(logType: LogType): number {\n    return this.logsByType(logType).length;\n  }\n\n  logsByType(logType: LogType): LogEntry[] {\n    return this.logsByLevel(typeToLevel(logType));\n  }\n\n  logsByLevel(logLevel: LogLevel) {\n    return this.logs.filter(l => l.level === logLevel);\n  }\n\n  logEntry(log: LogEntry): LogEntry {\n    if (this.config.logEnabled && log.level >= this.config.logLevel) {\n      this.logs.push(log);\n\n      if (this.isDebug) {\n        console.log(`${LogLevel[log.level]}: ${log.msg} ${log.error || ''}`);\n      }\n    }\n\n    return log;\n  }\n\n  log(msg: string, level: LogLevel, error: Error = null): LogEntry {\n    return this.logEntry({\n      msg: format(msg, { error }),\n      level,\n      error,\n      created: new Date()\n    });\n  }\n\n  trace(msg: string): LogEntry {\n    return this.log(msg, LogLevel.Trace);\n  }\n\n  debug(msg: string): LogEntry {\n    return this.log(msg, LogLevel.Debug);\n  }\n\n  info(msg: string): LogEntry {\n    return this.log(msg, LogLevel.Info);\n  }\n\n  warn(msg: string, error: Error = null): LogEntry {\n    return this.log(msg, LogLevel.Warn, error);\n  }\n\n  error(msg: string, error: Error = null): LogEntry {\n    return this.log(msg, LogLevel.Error, error);\n  }\n\n  fatal(msg: string, error: Error = null): LogEntry {\n    return this.log(msg, LogLevel.Fatal, error);\n  }\n\n  clear(): void {\n    this.logs.length = 0;\n  }\n}\n","export function getByteSize(value: string): number {\n  value = value || '';\n\n  // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.\n  const match = encodeURIComponent(value).match(/%[89ABab]/g);\n  return value.length + (match ? match.length : 0);\n}\n","export const STORAGE_FORMAT_UNITS = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\nexport const NO_BYTES_FORMATTED = '0 KB';\n","import { isType } from './is-type.function';\n\n\nexport function isDefined(val: any): boolean {\n  return !isType(val, 'undefined');\n}\n","import { isDefined } from './is-defined.function';\n\nexport function isValue(val: any): boolean {\n  return isDefined(val) && val !== null && val !== '';\n}\n","import { NO_BYTES_FORMATTED, STORAGE_FORMAT_UNITS } from './storage.constants';\nimport { isValue } from '../type-check/is-value.function';\n\n\nexport function formatByteSize(numberOfBytes: number, decimalPlaces?: number, lowerCaseUnits = false): string {\n  let len = 0;\n\n  if (!numberOfBytes) {\n    return NO_BYTES_FORMATTED;\n  }\n\n  while (numberOfBytes >= 1024 && ++len) {\n    numberOfBytes = numberOfBytes / 1024;\n  }\n\n  if (!isValue(decimalPlaces)) {\n    decimalPlaces = numberOfBytes >= 10 || len < 1 ? 0 : 1;\n  }\n\n  const fixedNum: string = numberOfBytes.toFixed(decimalPlaces);\n  const unit = lowerCaseUnits\n    ? STORAGE_FORMAT_UNITS[len].toLowerCase()\n    : STORAGE_FORMAT_UNITS[len];\n\n  return `${fixedNum} ${unit}`;\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { getByteSize } from './get-byte-size.function';\nimport { formatByteSize } from './format-byte-size.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class BaseStorage {\n  protected keyPrefix = '';\n  protected keySuffix = '';\n\n  abstract length: number;\n  abstract get(key: string): string;\n  abstract set(key: string, value: string): void;\n  abstract remove(key: string): void;\n  abstract clear(): void;\n\n  has(key: string): boolean {\n    return Boolean(this.get(key));\n  }\n\n  /**\n   * Returns the number of bytes for this storage key.\n   */\n  size(key: string): number {\n    const value = this.get(key);\n    return getByteSize(value) + getByteSize(key);\n  }\n\n  sizeFormatted(key: string): string {\n    return formatByteSize(this.size(key));\n  }\n\n  getObject(key: string): any {\n    const value = this.get(key);\n    return value ? JSON.parse(value) : null;\n  }\n\n  setObject(key: string, value: any): void {\n    this.set(key, JSON.stringify(value));\n  }\n\n  protected formatKey(key: string): string {\n    return `${this.keyPrefix}${key}${this.keySuffix}`;\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { BaseStorage } from './base-storage.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class PersistentStorage extends BaseStorage {\n  get length(): number {\n    return localStorage.length;\n  }\n\n  get(key: string): string {\n    return localStorage.getItem(this.formatKey(key));\n  }\n\n  set(key: string, value: string): void {\n    localStorage.setItem(this.formatKey(key), value);\n  }\n\n  remove(key: string): void {\n    localStorage.removeItem(this.formatKey(key));\n  }\n\n  clear(): void {\n    localStorage.clear();\n  }\n}\n","export function hasWindow(): boolean {\n  return typeof window !== 'undefined';\n}\n","import { hasWindow } from '../environment/has-window.function';\n\n\nexport function getFullUrl(): string | '' {\n  return hasWindow() ? location.href : '';\n}\n","import { getFullUrl } from './get-full-url.function';\n\n\nexport function getQueryParams(search?: string): any {\n  let hashes;\n  search = search || getFullUrl();\n\n  if (!search) {\n    return {};\n  }\n\n  hashes = search.slice(search.indexOf('?') + 1).split('&');\n  if (!hashes || !hashes.length || !hashes[0] || hashes.length === 1 && !String(hashes[0]).includes('=')) {\n    return {};\n  }\n\n  return hashes.reduce((params, hash) => {\n    const [key, val] = hash.split('=');\n    return Object.assign(params, { [key]: decodeURIComponent(val) });\n  }, {});\n}\n","export function getLastItem<T>(list: T[]): T {\n  return list[list.length - 1];\n}\n","import { clean } from './clean.function';\nimport { getLastItem } from '../array/get-last-item.function';\n\n\nexport function getPostHashRoutePaths(url: string): string[] {\n  const parts = clean(url).split('#');\n  const hashPart = parts.length > 1\n    ? getLastItem(parts)\n    : null;\n\n  return hashPart && hashPart !== '/'\n    ? hashPart\n      .split('/')\n      .filter(part => Boolean(part) && !part.includes('='))\n    : [];\n}\n","import { getPostHashRoutePaths } from './get-post-hash-route-paths.function';\n\n\nexport function getFirstHashRoutePath(url: string): string | null {\n  const [postHashParts] = getPostHashRoutePaths(url);\n  return postHashParts || null;\n}\n","export function isDate(val: any): boolean {\n  return val instanceof Date;\n}\n","import { isValue } from './is-value.function';\n\n\nexport function isNotValue(val: any): boolean {\n  return !isValue(val);\n}\n","export function canNotBeNumber(val: any): boolean {\n  return isNaN(Number(val));\n}\n","import { canNotBeNumber } from './can-not-be-number.function';\n\n\nexport function canBeNumber(val: any): boolean {\n  return !canNotBeNumber(val);\n}\n","import { isNotValue } from '../type-check/is-not-value.function';\nimport { canBeNumber } from '../type-check/can-be-number.function';\n\n\nexport function toPrimitiveType(value: string): any {\n  if (isNotValue(value)) {\n    return value;\n  } else if (value === 'true' || value === 'false') {\n    return Boolean(value);\n  } else if (canBeNumber(value)) {\n    return Number(value);\n  } else {\n    return value;\n  }\n}\n","export function lowerCaseFirst(value: string): string {\n  return String(value).charAt(0).toLowerCase() + value.slice(1);\n}\n","// TODO: Refactor this method and give it proper names.\n// This was a copy/paste from online - RG.\nexport function setValue(target: any, key: string, val: any): void {\n  if (!target) {\n    return;\n  }\n\n  const ka = key.split(/\\./);\n  if (ka.length < 2) {\n    target[ka[0]] = val;\n  } else {\n    if (!target[ka[0]]) {\n      target[ka[0]] = {};\n    }\n    target = target[ka.shift()];\n    setValue(target, ka.join('.'), val);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ResourceConfig } from '../core/resource.config';\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\nexport type AuthorizationTypes = 'Bearer';\n\n/**\n * Security related configuration options. These settings are used to drive all\n * security related behaviour throughout the application. The settings can be\n * overridden directly in the code, application module, or from the TDS server.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('SecurityConfig')\nexport class SecurityConfig extends ResourceConfig {\n  rolesEnabled = true;\n  storeToken = true;\n  autoSignIn = true;\n  authorizationType: AuthorizationTypes = 'Bearer';\n  tokenEndpoint = 'token';\n  signOutEndpoint = 'api/account/signout';\n  userInfoEndpoint = 'api/account/userinfo';\n  usersEndpoint = 'api/users/{id}';\n  rolesEndpoint = 'api/roles/{id}';\n  privilegesEndpoint = 'api/privileges/{id}';\n  userRolesEndpoint = 'api/users/{userId}/roles/{roleName}';\n  rolesPrivilegesEndpoint = 'api/roles/{roleId}/privileges/{privilegeId}';\n  tokenStorageKey = '__tss_token';\n  tokenInvalidationDateLookup = '__tss_token_invalidate_date';\n  tdsTokenInclusionExpression = '/api/';\n  withCredentialsInclusionExpression = '(.*?)';\n  setWithCredentials = false;\n  accessToken: string = null;\n  defaultUserName: string = null;\n  defaultPassword: string = null;\n  roleSplitterExp = '[,|]+';\n  tokenBody = (userName, password) => `grant_type=password&username=${userName}&password=${password}`;\n}\n","export function isArray(val: any): boolean {\n  return Array.isArray(val);\n}\n","import { isType } from './is-type.function';\n\n\nexport function isNumber(val: any): boolean {\n  return isType(val, 'number');\n}\n","import { Injectable } from '@angular/core';\nimport { SecurityConfig } from './security-config';\nimport { isString } from '../core/type-check/is-string.function';\nimport { isArray } from '../core/type-check/is-array.function';\nimport { isValue } from '../core/type-check/is-value.function';\nimport { isNumber } from '../core/type-check/is-number.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleManagerService {\n  private readonly roles = new Set();\n  private readonly roleSplitterExpr: RegExp;\n\n  constructor(private config: SecurityConfig) {\n    this.roleSplitterExpr = new RegExp(this.config.roleSplitterExp);\n  }\n\n  get enabled(): boolean {\n    return this.config.rolesEnabled;\n  }\n\n  get roleCount(): number {\n    return this.roles.size;\n  }\n\n  getRoles(): string[] {\n    return Array.from(this.roles);\n  }\n\n  setRoles(roles: string | string[] | number | number[]): void {\n    this.clearRoles();\n    this.addRoles(roles);\n  }\n\n  addRoles(roles: string | string[] | number | number[]): void {\n    if (isString(roles) && (roles as string).includes(',')) {\n      roles = this.toArray((roles as string));\n    }\n\n    if (isArray(roles)) {\n      (roles as string[]).forEach(this.addRole, this);\n    } else {\n      this.addRole(roles as string);\n    }\n  }\n\n  addRole(role: string | number): void {\n    this.roles.add(String(role).trim());\n  }\n\n  clearRoles(): void {\n    this.roles.clear();\n  }\n\n  hasRole(role: string | number): boolean {\n    if (!this.enabled) {\n      return true;\n    }\n\n    if (!isValue(role)) {\n      return false;\n    }\n\n    return this.hasRoles(String(role));\n  }\n\n  hasRoles(roles: string | number): boolean {\n    let splitRoles;\n\n    if (!this.enabled) {\n      return true;\n    }\n\n    if (!isValue(roles)) {\n      return false;\n    }\n\n    splitRoles = this.toArray(roles);\n    return String(roles).includes(',')\n      ? this.hasAllRoles(splitRoles)\n      : this.hasAnyRoles(splitRoles);\n  }\n\n  hasAllRoles(roles: string | string[] | number | number[]): boolean {\n    if (!this.enabled) {\n      return true;\n    }\n\n    if (!isValue(roles)) {\n      return false;\n    }\n\n    const roleList: string[] = this.toStringArray(roles);\n    return roleList.every(this.forRealHasRole.bind(this));\n  }\n\n  hasAnyRoles(roles: string | string[] | number | number[]): boolean {\n    if (!this.enabled) {\n      return true;\n    }\n\n    if (!isValue(roles)) {\n      return false;\n    }\n\n    const roleList: string[] = this.toStringArray(roles);\n    return roleList.some(this.forRealHasRole.bind(this));\n  }\n\n  private forRealHasRole(role: string | number): boolean {\n    return this.roles.has(String(role).trim());\n  }\n\n  private toStringArray(roles: string | string[] | number | number[]): string[] {\n    let rolesList: string[] = [];\n    if (isString(roles)) {\n      rolesList = this.toArray(roles as string);\n    } else if (isNumber(roles)) {\n      rolesList.push(String(roles));\n    } else {\n      rolesList = roles as string[];\n    }\n\n    return rolesList;\n  }\n\n  private toArray(roles: string | number): string[] {\n    return String(roles).split(this.roleSplitterExpr);\n  }\n}\n\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n// 3rd party.\nimport { Observable, Subject } from 'rxjs';\nimport { publishReplay } from 'rxjs/operators';\n\n// TSS.\nimport { UserAccount } from './user-account';\nimport { RoleManagerService } from './role-manager.service';\nimport { SecurityConfig } from './security-config';\nimport { Logger } from '../core/logging/logger.service';\nimport { PersistentStorage } from '../core/storage/persistent-storage.service';\nimport { isString } from '../core/type-check/is-string.function';\n\n\nexport enum SignInState {\n  SignedIn,\n  SignedOut,\n  SignInFailed,\n  SignOutFailed,\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  rememberMe: boolean;\n  account: UserAccount;\n  isAuthenticated: boolean;\n  isDomainAccount: boolean;\n  isFederatedAccount: boolean;\n\n  readonly stateChange: Observable<SignInState>;\n  private readonly stateChangeSubject = new Subject<SignInState>();\n\n  constructor(\n    private http: HttpClient,\n    private roleMgr: RoleManagerService,\n    private config: SecurityConfig,\n    private storage: PersistentStorage,\n    private log: Logger\n  ) {\n    this.rememberMe = config.storeToken;\n    this.stateChange = this.stateChangeSubject.asObservable();\n\n    if (config.autoSignIn && !this.isAuthenticated) {\n      this.loadStoredToken();\n    }\n  }\n\n  signIn(userName: string, password: string, rememberMe: boolean = this.rememberMe): Observable<UserAccount> {\n    const observable = this.http.post<UserAccount>(\n      `${this.config.serviceUrl}/${this.config.tokenEndpoint}`,\n      this.config.tokenBody(userName, password)\n    )\n      .pipe(\n        publishReplay(1)\n      );\n\n    this.rememberMe = rememberMe;\n    observable.subscribe(this.onSignedIn.bind(this), this.onSignInFailed.bind(this));\n\n    return observable;\n  }\n\n  signOut(): Observable<any> {\n    const signOutUrl = `${this.config.serviceUrl}/${this.config.signOutEndpoint}`;\n    if (this.isFederatedAccount) {\n      this.log.info(`Signing out. Authentication Type: STS. Forwarded to: ${signOutUrl}`);\n      this.onSignedOut();\n\n      if (typeof location !== 'undefined') {\n        location.href = signOutUrl;\n      }\n    } else {\n      // The only reason this \"Account\" method is abstracted here is because there is additional stuff that\n      // has to happen when you sign out - like removing the user information cache, etc.\n      const obserable = this.http.get(signOutUrl)\n        .pipe(\n          publishReplay(1)\n        );\n\n      obserable\n        .subscribe(this.onSignedOut.bind(this), this.onSignedOutFailed.bind(this));\n\n      return obserable;\n    }\n  }\n\n  getUserInfo(): Observable<UserAccount> {\n    return this.http.get<UserAccount>(`${this.config.serviceUrl}/${this.config.userInfoEndpoint}`);\n  }\n\n  getToken(): string {\n    return this.isAuthenticated\n      ? this.account.access_token || null\n      : null;\n  }\n\n  loadStoredToken(): boolean {\n    const token = this.getLocalToken();\n    let loaded = false;\n\n    if (token && token['.expires']) {\n      const expiresDate = token['.expires'];\n      if (expiresDate > new Date()) {\n        this.onSignedIn(token, true);\n        loaded = true;\n      }\n    }\n\n    return loaded;\n  }\n\n  onSignedIn(account: UserAccount, skipLocalStorage: boolean = false) {\n    this.account = account;\n    this.isAuthenticated = true;\n    this.isDomainAccount = (account.foundContextType || '').toLowerCase() === 'domain';\n    this.isFederatedAccount = (account.authenticationType || '').toLowerCase() === 'federation';\n\n    // Note, we are exposing the access token through the security config because the token intercepter\n    // can not use this auth service - it will result in a cyclic dpendency injection error.\n    // See Angular issue: https://github.com/angular/angular/issues/18224\n    // TODO: Deprecate \"accessToken\" property on \"SecurityConfig\" once this is resolved - RG.\n    this.config.accessToken = account.access_token;\n    this.roleMgr.setRoles(account.privileges || account.roles);\n\n    if (!skipLocalStorage && this.rememberMe) {\n      account.lastSignIn = new Date();\n      this.setLocalToken(account);\n    }\n\n    this.log.debug('User signed in succesfully');\n    this.stateChangeSubject.next(SignInState.SignedIn);\n  }\n\n  onSignedOut() {\n    // We set the \"authenticated\" flag state to false so that anyone watching this can see the new state and\n    // get rid of the account information that was cached, because it is no longer applicable.\n    this.isAuthenticated = false;\n    this.isDomainAccount = false;\n    this.isFederatedAccount = false;\n    this.account = null;\n    this.roleMgr.clearRoles();\n    this.setLocalToken(null);\n    this.log.debug('User signed out succesfully');\n    this.stateChangeSubject.next(SignInState.SignedOut);\n  }\n\n  private onSignInFailed(err: any) {\n    this.log.error('Failed to sign in', err);\n    this.stateChangeSubject.next(SignInState.SignInFailed);\n  }\n\n  private onSignedOutFailed(err: any) {\n    this.log.error('Failed to sign out', err);\n    this.stateChangeSubject.next(SignInState.SignOutFailed);\n  }\n\n  private getLocalToken(): UserAccount {\n    try {\n      const token: UserAccount = this.storage.getObject(this.config.tokenStorageKey);\n\n      if (token && token.lastSignIn && isString(token.lastSignIn)) {\n        token.lastSignIn = new Date(token.lastSignIn);\n      }\n\n      if (token && token['.expires'] && isString(token['.expires'])) {\n        token['.expires'] = new Date(Date.parse(token['.expires']));\n      }\n\n      return token;\n    } finally {\n      // We don't need to do anything bbecause this is not critical path.\n    }\n  }\n\n  private setLocalToken(token): void {\n    try {\n      if (token) {\n        this.storage.setObject(this.config.tokenStorageKey, token);\n      } else {\n        this.storage.remove(this.config.tokenStorageKey);\n      }\n    } finally {\n      // We don't need to do anything as this is not a core workflow.\n    }\n  }\n}\n","// Angular.\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n// 3rd party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { BaseEmptyResourceService } from './base-empty-resource.service';\nimport { ResourceServiceConfig } from './resource-service-config';\n\n\nexport abstract class BaseResourceService<T> extends BaseEmptyResourceService<T> implements BaseEmptyResourceService<T> {\n  constructor(protected http: HttpClient, paramsOrUrl: string | ResourceServiceConfig) {\n    super(http, paramsOrUrl);\n  }\n\n  query(routeTokens?: any, params?: HttpParams): Observable<T[]> {\n    const url = this.getUrl(this.config.queryEndpoint, routeTokens);\n    return this.http.get<T[]>(url, { params });\n  }\n\n  get(id: string | number, routeTokens?: any, params?: HttpParams): Observable<T> {\n    const url = this.getUrlWithId(id, this.config.getEndpoint, routeTokens);\n    return this.http.get<T>(url, { params });\n  }\n\n  create(entity: T, routeTokens?: any, params?: HttpParams): Observable<T> {\n    const url = this.getUrl(this.config.createEndpoint, routeTokens);\n    return this.http.post<T>(url, entity, { params });\n  }\n\n  update(entity: T, routeTokens?: any, params?: HttpParams): Observable<any> {\n    const url = this.getUrlWithEntity(entity, this.config.updateEndpoint, routeTokens);\n    return this.http.put(url, entity, { params });\n  }\n\n  delete(id: string | number, routeTokens?: any, params?: HttpParams): Observable<T> {\n    const url = this.getUrlWithId(id, this.config.deleteEndpoint, routeTokens);\n    return this.http.delete<T>(url, { params });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { AppConfig } from './app.config';\nimport { AppProfile } from './app-profile';\nimport { BaseResourceService } from '../core/resource/base-resource.service';\nimport { join } from '../core/url/join.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppProfileService extends BaseResourceService<AppProfile> {\n  constructor(protected http: HttpClient, config: AppConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.appProfileEndpoint),\n      defaultRouteTokens: {\n        appId: config.appId\n      }\n    });\n  }\n}\n\n","// Angular.\nimport { Router } from '@angular/router';\nimport { Injector, Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfigData } from '../core/auto-config-data';\nimport { CoreConfig } from '../core/core.config';\nimport { Logger } from '../core/logging/logger.service';\nimport { PersistentStorage } from '../core/storage/persistent-storage.service';\nimport { getQueryParams } from '../core/url/get-query-params.function';\nimport { getFirstHashRoutePath } from '../core/url/get-first-hash-route-path.function';\nimport { getFullUrl } from '../core/url/get-full-url.function';\nimport { isDate } from '../core/type-check/is-date.function';\nimport { toPrimitiveType } from '../core/type-conversion/to-primitive-type.function';\nimport { lowerCaseFirst } from '../core/formatting/lower-case-first.function';\nimport { isValue } from '../core/type-check/is-value.function';\nimport { setValue } from '../core/object/set-value.function';\n\nimport { AuthService } from '../security/auth.service';\nimport { SecurityConfig } from '../security/security-config';\nimport { RoleManagerService } from '../security/role-manager.service';\nimport { UserAccount } from '../security/user-account';\n\nimport { AppProfileService } from './app-profile.service';\nimport { AppConfig } from './app.config';\nimport { AppProfile } from './app-profile';\n\n\ninterface ModuleConfigInstanceMap {\n  instance: any;\n  config: AutoConfigData;\n}\n\n\n/**\n * Application initialization service that is responsible for bootstrapping\n * the application.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppInitializerService {\n  private static readonly tokenExpireDateKey = 'token-expire-date';\n\n  ready = false;\n  loading = false;\n  onReady: Promise<AppProfile>;\n\n  private readonly moduleConfigInstances = new Map<string, ModuleConfigInstanceMap>();\n  private readonly queryParameters: any;\n  private resolveFn: (value?: AppProfile | PromiseLike<AppProfile>) => void;\n  private rejectFn: (reason?: any) => void;\n\n  constructor(\n    private router: Router,\n    private auth: AuthService,\n    private appProfiles: AppProfileService,\n    private log: Logger,\n    private config: AppConfig,\n    private storage: PersistentStorage,\n    private securityConfig: SecurityConfig,\n    private roleMgr: RoleManagerService,\n    private injector: Injector\n  ) {\n    this.queryParameters = getQueryParams();\n    this.onReady = new Promise<AppProfile>((resolve, reject) => {\n      this.resolveFn = resolve;\n      this.rejectFn = reject;\n    });\n  }\n\n  /**\n   * Initializes/bootstraps a standard TSS application.\n   */\n  initialize(): void {\n    const appId: string = this.config.appId;\n    const [firstRoutePath] = this.router.url.split('/');\n    const profileId: string = this.queryParameters.profileId\n      || firstRoutePath\n      || getFirstHashRoutePath(getFullUrl())\n      || this.config.defaultProfileId;\n\n    // We override module configurations here because the user may be trying to debug the session. The\n    // override has to happen again at the end of the process to override any settings that may have\n    // been set through the app initialization process.\n    this.overrideModuleConfigurationsFromQueryParams();\n\n    this.log.debug(`Initializing application with profile ID: ${profileId}`);\n\n    // We need to try and read any stored security token before we make\n    // a request to get profile info, so that the request is authenticated.\n    this.auth.loadStoredToken();\n    this.populateModuleConfigInstances();\n\n    if (!this.config.queryProfile || !this.config.hasServiceUrl) {\n      this.config.profile = {\n        name: '',\n        appId,\n        id: profileId,\n      };\n\n      this.log.debug(this.config.hasServiceUrl\n        ? `Profile query skipped due to configuration option`\n        : `No service URL configured, can't retrieve profile details - skipping profile retrieval`);\n\n      this.overrideModuleConfigurationsFromQueryParams();\n      this.ready = true;\n      this.resolveFn(this.config.profile);\n    } else {\n      this.loading = true;\n\n      // We need to try and read any stored security token before we make\n      // a request to get profile info, so that the request is authenticated.\n      this.queryProfile(profileId)\n        .then((profile: AppProfile) => this.resolveFn(profile))\n        .catch((err) => {\n          if (this.config.continueOnAppBootstrapError) {\n            this.resolveFn(this.config.profile);\n          } else {\n            this.rejectFn(err);\n          }\n        });\n    }\n  }\n\n  private queryProfile(profileId: string): Promise<AppProfile> {\n    return new Promise((resolve, reject) => {\n      this.appProfiles.get(profileId)\n        .subscribe((profile) => {\n          if (!profile) {\n            return reject(`No profile found with ID '${profileId}'`);\n          }\n\n          this.config.profileId = profile.id;\n          this.config.profile = profile;\n\n          this.checkTokenInvalidationDate();\n          this.applyModuleConfigurations();\n          this.overrideModuleConfigurationsFromQueryParams();\n          this.retrieveUserAccount()\n            .then(() => {\n              this.configureRoleManager();\n              this.ready = true;\n              this.loading = false;\n              resolve(profile);\n            })\n            .catch((err) => {\n              this.loading = false;\n              reject(err);\n            });\n        }, (err) => {\n          this.loading = false;\n          this.log.error(`Failed to retrieve application profile with app ID '${this.config.appId}' and ID '${profileId}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Gets the date of the cached \"invalidation\" date.\n   * The invalidation date is used to let the server force users to re-authenticate.\n   */\n  private getCachedTokenInvalidationDate(): Date {\n    return new Date(this.storage.get(this.securityConfig.tokenInvalidationDateLookup));\n  }\n\n  /**\n   * Caches the \"invalidation\" date.\n   * The invalidation date is used to let the server force users to re-authenticate.\n   */\n  private setCachedTokenExpireDate(setDate?: string): void {\n    this.log.debug(`Setting cached token invalidation date: ${setDate}`);\n\n    if (setDate) {\n      this.log.debug(`Setting token invalidation date to: ${setDate}`);\n      this.storage.set(this.securityConfig.tokenInvalidationDateLookup, setDate);\n    } else {\n      this.storage.remove(this.securityConfig.tokenInvalidationDateLookup);\n    }\n  }\n\n  /**\n   * Compares the cached token validation data with the invalidation date from the server.\n   * If the invalidation date from the server is new than the cached date, then the user\n   * must be forcibly signed out.\n   */\n  private checkTokenInvalidationDate(): void {\n    let tokenExpireDate;\n    const siteInfo = this.config.profile && this.config.profile.app && this.config.profile.app.siteInfo\n      ? this.config.profile.app.siteInfo\n      : null;\n\n    if (siteInfo && siteInfo[AppInitializerService.tokenExpireDateKey]) {\n      const lastTokenInvalidateDate = this.getCachedTokenInvalidationDate();\n      tokenExpireDate = new Date(siteInfo[AppInitializerService.tokenExpireDateKey]);\n\n      // Note, we are setting milliseconds to 0 because we don't care about that level of accuracy.\n      // Also, the \"setMilliseconds\" method returns the \"timestamp\" so we can just compare those two results.\n      const lastTokenValidationDatesMatch = isDate(lastTokenInvalidateDate) && isDate(tokenExpireDate)\n        ? lastTokenInvalidateDate.setMilliseconds(0) === tokenExpireDate.setMilliseconds(0)\n        : lastTokenInvalidateDate === tokenExpireDate;\n\n      if (this.auth.account && this.auth.account.lastSignIn < tokenExpireDate && !lastTokenValidationDatesMatch) {\n        this.log.info('Signing out user due to token invalidation date from security configuration');\n        this.auth.onSignedOut();\n      } else if (this.auth.account) {\n        this.log.debug('User has been authenticated after the token invalidation date');\n      }\n\n      if (tokenExpireDate) {\n        this.setCachedTokenExpireDate(tokenExpireDate);\n      }\n    }\n  }\n\n  /**\n   * Retrieves the user account if the user is already signed in, logs the user out if\n   * the token is expired, or refreshes the user account information - depending on\n   * the configured authentication provider.\n   */\n  private retrieveUserAccount(): Promise<UserAccount> {\n    return new Promise((resolve, reject) => {\n      try {\n        let queryingInfo = false;\n        const app = this.config.profile && this.config.profile.app\n          ? this.config.profile.app : null;\n\n        // If the local auth status says that no one is logged in, but the service is recognizing that someone is\n        // logged in, then this means that authentication is happening through windows via Active Directory or some\n        // other means. We need to get the user info so we can set the app \"state\" as \"logged in\".\n        if (app && app.security && !this.auth.isAuthenticated && app.security.isAuthenticated) {\n          this.log.debug('Retrieving additional user info do to authentication state');\n          queryingInfo = true;\n          this.auth.getUserInfo().subscribe(info => {\n            const expiresDate = new Date();\n            expiresDate.setDate(expiresDate.getDate() + app.security.accessTokenExpireDays);\n            this.auth.onSignedIn(Object.assign({ '.expires': expiresDate }, info));\n            resolve(info);\n          }, err => {\n            reject(err);\n          });\n        } else if (this.auth.isAuthenticated && app.security && !app.security.isAuthenticated) {\n          this.log.debug(`Signing out user do to out of sync authentication state`);\n          // Sign out/clear the auth cache because the server says they don't know who this is, but\n          // the client side code thinks it knows who it is.\n          this.auth.onSignedOut();\n        }\n\n        if (!queryingInfo) {\n          this.log.debug(`No request made for additional user account info`);\n          resolve(this.auth.account);\n        }\n      } catch (e) {\n        this.log.error('Failed to do pre-verification of user on app load. {0}', e);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Set module configuration properties based on overrides from an object.\n   * This object can come from multiple places - such as the server or query params.\n   * See: the \"applyModuleConfigurations\" and \"overrideModuleConfigurations\" methods.\n   */\n  private applyModuleConfigurationsFromObject(sourceMapping: any) {\n    sourceMapping = sourceMapping || {};\n    this.moduleConfigInstances\n      .forEach(config => {\n        const moduleConfigName = config.config.className;\n        const configInstance = config.instance;\n\n        Object.keys(sourceMapping)\n          .forEach((key) => {\n            const value = toPrimitiveType(sourceMapping[key]);\n            const modulePrefix = lowerCaseFirst(moduleConfigName + '.');\n            const rootKey = key.replace(modulePrefix, ''); // Turn appConfig.foo.bar --> foo.bar\n\n            if (isValue(value) && key.toLowerCase().startsWith(modulePrefix.toLowerCase())) {\n              // A config object has properties in our siteInfo object.\n              this.log.debug(`Setting ${moduleConfigName} property '${rootKey}' to ${value}`);\n              setValue(configInstance, rootKey, value);\n            }\n          });\n      });\n  }\n\n  /**\n   * Set module configuration properties based on overrides from the server.\n   * This functionality lets us dynamically override client side configuration\n   * through the use of \"App Settings\" from the server.\n   */\n  private applyModuleConfigurations(): void {\n    const profile = this.config.profile;\n    if (!profile || !profile.app || !profile.app.siteInfo) {\n      return;\n    }\n\n    this.applyModuleConfigurationsFromObject(profile.app.siteInfo);\n  }\n\n  /**\n   * Set module configuration properties based on overrides from the URL query parameters.\n   * This functionality lets us dynamically override client side and server side configurations\n   * by passing explicit settings through query parameters. A good use case for this is to pass\n   * \"coreConfig.logLevel=1\" as a query parameter in production to debug an issue in a production\n   * environment.\n   */\n  private overrideModuleConfigurationsFromQueryParams() {\n    if (this.config.allowQueryParamInjections) {\n      this.applyModuleConfigurationsFromObject(this.queryParameters);\n    }\n  }\n\n  /**\n   * Instantiates instances of each configured module configuration object. Properties of\n   * these module config instances will later be set based on server-side overides.\n   */\n  private populateModuleConfigInstances(): void {\n    CoreConfig.moduleConfigs\n      .forEach(moduleAutoConfig => {\n        try {\n          // Reason: https://github.com/angular/angular/issues/22063\n          // tslint:disable-next-line\n          const configInstance = this.injector.get(moduleAutoConfig.injectorToken);\n          this.moduleConfigInstances.set(moduleAutoConfig.injectorToken, {\n            instance: configInstance,\n            config: moduleAutoConfig\n          });\n          this.log.debug(`Created module configuration instance for: ${moduleAutoConfig.className}`);\n\n          if ('serviceUrl' in configInstance || 'hasServiceUrl' in configInstance) {\n            configInstance.serviceUrl = this.config.serviceUrl;\n          }\n        } catch (err) {\n          this.log.error(`Failed to get module config: ${moduleAutoConfig.className}`, err);\n        }\n      });\n  }\n\n  /**\n   * Updates security options based on information retrieved form the application profile.\n   * For example, security may be enabled or disabled, guest roles will be set, etc.\n   */\n  private configureRoleManager(): void {\n    const security = this.config.profile && this.config.profile.app && this.config.profile.app.security\n      ? this.config.profile.app.security : null;\n\n    if (!security) {\n      return;\n    }\n\n    // We want to explicitly\n    if (security.hasOwnProperty('enabled')) {\n      this.securityConfig.rolesEnabled = !!security.enabled;\n    }\n\n    if (!this.roleMgr.enabled) {\n      this.log.warn('Security is disabled');\n    }\n\n    security.guestPrivileges = security.guestPrivileges || [];\n    this.roleMgr.addRoles(security.guestPrivileges);\n    this.log.info(`Configured default roles (guest roles) - total of ${security.guestPrivileges.length}`);\n    this.log.info(`User has a total of ${this.roleMgr.roleCount} roles assigned to them`);\n  }\n}\n\n/**\n * Application initialization factory that provides a hook into\n * the Angular bootstrapping process.\n */\nexport function AppInitializerFactory(injector: Injector): () => Promise<any> {\n  return (): Promise<AppProfile> => {\n    const initializer: AppInitializerService = injector.get(AppInitializerService);\n    initializer.initialize();\n\n    return initializer.onReady;\n  };\n}\n","export const ALL_APPS_QUERY_ID = 'all';\n\nexport interface AppProfile {\n  id: string;\n  appId: string;\n  name: string;\n  logo?: string;\n  theme?: string;\n  cssPath?: string;\n  jsPath?: string;\n  app?: any;\n  portalAppId?: string;\n}\n","import { PipeTransform, Pipe } from '@angular/core';\n\n@Pipe({ name: 'keys' })\nexport class KeysPipe implements PipeTransform {\n  transform(value: any): any {\n    const keys = [];\n    Object.keys(value)\n      .forEach(key => keys.push({ key, value: value[key] }));\n\n    return keys;\n  }\n}\n","import { PipeTransform, Pipe } from '@angular/core';\nimport { formatByteSize } from './format-byte-size.function';\n\n\n@Pipe({ name: 'fileSize' })\nexport class FileSizePipe implements PipeTransform {\n  transform(bytes: number = 0): string {\n    return formatByteSize(bytes);\n  }\n}\n","export const STANDARDIZED_QUERY_DATE_FORMAT = `timestamp '{date}'`;\nexport const ORACLE_DATE_FORMAT = `TO_DATE('{date}','YYYY-MM-DD HH24:MI:SS')`;\nexport const DEFAULT_DATE_FORMAT = 'yyyy-MM-dd HH:mm:ss';\nexport const HOURS_PER_DAY = 24;\nexport const MINUTES_PER_HOUR = 60;\nexport const SECONDS_PER_MINUTE = 60;\nexport const MILLISECONDS_PER_SECOND = 1000;\nexport const MILLISECONDS_PER_MINUTE = 60000;\nexport const MILLISECONDS_PER_HOUR = 3600000;\nexport const MILLISECONDS_PER_DAY = 86400000;\nexport const READABLE_TIME_SUFFIX_MAP = {\n  ms: 'ms',\n  msDecimalPlaces: 0,\n  sec: 'sec',\n  secDecimalPlaces: 0,\n  min: 'min',\n  minDecimalPlaces: 2,\n  hr: 'hr',\n  hrDecimalPlaces: 2,\n  days: 'days',\n  daysDecimalPlaces: 2,\n};\n","import { MILLISECONDS_PER_SECOND, MILLISECONDS_PER_MINUTE, MILLISECONDS_PER_HOUR, MILLISECONDS_PER_DAY } from '../date-time.constants';\nimport { TimeUnit } from '../time-unit';\n\n\nexport function toMilliseconds(value: number, unitOfTime: TimeUnit): number {\n  let conversionFactor: number;\n\n  if (unitOfTime === 'milliseconds') {\n    conversionFactor = 1;\n  } else if (unitOfTime === 'seconds') {\n    conversionFactor = MILLISECONDS_PER_SECOND;\n  } else if (unitOfTime === 'minutes') {\n    conversionFactor = MILLISECONDS_PER_MINUTE;\n  } else if (unitOfTime === 'hours') {\n    conversionFactor = MILLISECONDS_PER_HOUR;\n  } else if (unitOfTime === 'days') {\n    conversionFactor = MILLISECONDS_PER_DAY;\n  } else {\n    throw new Error(`Unsuported unit of time supplied: '${unitOfTime}'`);\n  }\n\n  return (value || 0) * conversionFactor;\n}\n","import { MILLISECONDS_PER_SECOND } from '../date-time.constants';\n\n\nexport function millisecondsToSeconds(milliseconds: number): number {\n  return milliseconds / MILLISECONDS_PER_SECOND;\n}\n","import { MILLISECONDS_PER_MINUTE } from '../date-time.constants';\n\n\nexport function millisecondsToMinutes(milliseconds: number): number {\n  return milliseconds / MILLISECONDS_PER_MINUTE;\n}\n","import { MILLISECONDS_PER_HOUR } from '../date-time.constants';\n\n\nexport function millisecondsToHours(milliseconds: number): number {\n  return milliseconds / MILLISECONDS_PER_HOUR;\n}\n","import { MILLISECONDS_PER_DAY } from '../date-time.constants';\n\n\nexport function millisecondsToDays(milliseconds: number): number {\n  return milliseconds / MILLISECONDS_PER_DAY;\n}\n","import { millisecondsToSeconds } from '../conversion/milliseconds-to-seconds.function';\nimport { millisecondsToMinutes } from '../conversion/milliseconds-to-minutes.function';\nimport { millisecondsToHours } from '../conversion/milliseconds-to-hours.function';\nimport { millisecondsToDays } from '../conversion/milliseconds-to-days.function';\nimport {\n  MILLISECONDS_PER_SECOND,\n  MILLISECONDS_PER_MINUTE,\n  MILLISECONDS_PER_HOUR,\n  MILLISECONDS_PER_DAY,\n  READABLE_TIME_SUFFIX_MAP\n} from '../date-time.constants';\n\n\nexport function toReadableTime(milliseconds: number, suffixMap: any = {}): string {\n  // TODO: Get rid of magic numbers below - RG.\n  const formatAsMilliseconds = milliseconds < MILLISECONDS_PER_SECOND;\n  const formatAsSeconds = milliseconds < (MILLISECONDS_PER_MINUTE - 1);\n  const formatAsMinutes = milliseconds < (MILLISECONDS_PER_HOUR - 299);\n  const formatAsHours = milliseconds < (MILLISECONDS_PER_DAY - 18000);\n  let value: number = milliseconds;\n  let unit: string;\n  let decimalPlaces: number;\n\n  suffixMap = suffixMap\n    ? Object.assign({}, READABLE_TIME_SUFFIX_MAP, suffixMap)\n    : READABLE_TIME_SUFFIX_MAP;\n\n  // We assume the milliseconds was passed in.\n  if (formatAsMilliseconds) {\n    // The time should be shown in milliseconds.\n    unit = suffixMap.ms;\n    value = milliseconds;\n    decimalPlaces = suffixMap.msDecimalPlaces;\n  } else if (formatAsSeconds) {\n    // The time should be shown in seconds.\n    const seconds = millisecondsToSeconds(milliseconds);\n    unit = suffixMap.sec;\n    value = seconds;\n    decimalPlaces = suffixMap.secDecimalPlaces;\n  } else if (formatAsMinutes) {\n    // The time should be shown in in minutes.\n    const minutes = millisecondsToMinutes(milliseconds);\n    unit = suffixMap.min;\n    value = minutes;\n    decimalPlaces = suffixMap.minDecimalPlaces;\n  } else if (formatAsHours) {\n    // The time should be shown in hours.\n    const hours = millisecondsToHours(milliseconds);\n    unit = suffixMap.hr;\n    value = hours;\n    decimalPlaces = suffixMap.hrDecimalPlaces;\n  } else {\n    // The time should be shown in days.\n    const days = millisecondsToDays(milliseconds);\n    unit = suffixMap.days;\n    value = days;\n    decimalPlaces = suffixMap.daysDecimalPlaces;\n  }\n\n  const numberWithStrippedZeros = Number(value.toFixed(decimalPlaces));\n  return `${numberWithStrippedZeros} ${unit}`;\n}\n","import { PipeTransform, Pipe } from '@angular/core';\nimport { TimeUnit } from '../time-unit';\nimport { toMilliseconds } from '../conversion/to-milliseconds.function';\nimport { toReadableTime } from './to-readable-time.function';\n\n\n@Pipe({ name: 'readableTime' })\nexport class ReadableTimePipe implements PipeTransform {\n  transform(time: number, unit: TimeUnit = 'milliseconds'): any {\n    const millis = toMilliseconds(time, unit);\n    return toReadableTime(millis);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\n@Pipe({ name: 'safeUrl' })\nexport class SafeUrlPipe implements PipeTransform {\n  constructor(private readonly sanitizer: DomSanitizer) { }\n  transform(url) {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\nimport { KeysPipe } from './keys.pipe';\nimport { FileSizePipe } from './storage/file-size.pipe';\nimport { ReadableTimePipe } from './date-time/readable/readable-time.pipe';\nimport { SafeUrlPipe } from './safe-url.pipe';\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [\n    FileSizePipe,\n    KeysPipe,\n    ReadableTimePipe,\n    SafeUrlPipe,\n  ],\n  exports: [\n    FileSizePipe,\n    KeysPipe,\n    ReadableTimePipe,\n    SafeUrlPipe\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssCoreModule { }\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TssCoreModule } from '../core/core.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssGeometryModule { }\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { TssCoreModule } from '../core/core.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n    HttpClientModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssDataSourceModule { }\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { TssCoreModule } from '../core/core.module';\nimport { TssDataSourceModule } from '../data-source/data-source.module';\n\n\n@NgModule({\n  imports: [\n    TssCoreModule,\n    TssDataSourceModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssEsriModule { }\n","import { LayerRendererType } from './types';\n\n\nexport const LAYER_RENDER_TYPES: LayerRendererTypeDefinition[] = [\n  { alias: 'Single Value', renderType: 'simple', description: 'Displays a single symbology, regardless of values' },\n  { alias: 'Unique Value', renderType: 'uniqueValue', description: 'Displays different symbologies based on a unique value' },\n  { alias: 'Class Break', renderType: 'classBreaks', description: 'Displays different symbologies based on a classification of values' },\n];\n\nexport interface LayerRendererTypeDefinition {\n  alias: string;\n  renderType: LayerRendererType;\n  description: string;\n}\n","import { PipeTransform, Pipe } from '@angular/core';\nimport { LayerRendererType } from './types';\nimport { LAYER_RENDER_TYPES, LayerRendererTypeDefinition } from './layer-renderer-type-definition';\nimport { LayerDrawingInfoRenderer } from './layer-drawing-info-renderer';\nimport { isString } from '../../core/type-check/is-string.function';\n\n\n@Pipe({ name: 'layerRendererType' })\nexport class LayerRendererTypePipe implements PipeTransform {\n  transform(input: LayerRendererType | LayerDrawingInfoRenderer): string {\n    const renderType: LayerRendererType = isString(input)\n      ? input as LayerRendererType\n      : (input as LayerDrawingInfoRenderer).type;\n\n    const definition: LayerRendererTypeDefinition = LAYER_RENDER_TYPES\n      .find(t => t.renderType === renderType);\n\n    return definition.alias;\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TssCoreModule } from '../core/core.module';\nimport { LayerRendererTypePipe } from './drawing/layer-renderer-type.pipe';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n  ],\n  declarations: [\n    LayerRendererTypePipe\n  ],\n  exports: [\n    LayerRendererTypePipe\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssMapsModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { TssCoreModule } from '../core/core.module';\nimport { TssDataSourceModule } from '../data-source/data-source.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n    TssDataSourceModule,\n    HttpClientModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssLrsModule { }\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\n\n// 3rd party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { SecurityConfig } from './security-config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(private config: SecurityConfig) {\n\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const withCredsExpr = new RegExp(this.config.withCredentialsInclusionExpression);\n    if (this.config.accessToken && new RegExp(this.config.tdsTokenInclusionExpression).test(request.url)) {\n      request = request.clone({\n        withCredentials: this.config.setWithCredentials && withCredsExpr.test(request.url),\n        setHeaders: {\n          Authorization: `${this.config.authorizationType} ${this.config.accessToken}`\n        }\n      });\n    } else if (this.config.setWithCredentials && withCredsExpr.test(request.url)) {\n      request = request.clone({\n        withCredentials: true\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { RoleManagerService } from './role-manager.service';\nimport { Logger } from '../core/logging/logger.service';\n\n\n@Directive({\n  // TODO: remove this once this is moved to it's own package - RG.\n  // tslint:disable-next-line\n  selector: '[hasRoles]'\n})\nexport class HasRolesDirective {\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private roleMgr: RoleManagerService,\n    private log: Logger) {\n  }\n\n  @Input() set hasRoles(roles: string | number) {\n    if (this.roleMgr.hasRoles(roles)) {\n      // If condition is true add template to DOM\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      this.log.trace(`Granted access: ${roles}`);\n    } else {\n      // Else remove template from DOM\n      this.viewContainer.clear();\n      this.log.trace(`Denied access: ${roles}`);\n    }\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\n\nimport { TssCoreModule } from '../core/core.module';\nimport { TokenInterceptor } from './token.interceptor';\nimport { HasRolesDirective } from './has-roles.directive';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FormsModule,\n    TssCoreModule\n  ],\n  declarations: [\n    HasRolesDirective,\n  ],\n  exports: [\n    HasRolesDirective,\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    }\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssSecurityModule { }\n","import { Input, Directive, HostListener } from '@angular/core';\n\n\n@Directive({\n  // TODO: remove this once this is moved to it's own package - RG.\n  // tslint:disable-next-line\n  selector: '[href]'\n})\nexport class PreventDefaultLinkDirective {\n  @Input() href;\n\n  @HostListener('click', ['$event'])\n  preventDefault(event) {\n    if (!this.href.length) {\n      event.preventDefault();\n    }\n  }\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { PreventDefaultLinkDirective } from './prevent-default-link.directive';\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [\n    PreventDefaultLinkDirective,\n  ],\n  exports: [\n    PreventDefaultLinkDirective,\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssPolyfillModule { }\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n/**\n * Queue module provides data queueing and core unit of work queue functionality.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssQueueModule { }\n","import { isType } from './is-type.function';\n\n\nexport function isFunction(val: any): boolean {\n  return isType(val, 'function');\n}\n","import { RouteExpression } from './route-expression';\nimport { isFunction } from '../core/type-check/is-function.function';\nimport { isString } from '../core/type-check/is-string.function';\nimport { replaceTokens } from '../core/tokens/replace-tokens.function';\n\n\nexport function isRouteMatch(route: string, routeExpression: RouteExpression): boolean {\n  let exp: RegExp;\n\n  if (isFunction(routeExpression)) {\n    return Boolean((routeExpression as (url: string) => boolean)(route));\n  }\n\n  if (isString(routeExpression)) {\n    // NOTE: We are replacing the friendly route matching with real regex.\n    const wildcardExp = new RegExp('[*]', 'gi');\n    const routeAsString = routeExpression as string;\n    const resolvedRoute = replaceTokens(routeAsString, '*')\n      .replace(wildcardExp, '.*');\n\n    exp = new RegExp(resolvedRoute, 'i');\n  } else {\n    exp = routeExpression as RegExp;\n  }\n\n  return exp.test(route);\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\nimport { HttpParamInjectionDefinition } from './http-param-injection-definition';\nimport { isRouteMatch } from './is-route-match.function';\nimport { RouteExpression } from './route-expression';\n\n\n/**\n * Configuration class for storing global data caching settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('HttpConfig')\nexport class HttpConfig {\n  get hasInjections(): boolean {\n    return Boolean(this.paramInjectionDefitions.length);\n  }\n\n  paramInjectionsEnabled = true;\n  paramInjectionDefitions: HttpParamInjectionDefinition[] = [];\n\n  addOrUpdateParameterInjection(route: RouteExpression, paramName: string, paramValue: string): HttpParamInjectionDefinition {\n    const definition: HttpParamInjectionDefinition = {\n      route,\n      paramName,\n      paramValue\n    };\n\n    const existingDefinition = this.paramInjectionDefitions.find(def => def.route === route && def.paramName === paramName);\n    if (existingDefinition) {\n      Object.assign(existingDefinition, definition);\n      return existingDefinition;\n    } else {\n      this.paramInjectionDefitions.push(definition);\n      return definition;\n    }\n  }\n\n  addParameterInjection(route: RouteExpression, paramName: string, paramValue: string): HttpParamInjectionDefinition {\n    const definition = {\n      route,\n      paramName,\n      paramValue\n    };\n\n    this.paramInjectionDefitions.push(definition);\n    return definition;\n  }\n\n  getInjectionDefinitions(route: string): HttpParamInjectionDefinition[] {\n    return this.paramInjectionDefitions.filter(def => isRouteMatch(route, def.route));\n  }\n\n  getFirstInjectionDefinition(route: string): HttpParamInjectionDefinition {\n    return this.paramInjectionDefitions.find(def => isRouteMatch(route, def.route));\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\n\n// 3rd Party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { Logger } from '../core/logging/logger.service';\nimport { HttpConfig } from './http.config';\nimport { HttpParamInjectionDefinition } from './http-param-injection-definition';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpParamInterceptor implements HttpInterceptor {\n  constructor(private config: HttpConfig, private log: Logger) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const httpParamInjections: HttpParamInjectionDefinition[] = this.config.paramInjectionsEnabled\n      ? this.config.getInjectionDefinitions(request.urlWithParams)\n      : [];\n\n    if (httpParamInjections.length) {\n      request = this.generateRequestWithParams(request, httpParamInjections);\n    }\n\n    return next.handle(request);\n  }\n\n  generateRequestWithParams(request: HttpRequest<any>, httpParamInjections: HttpParamInjectionDefinition[]): HttpRequest<any> {\n    let params = request.params;\n    httpParamInjections\n      .forEach(paramInjection => {\n        this.log.debug(`Injecting URL '${request.url}' with parameter value (name: '${paramInjection.paramName}')`);\n        params = params.set(paramInjection.paramName, paramInjection.paramValue);\n      });\n\n    return request.clone({ params });\n  }\n}\n","// Angular.\nimport { CommonModule } from '@angular/common';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\n// TSS\nimport { TssCoreModule } from '../core/core.module';\nimport { HttpParamInterceptor } from './http-param.interceptor';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    TssCoreModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpParamInterceptor,\n      multi: true\n    }\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssHttpModule { }\n","import { NgModule, Injector, CUSTOM_ELEMENTS_SCHEMA, APP_INITIALIZER } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\n\nimport { TssCoreModule } from '../core/core.module';\nimport { TssSecurityModule } from '../security/security.module';\nimport { TssDataSourceModule } from '../data-source/data-source.module';\nimport { TssPolyfillModule } from '../polyfill/polyfill.module';\nimport { AppConfig } from './app.config';\nimport { AppInitializerFactory, AppInitializerService } from './app-initializer.service';\nimport { AppProfileService } from './app-profile.service';\nimport { ApiService } from './api.service';\nimport { TssQueueModule } from '../queuing/queue.module';\nimport { TssHttpModule } from '../http/http.module';\n\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    RouterModule,\n    TssCoreModule,\n    TssPolyfillModule,\n    TssHttpModule,\n    TssDataSourceModule,\n    TssQueueModule,\n    TssSecurityModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n    AppProfileService,\n    ApiService,\n    AppInitializerService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: AppInitializerFactory,\n      multi: true,\n      deps: [Injector]\n    }\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssAppModule {\n}\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n\n// TSS.\nimport { TssGeometryModule } from '../geometry/geometry.module';\nimport { TssEsriModule } from '../esri/esri.module';\nimport { TssMapsModule } from '../maps/map.module';\nimport { TssLrsModule } from '../lrs/lrs.module';\nimport { TssAppModule } from './app.module';\n\n\n@NgModule({\n  imports: [\n    TssAppModule,\n    TssEsriModule,\n    TssGeometryModule,\n    TssMapsModule,\n    TssLrsModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssAppSpatialModule {\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n// 3rd party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { BaseResourceService } from '../../core/resource/base-resource.service';\nimport { AppSetting, ALL_APP_SETTINGS_QUERY_ID } from './app-setting';\nimport { AppConfig } from '../app.config';\nimport { join } from '../../core/url/join.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppSettingService extends BaseResourceService<AppSetting> {\n  constructor(protected http: HttpClient, config: AppConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.appSettingsEndpoint),\n      defaultRouteTokens: {\n        appId: config.appId\n      }\n    });\n  }\n\n  /**\n   * Retrieves a list of application settings.\n   */\n  queryAllApps(routeTokens?: any, params?: HttpParams): Observable<AppSetting[]> {\n    routeTokens = routeTokens || {};\n    routeTokens.appId = ALL_APP_SETTINGS_QUERY_ID;\n    return super.query(routeTokens, params);\n  }\n}\n","export const ALL_APP_SETTINGS_QUERY_ID = 'all';\n\n\nexport interface AppSetting {\n  id: string;\n  name: string;\n  value: string;\n  description?: string;\n  appId?: string;\n  placeholderText?: string;\n  order?: string;\n  isPublic?: boolean;\n  isEncrypted?: boolean;\n  preventEdit?: boolean;\n  inputType?: string;\n}\n","/**\n * The Strategy to use when retrieving and caching data.\n * * networkFirst: Go to the network then go to the cache.\n * * cacheFirst: Go to the cache first and then go to the network for data.\n * * fastest: Use whichever strategy comes back first (a race).\n * * cacheOnly: Only look into the cache for data, never make network request.\n */\nexport enum CacheStrategy {\n  NetworkFirst = 'network-first',\n  CacheFirst = 'cache-first',\n  Fastest = 'fastest',\n  CacheOnly = 'cache-only',\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\nimport { isRouteMatch } from '../http/is-route-match.function';\nimport { CacheDefinition } from './cache-definition';\nimport { CacheStrategy } from './cache-strategy';\nimport { CacheConfigOptions } from './cache-config-options';\n\n\n/**\n * Configuration class for storing global data caching settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('CacheConfig')\nexport class CacheConfig {\n  /**\n   * Determines whether caching should be used or not. When disabled, all\n   * caching-related functionality is ignored (not used).\n   */\n  cacheEnabled = false;\n\n  /**\n   * List of configurations that describe what to cache and how to cache it.\n   * The main parts of this configuration include the \"route\" (how to match what\n   * to cache) and the \"strategy\" (whether to look for content in the cache first\n   * or try to make the HTTP request first).\n   */\n  cacheDefitions: CacheDefinition[] = [];\n\n  /**\n   * When set, this strategy will trump all strategies defined in the \"Cache Defintions\".\n   * WARNING: This is a global setting and can have adverse affects when used improperly.\n   * The main use case for this setting is to allow for the global cache strategy of\n   * 'cacheOnly', which will allow an application to force an \"offline\" state (forcing\n   * requests to pull from cache only).\n   */\n  forcedGlobalCacheStrategy: CacheStrategy = null;\n\n  static create(config: CacheConfigOptions): CacheConfig {\n    return Object.assign(new CacheConfig(), config);\n  }\n\n  static enable(...defs: CacheDefinition[]): CacheConfig {\n    return CacheConfig.create({\n      cacheEnabled: true,\n      cacheDefitions: defs,\n    });\n  }\n\n  getCacheDefinition(route: string): CacheDefinition {\n    return this.cacheDefitions.find(def => isRouteMatch(route, def.route));\n  }\n}\n","export const CACHE_ONLY_NO_DATA_EXC_MSG = 'No cache available';\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { PersistentStorage } from '../core/storage/persistent-storage.service';\n\n\nexport const CACHE_STORAGE_KEY_PREFIX = 'http-cache:';\n\n\n/**\n * Configuration class for storing global data caching settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersistentCacheStorage extends PersistentStorage {\n  constructor() {\n    super();\n    this.keyPrefix = CACHE_STORAGE_KEY_PREFIX;\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\n\n// 3rd Party.\nimport { PersistentCacheStorage } from './cache.storage';\nimport { CacheContent } from './cache-content';\n\n\n/**\n * Cache Service is an observables based in-memory cache implementation\n * Keeps track of in-flight observables and sets a default expiry for cached values\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CacheService {\n  constructor(private cache: PersistentCacheStorage) {\n  }\n\n  get(key: string): HttpResponse<any> {\n    const cacheItem: CacheContent = this.cache.getObject(key);\n    const now = new Date();\n    let cacheData: HttpResponse<any>;\n\n    if (cacheItem && cacheItem.expires && cacheItem.expires.getTime() < now.getTime()) {\n      this.cache.remove(key);\n    } else if (cacheItem) {\n      // NOTE: We can't just pull the serialized data, because\n      // we need an actual instance of the HttpResponse class.\n      cacheData = Object.assign(new HttpResponse<any>(), cacheItem.value);\n    } else {\n      cacheData = null;\n    }\n\n    return cacheData;\n  }\n\n  set(key: string, value: HttpResponse<any>, timeToLive: number = null) {\n    const expires = timeToLive ? this.getExpireDate(timeToLive) : null;\n    const cacheData: CacheContent = { expires, value };\n\n    this.cache.setObject(key, cacheData);\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key);\n  }\n\n  private getExpireDate(timeToLive: number = null): Date {\n    const expires = new Date();\n    expires.setSeconds(expires.getSeconds() + timeToLive);\n\n    return expires;\n  }\n}\n","import { TOKEN_EXPRESSION } from './tokens.constants';\n\n\nexport function hasTokens(template: string): boolean {\n  return TOKEN_EXPRESSION.test(template);\n}\n","export function standardizeTokens(template: string): string {\n  return (template || '').replace(/{{/gi, '{').replace(/}}/gi, '}');\n}\n","export function stripTokenBraces(value: string): string {\n  return (value || '')\n    .replace(new RegExp('{', 'gi'), '')\n    .replace(new RegExp('}', 'gi'), '');\n}\n","import { standardizeTokens } from './standardize-tokens.function';\nimport { replaceTokens } from './replace-tokens.function';\nimport { WILDCARD_EXPRESSION_VALUE, TOKEN_EXPRESSION } from './tokens.constants';\nimport { stripTokenBraces } from './strip-token-braces.function';\n\n\nexport function extractTokenValuesFromTemplate(template: string, resolvedPath: string): {} {\n  const tokens = {};\n  template = standardizeTokens(template);\n  const wildcardTemplate = replaceTokens(template, WILDCARD_EXPRESSION_VALUE);\n  const parts = new RegExp(wildcardTemplate).exec(resolvedPath);\n\n  if (parts && parts.length) {\n    const tokensList = template.match(TOKEN_EXPRESSION);\n\n    // Get rid of the full match.\n    parts.shift();\n\n    parts.forEach((templateValue: string, index: number) => {\n      if (tokensList[index]) {\n        const key = stripTokenBraces(tokensList[index]);\n        tokens[key] = (templateValue || '').replace(new RegExp('/', 'gi'), '');\n      }\n    });\n  }\n\n  return tokens;\n}\n","// Angualr.\nimport { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse } from '@angular/common/http';\n\n// 3rd Party.\nimport { Observable, of, throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\n\n// TSS.\nimport { CacheService } from './cache.service';\nimport { CacheConfig } from './cache.config';\nimport { Logger } from '../core/logging/logger.service';\nimport { CacheStrategy } from './cache-strategy';\nimport { CacheDefinition } from './cache-definition';\nimport { hasTokens } from '../core/tokens/has-tokens.function';\nimport { isString } from '../core/type-check/is-string.function';\nimport { extractTokenValuesFromTemplate } from '../core/tokens/extract-token-values-from-template.function';\nimport { format } from '../core/formatting/format.function';\nimport { CACHE_ONLY_NO_DATA_EXC_MSG } from './cache.constants';\n\n\nfunction shouldCheckCacheFirst(strategy: CacheStrategy) {\n  return strategy === CacheStrategy.CacheFirst\n    || strategy === CacheStrategy.Fastest\n    || strategy === CacheStrategy.CacheOnly;\n}\n\nfunction getCacheKey(definition: CacheDefinition, requestUrl: string): string {\n  let cacheKey = definition.cacheId || requestUrl;\n  if (hasTokens(cacheKey) && isString(definition.route)) {\n    const tokenValues = extractTokenValuesFromTemplate(definition.route as string, requestUrl);\n    cacheKey = format(cacheKey, tokenValues, true);\n  }\n\n  return cacheKey;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CacheInterceptor implements HttpInterceptor {\n  constructor(private config: CacheConfig, private cache: CacheService, private log: Logger) {\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const allowCaching = request.method === 'GET' && this.config.cacheEnabled;\n    let matchingCacheDefinition: CacheDefinition;\n\n    // TODO: Handle request method type.\n    // TDOO: Handle global use cache only.\n\n    if (allowCaching) {\n      matchingCacheDefinition = this.config.getCacheDefinition(request.urlWithParams);\n      const strategy: CacheStrategy = matchingCacheDefinition\n        ? this.config.forcedGlobalCacheStrategy || matchingCacheDefinition.strategy\n        : null;\n\n      if (matchingCacheDefinition && shouldCheckCacheFirst(strategy)) {\n        const cacheKey = getCacheKey(matchingCacheDefinition, request.url);\n        const isCacheOnly = strategy === CacheStrategy.CacheOnly;\n        const cachedResponse: HttpResponse<any> = this.cache.get(cacheKey);\n\n        if (cachedResponse) {\n          this.log.debug(`Resolving HTTP request from cache: '${request.url}'`);\n          return of(cachedResponse);\n        } else if (isCacheOnly) {\n          return throwError(new Error(CACHE_ONLY_NO_DATA_EXC_MSG));\n        }\n      }\n    }\n\n    this.log.trace(`Making HTTP request: '${request.url}'`);\n    let continuedResponse: Observable<HttpEvent<any>> = next.handle(request);\n\n    // If a matched cache definition is found, then we need to handle caching when the request when it is complete.\n    if (allowCaching && matchingCacheDefinition) {\n      continuedResponse = this.cacheResponse(continuedResponse, request, matchingCacheDefinition);\n    }\n\n    return continuedResponse;\n  }\n\n  private cacheResponse(\n    source: Observable<HttpEvent<any>>,\n    request: HttpRequest<any>,\n    cacheDefinition: CacheDefinition\n  ): Observable<HttpEvent<any>> {\n    const cacheKey = getCacheKey(cacheDefinition, request.url);\n    return source.pipe(\n      tap(event => {\n        if (cacheDefinition && event instanceof HttpResponse) {\n          this.log.debug(`Caching HTTP request: '${request.url}'`);\n          this.cache.set(cacheKey, event, cacheDefinition.expires);\n        }\n      }),\n      catchError((error: any) => {\n        const cachedData = this.cache.get(cacheKey);\n        if (cachedData) {\n          this.log.debug(`Failed to resolve cacheable HTTP request from URL '${request.url}', fallingback to cache`);\n          return of(cachedData);\n        } else {\n          this.log.debug(`Failed to resolve cacheable HTTP request from URL '${request.url}' and no cached data available`);\n          throw error;\n        }\n      })\n    );\n  }\n}\n","// Angular.\nimport { CommonModule } from '@angular/common';\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\n// TSS\nimport { CacheService } from './cache.service';\nimport { CacheInterceptor } from './cache.interceptor';\nimport { CacheConfig } from './cache.config';\nimport { PersistentCacheStorage } from './cache.storage';\nimport { TssCoreModule } from '../core/core.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    TssCoreModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n    CacheConfig,\n    PersistentCacheStorage,\n    CacheService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: CacheInterceptor,\n      multi: true\n    }\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssCacheModule { }\n","export function addRange<T>(list: T[], itemsToAdd: T[]): void {\n  list.push(...itemsToAdd);\n}\n","export function removeItem<T>(list: T[], ...itemsToDelete: T[]): void {\n  itemsToDelete.forEach(itemToDelete => {\n    const index = list.indexOf(itemToDelete);\n    const numberOfItemsToRemove = 1;\n    if (index > -1) {\n      list.splice(index, numberOfItemsToRemove);\n    }\n  });\n}\n","import { removeItem } from './remove-item.function';\n\n\nexport function removeWhere<T>(list: T[], predicate: (item: T) => boolean): void {\n  const itemsToRemove = list.filter(t => predicate(t));\n  removeItem(list, ...itemsToRemove);\n}\n","export function clone<T>(objectToClone: T): T {\n  return JSON.parse(JSON.stringify(objectToClone));\n}\n","export function rgbToHex(rgb: [number, number, number]): string {\n  const red = rgb[0];\n  const green = rgb[1];\n  const blue = rgb[2];\n\n  // tslint:disable-next-line\n  return `#${((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1)}`;\n}\n","export function transparencyToOpacity(transparency: number) {\n  return 1 - (transparency * 0.01);\n}\n","export function addMilliseconds(milliseconds: number, date?: Date): Date {\n  date = date || new Date();\n  const time = date.getTime();\n  const newTime = time + milliseconds;\n  date.setTime(newTime);\n\n  return date;\n}\n","import { addMilliseconds } from './add-milliseconds.function';\nimport { MILLISECONDS_PER_MINUTE } from '../date-time.constants';\n\n\nexport function addMinutes(minutes: number, date?: Date): Date {\n  return addMilliseconds(minutes * MILLISECONDS_PER_MINUTE, date);\n}\n","import { addMinutes } from './add-minutes.function';\nimport { HOURS_PER_DAY } from '../date-time.constants';\n\n\nexport function addDays(days: number, date?: Date): Date {\n  return addMinutes(days * HOURS_PER_DAY, date);\n}\n","import { addMinutes } from './add-minutes.function';\nimport { MINUTES_PER_HOUR } from '../date-time.constants';\n\n\nexport function addHours(hours: number, date?: Date): Date {\n  return addMinutes(hours * MINUTES_PER_HOUR, date);\n}\n","import { MILLISECONDS_PER_SECOND } from '../date-time.constants';\nimport { addMilliseconds } from './add-milliseconds.function';\n\n\nexport function addSeconds(seconds: number, date?: Date): Date {\n  return addMilliseconds(seconds * MILLISECONDS_PER_SECOND, date);\n}\n","export function toUtcDate(date: Date): Date {\n  return new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds()\n  );\n}\n","// Angular.\nimport { DatePipe } from '@angular/common';\n\n// TSS.\nimport { DEFAULT_DATE_FORMAT, STANDARDIZED_QUERY_DATE_FORMAT, ORACLE_DATE_FORMAT } from '../date-time.constants';\nimport { format } from '../../formatting/format.function';\n\n\nexport function formatDate(date: Date, dateFormat: string = DEFAULT_DATE_FORMAT): string {\n  const dateTransformer = new DatePipe('en-US');\n\n  if (dateFormat === STANDARDIZED_QUERY_DATE_FORMAT || dateFormat === ORACLE_DATE_FORMAT) {\n    return format(dateFormat, {\n      date: dateTransformer.transform(date, DEFAULT_DATE_FORMAT)\n    });\n  }\n\n  const formattedDate = dateTransformer.transform(date, dateFormat);\n  return `${formattedDate}`;\n}\n","import { toUtcDate } from './to-utc-date.function';\n\n\nexport function toUtcEpochDate(date: Date): number {\n  return toUtcDate(date).getTime();\n}\n","import { STANDARDIZED_QUERY_DATE_FORMAT, ORACLE_DATE_FORMAT, DEFAULT_DATE_FORMAT } from '../date-time.constants';\nimport { formatDate } from './format-date.function';\n\n\nexport function formatDateForQuery(date: Date, dateFormat: string = DEFAULT_DATE_FORMAT): string {\n  let quoteDate = true;\n  if (dateFormat === STANDARDIZED_QUERY_DATE_FORMAT || dateFormat === ORACLE_DATE_FORMAT) {\n    quoteDate = false;\n  }\n\n  const formattedDate = formatDate(date, dateFormat);\n  return quoteDate ? `'${formattedDate}'` : `${formattedDate}`;\n}\n","export enum SqlDateFormat {\n  Standardized,\n  Literal,\n  Oracle\n}\n","export function getElapsedMilliseconds(start: Date, end?: Date) {\n  end = end || new Date();\n  return Math.abs(start.getTime() - end.getTime());\n}\n","import { getElapsedMilliseconds } from './get-elapsed-milliseconds.function';\n\n\nexport function getElapsedSeconds(start: Date, end?: Date) {\n  return getElapsedMilliseconds(start, end) / 1000;\n}\n","export function setDateToBeginningOfDay(date: Date): void {\n  date.setHours(0, 0, 0, 0);\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd party.\nimport { Subject, Observable } from 'rxjs';\n\n\ndeclare const window: any;\n\n@Injectable({ providedIn: 'root' })\nexport class OnlineOfflineService {\n  readonly connectionChanged: Observable<boolean>;\n  private readonly internalConnectionChanged: Subject<boolean>;\n\n  get isOnline() {\n    return !!window.navigator.onLine;\n  }\n\n  constructor() {\n    this.internalConnectionChanged = new Subject<boolean>();\n    this.connectionChanged = this.internalConnectionChanged.asObservable();\n\n    window.addEventListener('online', () => this.updateOnlineStatus());\n    window.addEventListener('offline', () => this.updateOnlineStatus());\n  }\n\n  private updateOnlineStatus() {\n    this.internalConnectionChanged.next(window.navigator.onLine);\n  }\n}\n","export const DEFAULT_POINT_EQUALITY_PRECISION = 7;\n","import { DEFAULT_POINT_EQUALITY_PRECISION } from './equality.constants';\n\n/**\n * Returns true if the two arguments are equal within the given precision.\n */\nexport function almostEqual(number1: number, number2: number, precision = DEFAULT_POINT_EQUALITY_PRECISION): boolean {\n  const tolerance = 0.5 * Math.pow(10, -precision);\n  return Math.abs(number1 - number2) < tolerance;\n}\n\n","import { almostEqual } from './almost-equal.function';\nimport { DEFAULT_POINT_EQUALITY_PRECISION } from './equality.constants';\n\n\nexport function pointsAlmostEqual(x1: number, y1: number, x2: number, y2: number, precision = DEFAULT_POINT_EQUALITY_PRECISION): boolean {\n  return almostEqual(x1, x2, precision) && almostEqual(y1, y2, precision);\n}\n","export const DEFAULT_ERROR_MSG = 'An error occurred';\n","import { DEFAULT_ERROR_MSG } from './error.constants';\nimport { format } from '../formatting/format.function';\nimport { isString } from '../type-check/is-string.function';\n\n\nexport function errorMsg(errorOrMsg: any, error?: any): string {\n  let exceptionDetails;\n\n  errorOrMsg = errorOrMsg || DEFAULT_ERROR_MSG;\n  if (isString(errorOrMsg)) {\n    exceptionDetails = error ? errorMsg(error) : '';\n\n    return format(errorOrMsg, { error: exceptionDetails });\n  }\n\n  return errorMsg(\n    errorOrMsg.innerException\n    || errorOrMsg.InnerException\n    || errorOrMsg.exceptionMessage\n    || errorOrMsg.ExceptionMessage\n    || errorOrMsg.message\n    || errorOrMsg.Message\n    || errorOrMsg.msg\n    || errorOrMsg.Msg\n    || errorOrMsg.error_description\n    || errorOrMsg.error\n    || errorOrMsg.Error\n    || errorOrMsg.data\n    || errorOrMsg.Data\n    || errorOrMsg.exception\n    || errorOrMsg.Exception);\n}\n","import { DecimalPipe } from '@angular/common';\n\n\nexport function formatNumber(value: any, digits?: string, locale?: string): string | null {\n  return new DecimalPipe('en-US').transform(value, digits, locale);\n}\n","export const FIRST_LETTER_SEPERATED_BY_SPACE_MATCH_REGEX = /^[a-z]|\\s[a-z]/gm;\nexport const PASCAL_CASE_FIRST_LETTER_MATCH_REGEX = /(?=[A-Z])/;\nexport const LEADING_AND_TRAILING_UNDERSCORE_MATCH_REGEX = /^[\\s_]+|[\\s_]+$/gm;\nexport const LEADING_AND_TRAILING_HYPHEN_MATCH_REGEX = /^[\\s-]+|[\\s-]+$/gm;\nexport const UNDERSCORE_MATCH_REGEX = /[_\\s]+/gm;\nexport const HYPHEN_MATCH_REGEX = /[-\\s]+/gm;\n\n","import { FIRST_LETTER_SEPERATED_BY_SPACE_MATCH_REGEX } from './formatting.constants';\n\n\nexport function upperCaseEachWord(text: string): string {\n  return (text || '')\n    .replace(FIRST_LETTER_SEPERATED_BY_SPACE_MATCH_REGEX, match =>\n      match.toUpperCase()\n    );\n}\n","export function upperCaseFirstLetter(value: string): string {\n  return String(value).charAt(0).toUpperCase() + value.slice(1);\n}\n","export function trimEnd(value: string, trimCharacter = ' '): string {\n  if (value.endsWith(trimCharacter)) {\n    value = value.substr(0, value.length - 1);\n  }\n\n  return value;\n}\n","export function trimStart(value: string, trimCharacter = ' '): string {\n  if (value.startsWith(trimCharacter)) {\n    value = value.substr(1);\n  }\n\n  return value;\n}\n","export const BASE_64_METADATA_REGEX = /data:([a-zA-Z0-9]+\\/[a-zA-Z0-9-.+]+).*,.*/;\nexport const JSON_MIME_TYPE = 'application/json';\n\n// Text files.\nexport const TEXT_MIME_TYPE = 'text/plain';\nexport const TEXT_FILE_EXTENSION = '.txt';\n\n// Audio.\nexport const AUDIO_WEBM_MIME_TYPE = 'audio/webm';\nexport const AUDIO_MP3_MIME_TYPE = 'audio/mpeg-3';\nexport const AUDIO_MP3_FILE_EXTENSION = '.mp3';\n\n// Video.\nexport const VIDEO_WEBM_MIME_TYPE = 'video/webm;codecs=h264';\nexport const VIDEO_MP4_MIME_TYPE = 'video/mp4';\nexport const VIDEO_MP4_FILE_EXTENSION = '.mp4';\n\n// Images.\nexport const IMAGE_PNG_FILE_EXTENSION = '.png';\nexport const IMAGE_PNG_MIME_TYPE = 'image/png';\nexport const IMAGE_JPEG_FILE_EXTENSION = '.jpeg';\nexport const IMAGE_JPEG_MIME_TYPE = 'image/jpeg';\n","import { BASE_64_METADATA_REGEX } from './media.constants';\n\n\nexport function base64MimeType(encoded: string): string {\n  let result = null;\n  const mime = encoded.match(BASE_64_METADATA_REGEX);\n\n  if (mime && mime.length) {\n    result = mime[1];\n  }\n\n  return result;\n}\n","import { getLastItem } from '../array/get-last-item.function';\n\n\nexport function stripBase64Metadata(base64: string): string {\n  const result = base64.split(',');\n  return getLastItem(result).trim();\n}\n","import { stripBase64Metadata } from './strip-base64-metadata.function';\n\n\nexport function base64toByteArray(base64Data: string): Uint8Array[] {\n  const sliceSize = 1024;\n  const strippedBase64Data = stripBase64Metadata(base64Data);\n  const byteCharacters = atob(strippedBase64Data);\n  const bytesLength = byteCharacters.length;\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\n  const byteArrays = new Array(slicesCount);\n  let sliceIndex: number;\n\n  for (sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * sliceSize;\n    const end = Math.min(begin + sliceSize, bytesLength);\n\n    const bytes = new Array(end - begin);\n    let offset: number;\n    let i: number;\n\n    for (offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n\n  return byteArrays;\n}\n","import { base64MimeType } from './base64-mime-type.function';\nimport { base64toByteArray } from './base64-to-byte-array.function';\n\n\nexport function base64toBlob(base64Data: string, contentType: string = null) {\n  contentType = contentType || base64MimeType(base64Data);\n  return new Blob(base64toByteArray(base64Data), { type: contentType });\n}\n","import { isType } from './is-type.function';\nimport { isValue } from './is-value.function';\n\n\nexport function isObject(val: any): boolean {\n  return isType(val, 'object') && !Array.isArray(val) && isValue(val);\n}\n","import { isObject } from '../type-check/is-object.function';\nimport { isFunction } from '../type-check/is-function.function';\n\n\n/**\n * Deep merge two objects.\n */\nexport function mergeDeep(target: any, source: any, options: { ignoreArrays?: boolean, copyFunctions?: boolean } = {}): any {\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      if (isObject(value)) {\n        if (!target[key]) {\n          target[key] = {};\n        }\n\n        mergeDeep(target[key], value, options);\n      } else {\n        let doCopy = true;\n\n        if (options.ignoreArrays && Array.isArray(value)\n          || isFunction(value) && !options.copyFunctions) {\n          doCopy = false;\n        }\n\n        if (doCopy) {\n          Object.assign(target, { [key]: value });\n        }\n      }\n    });\n  }\n\n  return target;\n}\n","import { MergeDeepArrayOptions } from './merge-deep-array-options';\nimport { mergeDeep } from './merge-deep.function';\n\n\nexport function mergeDeepArray(target: any[], source: any[], options?: MergeDeepArrayOptions): void {\n  if (!target || !source) {\n    return;\n  }\n\n  options = Object.assign({}, {\n    identifier: 'id',\n    addMissing: true,\n    beforeMerge: () => undefined,\n    afterMerge: () => undefined,\n  }, options);\n\n  target.forEach(targetItem => {\n    const targetId = targetItem[options.identifier];\n    const match = source.find(s => targetId && s[options.identifier] === targetId);\n    if (match) {\n      const continueWithMerge = options.beforeMerge(targetItem, match);\n      if (continueWithMerge !== false) {\n        mergeDeep(targetItem, match);\n      }\n\n      options.afterMerge(targetItem, match);\n    }\n  });\n\n  if (options.addMissing) {\n    source\n      .filter(src => !target.find(x => src[options.identifier] && src[options.identifier] === x[options.identifier]))\n      .forEach(missing => target.push(missing));\n  }\n}\n","import { NotificationTracker } from './notification-tracker';\nimport { NotifyResponse } from './notify-response';\nimport { NotifyEventType } from './notify-event-type';\nimport { NotifyService } from './notify.service';\nimport { Logger } from '../logging/logger.service';\nimport { NotificationConfig } from './notification-config';\nimport { isFunction } from '../type-check/is-function.function';\nimport { errorMsg } from '../error/error-msg.function';\n\n\nexport abstract class BaseNotificationTracker<T> implements NotificationTracker<T> {\n  protected onDone: (value: T | undefined | null | PromiseLike<T>) => void;\n  protected waitResponse: NotifyResponse;\n  protected eventWatchers: {\n    eventType: NotifyEventType,\n    callback: ((e?: any) => void)\n  }[] = [];\n\n  constructor(protected notify: NotifyService, protected log?: Logger, protected config: NotificationConfig = { logErrors: true }) {\n  }\n\n  wait(message: string, title?: string, config?: any): NotificationTracker<T> {\n    this.waitResponse = this.notify.wait(message, title, config);\n\n    // This method needs implemented in each implementation.\n    this.emit('wait');\n    return this;\n  }\n\n  waitIf(predicate: boolean | (() => boolean), message: string, title?: string, config?: any): NotificationTracker<T> {\n    const doWait = isFunction(predicate)\n      ? (predicate as () => boolean)()\n      : Boolean(predicate);\n\n    return doWait ? this.wait(message, title, config) : this;\n  }\n\n  success(message: string, title?: string, config?: any): NotificationTracker<T> {\n    this.config.showSuccess = true;\n    this.config.successMsg = message;\n    this.config.successTitle = title;\n    this.config.successConfiguration = config;\n    this.emit('success');\n    return this;\n  }\n\n  error(message: string, title?: string, config?: any): NotificationTracker<T> {\n    this.config.showError = true;\n    this.config.errorMsg = message;\n    this.config.errorTitle = title;\n    this.config.errorConfiguration = config;\n    this.emit('error');\n    return this;\n  }\n\n  warn(message: string, title?: string, config?: any): NotificationTracker<T> {\n    this.config.showWarn = true;\n    this.config.warnMsg = message;\n    this.config.warnTitle = title;\n    this.config.warnConfiguration = config;\n    this.emit('warn');\n    return this;\n  }\n\n  info(message: string, title?: string, config?: any): NotificationTracker<T> {\n    this.config.showInfo = true;\n    this.config.infoMsg = message;\n    this.config.infoTitle = title;\n    this.config.infoConfiguration = config;\n    this.emit('info');\n    return this;\n  }\n\n  finally(onDone: (value: T | undefined | null | PromiseLike<T>) => void): NotificationTracker<T> {\n    this.onDone = onDone;\n    this.emit('finally');\n    return this;\n  }\n\n  on(eventType: NotifyEventType, callback: (e?: any) => void) {\n    this.eventWatchers.push({ eventType, callback });\n  }\n\n  protected emit(eventType: NotifyEventType, event?: any) {\n    this.eventWatchers\n      .filter(watcher => watcher.eventType === eventType)\n      .forEach(watcher => watcher.callback(event));\n  }\n\n  protected done(response?: any) {\n    if (this.waitResponse) {\n      this.notify.clear(this.waitResponse.notifyId, this.waitResponse.containerId);\n    }\n\n    if (this.onDone) {\n      this.onDone(response);\n    }\n  }\n\n  protected onSuccess(response: any): void {\n    if (this.config.showSuccess) {\n      this.notify.success(this.config.successMsg, this.config.successTitle, this.config.successConfiguration);\n    }\n\n    if (this.config.showInfo) {\n      this.notify.info(this.config.infoMsg, this.config.infoTitle, this.config.infoConfiguration);\n    }\n\n    this.done(response);\n  }\n\n  protected onFail(error: any): void {\n    const responseError = (error.error || error) || error;\n    const msg: string = errorMsg(this.config.errorMsg, responseError);\n\n    if (this.log && this.config.logErrors) {\n      this.log.error(msg);\n    }\n\n    if (this.config.showError) {\n      this.notify.error(msg, this.config.errorTitle, responseError, this.config.errorConfiguration);\n    }\n\n    if (this.config.showWarn) {\n      this.notify.warn(msg, this.config.infoTitle, this.config.warnConfiguration);\n    }\n\n    this.done();\n  }\n}\n","import { NotifyService } from './notify.service';\nimport { Logger } from '../logging/logger.service';\nimport { BaseNotificationTracker } from './base-notification-tracker';\nimport { NotificationConfig } from './notification-config';\n\n\nexport class NotificationPromiseTracker<T> extends BaseNotificationTracker<T> {\n  constructor(public source: Promise<T>, notify: NotifyService, log?: Logger, config: NotificationConfig = {}) {\n    super(notify, log, config);\n  }\n\n  wait(message: string, title?: string): NotificationPromiseTracker<T> {\n    super.wait(message, title);\n    this.source = this.source\n      .then((result: T) => {\n        this.onSuccess(result);\n        return result;\n      })\n      .catch((error: any) => {\n        this.onFail(error);\n        throw error;\n      });\n    return this;\n  }\n\n  waitIf(predicate: boolean | (() => boolean), message: string, title?: string): NotificationPromiseTracker<T> {\n    return super.waitIf(predicate, message, title) as NotificationPromiseTracker<T>;\n  }\n\n  success(message: string, title?: string): NotificationPromiseTracker<T> {\n    return super.success(message, title) as NotificationPromiseTracker<T>;\n  }\n\n  error(message: string, title?: string): NotificationPromiseTracker<T> {\n    return super.error(message, title) as NotificationPromiseTracker<T>;\n  }\n\n  warn(message: string, title?: string): NotificationPromiseTracker<T> {\n    return super.warn(message, title) as NotificationPromiseTracker<T>;\n  }\n\n  info(message: string, title?: string): NotificationPromiseTracker<T> {\n    return super.info(message, title) as NotificationPromiseTracker<T>;\n  }\n\n  finally(onDone: (value: T | undefined | null | PromiseLike<T>) => void): NotificationPromiseTracker<T> {\n    return super.finally(onDone) as NotificationPromiseTracker<T>;\n  }\n\n  then(onfulfilled?: ((value: T) => T | PromiseLike<T>) | undefined | null): Promise<T> {\n    return this.source.then(onfulfilled);\n  }\n\n  catch(onrejected?: ((reason: any) => T | PromiseLike<T>) | undefined | null): Promise<T> {\n    return this.source.catch(onrejected);\n  }\n}\n","import { Observable, Subscription } from 'rxjs';\nimport { tap, publishReplay } from 'rxjs/operators';\n\nimport { NotifyService } from './notify.service';\nimport { Logger } from '../logging/logger.service';\nimport { BaseNotificationTracker } from './base-notification-tracker';\nimport { NotificationConfig } from './notification-config';\n\n\nexport class NotificationSubscriptionTracker<T> extends BaseNotificationTracker<T> {\n  constructor(public source: Observable<T>, notify: NotifyService, log?: Logger, config: NotificationConfig = {}) {\n    super(notify, log, config);\n\n    // We need to do a timeout here so that the chained events coming in after this method will be fired\n    // before this subscription is added - this is necessary for any synchronous/immediate observables.\n    this.source = this.source.pipe(\n      tap((x: T) => {\n        setTimeout(() => this.onSuccess(x));\n      }, (error: any) => {\n        setTimeout(() => this.onFail(error));\n      })\n    );\n\n    if (this.config.useSingletonSubscriptionEmission) {\n      this.source = this.source.pipe(publishReplay());\n    }\n  }\n\n  wait(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T> {\n    return super.wait(message, title, config) as NotificationSubscriptionTracker<T>;\n  }\n\n  waitIf(predicate: boolean | (() => boolean), message: string, title?: string, config?: any): NotificationSubscriptionTracker<T> {\n    return super.waitIf(predicate, message, title, config) as NotificationSubscriptionTracker<T>;\n  }\n\n  success(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T> {\n    return super.success(message, title, config) as NotificationSubscriptionTracker<T>;\n  }\n\n  error(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T> {\n    return super.error(message, title, config) as NotificationSubscriptionTracker<T>;\n  }\n\n  warn(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T> {\n    return super.warn(message, title, config) as NotificationSubscriptionTracker<T>;\n  }\n\n  info(message: string, title?: string, config?: any): NotificationSubscriptionTracker<T> {\n    return super.info(message, title, config) as NotificationSubscriptionTracker<T>;\n  }\n\n  finally(onDone: (value: T | undefined | null | PromiseLike<T>) => void): NotificationSubscriptionTracker<T> {\n    return super.finally(onDone) as NotificationSubscriptionTracker<T>;\n  }\n\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription {\n    return this.source.subscribe(next, error, complete);\n  }\n}\n","export enum NotifyType {\n  Wait = 0,\n  Success = 1,\n  Info = 2,\n  Warn = 3,\n  Error = 4,\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { CoreConfig } from '../core.config';\nimport { NotifyType } from './notify-type';\nimport { Notify } from './notify';\nimport { Logger } from '../logging/logger.service';\nimport { NotificationSubscriptionTracker } from './notification-subscription-tracker';\nimport { NotificationPromiseTracker } from './notification-promise-tracker';\nimport { NotifyResponse } from './notify-response';\nimport { format } from '../formatting/format.function';\n\n\n/**\n * Notification service.\n */\n@Injectable({ providedIn: 'root' })\nexport class NotifyService implements Notify {\n  constructor(protected config: CoreConfig, protected log: Logger) {\n  }\n\n  notify(type: NotifyType, message: string, title: string, config?: any): NotifyResponse {\n    // Add actual notification implementation here.\n    return {};\n  }\n\n  clear(notifyId?: string, containerId?: string): void {\n  }\n\n  with<T>(source: Observable<T>): NotificationSubscriptionTracker<T> {\n    return new NotificationSubscriptionTracker<T>(source, this, this.log);\n  }\n\n  promise<T>(source: Promise<T>): NotificationPromiseTracker<T> {\n    return new NotificationPromiseTracker<T>(source, this, this.log);\n  }\n\n  wait(message: string, title = this.config.defaultNotifyWaitMsg, config?: any): NotifyResponse {\n    return this.notify(NotifyType.Wait, message, title, config);\n  }\n\n  success(message: string, title = this.config.defaultNotifySuccessMsg, config?: any): NotifyResponse {\n    return this.notify(NotifyType.Success, message, title, config);\n  }\n\n  error(message: string, title = this.config.defaultNotifyErrorMsg, error: any = null, config?: any): NotifyResponse {\n    return this.notify(NotifyType.Error, format(message, { error }), title, config);\n  }\n\n  warn(message: string, title = this.config.defaultNotifyWarnMsg, error: any = null, config?: any): NotifyResponse {\n    return this.notify(NotifyType.Warn, format(message, { error }), title, config);\n  }\n\n  info(message: string, title = this.config.defaultNotifyInfoMsg, config?: any): NotifyResponse {\n    return this.notify(NotifyType.Info, message, title, config);\n  }\n}\n","import { Orderable } from './orderable';\nimport { isNumber } from '../type-check/is-number.function';\n\n\nexport function sortByOrder<T extends Orderable>(list: T[]) {\n  let compareResult = -1;\n  list\n    .sort((compare1: T, compare2: T) => {\n      if (!isNumber(compare2.order) || compare1.order < compare2.order) {\n        compareResult = -1;\n      } else if (!isNumber(compare1.order) || compare1.order > compare2.order) {\n        compareResult = 1;\n      } else if (compare1.order === compare2.order) {\n        compareResult = 0;\n      }\n\n      return compareResult;\n    });\n}\n","export enum SortDirection {\n  Ascending,\n  Descending,\n}\n","import { SortDirection } from './sort-direction';\nimport { SortPropertyGetter } from './sort-property-getter';\nimport { isFunction } from '../type-check/is-function.function';\nimport { isString } from '../type-check/is-string.function';\n\n\nexport function sortAscending<T>(list: T[], ...sortProperties: SortPropertyGetter<T>[]): T[] {\n  return sort(list, SortDirection.Ascending, ...sortProperties);\n}\n\nexport function sortDescending<T>(list: T[], ...sortProperties: SortPropertyGetter<T>[]): T[] {\n  return sort(list, SortDirection.Descending, ...sortProperties);\n}\n\nexport function sort<T>(list: T[], direction: SortDirection = SortDirection.Ascending, ...sortProperties: SortPropertyGetter<T>[]): T[] {\n  list.sort((item1: T, item2: T) => {\n    let sortResponse = 0;\n\n    if (sortProperties && sortProperties.length) {\n      sortProperties.forEach(property => {\n        if (sortResponse === 0) {\n          const value1 = getPropertyValue(item1, property);\n          const value2 = getPropertyValue(item2, property);\n          sortResponse = getSortResultForString(value1, value2, direction);\n        }\n      });\n    } else {\n      sortResponse = getSortResultForString(item1, item2, direction);\n    }\n\n    return sortResponse;\n  });\n\n  return list;\n}\n\nfunction getPropertyValue<T>(item: T, property: SortPropertyGetter<T>): any {\n  return isFunction(property)\n    ? (property as (item: T) => string)(item)\n    : item[property as string];\n}\n\nfunction getSortResultForString(value1: any, value2: any, direction: SortDirection): number {\n  return direction === SortDirection.Ascending\n    ? getSortResultForStringAscending(value1, value2)\n    : getSortResultForStringDescending(value1, value2);\n}\n\nfunction ensureValue(value: any): any {\n  return value === null || value === undefined ? '' : value;\n}\n\nfunction getSortResultForStringAscending(value1: any, value2: any): number {\n  value1 = ensureValue(value1);\n  value2 = ensureValue(value2);\n  const compare1 = isString(value1) ? value1.toUpperCase() : value1;\n  const compare2 = isString(value2) ? value2.toUpperCase() : value2;\n  let compareResult = 0;\n\n  if (compare1 < compare2) {\n    compareResult = -1;\n  } else if (compare1 > compare2) {\n    compareResult = 1;\n  }\n\n  // NOTE: 0 = equals, 1 = greater, -1 less than.\n  return compareResult;\n}\n\nfunction getSortResultForStringDescending(value1: string, value2: string): number {\n  const compare1 = isString(value1) ? value1.toUpperCase() : value1;\n  const compare2 = isString(value2) ? value2.toUpperCase() : value2;\n  let compareResult = 0;\n\n  if (compare1 > compare2) {\n    compareResult = -1;\n  } else if (compare1 < compare2) {\n    compareResult = 1;\n  }\n\n  // NOTE: 0 = equals, 1 = greater, -1 less than.\n  return compareResult;\n}\n","import { isNumber } from '../type-check/is-number.function';\n\n\nexport function average(list: number[]): number {\n  list = list.filter(value => isNumber(value));\n  const total = list.reduce((current, accumulating) => current + accumulating, 0);\n\n  return total / list.length;\n}\n","export function calculateCrossProduct(x1: number, y1: number, x2: number, y2: number, testX: number, testY: number): number {\n  return (testX - x1) * (y2 - y1) - (testY - y1) * (x2 - x1);\n}\n","export function calculateRemainingSeconds(totalProcessed: number, ellapsedSeconds: number, remainingCount: number): number {\n  let estimatedSecondsRemaining = -1;\n  if (totalProcessed > 0) {\n    estimatedSecondsRemaining = ellapsedSeconds / totalProcessed * remainingCount;\n  }\n\n  return estimatedSecondsRemaining;\n}\n","export function isNumberBetweenOrEqual(testNumber: number, rangeStart: number, rangeEnd: number): boolean {\n  const minRange = Math.min(rangeStart, rangeEnd);\n  const maxRange = Math.max(rangeStart, rangeEnd);\n\n  return testNumber >= minRange && testNumber <= maxRange;\n}\n","import { isNumber } from '../type-check/is-number.function';\n\n\nexport function sum<T>(list: T[], predicate: (item: T) => number): number {\n  return list\n    .reduce((a, b) => {\n      let value = predicate(b);\n      value = isNumber(value) ? value : 0;\n\n      return a + value;\n    }, 0);\n}\n","import { Progressable } from './progressable';\nimport { sum } from './sum.function';\n\n\nexport class StatsTracker {\n  progressables: Progressable[];\n\n  constructor(...progressables: Progressable[]) {\n    this.progressables = progressables || [];\n  }\n\n  add(progressable: Progressable): this {\n    this.progressables.push(progressable);\n    return this;\n  }\n\n  getPercentComplete(): number {\n    const totalPercentComplete = sum(this.progressables, p => p.percentComplete);\n    const overallComplete = totalPercentComplete / this.progressables.length;\n\n    return Math.round(overallComplete);\n  }\n}\n","import { sum } from './sum.function';\n\n\nexport function sumValues(list: number[]): number {\n  return sum(list, value => value);\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { BaseStorage } from './base-storage.service';\n\n\n@Injectable({ providedIn: 'root' })\nexport class InMemoryStorage extends BaseStorage {\n  cache = new Map<string, string>();\n\n  get length(): number {\n    return this.cache.size;\n  }\n\n  get(key: string): string {\n    return this.cache.get(this.formatKey(key));\n  }\n\n  set(key: string, value: string): void {\n    this.cache.set(this.formatKey(key), value);\n  }\n\n  remove(key: string): void {\n    this.cache.delete(this.formatKey(key));\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n}\n","import { standardizeTokens } from './standardize-tokens.function';\nimport { TOKEN_EXPRESSION } from './tokens.constants';\n\n\nexport function extractTokens(template: string): string[] {\n  template = standardizeTokens(template);\n  return template.match(new RegExp(TOKEN_EXPRESSION));\n}\n","import { extractTokens } from './extract-tokens.function';\nimport { stripTokenBraces } from './strip-token-braces.function';\n\n\nexport function extractTokenExpressions(template: string): string[] {\n  return extractTokens(template)\n    .map(tokenDefinition => stripTokenBraces(tokenDefinition));\n}\n","import { isType } from './is-type.function';\n\n\nexport function isBoolean(val: any): boolean {\n  return isType(val, 'boolean');\n}\n","import { isArray } from './is-array.function';\n\n\nexport function isNotArray(val: any): boolean {\n  return !isArray(val);\n}\n","import { isFunction } from './is-function.function';\n\n\nexport function isNotFunction(val: any): boolean {\n  return !isFunction(val);\n}\n","import { isNumber } from './is-number.function';\n\n\nexport function isNotNumber(val: any): boolean {\n  return !isNumber(val);\n}\n","import { isNotFunction } from './is-not-function.function';\nimport { isNotArray } from './is-not-array.function';\n\n\nexport function isPrimitive(val: any): boolean {\n  return isNotFunction(val) && this.isNotObject(val) && isNotArray(val);\n}\n","export enum LengthUnit {\n  Foot = 'foot',\n  Degree = 'degree',\n  Radian = 'radian',\n  Mile = 'mile',\n  Meter = 'meter',\n  Kilometer = 'kilometer',\n}\n","import { LengthUnit } from './length-unit';\nimport { MeterToUnitConversionFactor } from './meter-to-unit-conversion-factor';\n\n\nfunction getMeterConversionFactors(): MeterToUnitConversionFactor {\n  const factors: MeterToUnitConversionFactor = {};\n  factors[LengthUnit.Foot] = 0.3048;\n  factors[LengthUnit.Kilometer] = 1000;\n  factors[LengthUnit.Meter] = 1;\n  factors[LengthUnit.Mile] = 1609.34;\n\n  return factors;\n}\n\nexport const LENGTH_UNIT_METER_CONVERSION_FACTOR = getMeterConversionFactors();\n\n","import { LengthUnit } from './length-unit';\nimport { LENGTH_UNIT_METER_CONVERSION_FACTOR } from './unit-conversion.constants';\nimport { isNotNumber } from '../type-check/is-not-number.function';\n\n\nexport function toMeters(value: number, fromUnit: LengthUnit): number {\n  const conversionFactor = LENGTH_UNIT_METER_CONVERSION_FACTOR[fromUnit];\n  if (isNotNumber(conversionFactor)) {\n    throw new Error(`Can not convert unsupported unit: '${fromUnit}'`);\n  }\n\n  return value * conversionFactor;\n}\n","import { LengthUnit } from './length-unit';\nimport { LENGTH_UNIT_METER_CONVERSION_FACTOR } from './unit-conversion.constants';\nimport { isNumber } from '../type-check/is-number.function';\n\n\nexport function fromMeters(value: number, toUnit: LengthUnit): number {\n  const conversionFactor = LENGTH_UNIT_METER_CONVERSION_FACTOR[toUnit];\n  if (!isNumber(conversionFactor)) {\n    throw new Error(`Can not convert unsupported unit: '${toUnit}'`);\n  }\n\n  return value / conversionFactor;\n}\n","import { LengthUnit } from './length-unit';\nimport { toMeters } from './to-meters.function';\nimport { fromMeters } from './from-meters.function';\n\n\nexport function convertLengthUnits(fromValue: number, fromUnit: LengthUnit, toUnit: LengthUnit): number {\n  const fromValueInMeters = toMeters(fromValue, fromUnit);\n\n  return fromMeters(fromValueInMeters, toUnit);\n}\n","import { join } from './join.function';\nimport { format } from '../formatting/format.function';\n\n\nexport function joinAndFomat(tokens: any, ...parts) {\n  const url = join(...parts);\n  return format(url, tokens);\n}\n","export const EMPTY_PARAMS_REGEX = /(&?\\w+=((?=$)|(?=&)))/g;\n","import { trimEnd } from '../formatting/trim-end.function';\n\n\nexport function stripTrailingSlash(url: string): string {\n  return trimEnd(url, '/');\n}\n","export const INVALID_GUID_ERROR_MSG = 'Invalid GUID value provided';\n","export function uuidValueReplacer(replaceValue: string): string {\n  // tslint:disable-next-line\n  const randomValue = Math.random() * 16 | 0;\n  // tslint:disable-next-line\n  const value = replaceValue === 'x' ? randomValue : (randomValue & 0x3 | 0x8);\n\n  return value.toString(16);\n}\n","import { uuidValueReplacer } from './uuid-value-replacer.function';\n\n\nexport function uuid(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'\n    .replace(new RegExp('[xy]', 'g'), uuidValueReplacer);\n}\n","import { uuid } from './uuid.function';\nimport { INVALID_GUID_ERROR_MSG } from './guid.constants';\n\n\n/**\n * Represents a Global Unique Identifier (GUID). GUID creation ported from:\n * https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n */\nexport class Guid {\n  public static readonly empty = '00000000-0000-0000-0000-000000000000';\n\n  readonly value: string;\n\n  get isEmpty(): boolean {\n    return this.value === Guid.empty;\n  }\n\n  public static newGuid(): Guid {\n    return new Guid(uuid());\n  }\n\n  public static isValid(str: string): boolean {\n    const validRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return validRegex.test(str);\n  }\n\n  constructor(value?: string) {\n    this.value = value || Guid.empty;\n\n    if (!Guid.isValid(value)) {\n      throw new Error(INVALID_GUID_ERROR_MSG);\n    }\n  }\n\n  equals(guid: Guid): boolean {\n    return guid.toString() === this.toString();\n  }\n\n  toString(): string {\n    return this.value;\n  }\n\n  toJSON(): string {\n    return this.value;\n  }\n}\n","export class ValidationResult {\n  private validationSkipped: boolean;\n\n  passed: boolean;\n  warned: boolean;\n  ran: boolean;\n  violaters: any[] = [];\n\n  get failed(): boolean {\n    return this.ran && !this.passed;\n  }\n\n  get skipped(): boolean {\n    return this.validationSkipped;\n  }\n\n  set skipped(value: boolean) {\n    this.validationSkipped = value;\n    this.ran = true;\n  }\n\n  add(inner: ValidationResult): ValidationResult {\n    if (inner.failed) {\n      this.passed = false;\n    }\n\n    if (inner.warned) {\n      this.warned = true;\n    }\n\n    return this;\n  }\n}\n","import { ValidationResult } from './validation-results';\n\n\nlet BASE_ID = 1;\n\nexport class ValidationCheck<T> {\n  id: number;\n  description: string;\n\n  private subChecks: ValidationCheck<T>[] = [];\n  private passCheck?: (value: T) => boolean;\n  private failCheck?: (value: T) => boolean;\n  private warnCheck?: (value: T) => boolean;\n  private onlyIfCheck?: (value: T) => boolean;\n\n  constructor(description: string, passCheck?: (value: any) => boolean) {\n    this.description = description;\n    this.passCheck = passCheck;\n    this.id = BASE_ID++;\n  }\n\n  hasId(id: number): ValidationCheck<T> {\n    this.id = id;\n    return this;\n  }\n\n  message(description: string): ValidationCheck<T> {\n    this.description = description;\n    return this;\n  }\n\n  pass(passCheck?: (value: T) => boolean): ValidationCheck<T> {\n    this.passCheck = passCheck;\n    return this;\n  }\n\n  fail(failCheck?: (value: T) => boolean): ValidationCheck<T> {\n    this.failCheck = failCheck;\n    return this;\n  }\n\n  warn(warnCheck?: (value: T) => boolean): ValidationCheck<T> {\n    this.warnCheck = warnCheck;\n    return this;\n  }\n\n  onlyIf(onlyIfCheck?: (value: T) => boolean): ValidationCheck<T> {\n    this.onlyIfCheck = onlyIfCheck;\n    return this;\n  }\n\n  add(...innerChecks: ValidationCheck<T>[]): ValidationCheck<T> {\n    innerChecks.forEach(inner => this.subChecks.push(inner));\n    return this;\n  }\n\n  check(target: T): ValidationResult {\n    const result = new ValidationResult();\n\n    if (this.onlyIfCheck && !this.onlyIfCheck(target)) {\n      result.skipped = true;\n      return result;\n    }\n\n    if (this.passCheck) {\n      result.passed = this.passCheck(target);\n    }\n\n    if (this.failCheck) {\n      result.passed = !this.failCheck(target);\n    }\n\n    if (this.warnCheck) {\n      result.warned = !this.warnCheck(target);\n    }\n\n    if (this.subChecks) {\n      this.subChecks.forEach(c => {\n        const innerResult = c.check(target);\n        result.add(innerResult);\n      });\n    }\n\n    return result;\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing csv-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('CsvConfig')\nexport class CsvConfig {\n}\n","export const CSV_NEW_LINE = '\\r';\nexport const CSV_SEPARATOR = ',';\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// TSS.\nimport { TssCoreModule } from '../core/core.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssCsvModule { }\n","// TSS.\nimport { CSV_NEW_LINE, CSV_SEPARATOR } from './csv.constants';\nimport { clone } from '../core/clone/clone.function';\nimport { isDefined } from '../core/type-check/is-defined.function';\n\n\nexport function toCsv(data: any[], ...properties: string[]): string {\n  const [firstItem] = data;\n  let csv = '';\n\n  if (firstItem) {\n    // NOTE: We need to clone the object here because we can't trust on Object.keys working\n    // on every object type. For example, a true \"coordinate\", object.keys doesn't work - RG.\n    properties = properties && properties.length\n      ? properties\n      : Object.keys(clone(firstItem));\n\n    const header = `${properties.join(CSV_SEPARATOR)}`;\n    const csvLines = data.map(point => {\n      const fields = properties.map(property => {\n        const value = point[property];\n        const hasPropertyValue = isDefined(value);\n        return hasPropertyValue ? value : '';\n      });\n\n      return fields.join(CSV_SEPARATOR);\n    });\n\n    csv = `${header}${CSV_NEW_LINE}${csvLines.join(CSV_NEW_LINE)}`;\n  }\n\n  return csv;\n}\n","import { Geometry } from 'geojson';\n\n\nexport function isLine(geometry: Geometry): boolean {\n  return Boolean(\n    geometry\n    && geometry.type\n    && String(geometry.type)\n      .toLowerCase()\n      .includes('linestring')\n  );\n}\n","import { isArray } from '../../core/type-check/is-array.function';\n\n\nexport function isMultiPartLine(line: number[][] | number[][][]): boolean {\n  return Boolean(\n    line\n    && line.length\n    && isArray(line[0])\n    && isArray(line[0][0])\n  );\n}\n","// 3rd Party.\nimport { MultiLineString, LineString } from 'geojson';\n\n// TSS.\nimport { isArray } from '../../core/type-check/is-array.function';\nimport { LineGeometry } from './line-geometry';\nimport { isMultiPartLine } from './is-multi-part.function';\n\n\nexport function toMultiPartPaths(line: LineGeometry): number[][][] {\n  if (isArray(line)) {\n    const lineAsArray = (line as any[]);\n    return isMultiPartLine(lineAsArray)\n      ? lineAsArray\n      : [lineAsArray];\n  } else {\n    const lineGeometry = line as LineString | MultiLineString;\n    return lineGeometry.type === 'LineString'\n      ? [lineGeometry.coordinates]\n      : lineGeometry.coordinates;\n  }\n}\n\n","// 3rd party.\nimport { Position } from 'geojson';\n\n// TSS.\nimport { LineGeometry } from './line-geometry';\nimport { toMultiPartPaths } from './to-multi-part-paths.function';\n\n\nexport function flattenLine(line: LineGeometry): Position[] {\n  const flattenedPoints: Position[] = [];\n  const multipParts: number[][][] = toMultiPartPaths(line);\n  multipParts.forEach((part: number[][]) => {\n    part.forEach((position: Position) => {\n      flattenedPoints.push(position);\n    });\n  });\n\n  return flattenedPoints;\n}\n","import { Geometry } from 'geojson';\n\n\nexport function isPoint(geometry: Geometry): boolean {\n  return geometry && geometry.type\n    ? geometry.type === 'Point' || geometry.type === 'MultiPoint'\n    : false;\n}\n","// 3rd Party.\nimport { Point, MultiPoint } from 'geojson';\n\n// TSS.\nimport { AnyPoint } from './any-point';\nimport { isArray } from '../../core/type-check/is-array.function';\n\n\nexport function isMultiPartPoint(point: AnyPoint): boolean {\n  const coordinates = isArray(point)\n    ? (point as number[])\n    : (point as Point | MultiPoint).coordinates;\n\n  return Boolean(\n    coordinates\n    && coordinates.length\n    && isArray(coordinates[0])\n  );\n}\n","// 3rd Party.\nimport { MultiPoint, Point } from 'geojson';\n\n// TSS.\nimport { AnyPoint } from './any-point';\nimport { isArray } from '../../core/type-check/is-array.function';\nimport { isMultiPartPoint } from './is-multi-part-point.function';\n\n\nexport function toMultiPartPoint(point: AnyPoint): number[][] {\n  const coordinates: number[] | number[][] = isArray(point)\n    ? (point as number[])\n    : (point as Point | MultiPoint).coordinates;\n\n  return isMultiPartPoint(coordinates)\n    ? coordinates as number[][]\n    : [coordinates as number[]];\n}\n","import { Geometry } from 'geojson';\n\n\nexport function isPolygon(geometry: Geometry): boolean {\n  return geometry && geometry.type\n    ? geometry.type === 'Polygon' || geometry.type === 'MultiPolygon'\n    : false;\n}\n","export const APPLY_EDITS_SEED_POD_FILE_EXTENSION = '.tssedits';\n","import { Injectable } from '@angular/core';\nimport { ResourceConfig } from '../core/resource.config';\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing global ESRI-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('DataSourceConfig')\nexport class DataSourceConfig extends ResourceConfig {\n  dataSourcesEndpoint = 'api/data/sources/{id}';\n  tablesEndpoint = 'api/data/sources/{id}/tables';\n  columnsEndpoint = 'api/data/sources/{id}/tables/{table}/columns/{column}/{action}';\n  tableActionEndpoint = 'api/data/sources/{id}/tables/{table}/{action}/{subaction}';\n  editDataEndpoint = 'api/data/sources/{id}/tables/{table}/edit';\n  applyEditsEndpoint = 'api/data/sources/{id}/applyedits';\n  attachmentsEndpoint = 'api/attachments/{id}/{action}';\n  skipColumnQuotes = false;\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n// 3rd Party.\nimport { Feature } from 'geojson';\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { ApplyEditsSeed } from './apply-edits-seed';\nimport { DataSourceConfig } from '../data-source-config';\nimport { ApplyEditsResult } from './apply-edits-result';\nimport { ApplyEditsPod } from './apply-edits-pod';\nimport { BaseEmptyResourceService } from '../../core/resource/base-empty-resource.service';\nimport { EMPTY_PARAM_VALUE } from '../../core/resource/resource.constants';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataSourceEditService extends BaseEmptyResourceService<ApplyEditsSeed> {\n  constructor(protected http: HttpClient, private dsConfig: DataSourceConfig) {\n    super(http, {\n      url: dsConfig.serviceUrl\n    });\n  }\n\n  applyEdits(data: ApplyEditsPod, params?: HttpParams): Observable<ApplyEditsResult> {\n    if (!data) {\n      throw new Error('Missing or invalid apply edits seed data provided');\n    } else if (!data.dataSourceId) {\n      throw new Error(`Missing 'dataSourceId' from the apply edits seed data`);\n    }\n\n    const url = this.getUrlWithId(data.dataSourceId, this.dsConfig.applyEditsEndpoint, {});\n    return this.http.post<ApplyEditsResult>(url, data, { params });\n  }\n\n  createRecord(\n    dataSourceId: string,\n    table: string,\n    feature: Feature,\n    version?: string,\n    params?: HttpParams\n  ): Observable<ApplyEditsResult> {\n    const url = this.getUrlWithId(dataSourceId, this.dsConfig.editDataEndpoint, { table });\n    params = (params || new HttpParams())\n      .set('version', version || EMPTY_PARAM_VALUE);\n\n    return this.http.post<ApplyEditsResult>(url, feature, { params });\n  }\n}\n","export enum AttachmentType {\n  Video = 'video',\n  Image = 'image',\n  Audio = 'audio',\n  Text = 'text',\n}\n","import { isArray } from '../core/type-check/is-array.function';\nimport { isObject } from '../core/type-check/is-object.function';\nimport { isNotValue } from '../core/type-check/is-not-value.function';\nimport { isValue } from '../core/type-check/is-value.function';\n\n\nexport function toFormDataString(value: {}, encodeData = true): string {\n  let stringValue;\n  if (isNotValue(value)) {\n    stringValue = '';\n  } else if (isObject(value) || isArray(value)) {\n    stringValue = JSON.stringify(value);\n  } else {\n    stringValue = value.toString();\n  }\n\n  return isValue(stringValue) && encodeData ?\n    encodeURIComponent(stringValue)\n    : stringValue;\n}\n","export const ATTACHMENT_FILE_FORM_KEY = 'file';\nexport const ATTACHMENT_DATA_FORM_KEY = 'attachment';\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n// 3rd Party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { Attachment } from './attachment';\nimport { DataSourceConfig } from '../data-source-config';\nimport { toFormDataString } from '../../http/to-form-data-string.function';\nimport { AttachmentType } from './attachment-type';\nimport { base64toBlob } from '../../core/media/base64-to-blob.function';\nimport { ATTACHMENT_FILE_FORM_KEY, ATTACHMENT_DATA_FORM_KEY } from './attachments.constants';\nimport { BaseResourceService } from '../../core/resource/base-resource.service';\nimport { isString } from '../../core/type-check/is-string.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AttachmentService extends BaseResourceService<Attachment> {\n  constructor(protected http: HttpClient, dsConfig: DataSourceConfig) {\n    super(http, {\n      url: dsConfig.serviceUrl,\n      queryEndpoint: dsConfig.attachmentsEndpoint,\n      getEndpoint: dsConfig.attachmentsEndpoint,\n      updateEndpoint: dsConfig.attachmentsEndpoint,\n      deleteEndpoint: dsConfig.attachmentsEndpoint,\n      createEndpoint: dsConfig.attachmentsEndpoint,\n    });\n  }\n\n  create(attachment: Attachment, routeTokens?: any, params?: HttpParams): Observable<Attachment> {\n    const url = this.getUrl(this.config.createEndpoint, routeTokens);\n    const formData: FormData = new FormData();\n    let fileData: string | Blob;\n\n    if (attachment.type === AttachmentType.Image && isString(attachment.data)) {\n      fileData = base64toBlob(attachment.data as string);\n    } else if (attachment.type === AttachmentType.Text) {\n      fileData = new Blob([attachment.data]);\n    } else {\n      fileData = attachment.data as Blob;\n    }\n\n    delete attachment.data;\n    formData.append(ATTACHMENT_FILE_FORM_KEY, fileData);\n    formData.append(ATTACHMENT_DATA_FORM_KEY, toFormDataString(attachment));\n\n    return this.http.post<Attachment>(url, formData, { params, reportProgress: true });\n  }\n\n  download(attachmentId: string, routeTokens?: any, params?: HttpParams) {\n    // TODO: Complete - RG.\n    // const url = this.getUrl(this.config.getEndpoint, Object.assign({ action: 'download' }, routeTokens));\n    throw new Error('Not implemented yet');\n  }\n}\n","export enum DataSourceProviderType {\n  SqlServer = 'System.Data.SqlClient',\n  SqlLite = 'System.Data.SQLite',\n  SqlCompactEdition = 'System.Data.SqlServerCe.4.0',\n  Oracle = 'Oracle.ManagedDataAccess.Client',\n  OracleDevArt = 'Devart.Data.Oracle',\n}\n","import { DataSourceProviderType } from './data-source-provider-type';\nimport { DataSourceProvider } from './data-source-provider';\n\n\nexport const SELECT_ALL_WHERE_CLAUSE = '1=1';\nexport const DATA_SOURCE_PROVIDERS: DataSourceProvider[] = [\n  { alias: 'SQL Server', provider: DataSourceProviderType.SqlServer, canUseEF: true, schedulingCompatible: true },\n  { alias: 'SQLite', provider: DataSourceProviderType.SqlLite, canUseEF: false, schedulingCompatible: true },\n  {\n    alias: 'SQL Server Compact Edition',\n    provider: DataSourceProviderType.SqlCompactEdition,\n    canUseEF: true,\n    schedulingCompatible: false\n  },\n  { alias: 'Oracle', provider: DataSourceProviderType.Oracle, canUseEF: false, schedulingCompatible: false },\n  { alias: 'Oracle', provider: DataSourceProviderType.OracleDevArt, canUseEF: true, efOnly: true, schedulingCompatible: false }\n];\n\nexport const DATA_SOURCE_EXAMPLES: { name: string, providerName: DataSourceProviderType, connectionString: string }[] = [\n  {\n    name: 'SQL Server Connection',\n    providerName: DataSourceProviderType.SqlServer,\n    connectionString: 'data source=YOUR_HOST, 1433;initial catalog=YOUR_DB;persist security info=True;'\n      + 'user id=YOUR_USER;password=YOUR_PASSWORD;MultipleActiveResultSets=true;'\n  },\n  {\n    name: 'SQL Server Compact (SQL CE) Connection',\n    providerName: DataSourceProviderType.SqlCompactEdition,\n    connectionString: 'Data Source=|DataDirectory|\\\\YOUR_DB_NAME.sdf;Max Database Size=4091'\n  },\n  {\n    name: 'SQLite',\n    providerName: DataSourceProviderType.SqlLite,\n    connectionString: 'Data Source=|DataDirectory|\\\\YOUR_DB_NAME.sqlite;Version=3'\n  },\n  {\n    name: 'Oracle Connection (without TNS names entry)',\n    providerName: DataSourceProviderType.Oracle,\n    connectionString: 'Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)'\n      + '(HOST=YOUR_HOST)(PORT=1522)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=YOUR_SERVICE)));'\n      + 'User Id=YOUR_USER;Password=YOUR_PASSWORD;'\n  },\n  {\n    name: 'Oracle Connection (with TNS names entry)',\n    providerName: DataSourceProviderType.Oracle,\n    connectionString: 'Data Source=YOUR_SOURCE;User Id=YOUR_USER;Password=YOUR_PASSWORD;'\n  },\n  {\n    name: 'Oracle Connection (without TNS names entry)',\n    providerName: DataSourceProviderType.OracleDevArt,\n    connectionString: 'Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)'\n      + '(HOST=YOUR_HOST)(PORT=1522)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=YOUR_SERVICE)));'\n      + 'User Id=YOUR_USER;Password=YOUR_PASSWORD;'\n  },\n  {\n    name: 'Oracle Connection (with TNS names entry)',\n    providerName: DataSourceProviderType.OracleDevArt,\n    connectionString: 'Data Source=YOUR_SOURCE;User Id=YOUR_USER;Password=YOUR_PASSWORD;'\n  }\n];\n","// Angular.\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { FeatureCollection } from 'geojson';\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { DataSourceConfig } from './data-source-config';\nimport { DataSource } from './data-source';\nimport { DataTableInfo } from './data-table-info';\nimport { DataColumn } from './data-column';\nimport { DataTable } from './data-table';\nimport { DataSourceSpatialExportFormat } from './data-source-spatial-export-format';\nimport { BaseResourceService } from '../core/resource/base-resource.service';\nimport { EMPTY_PARAM_VALUE } from '../core/resource/resource.constants';\nimport { isValue } from '../core/type-check/is-value.function';\nimport { SELECT_ALL_WHERE_CLAUSE } from './data-source.constants';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataSourceService extends BaseResourceService<DataSource> {\n  constructor(protected http: HttpClient, private dsConfig: DataSourceConfig) {\n    super(http, {\n      url: dsConfig.serviceUrl,\n      queryEndpoint: dsConfig.dataSourcesEndpoint,\n      getEndpoint: dsConfig.dataSourcesEndpoint,\n      updateEndpoint: dsConfig.dataSourcesEndpoint,\n      deleteEndpoint: dsConfig.dataSourcesEndpoint,\n      createEndpoint: dsConfig.dataSourcesEndpoint,\n    });\n  }\n\n  testConnection(entity: DataSource, useEntityFramework: boolean, params?: HttpParams): Observable<DataTable> {\n    throw new Error('Not implemented yet');\n  }\n\n  testExistingConnection(id: string, params?: HttpParams): Observable<DataTable> {\n    throw new Error('Not implemented yet');\n  }\n\n  // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables'\n  getTables(dataSourceId: string, params?: HttpParams): Observable<DataTableInfo[]> {\n    const url = this.getUrlWithId(dataSourceId, this.dsConfig.tablesEndpoint, {});\n    return this.http.get<DataTableInfo[]>(url, { params });\n  }\n\n  // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables/details'\n  getTableDetails(dataSourceId: string, params?: HttpParams): Observable<DataTable> {\n    const url = this.getUrlWithId(dataSourceId, this.dsConfig.tableActionEndpoint, {\n      action: 'details'\n    });\n\n    return this.http.get<DataTable>(url, { params });\n  }\n\n  // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables/:table/columns/:column/:action',\n  getColumns(dataSourceId: string, table: string, params?: HttpParams): Observable<DataColumn[]> {\n    const url = this.getUrlWithId(dataSourceId, this.dsConfig.columnsEndpoint, { table });\n\n    return this.http.get<DataColumn[]>(url, { params });\n  }\n\n  // api/data/sources/test_1051_sql/tables/RH.DIVIDED_ROADS/columns/SurveyDirection/values?unique=false\n  getColumnValues<T>(dataSourceId: string, table: string, column: string, unique: boolean = false, params?: HttpParams): Observable<T[]> {\n    const url = this.getUrlWithId(dataSourceId, this.dsConfig.columnsEndpoint, {\n      table,\n      column,\n      action: 'values'\n    });\n    params = (params || new HttpParams()).set('unique', String(unique));\n\n    return this.http.get<T[]>(url, { params });\n  }\n\n  // api/data/sources/test_1051_sql/tables/RH.DIVIDED_ROADS/columns/SurveyDirection/values?unique=true\n  getUniqueColumnValues<T>(dataSourceId: string, table: string, column: string, params?: HttpParams): Observable<T[]> {\n    return this.getColumnValues<T>(dataSourceId, table, column, true, params);\n  }\n\n  // 'http:' + this.appConfig.serviceUrl + '/api/data/sources/:id/tables/:count'\n  getRecordCount(\n    dataSourceId: string,\n    table: string,\n    whereClause: string = SELECT_ALL_WHERE_CLAUSE,\n    version?: string,\n    params?: HttpParams\n  ): Observable<number> {\n    const url = this.getUrlWithId(dataSourceId, this.dsConfig.tableActionEndpoint, {\n      table,\n      action: 'count'\n    });\n\n    params = (params || new HttpParams())\n      .set('where', whereClause)\n      .set('version', version || EMPTY_PARAM_VALUE);\n\n    return this.http.get<number>(url, { params });\n  }\n\n  // api/data/sources/test_1051_sql/tables/RH.DIVIDED_ROADS/query/details?page=1&pageSize=25&where=1%3D1\n  queryData(\n    dataSourceId: string,\n    table: string,\n    whereClause: string,\n    version?: string,\n    page?: number,\n    pageSize?: number,\n    includeGeometry?: boolean,\n    shapeField?: string,\n    params?: HttpParams\n  ): Observable<DataTable> {\n    return this.querySpatialData<DataTable>(\n      dataSourceId,\n      table,\n      whereClause,\n      version,\n      page,\n      pageSize,\n      includeGeometry,\n      shapeField,\n      'json',\n      params,\n    );\n  }\n\n  queryGeoJsonData(\n    dataSourceId: string,\n    table: string,\n    whereClause: string,\n    version?: string,\n    page?: number,\n    pageSize?: number,\n    includeGeometry?: boolean,\n    shapeField?: string,\n    params?: HttpParams\n  ): Observable<FeatureCollection> {\n    return this.querySpatialData<FeatureCollection>(\n      dataSourceId,\n      table,\n      whereClause,\n      version,\n      page,\n      pageSize,\n      includeGeometry,\n      shapeField,\n      'geojson',\n      params,\n    );\n  }\n\n  querySpatialData<T extends DataTable | FeatureCollection>(\n    dataSourceId: string,\n    table: string,\n    whereClause: string,\n    version?: string,\n    page?: number,\n    pageSize?: number,\n    includeGeometry?: boolean,\n    shapeField?: string,\n    format?: DataSourceSpatialExportFormat,\n    params?: HttpParams\n  ): Observable<T> {\n    const url = this.getUrlWithId(dataSourceId, this.dsConfig.tableActionEndpoint, {\n      table,\n      action: 'query/details'\n    });\n\n    params = (params || new HttpParams())\n      .set('where', whereClause || EMPTY_PARAM_VALUE)\n      .set('version', version || EMPTY_PARAM_VALUE)\n      .set('page', isValue(page) ? String(page) : EMPTY_PARAM_VALUE)\n      .set('pageSize', isValue(pageSize) ? String(pageSize) : EMPTY_PARAM_VALUE)\n      .set('includeGeometry', isValue(includeGeometry) ? String(includeGeometry) : EMPTY_PARAM_VALUE)\n      .set('shapeField', shapeField || EMPTY_PARAM_VALUE)\n      .set('format', format || EMPTY_PARAM_VALUE);\n\n    return this.http.get<T>(url, { params });\n  }\n}\n","import { DataColumn } from './data-column';\n\n\nexport function stripTableName(tableName: string): string {\n  return (tableName || '').split('.').slice(-1)[0];\n}\n\n\nexport interface DataTable {\n  columns: DataColumn[];\n  dataSourceId: string;\n  page: number;\n  pageSize: number;\n  primaryKeys: string[];\n  records: any[];\n  table: string;\n}\n","import { DataSource } from './data-source';\nimport { isString } from '../core/type-check/is-string.function';\n\n\nexport function getDataSourceId(dataSource: string | DataSource): string {\n  let dataSourceId;\n  if (isString(dataSource)) {\n    dataSourceId = dataSource as string;\n  } else {\n    const src = dataSource as DataSource;\n    if (src) {\n      dataSourceId = src.id;\n    }\n  }\n\n  return dataSourceId;\n}\n","import { DataSourceProviderType } from './data-source-provider-type';\n\n\nexport function isOracleProvider(providerType: DataSourceProviderType) {\n  return providerType === DataSourceProviderType.Oracle || providerType === DataSourceProviderType.OracleDevArt;\n}\n","import { STANDARDIZED_QUERY_DATE_FORMAT, ORACLE_DATE_FORMAT, DEFAULT_DATE_FORMAT } from '../core/date-time/date-time.constants';\nimport { isOracleProvider } from './is-oracle-provider.function';\nimport { DataSourceProviderType } from './data-source-provider-type';\n\n\nexport function getDateFormatForProvider(providerType: DataSourceProviderType): string {\n  if (!providerType) {\n    return STANDARDIZED_QUERY_DATE_FORMAT;\n  } else if (isOracleProvider(providerType)) {\n    return ORACLE_DATE_FORMAT;\n  } else {\n    return DEFAULT_DATE_FORMAT;\n  }\n}\n","export const SEED_POD_FILE_EXTENSION = '.tss';\n","import { hasTokens } from '../../core/tokens/has-tokens.function';\nimport { isString } from '../../core/type-check/is-string.function';\nimport { canNotBeNumber } from '../../core/type-check/can-not-be-number.function';\nimport { Orderable } from '../../core/sort/orderable';\n\n\nexport type DomainType = 'codedValue';\nexport type MergePolicyType = 'esriMPTDefaultValue' | 'esriMPTAreaWeighted' | 'esriMPTSumValues';\nexport type SplitPolicyType = 'esriSPTDefaultValue' | 'esriSPTDuplicate' | 'esriSPTGeometryRatio';\n\nexport type FieldType = 'id' | 'esriFieldTypeOID' | 'id-string'\n  | 'string' | 'esriFieldTypeString'\n  | 'number' | 'esriFieldTypeNumber'\n  | 'double' | 'esriFieldTypeDouble'\n  | 'int' | 'esriFieldTypeSmallInteger'\n  | 'date' | 'esriFieldTypeDate'\n  | 'geometry' | 'esriFieldTypeGeometry'\n  | 'xml' | 'esriFieldTypeXML'\n  | 'blob' | 'esriFieldTypeBlob'\n  | 'guid' | 'esriFieldTypeGUID'\n  | 'globalId' | 'esriFieldTypeGlobalID'\n  | 'integer' | 'esriFieldTypeInteger'\n  | 'raster' | 'esriFieldTypeRaster'\n  | 'single' | 'esriFieldTypeSingle';\n\nexport type FieldRole = 'identity'\n  | 'latitude'\n  | 'longitude'\n  | 'x'\n  | 'y'\n  | 'accuracy'\n  | 'altitude'\n  | 'altitude-accuracy'\n  | 'heading'\n  | 'speed'\n  | 'username'\n  | 'user-email'\n  | 'user-firstname'\n  | 'user-lastname'\n  | 'date-now'\n  | 'measure'\n  | 'from-measure'\n  | 'to-measure';\n\nexport type LayerFieldCodedValueCode = string | number;\n\nexport const FIELD_TYPE_OID: FieldType = 'id';\nexport const FIELD_TYPE_OID_STRING: FieldType = 'id-string';\nexport const FIELD_TYPE_STRING: FieldType = 'string';\nexport const FIELD_TYPE_NUMBER: FieldType = 'number';\nexport const FIELD_TYPE_XML: FieldType = 'xml';\nexport const FIELD_TYPE_BLOB: FieldType = 'blob';\nexport const FIELD_TYPE_DATE: FieldType = 'date';\nexport const FIELD_TYPE_DOUBLE: FieldType = 'double';\nexport const FIELD_TYPE_GUID: FieldType = 'guid';\nexport const FIELD_TYPE_GEOMETRY: FieldType = 'geometry';\nexport const FIELD_TYPE_GLOBALID: FieldType = 'globalId';\nexport const FIELD_TYPE_INTEGER: FieldType = 'integer';\nexport const FIELD_TYPE_RASTER: FieldType = 'raster';\nexport const FIELD_TYPE_SINGLE: FieldType = 'single';\nexport const FIELD_TYPE_SMALL_INTEGER: FieldType = 'int';\n\nexport const ESRI_FIELD_TYPE_OID: FieldType = 'esriFieldTypeOID';\nexport const ESRI_FIELD_TYPE_STRING: FieldType = 'esriFieldTypeString';\nexport const ESRI_FIELD_TYPE_NUMBER: FieldType = 'esriFieldTypeNumber';\nexport const ESRI_FIELD_TYPE_XML: FieldType = 'esriFieldTypeXML';\nexport const ESRI_FIELD_TYPE_BLOB: FieldType = 'esriFieldTypeBlob';\nexport const ESRI_FIELD_TYPE_DATE: FieldType = 'esriFieldTypeDate';\nexport const ESRI_FIELD_TYPE_DOUBLE: FieldType = 'esriFieldTypeDouble';\nexport const ESRI_FIELD_TYPE_GUID: FieldType = 'esriFieldTypeGUID';\nexport const ESRI_FIELD_TYPE_GEOMETRY: FieldType = 'esriFieldTypeGeometry';\nexport const ESRI_FIELD_TYPE_GLOBALID: FieldType = 'esriFieldTypeGlobalID';\nexport const ESRI_FIELD_TYPE_INTEGER: FieldType = 'esriFieldTypeInteger';\nexport const ESRI_FIELD_TYPE_RASTER: FieldType = 'esriFieldTypeRaster';\nexport const ESRI_FIELD_TYPE_SINGLE: FieldType = 'esriFieldTypeSingle';\nexport const ESRI_FIELD_TYPE_SMALL_INTEGER: FieldType = 'esriFieldTypeSmallInteger';\n\nexport const FIELD_METADATA: FieldMetadata[] = [\n  { alias: 'ID', isNumeric: true, types: [FIELD_TYPE_OID, ESRI_FIELD_TYPE_OID] },\n  { alias: 'ID', isNumeric: false, types: [FIELD_TYPE_OID_STRING] },\n  { alias: 'string', isNumeric: false, types: [FIELD_TYPE_STRING, ESRI_FIELD_TYPE_STRING] },\n  { alias: 'number', isNumeric: true, types: [FIELD_TYPE_NUMBER, ESRI_FIELD_TYPE_NUMBER] },\n  { alias: 'double', isNumeric: true, types: [FIELD_TYPE_DOUBLE, ESRI_FIELD_TYPE_DOUBLE] },\n  { alias: 'int', isNumeric: true, types: [FIELD_TYPE_INTEGER, ESRI_FIELD_TYPE_INTEGER, ESRI_FIELD_TYPE_SMALL_INTEGER] },\n  { alias: 'date', isNumeric: false, types: [FIELD_TYPE_DATE, ESRI_FIELD_TYPE_DATE] },\n  { alias: 'geometry', isNumeric: false, types: [FIELD_TYPE_GEOMETRY, ESRI_FIELD_TYPE_GEOMETRY] },\n  { alias: 'xml', isNumeric: false, types: [FIELD_TYPE_XML, ESRI_FIELD_TYPE_XML] },\n  { alias: 'blob', isNumeric: false, types: [FIELD_TYPE_BLOB, ESRI_FIELD_TYPE_BLOB] },\n  { alias: 'guid', isNumeric: false, types: [FIELD_TYPE_GUID, ESRI_FIELD_TYPE_GUID] },\n  { alias: 'globalId', isNumeric: false, types: [FIELD_TYPE_GLOBALID, ESRI_FIELD_TYPE_GLOBALID] },\n  { alias: 'integer', isNumeric: true, types: [FIELD_TYPE_INTEGER, ESRI_FIELD_TYPE_INTEGER] },\n  { alias: 'raster', isNumeric: false, types: [FIELD_TYPE_RASTER, ESRI_FIELD_TYPE_RASTER] },\n  { alias: 'single', isNumeric: false, types: [FIELD_TYPE_SINGLE, ESRI_FIELD_TYPE_SINGLE] },\n];\n\nexport interface FieldMetadata {\n  alias: string;\n  isNumeric: boolean;\n  types: FieldType[];\n}\n\nexport function isFieldGeometryType(fieldType: FieldType): boolean {\n  return fieldType === 'esriFieldTypeGeometry' || fieldType === 'geometry';\n}\n\nexport function isObjectIdType(fieldType: FieldType): boolean {\n  return fieldType === 'esriFieldTypeOID' || fieldType === 'id';\n}\n\nexport function getGeometryField(fields: LayerField[]): LayerField {\n  return (fields || []).find(f => isFieldGeometryType(f.type));\n}\n\nexport function getGeometryFieldName(fields: LayerField[]): string {\n  const field = getGeometryField(fields);\n  return field ? field.name : null;\n}\n\nexport function getIdField(fields: LayerField[]): LayerField {\n  return (fields || []).find(f => isObjectIdType(f.type));\n}\n\nexport function getIdFieldFieldName(fields: LayerField[]): string {\n  const field = getIdField(fields);\n  return field ? field.name : null;\n}\n\nexport function isFieldExpression(fieldNameOrExpression: string): boolean {\n  return hasTokens(fieldNameOrExpression);\n}\n\nexport function toFieldType(field: FieldType | LayerField): FieldType {\n  return isString(field)\n    ? field as FieldType\n    : (field as LayerField).type;\n}\n\nexport function toFieldName(field: string | LayerField): string {\n  return isString(field) ? field as string : (field as LayerField).name;\n}\n\nexport function getField(fieldName: string, fields: LayerField[]): LayerField | null {\n  return fields.find(f => f.name === fieldName) || null;\n}\n\nexport function getFieldAlias(fieldName: string, fields: LayerField[]): string | null {\n  let fieldAlias = null;\n  const field = getField(fieldName, fields);\n  if (field && field.alias) {\n    fieldAlias = field.alias;\n  }\n\n  return fieldAlias;\n}\n\nexport function isFieldNumeric(field: FieldType | LayerField): boolean {\n  const fieldType = toFieldType(field);\n  const match = FIELD_METADATA\n    .filter(f => f.isNumeric)\n    .find(f => f.types.indexOf(fieldType) > -1);\n\n  return Boolean(match);\n}\n\nexport function isFieldValueNumeric(field: FieldType | LayerField, value: any): boolean {\n  const fieldType = toFieldType(field);\n  if (isObjectIdType(fieldType) && canNotBeNumber(value)) {\n    return false;\n  }\n\n  return isFieldNumeric(field);\n}\n\nexport interface LayerFieldCodedValue {\n  name: string;\n  code: LayerFieldCodedValueCode;\n  order?: number;\n}\n\nexport interface LayerFieldDomain {\n  type: DomainType;\n  name: string;\n  codedValues: LayerFieldCodedValue[];\n  mergePolicy: MergePolicyType;\n  splitPolicy: SplitPolicyType;\n}\n\nexport interface LayerField extends Orderable {\n  name: string;\n  type: FieldType;\n  alias?: string;\n  length?: number;\n  editable?: boolean;\n  nullable?: boolean;\n  defaultValue?: any;\n  domain?: LayerFieldDomain;\n  domainName?: string;\n  hidden?: boolean;\n  order?: number;\n  role?: FieldRole;\n  placeholder?: string;\n  min?: number;\n  max?: number;\n}\n","import { LayerField, isFieldValueNumeric } from './fields/layer-field';\n\n\nexport const FIELD_QUOTE = '\"';\nexport enum CriteriaOperator {\n  Equals = '=',\n  DoesNotEqual = '<>',\n  // In = 'IN',\n  // OneOf, NotOneOf, Between, NotBetween, Contains...\n  GreaterThan = '>',\n  LessThan = '<',\n  GreaterOrEqualTo = '>=',\n  LessThanOrEqualTo = '<=',\n}\n\nexport enum TargetOperator {\n  Is = 'IS',\n  Not = 'NOT',\n  In = 'IN',\n  Like = 'LIKE',\n  Between = 'BETWEEN',\n}\n\nexport enum ValueOperator {\n  Wildcard = '%',\n  Null = 'NULL',\n}\n\nexport enum GroupingOperator {\n  OpenParenthesis = '(',\n  ClosedParenthesis = ')',\n  Parenthesis = '()',\n}\n\nexport enum CombiningOperator {\n  And = 'AND',\n  Or = 'OR',\n}\n\nexport interface WhereClauseBuilderOptions {\n  quoteFields?: boolean;\n}\n\nexport const DefaultWhereClauseBuilderOptions = {\n  quoteFields: true\n};\n\nexport class WhereClauseBuilder {\n  private readonly statements: string[] = [];\n  private readonly options: WhereClauseBuilderOptions;\n\n  constructor(options?: WhereClauseBuilderOptions) {\n    this.options = Object.assign({}, DefaultWhereClauseBuilderOptions, options);\n  }\n\n  get criteriaCount(): number {\n    return this.statements.length;\n  }\n\n  add(statement: string): this {\n    this.statements.push(statement);\n    return this;\n  }\n\n  whereEqual(field: LayerField, value: any): this {\n    return value === null\n      ? this.whereIsNull(field.name)\n      : this.where(field.name, CriteriaOperator.Equals, value, isFieldValueNumeric(field, value));\n  }\n\n  whereLike(field: string, value: any): this {\n    return this.add(`${this.formatField(field)} ${TargetOperator.Like} '%${value}%'`);\n  }\n\n  whereStartsWith(field: string, value: any): this {\n    return this.add(`${this.formatField(field)} ${TargetOperator.Like} '${value}%'`);\n  }\n\n  whereEndsWith(field: string, value: any): this {\n    return this.add(`${this.formatField(field)} ${TargetOperator.Like} '%${value}'`);\n  }\n\n  whereNotEqual(field: LayerField, value: any): this {\n    return value === null\n      ? this.whereIsNotNull(field.name)\n      : this.where(field.name, CriteriaOperator.DoesNotEqual, value, isFieldValueNumeric(field, value));\n  }\n\n  whereIsNull(field: string): this {\n    return this.add(`${this.formatField(field)} ${TargetOperator.Is} ${ValueOperator.Null}`);\n  }\n\n  whereIsNotNull(field: string): this {\n    return this.add(`${this.formatField(field)} ${TargetOperator.Is} ${TargetOperator.Not} ${ValueOperator.Null}`);\n  }\n\n  where(field: string, operator: CriteriaOperator | TargetOperator, value: any, isNumeric = false): this {\n    value = isNumeric ? value : `'${value}'`;\n    this.add(`${this.formatField(field)}${operator}${value}`);\n    return this;\n  }\n\n  whereNumeric(field: string, value: any): this {\n    this.where(field, value, true);\n    return this;\n  }\n\n  toWhereClause(): string {\n    return this.statements.join(` ${CombiningOperator.And} `);\n  }\n\n  toString(): string {\n    return this.toWhereClause();\n  }\n\n  clear() {\n    this.statements.length = 0;\n  }\n\n  protected formatField(field: string) {\n    field = field || '';\n    const addQuotes = this.options.quoteFields;\n\n    if (addQuotes) {\n      if (!field.startsWith(FIELD_QUOTE)) {\n        field = `${FIELD_QUOTE}${field}`;\n      }\n\n      if (!field.endsWith(FIELD_QUOTE)) {\n        field = `${field}${FIELD_QUOTE}`;\n      }\n    } else {\n      const quoteRegex = new RegExp(FIELD_QUOTE, 'i');\n      return field.replace(quoteRegex, '');\n    }\n\n    return field;\n  }\n}\n","import { WhereClauseBuilder, CriteriaOperator, WhereClauseBuilderOptions } from '../maps/where-clause-builder';\nimport { LrsReferenceLayer, TemporalLayer } from './lrs-layer';\nimport { NetworkLayer } from './networks/network-layer';\nimport { EventLayer } from './events/event-layer';\nimport { DataSource } from '../data-source/data-source';\nimport { toUtcDate } from '../core/date-time/conversion/to-utc-date.function';\nimport { setDateToBeginningOfDay } from '../core/date-time/set-date-to-beginning-of-date.function';\nimport { DataSourceProviderType } from '../data-source/data-source-provider-type';\nimport { getDateFormatForProvider } from '../data-source/get-date-format-for-provider.function';\nimport { format } from '../core/formatting/format.function';\nimport { formatDateForQuery } from '../core/date-time/format/format-date-for-query.function';\n\n\nexport const NO_TEMPORAL_LAYER_SUPPLIED_ERROR_MSG = 'No LRS temporal layers supplied';\nexport const NO_REFERENCE_LAYER_SUPPLIED_ERROR_MSG = 'No LRS reference layer supplied';\nexport const LRS_DATE_WHERE_CLAUSE_TEMPLATE = '(({fromDateFieldName} IS NULL OR {fromDateFieldName} <= {dateEndOfDay})'\n  + ' AND ({toDateFieldName} IS NULL OR {toDateFieldName} > {date}))';\nexport const LRS_POINT_EVENT_WHERE_CLAUSE_TEMPLATE = `({fromMeasureFieldName} between {fromMeasure} and {toMeasure})`;\nexport const LRS_LINEAR_EVENT_WHERE_CLAUSE_TEMPLATE = `(({fromMeasureFieldName} between {fromMeasure} AND {toMeasure})`\n  + ` OR ({toMeasureFieldName} between {fromMeasure} AND {toMeasure}) OR ({fromMeasureFieldName} < {fromMeasure}`\n  + ` AND {toMeasureFieldName} > {toMeasure})) AND NOT (({fromMeasureFieldName} < {fromMeasure}`\n  + ` AND {toMeasureFieldName} <= {fromMeasure}) OR ({toMeasureFieldName} > {toMeasure} AND {fromMeasureFieldName} >= {toMeasure}))`;\n\n\nexport function getLrsViewDateWhereStatement(\n  fromDateFieldName: string,\n  toDateFieldName: string,\n  dbType?: DataSourceProviderType,\n  viewDate?: Date\n): string {\n  viewDate = toUtcDate(viewDate || new Date());\n  setDateToBeginningOfDay(viewDate);\n\n  // TODO: Look into whether we need to actually use end of day or not\n  // Currently we are just setting it to same as 'date' - RG.\n  const dateFormat = getDateFormatForProvider(dbType);\n\n  return format(LRS_DATE_WHERE_CLAUSE_TEMPLATE, {\n    fromDateFieldName,\n    toDateFieldName,\n    date: formatDateForQuery(viewDate, dateFormat),\n    dateEndOfDay: formatDateForQuery(viewDate, dateFormat),\n  });\n}\n\nexport class LrsWhereClauseBuilder extends WhereClauseBuilder {\n  // private networkLayer: NetworkLayer;\n  // private eventLayer: EventLayer;\n  private temporalLayer: TemporalLayer;\n  private referenceLayer: LrsReferenceLayer;\n  private sourceDbType: DataSourceProviderType;\n\n  constructor(options?: WhereClauseBuilderOptions) {\n    super(options);\n  }\n\n  withDataSource(sourceData: DataSource): this {\n    return this.withDataProvider(sourceData.providerName);\n  }\n\n  withDataProvider(sourceDbType: DataSourceProviderType): this {\n    this.sourceDbType = sourceDbType;\n    return this;\n  }\n\n  withEventLayer(eventLayer: EventLayer): this {\n    return this\n      .withTemporalLayer(eventLayer)\n      .withReferenceLayer(eventLayer);\n  }\n\n  withReferenceLayer(referenceLayer: LrsReferenceLayer): this {\n    this.referenceLayer = referenceLayer;\n    return this;\n  }\n\n  withNetworkLayer(networkLayer: NetworkLayer): this {\n    return this.withTemporalLayer(networkLayer);\n  }\n\n  withTemporalLayer(temporalLayer: TemporalLayer): this {\n    this.temporalLayer = temporalLayer;\n    return this;\n  }\n\n  withRouteId(routeId: string | number, routeIdFieldName?: string): this {\n    return this.where(routeIdFieldName || this.referenceLayer.routeIdFieldName, CriteriaOperator.Equals, routeId);\n  }\n\n  withViewDate(viewDate?: Date, fromDateFieldName?: string, toDateFieldName?: string): this {\n    if (this.temporalLayer) {\n      fromDateFieldName = fromDateFieldName || this.temporalLayer.fromDateFieldName;\n      toDateFieldName = toDateFieldName || this.temporalLayer.toDateFieldName;\n    }\n\n    const hasDateFieldInfo = Boolean(this.temporalLayer || fromDateFieldName && toDateFieldName);\n    if (!hasDateFieldInfo) {\n      throw new Error(NO_TEMPORAL_LAYER_SUPPLIED_ERROR_MSG);\n    }\n\n    if (fromDateFieldName && toDateFieldName) {\n      const dateClause = getLrsViewDateWhereStatement(\n        this.formatField(fromDateFieldName),\n        this.formatField(toDateFieldName),\n        this.sourceDbType,\n        viewDate\n      );\n\n      this.add(dateClause);\n    }\n\n    return this;\n  }\n\n  betweenMeasures(fromMeasure: number, toMeasure: number, fromMeasureFieldName?: string, toMeasureFieldName?: string): this {\n    if (this.referenceLayer) {\n      fromMeasureFieldName = fromMeasureFieldName || this.referenceLayer.fromMeasureFieldName;\n      toMeasureFieldName = toMeasureFieldName || this.referenceLayer.toMeasureFieldName;\n    }\n\n    const hasMeasureFieldInfo = Boolean(this.referenceLayer || fromMeasureFieldName);\n    if (!hasMeasureFieldInfo) {\n      throw new Error(NO_REFERENCE_LAYER_SUPPLIED_ERROR_MSG);\n    }\n\n    const whereTemplate = toMeasureFieldName\n      ? LRS_LINEAR_EVENT_WHERE_CLAUSE_TEMPLATE\n      : LRS_POINT_EVENT_WHERE_CLAUSE_TEMPLATE;\n\n    const measureClause = format(whereTemplate, {\n      fromMeasureFieldName: this.formatField(fromMeasureFieldName),\n      toMeasureFieldName: this.formatField(toMeasureFieldName),\n      fromMeasure,\n      toMeasure,\n    });\n\n    return this.add(measureClause);\n  }\n}\n","// Angular.\nimport { HttpClient } from '@angular/common/http';\n\n// TSS.\nimport { Logger } from '../core/logging/logger.service';\nimport { LrsWhereClauseBuilder } from '../lrs/lrs-where-clause-builder';\nimport { EsriConfig } from './esri-config';\nimport { EsriMapServiceErrorResponse } from './esri-map-server-error-response';\nimport { DataSourceConfig } from '../data-source/data-source-config';\n\n\nexport abstract class BaseEsriService {\n  constructor(protected http: HttpClient, protected config: EsriConfig, protected dataConfig: DataSourceConfig, protected log: Logger) {\n  }\n\n  protected shouldUsePostMethod(payload: string | {}): boolean {\n    return this.config.arcgisQueryMethodStrategy === 'force-post'\n      || JSON.stringify(payload || '').length > this.config.arcgisMaxWhereLengthGetThreshold;\n  }\n\n  protected handleEsriResponseError<T>(response: T | EsriMapServiceErrorResponse, url: string) {\n    const error = response as EsriMapServiceErrorResponse;\n    if (error && error.error) {\n      const returnError = new Error(`Failed to query map service: ${error.error.message}`);\n      this.log.error(`Failed to execute map service request: ${url}`, returnError);\n      throw returnError;\n    }\n  }\n\n  protected getWhereBuilder(): LrsWhereClauseBuilder {\n    return new LrsWhereClauseBuilder({ quoteFields: !this.dataConfig.skipColumnQuotes });\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\nexport type ArcgisQueryMethodStrategy = 'prefer-get' | 'force-get' | 'force-post';\n\n\n/**\n * Configuration class for storing global ESRI-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('EsriConfig')\nexport class EsriConfig {\n  arcgis: { geometryUrl?: string } = {};\n  arcgisQueryMethodStrategy: ArcgisQueryMethodStrategy = 'prefer-get';\n  arcgisMaxWhereLengthGetThreshold = 3500;\n  arcgisPortalUrl: string;\n  arcgisPortalClientId: string;\n\n  get hasGeometryUrl(): boolean {\n    return Boolean(this.arcgis && this.arcgis.geometryUrl);\n  }\n\n  get arcGisGeometryUrl(): string {\n    return this.hasGeometryUrl ? this.arcgis.geometryUrl : null;\n  }\n}\n","export const SORTED_BY_MEASURE_PROPERTY_FLAG = '$$$sorted';\nexport const EARTH_RADIUS_IN_KILOMETERS = 6371;\nexport const EARTH_RADIUS_IN_METERS = 6371008.8;\nexport const WGS_84_SRID = 4326;\n","// 3rd Party.\nimport { Point } from 'geojson';\n\n// TSS.\nimport { SinglePoint } from './single-point';\nimport { isArray } from '../../core/type-check/is-array.function';\n\n\nexport function toSinglePartPointArray(point: SinglePoint): number[] {\n  return isArray(point)\n    ? (point as number[])\n    : (point as Point).coordinates;\n}\n","import { toSinglePartPointArray } from './to-single-part-point.function';\nimport { SinglePoint } from './single-point';\nimport { getLastItem } from '../../core/array/get-last-item.function';\nimport { AnyPoint } from './any-point';\nimport { SORTED_BY_MEASURE_PROPERTY_FLAG } from '../geometry.constants';\nimport { toMultiPartPoint } from './to-multi-part-point.function';\n\n\nexport function getSortResultForPoints(firstPoint: SinglePoint, secondPoint: SinglePoint): number {\n  const first: number[] = toSinglePartPointArray(firstPoint);\n  const second: number[] = toSinglePartPointArray(secondPoint);\n  const firstCoordinateMeasure: number = getLastItem(first);\n  const secondCoordinateMeasure: number = getLastItem(second);\n\n  return firstCoordinateMeasure - secondCoordinateMeasure;\n}\n\nexport function sortPointsByMeasure(points: AnyPoint, cacheSort = false): void {\n  if (points[SORTED_BY_MEASURE_PROPERTY_FLAG]) {\n    return;\n  }\n\n  const coordinates: number[][] = toMultiPartPoint(points);\n  const coordinatesHaveMeasureValue = Boolean(\n    coordinates.length\n    && coordinates[0].length > 2\n  );\n\n  if (coordinatesHaveMeasureValue) {\n    coordinates.sort(getSortResultForPoints);\n    if (cacheSort) {\n      points[SORTED_BY_MEASURE_PROPERTY_FLAG] = true;\n    }\n  }\n}\n","import { isArray } from '../../core/type-check/is-array.function';\nimport { SingleLine } from './line-geometry';\nimport { LineString } from 'geojson';\n\n\nexport function singleLineToCoordinates(line: SingleLine): number[][] {\n  return isArray(line)\n    ? line as number[][]\n    : (line as LineString).coordinates;\n}\n","import { isArray } from '../../core/type-check/is-array.function';\nimport { MultiLine } from './line-geometry';\nimport { MultiLineString } from 'geojson';\n\n\nexport function multiLineToCoordinates(line: MultiLine): number[][][] {\n  return isArray(line)\n    ? line as number[][][]\n    : (line as MultiLineString).coordinates;\n}\n","import { LineGeometry, SingleLine, MultiLine } from './line-geometry';\nimport { toMultiPartPaths } from './to-multi-part-paths.function';\nimport { singleLineToCoordinates } from './single-line-to-coordinates';\nimport { multiLineToCoordinates } from './multi-line-to-coordinates';\n\n\nexport function hasMeasureValues(line: LineGeometry): boolean {\n  const paths: number[][][] = toMultiPartPaths(line);\n  return multiLineHasMeasureValues(paths);\n}\n\nexport function singleLineHasMeasureValues(line: SingleLine): boolean {\n  const coordinates = singleLineToCoordinates(line);\n  return Boolean(\n    coordinates\n    && coordinates.length\n    && coordinates[0].length > 2\n  );\n}\n\nexport function multiLineHasMeasureValues(line: MultiLine): boolean {\n  const coordinates = multiLineToCoordinates(line);\n  return Boolean(\n    coordinates.length\n    && singleLineHasMeasureValues(coordinates[0])\n  );\n}\n","import { toMultiPartPaths } from './to-multi-part-paths.function';\nimport { LineGeometry } from './line-geometry';\nimport { SORTED_BY_MEASURE_PROPERTY_FLAG } from '../geometry.constants';\nimport { sortPointsByMeasure, getSortResultForPoints } from '../point/sort-points.function';\nimport { multiLineHasMeasureValues } from './has-measure-values.function';\n\n\nexport function sortLineByMeasure(line: LineGeometry): void {\n  if (line[SORTED_BY_MEASURE_PROPERTY_FLAG]) {\n    // There's no need to waste time sorting this geometry if it's already been done.\n    return;\n  }\n\n  const paths: number[][][] = toMultiPartPaths(line);\n  if (!multiLineHasMeasureValues(paths)) {\n    // We can not continue sorting if the coordinates do not have measure values in them.\n    return;\n  }\n\n  // We need to sort all of the inner coordinates first, and then the outer paths\n  // because we don't know the min/max of the inner coordinates until this is done.\n  paths.forEach((coordinates: number[][]) => sortPointsByMeasure(coordinates));\n\n  paths.sort((firstCoordinate: number[][], secondCoordinate: number[][]) => {\n    const firstCoordinateFirstPoint = firstCoordinate[0];\n    const secondCoordinateFirstPoint = secondCoordinate[0];\n\n    return getSortResultForPoints(firstCoordinateFirstPoint, secondCoordinateFirstPoint);\n  });\n\n  line[SORTED_BY_MEASURE_PROPERTY_FLAG] = true;\n}\n","import { SinglePoint } from './single-point';\nimport { toSinglePartPointArray } from './to-single-part-point.function';\nimport { getLastItem } from '../../core/array/get-last-item.function';\n\n\nexport function getMeasureFromPoint(point: SinglePoint): number | null {\n  const coordinate: number[] = toSinglePartPointArray(point);\n  const hasMeasureValues = Boolean(\n    coordinate\n    && coordinate.length\n    && coordinate.length > 2\n  );\n\n  return hasMeasureValues\n    ? getLastItem(coordinate)\n    : null;\n}\n","import { LineGeometry } from './line-geometry';\nimport { MeasureExtent } from './measure-extent';\nimport { toMultiPartPaths } from './to-multi-part-paths.function';\nimport { sortLineByMeasure } from './sort-line-by-measure.function';\nimport { getMeasureFromPoint } from '../point/get-measure-from-point.function';\nimport { getLastItem } from '../../core/array/get-last-item.function';\n\n\nexport function getMeasureExtentFromLine(line: LineGeometry): MeasureExtent {\n  const paths = toMultiPartPaths(line);\n  let min: number;\n  let max: number;\n  if (paths.length) {\n    sortLineByMeasure(line);\n    const firstPath: number[][] = paths[0];\n    const lastPath: number[][] = getLastItem(paths);\n    const firstCoordinate: number[] = firstPath[0];\n    const lastCoordinate: number[] = getLastItem(lastPath);\n\n    min = getMeasureFromPoint(firstCoordinate);\n    max = getMeasureFromPoint(lastCoordinate);\n  }\n\n  return {\n    min,\n    max\n  };\n}\n\n","import { getLastItem } from '../../core/array/get-last-item.function';\nimport { toMultiPartPoint } from './to-multi-part-point.function';\nimport { AnyPoint } from './any-point';\nimport { MeasureExtent } from '../line/measure-extent';\nimport { sortPointsByMeasure } from './sort-points.function';\nimport { getMeasureFromPoint } from './get-measure-from-point.function';\n\n\nexport function getMeasureExtentFromPoint(point: AnyPoint): MeasureExtent {\n  const points: number[][] = toMultiPartPoint(point);\n  const firstPoint = points[0];\n  const lastPoint = getLastItem(points);\n  let min;\n  let max;\n\n  sortPointsByMeasure(points);\n\n  min = getMeasureFromPoint(firstPoint);\n  max = getMeasureFromPoint(lastPoint);\n\n  return { min, max };\n}\n","// 3rd Party.\nimport { Geometry, MultiLineString, LineString, MultiPoint, Point } from 'geojson';\n\n// TSS.\nimport { MeasureExtent } from '../line/measure-extent';\nimport { getMeasureExtentFromLine } from '../line/get-measure-extent-from-line.function';\nimport { isLine } from './is-line.function';\nimport { getMeasureExtentFromPoint } from '../point/get-measure-extent-from-point.function';\n\n\nexport function getMeasureExtent(geometry: Geometry): MeasureExtent {\n  let extent: MeasureExtent;\n  if (isLine(geometry)) {\n    const lineGeometry = geometry as LineString | MultiLineString;\n    extent = getMeasureExtentFromLine(lineGeometry);\n  } else {\n    const point = geometry as Point | MultiPoint;\n    extent = getMeasureExtentFromPoint(point);\n  }\n\n  return extent;\n}\n","import { LayerField, LayerFieldCodedValue, LayerFieldCodedValueCode } from './layer-field';\n\n\nexport function getCodedValue(field: LayerField, value: LayerFieldCodedValueCode): LayerFieldCodedValue {\n  return field.domain\n    ? field.domain.codedValues.find(codedValue => codedValue.code === value)\n    : undefined;\n}\n","import { LayerField, LayerFieldCodedValueCode } from './layer-field';\nimport { getCodedValue } from './get-coded-value-domain.function';\n\n\nexport function getCodedValueName(field: LayerField, value: LayerFieldCodedValueCode): string {\n  const codedValue = getCodedValue(field, value);\n  return codedValue\n    ? codedValue.name\n    : undefined;\n}\n","import { LayerField, LayerFieldCodedValueCode } from './layer-field';\nimport { getCodedValueName } from './get-coded-value-name.function';\nimport { isValue } from '../../core/type-check/is-value.function';\n\n\nexport function getCodedValueNameOrDefault(field: LayerField, value: LayerFieldCodedValueCode): string {\n  const name = getCodedValueName(field, value);\n\n  return isValue(name)\n    ? name\n    : String(value);\n}\n","export const DYNAMIC_DATA_REGEX = new RegExp('^layer_(\\\\d+)_field_(\\\\w+|\\\\*):?(\\\\w+)?', 'i');\n\nexport function isDynamicDataExpression(expression: string): boolean {\n  return DYNAMIC_DATA_REGEX.test(expression);\n}\n","// 3rd Party.\nimport { Feature } from 'geojson';\n\n// TSS.\nimport { MapFeature } from '../../maps/map-feature';\n\n\nexport const ALL_FIELD_CRITERIA = '*';\n\nexport function extractFeatureDataByLayer<T>(layerId: number, field: string = '*', ...features: MapFeature[]): T[] {\n  return extractFeatureData<T>(field, ...features.filter(feature => feature.layerId === layerId));\n}\n\nexport function extractFeatureData<T>(field: string = ALL_FIELD_CRITERIA, ...features: Feature[]): T[] {\n  return features.map(feature => field === ALL_FIELD_CRITERIA\n    ? feature.properties\n    : feature.properties[field]);\n}\n","import { isDynamicDataExpression, DYNAMIC_DATA_REGEX } from './is-dynamic-data-expression.function';\nimport { extractFeatureDataByLayer } from './extract-feature-data.function';\nimport { isNumber } from 'util';\nimport { MapFeature } from '../../maps/map-feature';\nimport { sumValues } from '../../core/stats/sum-values.function';\nimport { average } from '../../core/stats/average.function';\nimport { isObject } from '../../core/type-check/is-object.function';\nimport { extractTokenExpressions } from '../../core/tokens/extract-token-expressions.function';\nimport { replaceToken } from '../../core/tokens/replace-token.function';\nimport { format } from '../../core/formatting/format.function';\n\nexport type DynamicDataSubsetKeyword = 'first' | 'last' | 'sum' | 'add' | 'avg' | 'average' | 'concat';\n\nfunction dataValuesToNumbers(dataValues: any[]): number[] {\n  return dataValues\n    .filter(value => isNumber(value))\n    .map(value => Number(value));\n}\n\nfunction evaluateSingleDynamicDataExpression(expression: string, ...features: MapFeature[]): string | '' {\n  const parsedValue = expression.match(DYNAMIC_DATA_REGEX);\n  let expressionValue: {};\n\n  if (parsedValue && parsedValue.length > 2) {\n    const layerId = Number(parsedValue[1]);\n    const field = parsedValue[2];\n    const subsetKeyword: DynamicDataSubsetKeyword = (parsedValue[3] || 'first').toLocaleLowerCase() as DynamicDataSubsetKeyword;\n    const dataValues = extractFeatureDataByLayer(layerId, field, ...features);\n\n    if (subsetKeyword === 'first') {\n      expressionValue = dataValues[0];\n    } else if (subsetKeyword === 'last') {\n      expressionValue = dataValues[dataValues.length - 1];\n    } else if (subsetKeyword === 'sum' || subsetKeyword === 'add') {\n      const numberValues = dataValuesToNumbers(dataValues);\n      expressionValue = sumValues(numberValues);\n    } else if (subsetKeyword === 'avg' || subsetKeyword === 'average') {\n      const numberValues = dataValuesToNumbers(dataValues);\n      expressionValue = average(numberValues);\n    } else if (subsetKeyword === 'concat') {\n      expressionValue = dataValues.join(', ');\n    } else if (subsetKeyword === 'min') {\n      const numberValues = dataValuesToNumbers(dataValues);\n      expressionValue = Math.min(...numberValues);\n    } else if (subsetKeyword === 'max') {\n      const numberValues = dataValuesToNumbers(dataValues);\n      expressionValue = Math.max(...numberValues);\n    } else {\n      throw new Error(`Unsupported dynamic data expression subset keyword '${subsetKeyword}'`);\n    }\n\n    return isObject(expressionValue)\n      ? JSON.stringify(expressionValue)\n      : String(expressionValue);\n  }\n}\n\nfunction evaluateDynamicDataExpression(expression: string, ...features: MapFeature[]): string | '' {\n  const tokenExpressions = extractTokenExpressions(expression);\n  let evaluationResult = expression;\n\n  tokenExpressions\n    .filter(tokenExpression => isDynamicDataExpression(tokenExpression))\n    .forEach(tokenExpression => {\n      const value = evaluateSingleDynamicDataExpression(tokenExpression, ...features);\n      evaluationResult = replaceToken(evaluationResult, tokenExpression, value);\n    });\n\n  return evaluationResult;\n}\n\nexport function evaluteFeatureDataExpression(expression: string, ...features: MapFeature[]): string {\n  const evaluationResult = evaluateDynamicDataExpression(expression, ...features);\n  const firstFeatureProperties = features && features.length\n    ? features[0].properties\n    : {};\n\n  const replaceTokens = Object.assign({}, firstFeatureProperties, {\n    RecordCount: features.length,\n  });\n\n  return format(evaluationResult, replaceTokens);\n}\n","// 3rd Party.\nimport { Feature, Geometry, GeoJsonProperties, BBox } from 'geojson';\n\n// TSS.\nimport { getMeasureExtent } from '../geometry/geometry/get-measure-extent.function';\nimport { isLine } from '../geometry/geometry/is-line.function';\nimport { getIdFieldFieldName, isFieldExpression } from './fields/layer-field';\nimport { getCodedValueNameOrDefault } from './fields/get-coded-value-name-or-default.function';\nimport { evaluteFeatureDataExpression } from '../lrs/data/evaluate-feature-data-expression.function';\nimport { FeatureClassLayer } from './feature-class-layer';\nimport { isPoint } from '../geometry/geometry/is-point.function';\nimport { isPolygon } from '../geometry/geometry/is-polygon.function';\nimport { WGS_84_SRID } from '../geometry/geometry.constants';\nimport { Cloneable } from '../core/clone/cloneable';\nimport { clone } from '../core/clone/clone.function';\n\n\nexport class MapFeature implements Feature, Cloneable<MapFeature> {\n  id?: string | number;\n  geometry: Geometry;\n  properties: GeoJsonProperties;\n  bbox: BBox;\n  type: 'Feature';\n\n  routeId: string;\n  fromMeasure: number;\n  toMeasure: number;\n  layer: FeatureClassLayer;\n  displayValue: any;\n  styleValue: any;\n  isLinear: boolean;\n  isPoint: boolean;\n  isPolygon: boolean;\n  viewDate?: Date;\n  gdbVersion?: string;\n  spatialReferenceId?: number;\n\n  get layerId(): number {\n    return this.layer ? this.layer.id : null;\n  }\n\n  get hasZ(): boolean {\n    return this.layer.hasZ;\n  }\n\n  get hasM(): boolean {\n    return this.layer.hasM;\n  }\n\n  constructor(feature: Feature, layer: FeatureClassLayer, spatialReferenceId = WGS_84_SRID) {\n    this.id = feature.id;\n    this.properties = feature.properties;\n    this.type = feature.type;\n    this.bbox = feature.bbox;\n    this.layer = layer;\n    this.spatialReferenceId = spatialReferenceId;\n\n    const idFieldName = this.getIdFieldName();\n\n    this.id = this.id || this.getValue(idFieldName);\n    this.displayValue = this.getValue(layer.displayField);\n    this.setGeometry(feature.geometry);\n  }\n\n  getIdFieldName(): string {\n    return getIdFieldFieldName(this.layer.fields);\n  }\n\n  getValue(fieldNameOrExpression: string): any {\n    return isFieldExpression(fieldNameOrExpression)\n      ? evaluteFeatureDataExpression(fieldNameOrExpression, this)\n      : this.properties && this.properties[fieldNameOrExpression];\n  }\n\n  getCodedValueNameOrDefault(fieldName: string): any {\n    const value = this.getValue(fieldName);\n    const field = this.layer.getField(fieldName);\n    return getCodedValueNameOrDefault(field, value);\n  }\n\n  setValue(fieldName: string, value: any): this {\n    this.properties[fieldName] = value;\n    return this;\n  }\n\n  setId(id: string | number): this {\n    this.id = id;\n    this.setValue(getIdFieldFieldName(this.layer.fields), id);\n    return this;\n  }\n\n  setGeometry(geometry: Geometry): this {\n    this.geometry = geometry;\n    return this.setGeometryTypeProperties();\n  }\n\n  setMeasureFromGeometry(): this {\n    if (this.geometry) {\n      const extent = getMeasureExtent(this.geometry);\n      this.fromMeasure = extent.min;\n      this.toMeasure = extent.max;\n    }\n    return this;\n  }\n\n  isSpatialReferenceWgs84(): boolean {\n    return this.spatialReferenceId === WGS_84_SRID;\n  }\n\n  clone(): MapFeature {\n    const copyFeature = clone(this.toFeature());\n    return new MapFeature(copyFeature, this.layer);\n  }\n\n  toFeature(): Feature {\n    const feature: Feature = {\n      type: 'Feature',\n      geometry: this.geometry,\n      properties: this.properties,\n      id: this.id,\n      bbox: this.bbox,\n    };\n\n    return feature;\n  }\n\n  toGeoJson(): Feature {\n    return this.toFeature();\n  }\n\n  protected setGeometryTypeProperties(): this {\n    this.isLinear = isLine(this.geometry);\n    this.isPoint = isPoint(this.geometry);\n    this.isPolygon = isPolygon(this.geometry);\n    return this;\n  }\n}\n","// 3rd Party.\nimport { Feature } from 'geojson';\n\n// TSS.\nimport { LrsLayer } from './lrs-layer';\nimport { MapFeature } from '../maps/map-feature';\nimport { isLine } from '../geometry/geometry/is-line.function';\nimport { isPoint } from '../geometry/geometry/is-point.function';\nimport { WGS_84_SRID } from '../geometry/geometry.constants';\nimport { Cloneable } from '../core/clone/cloneable';\nimport { clone } from '../core/clone/clone.function';\n\n\nexport class LrsFeature extends MapFeature implements Cloneable<LrsFeature> {\n  routeId: string;\n  fromMeasure: number;\n  toMeasure: number;\n  layer: LrsLayer;\n  displayValue: any;\n  styleValue: any;\n  viewDate?: Date;\n  gdbVersion?: string;\n\n  get layerId(): number {\n    return this.layer ? this.layer.id : null;\n  }\n\n  get fromDate(): Date {\n    return this.getValue(this.layer.fromDateFieldName);\n  }\n\n  get toDate(): Date {\n    return this.getValue(this.layer.toDateFieldName);\n  }\n\n  get isRetired(): boolean {\n    return Boolean(this.toDate);\n  }\n\n  get isActive(): boolean {\n    return !this.isRetired;\n  }\n\n  constructor(feature: Feature, layer: LrsLayer, spatialReferenceId = WGS_84_SRID) {\n    super(feature, layer, spatialReferenceId);\n\n    if (this.geometry && this.isGeometryTypeInvalid()) {\n      throw new Error(`Unsupported geometry type of ${this.geometry.type} detected.`);\n    }\n  }\n\n  setFromDate(date: Date): this {\n    return this.setValue(this.layer.fromDateFieldName, date);\n  }\n\n  setToDate(date: Date): this {\n    return this.setValue(this.layer.toDateFieldName, date);\n  }\n\n  retire(): this {\n    if (this.layer.toDateFieldName) {\n      this.setValue(this.layer.toDateFieldName, new Date());\n    }\n\n    return this;\n  }\n\n  clone(): LrsFeature {\n    const copyFeature = clone(this.toFeature());\n    return new LrsFeature(copyFeature, this.layer);\n  }\n\n  protected isGeometryTypeValid(): boolean {\n    return isLine(this.geometry) || isPoint(this.geometry);\n  }\n\n  private isGeometryTypeInvalid(): boolean {\n    return !this.isGeometryTypeValid();\n  }\n}\n","// 3rd Party.\nimport { Feature, Geometry, LineString, Point, MultiLineString } from 'geojson';\n\n// TSS.\nimport { LrsFeature } from '../lrs-feature';\nimport { EventLayer } from './event-layer';\nimport { LrsReferenceFeature } from '../lrs-reference-feature';\nimport { toFeature } from '../feature';\nimport { WGS_84_SRID } from '../../geometry/geometry.constants';\nimport { Cloneable } from '../../core/clone/cloneable';\nimport { clone } from '../../core/clone/clone.function';\n\n\nexport class EventFeature extends LrsFeature implements LrsReferenceFeature, Cloneable<EventFeature> {\n  layer: EventLayer;\n\n  constructor(feature: Feature, layer: EventLayer, spatialReferenceId = WGS_84_SRID) {\n    super(feature, layer, spatialReferenceId);\n\n    this.routeId = this.getValue(layer.routeIdFieldName);\n    this.fromMeasure = this.getValue(layer.fromMeasureFieldName);\n    this.toMeasure = this.getValue(layer.toMeasureFieldName);\n  }\n\n  static create(\n    layer: EventLayer,\n    properties: { [name: string]: any; } = {},\n    geometry: Point | LineString | MultiLineString = null\n  ): EventFeature {\n    const feature: Feature = toFeature(properties, geometry as Geometry);\n    return new EventFeature(feature, layer);\n  }\n\n  setRouteId(routeId: string): this {\n    this.routeId = routeId;\n    return this.setValue(routeId, this.layer.routeIdFieldName);\n  }\n\n  setFromMeasure(measure: number): this {\n    this.fromMeasure = measure;\n    return this.setValue(this.layer.fromMeasureFieldName, measure);\n  }\n\n  setToMeasure(measure: number): this {\n    if (!this.isLinear) {\n      throw new Error('Cannot set to measure for a point-based feature');\n    }\n\n    this.toMeasure = measure;\n    return this.setValue(this.layer.toMeasureFieldName, measure);\n  }\n\n  setMeasureExtent(fromMeasure: number, toMeasure: number): this {\n    return this\n      .setFromMeasure(fromMeasure)\n      .setToMeasure(toMeasure);\n  }\n\n  clone(): EventFeature {\n    const copyFeature = clone(this.toFeature());\n    return new EventFeature(copyFeature, this.layer);\n  }\n\n  protected setGeometryTypeProperties(): this {\n    this.isLinear = Boolean(this.layer.toMeasureFieldName);\n    this.isPoint = !this.isLinear;\n    this.isPolygon = false;\n    return this;\n  }\n}\n","// 3rd Party.\nimport { Feature, Geometry } from 'geojson';\n\n// TSS.\nimport { LrsMetadata } from './lrs-metadata';\nimport { LrsFeature } from './lrs-feature';\nimport { NetworkFeature } from './networks/network-feature';\nimport { EventLayer } from './events/event-layer';\nimport { NetworkLayer } from './networks/network-layer';\nimport { EventFeature } from './events/event-feature';\n\n\nexport function toLrsFeature(feature: Feature, layerId: number, lrsMeta: LrsMetadata) {\n  const layerInfo = lrsMeta.getLayerDetail(layerId);\n  let lrsFeature: LrsFeature;\n\n  if (layerInfo.isNetworkLayer) {\n    lrsFeature = new NetworkFeature(feature, layerInfo.layer as NetworkLayer);\n  } else if (layerInfo.isEventLayer) {\n    lrsFeature = new EventFeature(feature, layerInfo.layer as EventLayer);\n  }\n\n  return lrsFeature;\n}\n\n// Feature<G extends GeometryObject | null = Geometry, P = GeoJsonProperties> extends GeoJsonObject\nexport function toFeature(properties: { [name: string]: any; } = {}, geometry: Geometry = null): Feature {\n  return {\n    type: 'Feature',\n    geometry,\n    properties\n  };\n}\n","import { toMultiPartPaths } from './to-multi-part-paths.function';\nimport { LineGeometry } from './line-geometry';\nimport { addRange } from '../../core/array/add-range.function';\nimport { PointComparisonDetails } from '../point/point-comparison-details';\nimport { getMeasureFromPoint } from '../point/get-measure-from-point.function';\n\n\nexport function getPoint(line: LineGeometry, measure: number): number[] {\n  const pointComparisionDetails: PointComparisonDetails[] = [];\n  const paths: number[][][] = toMultiPartPaths(line);\n\n  paths.forEach((coordinates: number[][]) => {\n    const details = comparePathWithMeasure(coordinates, measure);\n    addRange(pointComparisionDetails, details);\n  });\n\n  const minPoint = pointComparisionDetails.reduce((accumulator, value) => minPointCloserToMeasure(accumulator, value, measure));\n  const maxPoint = pointComparisionDetails.reduce((accumulator, value) => maxPointCloserToMeasure(accumulator, value, measure));\n  const measureDeltaPercent = calculateMeasureDelta(minPoint.pointMeasure, maxPoint.pointMeasure, measure);\n  const x = interpolateX(minPoint.pointCoordinate, maxPoint.pointCoordinate, measureDeltaPercent);\n  const y = interpolateY(minPoint.pointCoordinate, maxPoint.pointCoordinate, measureDeltaPercent);\n\n  return [x, y, 0, measure];\n}\n\nfunction interpolateX([minX]: number[], [maxX]: number[], delta: number): number {\n  return minX + delta * (maxX - minX);\n}\n\nfunction interpolateY([, minY]: number[], [, maxY]: number[], delta: number): number {\n  return minY + delta * (maxY - minY);\n}\n\nfunction calculateMeasureDelta(minMeasure: number, maxMeasure: number, measure: number): number {\n  if (maxMeasure === minMeasure) {\n    return 0;\n  }\n\n  return (measure - minMeasure) / (maxMeasure - minMeasure);\n}\n\nfunction comparePathWithMeasure(coordinates: number[][], measureToCompare: number): PointComparisonDetails[] {\n  const pointComparisionDetailsFromPath: PointComparisonDetails[] = coordinates\n    .map(\n      (coordinate: number[], index: number) => compareCoordinateWithMeasure(coordinate, measureToCompare, index)\n    );\n\n  return pointComparisionDetailsFromPath;\n}\n\nfunction compareCoordinateWithMeasure(coordinate: number[], measureToCompare: number, index: number): PointComparisonDetails {\n  const measureFromCoordinate = getMeasureFromPoint(coordinate);\n  const pointDetails: PointComparisonDetails = {\n    pointCoordinate: coordinate,\n    distance: Math.abs(measureFromCoordinate - measureToCompare),\n    pointMeasure: measureFromCoordinate,\n    index\n  };\n\n  return pointDetails;\n}\n\nfunction minPointCloserToMeasure(\n  accumulator: PointComparisonDetails,\n  value: PointComparisonDetails,\n  measureToCompare: number\n): PointComparisonDetails {\n  const isPointCloserToMeasure = value.distance <= accumulator.distance;\n  const isPointLessThanMeasure = value.pointMeasure <= measureToCompare;\n\n  return isPointCloserToMeasure && isPointLessThanMeasure\n    ? value\n    : accumulator;\n}\n\nfunction maxPointCloserToMeasure(\n  point1: PointComparisonDetails,\n  point2: PointComparisonDetails,\n  measureToCompare: number\n): PointComparisonDetails {\n  const isPointCloserToMeasure = point1.distance <= point2.distance;\n  const isPointGreaterThanMeasure = point1.pointMeasure >= measureToCompare;\n\n  return isPointCloserToMeasure && isPointGreaterThanMeasure\n    ? point1\n    : point2;\n}\n","// 3rd Party.\nimport { MultiLineString } from 'geojson';\n\n// TSS.\nimport { LineGeometry } from './line-geometry';\nimport { toMultiPartPaths } from './to-multi-part-paths.function';\n\n\nexport function toMultiLineString(line: LineGeometry): MultiLineString {\n  const coordinates = toMultiPartPaths(line);\n\n  return {\n    bbox: null,\n    type: 'MultiLineString',\n    coordinates\n  };\n}\n","// 3rd Party.\nimport { LineString } from 'geojson';\n\n// TSS.\nimport { SingleLine } from './line-geometry';\nimport { isArray } from '../../core/type-check/is-array.function';\n\n\nexport function toLineString(line: SingleLine): LineString {\n  return isArray(line)\n    ? {\n      bbox: null,\n      type: 'LineString',\n      coordinates: line as number[][]\n    }\n    : line as LineString;\n}\n","// 3rd Party.\nimport { LineString, MultiLineString } from 'geojson';\n\n// TSS.\nimport { LineGeometry } from './line-geometry';\nimport { isArray } from '../../core/type-check/is-array.function';\nimport { isMultiPartLine } from './is-multi-part.function';\nimport { toMultiLineString } from './to-multi-line-string.function';\nimport { toLineString } from './to-line-string.function';\n\n\nexport function toLineOrMultiLineString(line: LineGeometry): LineString | MultiLineString {\n  const isCoordinatesArray = isArray(line);\n  if (!isCoordinatesArray) {\n    return line as (LineString | MultiLineString);\n  }\n\n  const coordinates = line as (number[][] | number[][][]);\n  return isMultiPartLine(coordinates)\n    ? toMultiLineString(coordinates)\n    : toLineString(coordinates as number[][]);\n}\n","export function degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n}\n","import { toSinglePartPointArray } from './to-single-part-point.function';\nimport { SinglePoint } from './single-point';\nimport { EARTH_RADIUS_IN_KILOMETERS } from '../geometry.constants';\nimport { degreesToRadians } from '../geometry/degrees-to-radians.function';\nimport { convertLengthUnits } from '../../core/units/convert-length-units.function';\nimport { LengthUnit } from '../../core/units/length-unit';\n\n\nexport function getDistanceBetweenPoints(point1: SinglePoint, point2: SinglePoint): number {\n  const coordinate1: number[] = toSinglePartPointArray(point1);\n  const coordinate2: number[] = toSinglePartPointArray(point2);\n\n  const x1: number = coordinate1[0];\n  const y1: number = coordinate1[1];\n  const x2: number = coordinate2[0];\n  const y2: number = coordinate2[1];\n\n  return getDistanceBetweenPointValues(x1, y1, x2, y2);\n}\n\nexport function getDistanceBetweenPointValues(x1: number, y1: number, x2: number, y2: number): number {\n  // NOTE: This is using the pythagorean theorem (a^2 + b^2 = c^2).\n  const xLength = Math.pow(x2 - x1, 2);\n  const yLength = Math.pow(y2 - y1, 2);\n  const distance = Math.sqrt(xLength + yLength);\n\n  if (isNaN(distance)) {\n    throw new Error(`Unable to calculate distance between points (${x1},${x2} and ${y1},${y2}). Invalid or missing data was provided`);\n  }\n\n  return distance;\n}\n\nexport function getKilometersBetweenLatLng(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  // Modified from: https://stackoverflow.com/questions/365826/calculate-distance-between-2-gps-coordinates - RG.\n  const dLat = degreesToRadians(lat2 - lat1);\n  const dLon = degreesToRadians(lng2 - lng1);\n\n  lat1 = degreesToRadians(lat1);\n  lat2 = degreesToRadians(lat2);\n\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n\n  const circumference = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  return EARTH_RADIUS_IN_KILOMETERS * circumference;\n}\n\nexport function getMetersBetweenLatLng(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  return getDistanceBetweenLatLng(lat1, lng1, lat2, lng2, LengthUnit.Meter);\n}\n\nexport function getFeetBetweenLatLng(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  return getDistanceBetweenLatLng(lat1, lng1, lat2, lng2, LengthUnit.Foot);\n}\n\nexport function getMilesBetweenLatLng(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  return getDistanceBetweenLatLng(lat1, lng1, lat2, lng2, LengthUnit.Mile);\n}\n\nexport function getDistanceBetweenLatLng(lat1: number, lon1: number, lat2: number, lon2: number, outputUnit: LengthUnit): number {\n  const distanceInKilometers = getKilometersBetweenLatLng(lat1, lon1, lat2, lon2);\n  return convertLengthUnits(distanceInKilometers, LengthUnit.Kilometer, outputUnit);\n}\n","// 3rd Party.\nimport { Feature, Point, LineString } from 'geojson';\nimport { lineString } from '@turf/helpers';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport lineSplit from '@turf/line-split';\nimport length from '@turf/length';\n\n// TSS.\nimport { LineGeometry } from './line-geometry';\nimport { SinglePoint } from '../point/single-point';\nimport { getMeasureFromPoint } from '../point/get-measure-from-point.function';\nimport { toSinglePartPointArray } from '../point/to-single-part-point.function';\nimport { isMultiPartLine } from './is-multi-part.function';\nimport { toLineOrMultiLineString } from './to-line-or-multi-line-string.function';\nimport { getDistanceBetweenPoints } from '../point/get-distance-between-points.function';\nimport { GetMeasureOptions } from './get-measure-options';\nimport { getLastItem } from '../../core/array/get-last-item.function';\n\n\nexport function getMeasure(line: LineGeometry, point: SinglePoint, options?: GetMeasureOptions): number {\n  options = Object.assign({\n    lengthUnit: 'miles',\n    coordinateSystem: 'wgs84'\n  }, options);\n\n  const closestPointFeature: Feature<Point> = nearestPointOnLine(line, point);\n  if (!closestPointFeature || !closestPointFeature.geometry) {\n    throw new Error('Unable to get measure for geometry');\n  }\n\n  const foundPointMeasure = getMeasureFromPoint(closestPointFeature.geometry);\n\n  // If the point happens to land on a verticee, then it will already have a measure.\n  if (foundPointMeasure !== null) {\n    return foundPointMeasure;\n  }\n\n  const lineGeometry = toLineOrMultiLineString(line);\n  if (isMultiPartLine(lineGeometry.coordinates)) {\n    throw new Error('MultiLineString is not supported in getMeasure function yet.');\n  }\n\n  return interpolateMeasure(lineGeometry as LineString, closestPointFeature.geometry, options);\n}\n\nfunction interpolateMeasure(line: LineString, pointOnLine: SinglePoint, options: GetMeasureOptions): number {\n  const pointCoordinates = toSinglePartPointArray(pointOnLine);\n  const pointGeometry: Point = { type: 'Point', coordinates: pointCoordinates };\n  const pointFeature: Feature<Point> = { type: 'Feature', geometry: pointGeometry, properties: {} };\n  const lineFeature: Feature<LineString> = {\n    type: 'Feature',\n    geometry: line,\n    properties: {}\n  };\n\n  const splitResult = lineSplit(lineFeature, pointFeature);\n  const firstFeature = splitResult.features[0];\n  const splitVertex = getLastItem(firstFeature.geometry.coordinates);\n  const lastVertexWithMeasureIndex = firstFeature.geometry.coordinates.length - 2;\n  const lastVertexWithMeasure = firstFeature.geometry.coordinates[lastVertexWithMeasureIndex];\n  const newLineSegment = lineString([lastVertexWithMeasure, splitVertex]);\n\n  const measureOffset = options.coordinateSystem === 'flat'\n    ? getDistanceBetweenPoints(lastVertexWithMeasure, splitVertex)\n    : length(newLineSegment, { units: options.lengthUnit as any });\n  const lastVertexMeasure = getMeasureFromPoint(lastVertexWithMeasure);\n\n  return lastVertexMeasure + measureOffset;\n}\n","// 3rd Party.\nimport { Feature, LineString, MultiLineString, Geometry } from 'geojson';\n\n// TSS.\nimport { LrsFeature } from '../lrs-feature';\nimport { NetworkLayer } from './network-layer';\nimport { toFeature } from '../feature';\nimport { SinglePoint } from '../../geometry/point/single-point';\nimport { LineGeometry } from '../../geometry/line/line-geometry';\nimport { getPoint } from '../../geometry/line/get-point.function';\nimport { getMeasure } from '../../geometry/line/get-measure.function';\nimport { WGS_84_SRID } from '../../geometry/geometry.constants';\nimport { Cloneable } from '../../core/clone/cloneable';\nimport { clone } from '../../core/clone/clone.function';\n\n\nexport class NetworkFeature extends LrsFeature implements Cloneable<NetworkFeature> {\n  layer: NetworkLayer;\n\n  constructor(feature: Feature, layer: NetworkLayer, spatialReferenceId = WGS_84_SRID) {\n    super(feature, layer, spatialReferenceId);\n\n    this.routeId = this.getValue(layer.compositeRouteIdFieldName);\n    this.displayValue = this.displayValue || this.routeId;\n    this.setMeasureFromGeometry();\n  }\n\n  static create(\n    layer: NetworkLayer,\n    properties: { [name: string]: any; } = {},\n    geometry: LineString | MultiLineString = null\n  ): NetworkFeature {\n    const feature: Feature = toFeature(properties, geometry as Geometry);\n    return new NetworkFeature(feature, layer);\n  }\n\n  getMeasure(point: SinglePoint): number {\n    return getMeasure(this.geometry as LineGeometry, point);\n  }\n\n  getPoint(measure: number): SinglePoint {\n    return getPoint(this.geometry as LineGeometry, measure);\n  }\n\n  clone(): NetworkFeature {\n    const copyFeature = clone(this.toFeature());\n    return new NetworkFeature(copyFeature, this.layer);\n  }\n}\n","// 3rd Party.\nimport { FeatureCollection, BBox } from 'geojson';\n\n// TSS>\nimport { LrsFeature } from './lrs-feature';\n\n\nexport class LrsFeatureCollection implements FeatureCollection {\n  type: 'FeatureCollection';\n  features: Array<LrsFeature>;\n  bbox?: BBox;\n\n  constructor(collection: FeatureCollection) {\n    this.bbox = collection.bbox;\n    this.type = collection.type;\n  }\n\n  static create(features: LrsFeature[], bbox?: BBox): LrsFeatureCollection {\n    return new LrsFeatureCollection({\n      type: 'FeatureCollection',\n      features,\n      bbox\n    });\n  }\n\n  toGeoJson(): FeatureCollection {\n    return {\n      type: 'FeatureCollection',\n      bbox: this.bbox,\n      features: this.features.map(feature => feature.toGeoJson())\n    };\n  }\n}\n","// 3rd Party.\nimport { FeatureCollection } from 'geojson';\n\n// TSS>\nimport { LrsFeatureCollection } from '../lrs-feature-collection';\nimport { EventFeature } from './event-feature';\nimport { EventLayer } from './event-layer';\nimport { WGS_84_SRID } from '../../geometry/geometry.constants';\n\n\nexport class EventFeatureCollection extends LrsFeatureCollection {\n  type: 'FeatureCollection';\n  features: Array<EventFeature>;\n\n  constructor(collection: FeatureCollection, layer: EventLayer, spatialReferenceId = WGS_84_SRID) {\n    super(collection);\n    this.features = collection.features\n      .map(f => new EventFeature(f, layer, spatialReferenceId));\n  }\n\n  static fromFeatures(layer: EventLayer, ...features: EventFeature[]): EventFeatureCollection {\n    return new EventFeatureCollection({\n      type: 'FeatureCollection',\n      features\n    }, layer);\n  }\n}\n","import { FeatureCollection } from 'geojson';\nimport { NetworkFeature } from './network-feature';\nimport { LrsFeatureCollection } from '../lrs-feature-collection';\nimport { NetworkLayer } from './network-layer';\nimport { WGS_84_SRID } from '../../geometry/geometry.constants';\n\n\nexport class NetworkFeatureCollection extends LrsFeatureCollection {\n  type: 'FeatureCollection';\n  features: Array<NetworkFeature>;\n\n  constructor(collection: FeatureCollection, layer: NetworkLayer, spatialReferenceId = WGS_84_SRID) {\n    super(collection);\n    this.features = collection.features\n      .map(f => new NetworkFeature(f, layer, spatialReferenceId));\n  }\n}\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { EsriQueryResponseFormat } from './esri-response-format';\nimport { toFormDataString } from '../http/to-form-data-string.function';\nimport { isValue } from '../core/type-check/is-value.function';\n\n\nexport interface AngularHttpOption {\n  headers?: HttpHeaders;\n  observe?: 'body';\n  params?: HttpParams;\n  reportProgress?: boolean;\n  responseType?: 'json';\n  withCredentials?: boolean;\n}\n\nexport function getEsriMapServiceHttOptions(params?: HttpParams, format: EsriQueryResponseFormat = 'json'): AngularHttpOption {\n  const headers = new HttpHeaders();\n  params = params || new HttpParams();\n\n  if (format) {\n    params = params.set('f', format);\n  }\n\n  headers.append('Content-Type', 'application/json');\n  headers.append('Access-Control-Allow-Origin', '*');\n\n  const httpOptions = {\n    withCredentials: true,\n    headers,\n    params,\n  };\n\n  return httpOptions;\n}\n\nexport function addParamsToHttpOptions(httpOption: AngularHttpOption, params: {}): void {\n  Object\n    .keys(params)\n    .filter(key => isValue(params[key]))\n    .forEach(key => {\n      const value = params[key];\n      httpOption.params = httpOption.params.set(key, toFormDataString(value, false));\n    });\n}\n","import { toFormDataString } from './to-form-data-string.function';\n\n\nexport function toFormData(queryParameters: {}): FormData {\n  const formData: FormData = new FormData();\n  Object.keys(queryParameters)\n    .map(key => ({\n      key,\n      value: toFormDataString(queryParameters[key])\n    }))\n    .forEach(keyValue => formData.append(keyValue.key, keyValue.value));\n\n  return formData;\n}\n","import { EsriPortalAuthRedirectOptions } from './portal/esri-portal-auth-redirect-options';\n\n\n// Server identifiers.\nexport const MAP_SERVER_SERVICE_MATCH_IDENTIFIER = /(\\/MapServer$|\\/MapServer\\/)/;\nexport const MAP_SERVER_SERVICE_IDENTIFIER = /(MapServer|MapServer\\/)$/;\nexport const FEATURE_SERVER_SERVICE_IDENTIFIER = /(FeatureServer|FeatureServer\\/)$/;\nexport const IMAGE_SERVER_SERVICE_IDENTIFIER = /(ImageServer|ImageServer\\/)$'/;\n\nexport const FEATURE_SERVER_LAYER_SERVICE_IDENTIFIER = /FeatureServer\\/(\\d+|\\d+\\/)$/;\nexport const MAP_SERVER_LAYER_SERVICE_MATCH_IDENTIFIER = /(\\/MapServer\\/(\\d+|\\d+\\/)|\\/MapServer\\/(\\d+|\\d+\\/)\\/)/;\nexport const MAP_SERVER_LAYER_SERVICE_IDENTIFIER = /MapServer\\/(\\d+|\\d+\\/)$/;\n\nexport const LRS_SERVER_SERVICE_IDENTIFIER = /(MapServer\\/exts\\/LRSServer|MapServer\\/exts\\/LRSServer\\/)$/;\nexport const LRS_SERVER_LAYERS_SERVICE_IDENTIFIER = /(MapServer\\/exts\\/LRSServer\\/layers|MapServer\\/exts\\/LRSServer\\/layers\\/)$/;\n\n// Map endpoints.\nexport const MAP_LAYERS_SERVICE_ENDPOINT = 'layers';\nexport const MAP_LAYER_SERVICE_ENDPOINT = '{layerId}';\nexport const MAP_LAYER_QUERY_SERVICE_ENDPOINT = '{layerId}/query';\nexport const MAP_LAYER_QUERY_RELATED_RECORDS_SERVICE_ENDPOINT = 'layers/{layerId}/queryRelatedRecords';\n\n// LRS endpoints.\nexport const LRS_SERVER_META_ENDPOINT = 'exts/LRSServer';\nexport const LRS_LAYERS_SERVICE_ENDPOINT = 'exts/LRSServer/layers';\nexport const LRS_SERVER_APPLY_EDITS_ENDPOINT = 'exts/LRSServer/applyEdits';\n\n// Network endpoints.\nexport const LRS_GEOMETRY_TO_MEASURE = 'exts/LRSServer/networkLayers/{layerId}/geometryToMeasure';\n\n// Portal.\nexport const PORTAL_SHARING_ENDPOINT = 'sharing';\nexport const PORTAL_OAUTH_AUTHORIZE_ENDPOINT = 'sharing/oauth2/authorize';\nexport const PORTAL_OAUTH_TOKEN_ENDPOINT = 'sharing/rest/oauth2/token';\nexport const PORTAL_GENERATE_TOKEN_ENDPOINT = 'sharing/generateToken';\n\nexport const PORTAL_REDIRECT_URL_PARAMS_BREAK_CHARACTER = '#';\nexport const DEFAULT_PORTAL_OAUTH_REDIRECT_OPTIONS: EsriPortalAuthRedirectOptions = {\n  responseType: 'token',\n  urlParamsBreak: PORTAL_REDIRECT_URL_PARAMS_BREAK_CHARACTER,\n  redirectUrl: window.location.href\n};\n","import { EsriMapServiceGeometryToMeasureOptions } from './esri-geometry-to-measure-options';\n\nexport const DEFAULT_GEOMETRY_TO_MEASURE_OPTIONS: EsriMapServiceGeometryToMeasureOptions = {\n  locations: [],\n  inSR: 4326,\n  outSR: 4326,\n  f: 'json'\n};\n","import { EsriMapServiceGeometryToMeasureOptions } from './esri-geometry-to-measure-options';\nimport { DEFAULT_GEOMETRY_TO_MEASURE_OPTIONS } from './geometry-to-measure.constants';\nimport { isDate } from 'util';\nimport { toUtcEpochDate } from '../../core/date-time/conversion/to-utc-epoch-date.function';\n\n\nexport function getGeometryToMeasureOptions(...options: EsriMapServiceGeometryToMeasureOptions[]) {\n  const mergedOption = Object.assign({}, DEFAULT_GEOMETRY_TO_MEASURE_OPTIONS);\n  (options || [])\n    .forEach(option => Object.assign(mergedOption, option));\n\n  if (isDate(mergedOption.temporalViewDate)) {\n    mergedOption.temporalViewDate = toUtcEpochDate(mergedOption.temporalViewDate as Date);\n  }\n\n  return mergedOption;\n}\n","import { EsriMapServiceQueryOptions } from './esi-map-service-query-options';\nimport { WGS_84_SRID } from '../../geometry/geometry.constants';\n\n\nexport const DEFAULT_MAP_QUERY_OPTIONS: EsriMapServiceQueryOptions = {\n  // mapServiceUrl: '',\n  // layerId: '',\n  where: '1=1',\n  text: '',\n  objectIds: '',\n  time: '',\n  geometry: '',\n  geometryType: 'esriGeometryEnvelope',\n  spatialRel: 'esriSpatialRelIntersects',\n  relationParam: '',\n  outFields: '*',\n  returnGeometry: true,\n  returnTrueCurves: false,\n  maxAllowableOffset: '',\n  geometryPrecision: '',\n  inSR: WGS_84_SRID,\n  outSR: WGS_84_SRID,\n  returnIdsOnly: false,\n  returnCountOnly: false,\n  orderByFields: '',\n  groupByFieldsForStatistics: '',\n  outStatistics: '',\n  returnZ: false,\n  returnM: true,\n  gdbVersion: '',\n  returnDistinctValues: false,\n  resultOffset: '',\n  resultRecordCount: '',\n  queryByDistance: '',\n  returnExtentsOnly: false,\n  datumTransformation: '',\n  parameterValues: '',\n  rangeValues: '',\n  f: 'geojson'\n};\n","import { DEFAULT_MAP_QUERY_OPTIONS } from './esri-query.constants';\nimport { EsriMapServiceQueryOptions } from './esi-map-service-query-options';\n\n\nexport function getMapQueryOptions(...options: EsriMapServiceQueryOptions[]) {\n  const mergedOption = Object.assign({}, DEFAULT_MAP_QUERY_OPTIONS);\n  (options || [])\n    .forEach(option => Object.assign(mergedOption, option));\n\n  return mergedOption;\n}\n","// Angular.\nimport { HttpParams } from '@angular/common/http';\n\n// TSS.\nimport { EsriMapServiceQueryOptions } from './esi-map-service-query-options';\nimport { isValue } from '../../core/type-check/is-value.function';\n\n\nexport function toHttpQueryParams(options: EsriMapServiceQueryOptions, httpParams?: HttpParams) {\n  httpParams = httpParams || new HttpParams();\n  Object.keys(options)\n    .forEach(k => {\n      const value = options[k];\n      if (isValue(value)) {\n        httpParams = httpParams.set(k, value);\n      }\n    });\n\n  return httpParams;\n}\n","import { EsriMapServiceQueryOptions } from './query/esi-map-service-query-options';\nimport { LrsLayer } from '../lrs/lrs-layer';\n\n/**\n * NOTE: There is a bug in ArcGIS Server < v10.5.0 which requies that you do not pass a\n * 'gdbVersion' if that version name is the same version that the layer is published in.\n * We need to strip that GDB version when this occurs.\n */\nexport function tryStripGdbVersion(layer: LrsLayer, options?: EsriMapServiceQueryOptions) {\n  if (layer\n    && options\n    && layer.versionName\n    && options.gdbVersion\n    && layer.versionName.toLowerCase() === options.gdbVersion.toLowerCase()) {\n    options.gdbVersion = undefined;\n  }\n}\n","import { MapLayer } from './map-layer';\nimport { isNumber } from '../core/type-check/is-number.function';\n\n\nexport function toLayerId(layer: MapLayer | number): number {\n  return isNumber(layer) ? layer as number : (layer as MapLayer).id;\n}\n","import { MapLayer } from '../maps/map-layer';\nimport { toLayerId } from '../maps/to-layer-id.function';\nimport { joinAndFomat } from '../core/url/join-and-format.function';\n\n\nexport function joinAndFomatWithLayer(layer: number | MapLayer, tokens: any, ...parts): string {\n  const layerId = toLayerId(layer);\n  return joinAndFomat(Object.assign({}, tokens, {\n    layerId\n  }), ...parts);\n}\n","import { LayerRendererSymbol } from './layer-renderer-symbol';\n\n\nexport function isClassBreakInfoEmpty(info: ClassBreakInfo): boolean {\n  return !info\n    || !info.classMaxValue\n    && !info.label\n    && !info.description\n    && !Object.keys(info.symbol || {}).length;\n}\n\n\nexport interface ClassBreakInfo {\n  symbol: LayerRendererSymbol;\n  label: string;\n  classMaxValue: number;\n  description?: string;\n}\n","import { LayerRendererSymbol } from './layer-renderer-symbol';\n\n\nexport function isUniqueValueInfoEmpty(info: UniqueValueInfo): boolean {\n  return !info\n    || !info.value\n    && !info.label\n    && !info.description\n    && !Object.keys(info.symbol || {}).length;\n}\n\nexport interface UniqueValueInfo {\n  symbol: LayerRendererSymbol;\n  value: string;\n  label: string;\n  description?: string;\n}\n","import { LayerRendererClassificationMethod, LayerRendererType } from './types';\nimport { ClassBreakInfo, isClassBreakInfoEmpty } from './class-break-info';\nimport { UniqueValueInfo, isUniqueValueInfoEmpty } from './unique-value-info';\nimport { LayerRendererSymbol } from './layer-renderer-symbol';\nimport { isArray } from '../../core/type-check/is-array.function';\nimport { rgbToHex } from '../../core/color/rgb-to-hex.function';\nimport { removeWhere } from '../../core/array/remove-where.function';\n\n\nexport const DEFAULT_UNIQUE_VALUE_INFO = null;\nexport const DEFAULT_CLASS_BREAK_VALUE_INFO = null;\nexport const DEFAULT_RENDERER_SYMBOL = {\n  type: 'esriSLS',\n  style: 'esriSLSSolid',\n  color: '#000000',\n  width: 2\n};\n\nexport function isRendererSymbolDefault(symbol: LayerRendererSymbol): boolean {\n  return Object.keys(symbol).length === Object.keys(DEFAULT_RENDERER_SYMBOL).length\n    && symbol.type === DEFAULT_RENDERER_SYMBOL.type\n    && symbol.style === DEFAULT_RENDERER_SYMBOL.style\n    && symbol.color === DEFAULT_RENDERER_SYMBOL.color\n    && symbol.width === DEFAULT_RENDERER_SYMBOL.width;\n}\n\nexport class LayerDrawingInfoRenderer {\n  type: LayerRendererType;\n  field1?: string;\n  field2?: string;\n  field3?: string;\n  fieldDelimiter?: string;\n  valueExpression?: string;\n  classificationMethod?: LayerRendererClassificationMethod;\n  minValue?: number;\n  classBreakInfos?: ClassBreakInfo[];\n  uniqueValueInfos?: UniqueValueInfo[];\n  label?: string;\n  defaultLabel?: string;\n  description?: string;\n  defaultSymbol?: LayerRendererSymbol;\n  symbol?: LayerRendererSymbol;\n\n  get isSimple(): boolean {\n    return this.type === 'simple';\n  }\n\n  get isUniqueValue(): boolean {\n    return this.type === 'uniqueValue';\n  }\n\n  get isClassBreak(): boolean {\n    return this.type === 'classBreaks';\n  }\n\n  get isEmpty(): boolean {\n    return !this.minValue\n      && !this.classBreakInfos.length\n      && !this.uniqueValueInfos.length\n      && isRendererSymbolDefault(this.symbol);\n  }\n\n  get field(): string {\n    return this.field1;\n  }\n\n  set field(value: string) {\n    this.field1 = value;\n  }\n\n  constructor(base?: LayerDrawingInfoRenderer) {\n    Object.assign(this, base);\n    this.type = this.type || 'simple';\n    this.minValue = this.minValue || 0;\n    this.classBreakInfos = this.classBreakInfos || [];\n    this.uniqueValueInfos = this.uniqueValueInfos || [];\n    this.symbol = Object.assign({}, DEFAULT_RENDERER_SYMBOL, this.symbol);\n    this.label = this.label || '';\n    this.description = this.description || '';\n\n    this.standardizeRenderSymbols();\n  }\n\n  getSymbol(value: string | number): LayerRendererSymbol | null {\n    let symbol = this.symbol || this.defaultSymbol;\n\n    if (this.isUniqueValue) {\n      const uniqueValueInfo = this.getUniqueValueInfoOrDefault(value);\n      symbol = isUniqueValueInfoEmpty(uniqueValueInfo) ? null : uniqueValueInfo.symbol;\n    } else if (this.isClassBreak) {\n      const classBreakInfo = this.getClassBreakInfoOrDefault(value);\n      symbol = isClassBreakInfoEmpty(classBreakInfo) ? null : classBreakInfo.symbol;\n    }\n\n    return symbol || this.defaultSymbol || null;\n  }\n\n  getUniqueValueInfo(value: string | number): UniqueValueInfo {\n    if (!this.uniqueValueInfos || !this.uniqueValueInfos.length) {\n      return null;\n    }\n\n    return this.uniqueValueInfos.find(info =>\n      info.value === value || String(info.value) === String(value)\n    );\n  }\n\n  getUniqueValueInfoOrDefault(value: string | number): UniqueValueInfo {\n    return this.getUniqueValueInfo(value) || DEFAULT_UNIQUE_VALUE_INFO;\n  }\n\n  getClassBreakInfo(classValue: string | number): ClassBreakInfo {\n    if (!this.classBreakInfos || !this.classBreakInfos.length) {\n      return null;\n    }\n\n    return this.classBreakInfos.find((value, index) => this.isValueInClassBreakRange(value, classValue, index));\n  }\n\n  getClassBreakInfoOrDefault(value: string | number): ClassBreakInfo {\n    return this.getClassBreakInfo(value) || DEFAULT_CLASS_BREAK_VALUE_INFO;\n  }\n\n  isValueInClassBreakRange(classBreakInfo: ClassBreakInfo, value: string | number, index: number): boolean {\n    const rangeMin = index === 0 ? this.minValue : this.classBreakInfos[index - 1].classMaxValue;\n    const rangeMax = classBreakInfo.classMaxValue;\n    return rangeMin < value && rangeMax > value;\n  }\n\n  clearEmptyInfos(): void {\n    removeWhere(this.uniqueValueInfos, info => isUniqueValueInfoEmpty(info));\n    removeWhere(this.classBreakInfos, info => isClassBreakInfoEmpty(info));\n  }\n\n  getBestRepresentativeColor(value?: string | number): string {\n    let symbol = this.defaultSymbol || this.symbol;\n    if (this.isUniqueValue && this.uniqueValueInfos.length) {\n      const foundInfo = this.getUniqueValueInfo(value);\n      symbol = foundInfo ? foundInfo.symbol : this.uniqueValueInfos[0].symbol;\n    } else if (this.isClassBreak && this.classBreakInfos.length) {\n      const foundInfo = this.getClassBreakInfo(value);\n      symbol = foundInfo ? foundInfo.symbol : this.classBreakInfos[0].symbol;\n    }\n\n    return symbol.color as string;\n  }\n\n  standardizeRenderSymbols(): void {\n    standardizeRenderSymbol(this.defaultSymbol);\n    standardizeRenderSymbol(this.symbol);\n    this.uniqueValueInfos.forEach(info => standardizeRenderSymbol(info.symbol));\n    this.classBreakInfos.forEach(info => standardizeRenderSymbol(info.symbol));\n  }\n}\n\nfunction standardizeRenderSymbol(symbol: LayerRendererSymbol): void {\n  if (!symbol) {\n    return;\n  }\n\n  if (isArray(symbol.color)) {\n    symbol.color = rgbToHex(symbol.color as [number, number, number]);\n  }\n\n  if (symbol.outline && isArray(symbol.outline.color)) {\n    symbol.outline.color = rgbToHex(symbol.outline.color as [number, number, number]);\n  }\n}\n","import { LayerDrawingInfoRenderer } from './layer-drawing-info-renderer';\nimport { LayerRendererSymbol } from './layer-renderer-symbol';\nimport { transparencyToOpacity } from '../../core/color/transparency-to-opacity.function';\n\nexport interface DrawingInfoProperties {\n  renderer?: LayerDrawingInfoRenderer;\n  transparency?: number;\n  positionRenderer?: LayerDrawingInfoRenderer;\n  labelingInfo?: any; // TODO: Add type for labeling info - RG.\n}\n\nexport class LayerDrawingInfo implements DrawingInfoProperties {\n  renderer: LayerDrawingInfoRenderer;\n  transparency: number;\n  zIndex: number | null;\n  positionRenderer: LayerDrawingInfoRenderer;\n  labelingInfo: any;\n\n  get isEmpty(): boolean {\n    return !this.transparency\n      && !this.zIndex\n      && this.renderer.isEmpty\n      && this.positionRenderer.isEmpty\n      && !Object.keys(this.labelingInfo || {}).length;\n  }\n\n  get opacity(): number {\n    return transparencyToOpacity(this.transparency);\n  }\n\n  constructor(...baseDrawingInfos: (LayerDrawingInfo | DrawingInfoProperties)[]) {\n    this.merge(...baseDrawingInfos);\n    this.transparency = this.transparency || 0;\n    this.zIndex = this.zIndex || null;\n    this.renderer = new LayerDrawingInfoRenderer(this.renderer);\n    this.positionRenderer = new LayerDrawingInfoRenderer(this.positionRenderer);\n    this.labelingInfo = this.labelingInfo || null;\n  }\n\n  merge(...targetDrawingInfos: (LayerDrawingInfo | DrawingInfoProperties)[]): this {\n    const properties = targetDrawingInfos.map(info =>\n      info && (info as LayerDrawingInfo).toProperties\n        ? (info as LayerDrawingInfo).toProperties()\n        : info\n    );\n\n    Object.assign(this, ...properties);\n    return this;\n  }\n\n  getRendererSymbol(value?: string | number): LayerRendererSymbol {\n    return this.renderer.getSymbol(value);\n  }\n\n  getPositionRendererSymbol(value?: string | number): LayerRendererSymbol {\n    return this.positionRenderer.getSymbol(value);\n  }\n\n  getBestRepresentativeColor(value?: string | number): string {\n    return this.renderer.getBestRepresentativeColor(value);\n  }\n\n  toProperties(): DrawingInfoProperties {\n    const infoProperties: DrawingInfoProperties = {};\n    if (this.labelingInfo) {\n      infoProperties.labelingInfo = this.labelingInfo;\n    }\n\n    if (this.positionRenderer && !this.positionRenderer.isEmpty) {\n      infoProperties.positionRenderer = this.positionRenderer;\n    }\n\n    if (this.renderer && !this.renderer.isEmpty) {\n      infoProperties.renderer = this.renderer;\n    }\n\n    if (this.transparency) {\n      infoProperties.transparency = this.transparency;\n    }\n\n    return infoProperties;\n  }\n}\n","import { MapLayerType, QueryType, MapLayer } from './map-layer';\nimport { LayerRelationship } from './layer-relationship';\nimport { LayerField, getFieldAlias, getField, LayerFieldDomain } from './fields/layer-field';\nimport { LayerIndex } from './layer-index';\nimport { GeometryExtent } from './geometry-extent';\nimport { LayerDrawingInfo } from './drawing/layer-drawing-info';\nimport { StyleableLayer } from './drawing/styleable-layer';\nimport { Cloneable } from '../core/clone/cloneable';\nimport { clone } from '../core/clone/clone.function';\n\n\nexport type GeometryType = 'point' | 'esriGeometryPoint'\n  | 'line' | 'esriGeometryPolyline'\n  | 'polygon' | 'esriGeometryPolygon';\n\nexport const POINT_GEOMETRY_TYPES: GeometryType[] = ['point', 'esriGeometryPoint'];\nexport const LINEAR_GEOMETRY_TYPES: GeometryType[] = ['line', 'esriGeometryPolyline'];\nexport const POLYGON_GEOMETRY_TYPES: GeometryType[] = ['polygon', 'esriGeometryPolygon'];\n\nexport function isPointGeometryType(geometryType: GeometryType) {\n  return POINT_GEOMETRY_TYPES.indexOf(geometryType) > -1;\n}\n\nexport function isLinearGeometryType(geometryType: GeometryType) {\n  return LINEAR_GEOMETRY_TYPES.indexOf(geometryType) > -1;\n}\n\nexport function isPolygonGeometryType(geometryType: GeometryType) {\n  return POLYGON_GEOMETRY_TYPES.indexOf(geometryType) > -1;\n}\n\nexport class FeatureClassLayer implements MapLayer, StyleableLayer, Cloneable<FeatureClassLayer> {\n  id: number;\n  name?: string;\n  type?: MapLayerType;\n  parentLayer?: number;\n  subLayers?: { id: string, name: string }[];\n  description?: string;\n  hasAttachments?: boolean;\n  currentVersion?: number;\n  geometryType?: GeometryType;\n  sourceSpatialReference?: { wkid: number, latestWkid?: number };\n  minScale?: number;\n  maxScale?: number;\n  extent?: GeometryExtent;\n  displayField?: string;\n  typeIdField?: string;\n  fields?: LayerField[];\n  indexes?: LayerIndex[];\n  relationships?: LayerRelationship[];\n  maxRecordCount?: number;\n  supportsStatistics?: boolean;\n  supportsAdvancedQueries?: boolean;\n  hasZ?: boolean;\n  hasM?: boolean;\n  supportedQueryFormats?: QueryType[];\n  supportsDatumTransformation?: boolean;\n  isDataVersioned?: boolean;\n  drawingInfo?: LayerDrawingInfo;\n  order?: number;\n\n  get isPoint(): boolean {\n    return isPointGeometryType(this.geometryType);\n  }\n\n  get isLinear(): boolean {\n    return isLinearGeometryType(this.geometryType);\n  }\n\n  get isPolygon(): boolean {\n    return isPolygonGeometryType(this.geometryType);\n  }\n\n  get displayFieldAlias(): string {\n    return this.getFieldAlias(this.displayField);\n  }\n\n  constructor(...sources: MapLayer[]) {\n    Object.assign(this, ...sources);\n\n    this.subLayers = this.subLayers || [];\n    this.fields = this.fields || [];\n    this.indexes = this.indexes || [];\n    this.relationships = this.relationships || [];\n    this.supportedQueryFormats = this.supportedQueryFormats || [];\n    this.drawingInfo = new LayerDrawingInfo(this.drawingInfo);\n  }\n\n  getField(fieldName: string): LayerField | null {\n    return getField(fieldName, this.fields);\n  }\n\n  getFieldAlias(fieldName: string): string | null {\n    return getFieldAlias(fieldName, this.fields);\n  }\n\n  applyFieldDomains(domains: LayerFieldDomain[]): this {\n    if (domains.length) {\n      this.fields\n        .filter(f => f.domainName)\n        .forEach(field =>\n          field.domain = domains.find(domain => domain.name === field.domainName) || field.domain\n        );\n    }\n\n    return this;\n  }\n\n  clone(): FeatureClassLayer {\n    const copy = clone(this);\n    return new FeatureClassLayer(copy);\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n// 3rd Party.\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n// TSS.\nimport { Logger } from '../core/logging/logger.service';\n\nimport { NetworkFeature } from '../lrs/networks/network-feature';\nimport { NetworkLayer } from '../lrs/networks/network-layer';\nimport { EventLayer } from '../lrs/events/event-layer';\nimport { LrsMetadata } from '../lrs/lrs-metadata';\nimport { EventFeature } from '../lrs/events/event-feature';\nimport { EventFeatureCollection } from '../lrs/events/event-feature-collection';\nimport { NetworkFeatureCollection } from '../lrs/networks/network-feature-collection';\n\nimport { MapServerMetadata } from '../maps/map-server-metadata';\nimport { CriteriaOperator } from '../maps/where-clause-builder';\n\nimport { EsriMapServiceQueryOptions } from './query/esi-map-service-query-options';\nimport { EsriConfig } from './esri-config';\nimport { getEsriMapServiceHttOptions, AngularHttpOption, addParamsToHttpOptions } from './esri-map-service-request';\nimport { EsriMapServiceErrorResponse } from './esri-map-server-error-response';\nimport { FeatureCollection } from 'geojson';\n\nimport { MapLayer } from '../maps/map-layer';\nimport { LayerField, toFieldName } from '../maps/fields/layer-field';\nimport { DataSourceConfig } from '../data-source/data-source-config';\nimport { GeodatbaseVersion } from '../maps/geodatabase-version';\nimport { LrsInfo } from '../lrs/lrs-info';\nimport { EsriApplyEditsResponse } from './lrs-server/esri-apply-edits-response';\nimport { EsriEventEdits } from './lrs-server/esri-event-edits';\nimport { toFormData } from '../http/to-form-data.function';\nimport {\n  MAP_LAYERS_SERVICE_ENDPOINT,\n  LRS_LAYERS_SERVICE_ENDPOINT,\n  MAP_LAYER_QUERY_SERVICE_ENDPOINT,\n  LRS_SERVER_META_ENDPOINT,\n  LRS_SERVER_APPLY_EDITS_ENDPOINT,\n  LRS_GEOMETRY_TO_MEASURE,\n  MAP_LAYER_SERVICE_ENDPOINT\n} from './esri.constants';\nimport { EsriMapServiceGeometryToMeasureOptions } from './geometry-to-measure/esri-geometry-to-measure-options';\nimport { getGeometryToMeasureOptions } from './geometry-to-measure/get-geometry-to-measure-options.function';\nimport { EsriGeometryToMeasureResult } from './geometry-to-measure/esri-geometry-to-measure-result';\nimport { getMapQueryOptions } from './query/get-map-query-options.function';\nimport { toHttpQueryParams } from './query/to-http-query-params.function';\nimport { tryStripGdbVersion } from './try-strip-gdb-version.function';\nimport { toLayerId } from '../maps/to-layer-id.function';\nimport { BaseEsriService } from './base-esri.service';\nimport { joinAndFomatWithLayer } from './join-and-format-with-layer.function';\nimport { join } from '../core/url/join.function';\nimport { format } from '../core/formatting/format.function';\nimport { FeatureClassLayer } from '../maps/feature-class-layer';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EsriMapServerService extends BaseEsriService {\n  constructor(http: HttpClient, config: EsriConfig, dataConfig: DataSourceConfig, log: Logger) {\n    super(http, config, dataConfig, log);\n  }\n\n  /**\n   * Retrieves the map service metadata for all layers.\n   */\n  getMapLayers(serviceUrl: string): Observable<MapServerMetadata> {\n    const url = join(serviceUrl, MAP_LAYERS_SERVICE_ENDPOINT);\n    return this.http\n      .get<MapServerMetadata>(url, getEsriMapServiceHttOptions())\n      .pipe(\n        tap((response: any) => this.handleEsriResponseError(response, serviceUrl))\n      );\n  }\n\n  /**\n   * Retrieves the map service metadata for a given layer (by it's ID).\n   */\n  getMapLayer(serviceUrl: string, layerId: number): Observable<FeatureClassLayer> {\n    const url = joinAndFomatWithLayer(layerId, {}, serviceUrl, MAP_LAYER_SERVICE_ENDPOINT);\n    return this.http\n      .get<FeatureClassLayer>(url, getEsriMapServiceHttOptions())\n      .pipe(\n        tap((response: any) => this.handleEsriResponseError(response, serviceUrl)),\n        map(mapLayerMetadata => new FeatureClassLayer(mapLayerMetadata))\n      );\n  }\n\n  /**\n   * Retrieves the LRS Layers Metadata information from the map service\n   */\n  getLrsLayers(serviceUrl: string): Observable<LrsMetadata> {\n    const url = join(serviceUrl, LRS_LAYERS_SERVICE_ENDPOINT);\n    return this.http\n      .get<LrsMetadata>(url, getEsriMapServiceHttOptions())\n      .pipe(\n        tap((response: any) => this.handleEsriResponseError(response, serviceUrl))\n      );\n  }\n\n  /**\n   * Retrieves the LRS Server Metadata information from the map service\n   */\n  getLrsServer(serviceUrl: string): Observable<LrsMetadata> {\n    const url = join(serviceUrl, LRS_SERVER_META_ENDPOINT);\n    return this.http\n      .get<LrsMetadata>(url, getEsriMapServiceHttOptions())\n      .pipe(\n        tap((response: any) => this.handleEsriResponseError(response, serviceUrl))\n      );\n  }\n\n  getVersions(serviceUrl: string, lrsId?: string): Observable<GeodatbaseVersion[]> {\n    return this.getLrsServer(serviceUrl)\n      .pipe(\n        map((metadata: LrsMetadata) => {\n          let lrs: LrsInfo = metadata ? metadata.lrs[0] : null;\n          if (!lrs) {\n            throw new Error(`No LRS infos found`);\n          }\n\n          if (lrsId) {\n            lrs = metadata.lrs.find(lrsInfo => lrsInfo.id === lrsId);\n            if (!lrs) {\n              throw new Error(`No LRS info found with ID '${lrsId}'`);\n            }\n          }\n\n          return lrs.versions;\n        })\n      );\n  }\n\n  singleGeometryToMeasure(\n    serviceUrl: string,\n    networkLayerId: number,\n    routeId: string,\n    x: number,\n    y: number,\n    viewDate?: Date,\n    inSpatialReferenceId = 4326,\n    outputSpatialReferenceId = 4326\n  ): Observable<{ m: number, x: number, y: number, z?: number }> {\n    const locations = [\n      { routeId, geometry: { x, y } }\n    ];\n\n    return this.geometryToMeasure(serviceUrl, networkLayerId, {\n      locations,\n      temporalViewDate: viewDate,\n      inSR: inSpatialReferenceId,\n      outSR: outputSpatialReferenceId,\n    })\n      .pipe(\n        map(result => {\n          const match = { m: null, x: null, y: null, z: null };\n          if (result.locations.length && result.locations[0].results.length) {\n            const [found] = result.locations[0].results;\n            match.m = found.measure;\n            match.x = found.geometry.x;\n            match.y = found.geometry.y;\n          }\n\n          return match;\n        })\n      );\n  }\n\n  geometryToMeasure(\n    serviceUrl: string,\n    networkLayerId: number,\n    options: EsriMapServiceGeometryToMeasureOptions\n  ): Observable<EsriGeometryToMeasureResult> {\n    const endpoint = format(LRS_GEOMETRY_TO_MEASURE, { layerId: networkLayerId });\n    const url = join(serviceUrl, endpoint);\n    const httpOption: AngularHttpOption = getEsriMapServiceHttOptions();\n    const serviceOptions = getGeometryToMeasureOptions(options);\n    const useGetMethod = !this.shouldUsePostMethod(serviceOptions);\n\n    if (useGetMethod) {\n      addParamsToHttpOptions(httpOption, serviceOptions);\n    }\n\n    return (\n      useGetMethod\n        ? this.http.get<EsriGeometryToMeasureResult>(url, httpOption)\n        : this.http.post<EsriGeometryToMeasureResult>(url, toFormData(serviceOptions), httpOption)\n    )\n      .pipe(\n        tap(response => this.handleEsriResponseError(response, serviceUrl)),\n      );\n  }\n\n  applyEdits(serviceUrl: string, edits: EsriEventEdits[], gdbVersion?: string): Observable<EsriApplyEditsResponse> {\n    const url = join(serviceUrl, LRS_SERVER_APPLY_EDITS_ENDPOINT);\n    const options = getEsriMapServiceHttOptions();\n    const useGetMethod = !this.shouldUsePostMethod(edits);\n\n    if (useGetMethod) {\n      options.params = options.params\n        .set('edits', JSON.stringify(edits))\n        .set('gdbVersion', gdbVersion);\n    }\n\n    return (\n      useGetMethod\n        ? this.http.get<EsriApplyEditsResponse>(url, options)\n        : this.http.post<EsriApplyEditsResponse>(url, toFormData({ edits, gdbVersion }), options)\n    )\n      .pipe(\n        tap(response => this.handleEsriResponseError(response, serviceUrl)),\n      );\n  }\n\n  getUniqueValues<T>(\n    serviceUrl: string,\n    layer: MapLayer | number,\n    field: string | LayerField,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<T[]> {\n    const fieldName = toFieldName(field);\n    const queryOptions: EsriMapServiceQueryOptions = getMapQueryOptions({\n      outFields: fieldName,\n      returnDistinctValues: true,\n      returnGeometry: false,\n    }, options);\n\n    return this.query(serviceUrl, toLayerId(layer), queryOptions)\n      .pipe(\n        map(collection => {\n          return collection.features.map(f => f.properties[fieldName]);\n        })\n      );\n  }\n\n  getQueryCount(\n    serviceUrl: string,\n    layer: MapLayer | number,\n    whereClause: string,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<number> {\n    const queryOptions: EsriMapServiceQueryOptions = getMapQueryOptions({\n      returnCountOnly: true,\n      returnGeometry: false,\n      where: whereClause,\n    }, options);\n\n    return this.query(serviceUrl, toLayerId(layer), queryOptions)\n      .pipe(\n        map((result: any) => {\n          return (result || { count: 0 }).count;\n        })\n      );\n  }\n\n  getEvent(\n    serviceUrl: string,\n    layer: EventLayer,\n    eventId: string | number,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<EventFeature> {\n    tryStripGdbVersion(layer, options);\n    throw new Error('Not implemented yet');\n  }\n\n  queryEvents(\n    serviceUrl: string,\n    layer: EventLayer,\n    routeId: string | number,\n    fromMeasure: number,\n    toMeasure: number,\n    viewDate?: Date,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<EventFeatureCollection> {\n    tryStripGdbVersion(layer, options);\n    const where = this.getWhereBuilder()\n      .withEventLayer(layer)\n      .withRouteId(routeId)\n      .withViewDate(viewDate)\n      .betweenMeasures(fromMeasure, toMeasure)\n      .toWhereClause();\n\n    const queryOptions: EsriMapServiceQueryOptions = getMapQueryOptions({ where, returnGeometry: false }, options);\n\n    return this\n      .query(serviceUrl, layer.id, queryOptions)\n      .pipe(\n        map(featureCollection => new EventFeatureCollection(featureCollection, layer))\n      );\n  }\n\n  searchEventsByText(\n    serviceUrl: string,\n    layer: EventLayer,\n    searchText: string,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<EventFeatureCollection> {\n    return this.searchByText(serviceUrl, layer.id, searchText, options)\n      .pipe(\n        tap(response => this.handleEsriResponseError(response, serviceUrl)),\n        map(featureCollection => new EventFeatureCollection(featureCollection, layer))\n      );\n  }\n\n  getRoute(\n    serviceUrl: string,\n    routeId: string | number,\n    layer: NetworkLayer,\n    viewDate?: Date,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<NetworkFeature> {\n    tryStripGdbVersion(layer, options);\n    const where = this.getWhereBuilder()\n      .withNetworkLayer(layer)\n      .where(layer.compositeRouteIdFieldName, CriteriaOperator.Equals, routeId)\n      .withViewDate(viewDate)\n      .toWhereClause();\n\n    const queryOptions: EsriMapServiceQueryOptions = getMapQueryOptions({\n      where\n    }, options);\n\n    return this\n      .query(serviceUrl, layer.id, queryOptions)\n      .pipe(\n        map(x => {\n          return x && x.features && x.features.length\n            ? new NetworkFeature(x.features[0], layer)\n            : null;\n        })\n      );\n  }\n\n  queryRoutes(\n    serviceUrl: string,\n    layer: NetworkLayer,\n    whereClause: string,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<NetworkFeatureCollection> {\n    const queryOptions: EsriMapServiceQueryOptions = getMapQueryOptions({\n      where: whereClause\n    }, options);\n\n    return this.query(serviceUrl, layer.id, queryOptions)\n      .pipe(\n        map(featureCollection => new NetworkFeatureCollection(featureCollection, layer, options.outSR))\n      );\n  }\n\n  searchRoutesByText(\n    serviceUrl: string,\n    layer: NetworkLayer,\n    searchText: string,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<NetworkFeatureCollection> {\n    return this.searchByText(serviceUrl, layer.id, searchText, options)\n      .pipe(\n        map(featureCollection => new NetworkFeatureCollection(featureCollection, layer))\n      );\n  }\n\n  searchByText(\n    serviceUrl: string,\n    layerId: number | MapLayer,\n    searchText: string,\n    options?: EsriMapServiceQueryOptions\n  ): Observable<FeatureCollection> {\n    const queryOptions: EsriMapServiceQueryOptions = getMapQueryOptions({\n      text: searchText\n    }, options);\n\n    // The where clause must be deleted because if a where clause is specified it will override the search text.\n    delete queryOptions.where;\n\n    return this.query(serviceUrl, layerId, queryOptions);\n  }\n\n  query(serviceUrl: string, layerId: number | MapLayer, options: EsriMapServiceQueryOptions): Observable<FeatureCollection> {\n    const url = joinAndFomatWithLayer(layerId, options, serviceUrl, MAP_LAYER_QUERY_SERVICE_ENDPOINT);\n    const httpOption = getEsriMapServiceHttOptions();\n    const usePostMethod = this.shouldUsePostMethod(options.where);\n\n    if (!usePostMethod) {\n      httpOption.params = toHttpQueryParams(options, httpOption.params);\n    }\n\n    const source = usePostMethod\n      ? this.http.post<FeatureCollection>(url, options, httpOption)\n      : this.http.get<FeatureCollection>(url, httpOption);\n\n    return source.pipe(\n      map((response: FeatureCollection | EsriMapServiceErrorResponse) => {\n        this.handleEsriResponseError(response, url);\n        return response as FeatureCollection;\n      })\n    );\n  }\n}\n","import { FEATURE_SERVER_SERVICE_IDENTIFIER } from '../esri.constants';\n\n\nexport function isFeatureServerServiceUrl(url: string): boolean {\n  return FEATURE_SERVER_SERVICE_IDENTIFIER.test(url);\n}\n","import { MAP_SERVER_SERVICE_IDENTIFIER } from '../esri.constants';\n\n\nexport function isMapServerServiceUrl(url: string): boolean {\n  return MAP_SERVER_SERVICE_IDENTIFIER.test(url);\n}\n","import { LRS_SERVER_SERVICE_IDENTIFIER } from '../esri.constants';\n\n\nexport function isLrsServerServiceUrl(url: string): boolean {\n  return LRS_SERVER_SERVICE_IDENTIFIER.test(url);\n}\n","import { LRS_SERVER_LAYERS_SERVICE_IDENTIFIER } from '../esri.constants';\n\n\nexport function isLrsServerLayersServiceUrl(url: string): boolean {\n  return LRS_SERVER_LAYERS_SERVICE_IDENTIFIER.test(url);\n}\n","import { PORTAL_SHARING_ENDPOINT } from '../esri.constants';\nimport { stripTrailingSlash } from '../../core/url/strip-trailing-slash.function';\n\n\nexport function getPortalUrl(portalUrlComponent: string): string {\n  const [basePortalUrl] = (portalUrlComponent || '').split(PORTAL_SHARING_ENDPOINT);\n  return basePortalUrl.endsWith('/')\n    ? stripTrailingSlash(basePortalUrl)\n    : basePortalUrl;\n}\n","import { EsriPortalAccessToken } from './esri-portal-access-token';\nimport { getPortalUrl } from './get-portal-url.function';\nimport { addSeconds } from '../../core/date-time/add/add-seconds.function';\n\n\nexport function toEsriPortalAccessToken(token: any, portalUrl?: string): EsriPortalAccessToken {\n  const portalToken: EsriPortalAccessToken = {\n    accessToken: token.access_token || token.accessToken || token.token || null,\n    refreshToken: token.refresh_token || token.refreshToken || null,\n    expiresIn: token.expires_in || token.expiresIn || 0,\n    isSecure: token.ssl || token.isSecure || false,\n    server: token.server || portalUrl || null,\n    username: token.username || null,\n    expires: token.expires || null\n  };\n\n  if (portalToken.expires) {\n    portalToken.expires = new Date(portalToken.expires);\n  }\n\n  if (portalToken.server) {\n    getPortalUrl(portalToken.server);\n  }\n\n  if (!portalToken.expires) {\n    portalToken.expires = addSeconds(portalToken.expiresIn, new Date());\n  }\n\n  return portalToken;\n}\n","import { EsriServerToken } from './esri-server-token';\n\n\nexport function toEsriServerToken(token: any): EsriServerToken {\n  const serverToken: EsriServerToken = {\n    token: token.token || null,\n    isSecure: token.ssl || token.isSecure || false,\n    expires: token.expires || 0\n  };\n\n  if (serverToken.expires) {\n    serverToken.expires = new Date(serverToken.expires);\n  }\n\n  return serverToken;\n}\n","import { PORTAL_REDIRECT_URL_PARAMS_BREAK_CHARACTER } from '../esri.constants';\n\n\nexport function removePortalAccessTokenFromHash(urlHash: string = window.location.hash): string {\n  const portalParamsStartIndex = urlHash.lastIndexOf(PORTAL_REDIRECT_URL_PARAMS_BREAK_CHARACTER);\n  const portaAaccessTokenHash = urlHash.substr(portalParamsStartIndex);\n\n  return urlHash.replace(portaAaccessTokenHash, '');\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\n// 3rd Party.\nimport { Observable } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\n// TSS.\nimport { getPortalUrl } from './get-portal-url.function';\nimport { getEsriMapServiceHttOptions, AngularHttpOption, addParamsToHttpOptions } from '../esri-map-service-request';\nimport { EsriServerToken } from '../esri-server-token';\nimport { EsriConfig } from '../esri-config';\nimport { DataSourceConfig } from '../../data-source/data-source-config';\nimport { BaseEsriService } from '../base-esri.service';\nimport { Logger } from '../../core/logging/logger.service';\nimport { EsriPortalAccessToken } from './esri-portal-access-token';\nimport { toFormData } from '../../http/to-form-data.function';\nimport { toEsriPortalAccessToken } from './to-esri-portal-access-token.function';\nimport { toEsriServerToken } from '../to-esri-server-token.function';\nimport {\n  PORTAL_GENERATE_TOKEN_ENDPOINT,\n  PORTAL_OAUTH_TOKEN_ENDPOINT\n} from '../esri.constants';\nimport { removePortalAccessTokenFromHash } from './remove-portal-access-token-from-hash.function';\nimport { join } from '../../core/url/join.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EsriPortalService extends BaseEsriService {\n  constructor(http: HttpClient, config: EsriConfig, dataConfig: DataSourceConfig, log: Logger) {\n    super(http, config, dataConfig, log);\n  }\n\n  getTokenByCode(portalUrl: string, clientId: string, code: string, bodyData?: {}, params?: HttpParams): Observable<EsriPortalAccessToken> {\n    const data = Object.assign({\n      client_id: clientId,\n      code,\n      redirect_uri: removePortalAccessTokenFromHash(window.location.href),\n      grant_type: 'authorization_code'\n    }, bodyData);\n    const formData = toFormData(data);\n\n    return this.doPost(portalUrl, PORTAL_OAUTH_TOKEN_ENDPOINT, formData, params)\n      .pipe(\n        map(rawToken => toEsriPortalAccessToken(rawToken, portalUrl))\n      );\n  }\n\n  refreshToken(\n    portalUrl: string,\n    clientId: string,\n    refreshToken: string,\n    bodyData?: {},\n    params?: HttpParams\n  ): Observable<EsriPortalAccessToken> {\n    const data = Object.assign({\n      client_id: clientId,\n      refresh_token: refreshToken,\n      grant_type: 'refresh_token'\n    }, bodyData);\n    const formData = toFormData(data);\n\n    return this.doPost(portalUrl, PORTAL_OAUTH_TOKEN_ENDPOINT, formData, params)\n      .pipe(\n        map(rawToken => toEsriPortalAccessToken(rawToken, portalUrl))\n      );\n  }\n\n  getServerToken(portalUrl: string, portalAccessToken: string, serverUrl: string, params?: HttpParams): Observable<EsriServerToken> {\n    const additionalParams = {\n      request: 'getToken',\n      serverUrl,\n      token: portalAccessToken,\n      referer: window.location.host\n    };\n\n    return this.doGet(portalUrl, PORTAL_GENERATE_TOKEN_ENDPOINT, additionalParams, params)\n      .pipe(\n        map(token => toEsriServerToken(token))\n      );\n  }\n\n  protected doGet<T>(portalUrl: string, endpoint: string, queryParams: {}, params?: HttpParams): Observable<T> {\n    const basePortalUrl = getPortalUrl(portalUrl);\n    const url = join(basePortalUrl, endpoint);\n    const httpOption: AngularHttpOption = getEsriMapServiceHttOptions(params);\n\n    addParamsToHttpOptions(httpOption, queryParams);\n    return this.http\n      .get<T>(url, httpOption)\n      .pipe(\n        tap((response: T) => this.handleEsriResponseError(response, url))\n      );\n  }\n\n  protected doPost<T>(portalUrl: string, endpoint: string, formData: FormData, params?: HttpParams): Observable<T> {\n    const basePortalUrl = getPortalUrl(portalUrl);\n    const url = join(basePortalUrl, endpoint);\n    const httpOption: AngularHttpOption = getEsriMapServiceHttOptions(params);\n\n    return this.http\n      .post<T>(url, formData, httpOption)\n      .pipe(\n        tap((response: T) => this.handleEsriResponseError(response, url))\n      );\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing export-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('ExportConfig')\nexport class ExportConfig {\n}\n","export const DEFAULT_EXPORT_GEOJSON_FILE_NAME = 'export.geojson';\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// TSS.\nimport { TssCoreModule } from '../core/core.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssExportModule { }\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd party.\nimport { FeatureCollection, Feature } from 'geojson';\n\n\n// TSS.\nimport { JSON_MIME_TYPE, TEXT_MIME_TYPE } from '../core/media/media.constants';\nimport { base64MimeType } from '../core/media/base64-mime-type.function';\nimport { base64toBlob } from '../core/media/base64-to-blob.function';\nimport { DEFAULT_EXPORT_GEOJSON_FILE_NAME } from './export.constants';\nimport { format } from '../core/formatting/format.function';\nimport { isString } from '../core/type-check/is-string.function';\nimport { formatDate } from '../core/date-time/format/format-date.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExportService {\n  constructor() {\n  }\n\n  replaceTokens(fileNameTemplate: string, tokens: any = {}, removeEmptyTokens?: boolean): string {\n    return format(fileNameTemplate, Object.assign(\n      this.getReplaceTokens(),\n      tokens\n    ), removeEmptyTokens);\n  }\n\n  exportFeatureCollection(fileNameTemplate = DEFAULT_EXPORT_GEOJSON_FILE_NAME, ...features: Feature[]): this {\n    const fileName = this.replaceTokens(fileNameTemplate, {\n      featureLength: features.length,\n    });\n\n    const featureCollection: FeatureCollection = {\n      type: 'FeatureCollection',\n      features\n    };\n\n    return this.exportFile(this.stringify(featureCollection), fileName, JSON_MIME_TYPE);\n  }\n\n  exportFeature(fileNameTemplate = DEFAULT_EXPORT_GEOJSON_FILE_NAME, feature: Feature): this {\n    return this.exportFile(this.stringify(feature), fileNameTemplate, JSON_MIME_TYPE);\n  }\n\n  stringify(data: any): string {\n    return JSON.stringify(data, (key, value) => {\n      return key.startsWith('$$') ? undefined : value;\n    }, 2);\n  }\n\n  exportJson(data: any, fileNameTemplate: string): this {\n    const jsonString: string = isString(data)\n      ? data as string\n      : this.stringify(data);\n\n    return this.exportFile(jsonString, fileNameTemplate, JSON_MIME_TYPE);\n  }\n\n  exportBase64(base64Data: string, fileNameTemplate: string, contentType?: string): this {\n    const fileName = this.replaceTokens(fileNameTemplate);\n    contentType = contentType || base64MimeType(base64Data);\n    const blob = base64toBlob(base64Data, contentType);\n\n    return this.exportFromUrl(URL.createObjectURL(blob), fileName);\n  }\n\n  exportFile(data: any, fileNameTemplate: string, contentType = TEXT_MIME_TYPE): this {\n    const blob = new Blob([data], { type: contentType });\n    const fileName = this.replaceTokens(fileNameTemplate);\n\n    return this.exportBlob(blob, fileName);\n  }\n\n  exportBlob(blob: Blob, fileNameTemplate: string): this {\n    const fileName = this.replaceTokens(fileNameTemplate);\n    return this.exportFromUrl(window.URL.createObjectURL(blob), fileName);\n  }\n\n  exportFromUrl(url: string, fileName: string): this {\n    const link = document.createElement('a');\n\n    link.href = url;\n    link.download = fileName;\n    link.click();\n\n    return this;\n  }\n\n  protected getReplaceTokens(): {} {\n    return {\n      date: new Date(),\n      shortDate: formatDate(new Date(), 'yyyy-MM-dd'),\n      year: new Date().getFullYear(),\n    };\n  }\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\nimport { DEFAULT_POINT_EQUALITY_PRECISION } from '../core/equality/equality.constants';\n\n\n/**\n * Configuration class for storing geolocation-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('GeolocationConfig')\nexport class GeolocationConfig {\n  gpsDisplayDecimalPlaces = 3;\n  gpsWarnableAccuracyMeters = 5;\n  gpsRequiredAccuracyMeters = 10;\n  gpsWarnableDilutionOfPrecision = 2;\n  gpsRequiredDilutionOfPrecision = 5;\n  gpsEnableHighAccuracy = true;\n  gpsNoAccuracyReading = '--';\n  allowGpsMocking = true;\n  emitDuplicateGpsPositions = false;\n  gpsPositionDuplicatePrecision = DEFAULT_POINT_EQUALITY_PRECISION;\n  gpsAntennaHeight = 0;\n  adjustForGpsAntennaHeight = true;\n  calculateMissingPositionValues = true;\n  geolocationGeolocatorName = 'Built-in (default)';\n  geolocationGeolocatorDescription = `Uses the device's built-in GPS sensor within the hardware. ` +\n    `Devices without a GPS sensor will defer the location retrieval to the Inernet Service Provider (ISP).`;\n}\n","export const PATH_BUILDER_EMPTY_CALIBRATION_MEASURE_VALUE = null;\nexport const PATH_BUILDER_CALCULATED_M_DEVICE_SOURCE = 'calculated-calibration-point';\nexport const GEOLOCATOR_REGISTRY: { id: string, constructor: any }[] = [];\nexport const GEOLOCATION_GEOLOCATOR_ID = 'built-in';\n","import { GEOLOCATOR_REGISTRY } from '../geolocation.constants';\n\nexport function Geolocatable(id: string): ClassDecorator {\n  return (constructor: any) => {\n    GEOLOCATOR_REGISTRY.push({ id, constructor });\n  };\n}\n","export enum GeolocatorAccuracyUnit {\n  /**\n   * The geolocation accuracy reading is in standard meters (default).\n   */\n  Meter = 'meters',\n\n  /**\n   * The geolocation accuracy reading indicates a Position Dilution of Precision (PDOP) value.\n   */\n  Pdop = 'pdop',\n\n  /**\n   * The geolocation accuracy reading indicates a Horizontal Dilution of Precision (HDOP) value.\n   */\n  Hdop = 'hdop',\n\n  /**\n   * The geolocation accuracy reading indicates a Vertical Dilution of Precision (VDOP) value.\n   */\n  Vdop = 'vdop',\n\n  /**\n   * The geolocation accuracy reading indicates a Time Dilution of Precision (TDOP) value.\n   */\n  Tdop = 'tdop',\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { Observable } from 'rxjs';\nimport { GeolocatorAccuracyUnit } from './geolocator-accuracy-unit';\nimport { GpsPosition } from '../gps-position/gps-position';\nimport { GeolocatorCapability } from './geolocator-capability';\nimport { Logger } from '../../core/logging/logger.service';\nimport { Geolocator } from './geolocator';\n\n\n/**\n * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with\n * the \"navigator\" object and to allow for injecting other implementations of geolocation functionality.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class BaseGeolocator implements Geolocator {\n  capabilities: GeolocatorCapability[] = [];\n  accuracyUnit: GeolocatorAccuracyUnit = GeolocatorAccuracyUnit.Meter;\n  abstract get name(): string;\n  abstract get description(): string;\n\n  constructor(protected readonly log: Logger) {\n  }\n\n  /**\n   * Get the device's current position.\n   */\n  abstract getCurrentPosition(options?: PositionOptions): Promise<GpsPosition>;\n\n  /**\n   * Watch the current device's position.  Clear the watch by unsubscribing from\n   * Observable changes.\n   *\n   * ```typescript\n   * const subscription = this.geolocation.watchPosition()\n   *                               .filter(p => Boolean(p.coords)) //Filter Out Errors\n   *                               .subscribe(position =>\n   *   console.log(position.coords.longitude + ' ' + position.coords.latitude)\n   * );\n   *\n   * // To stop notifications\n   * subscription.unsubscribe();\n   * ```\n   */\n  abstract watchPosition(options?: PositionOptions): Observable<GpsPosition>;\n  abstract isAvailable(): Observable<boolean>;\n\n  hasCapability(capability: GeolocatorCapability): boolean {\n    return this.capabilities.indexOf(capability) > -1;\n  }\n}\n","import { GpsPosition } from './gps-position';\n\n\nexport function positionToGpsPosition(position: Position): GpsPosition {\n  const gpsPosition: GpsPosition = {\n    timestamp: position.timestamp,\n    accuracy: position.coords.accuracy,\n    altitude: position.coords.altitude,\n    altitudeAccuracy: position.coords.altitudeAccuracy,\n    latitude: position.coords.latitude,\n    longitude: position.coords.longitude,\n    heading: position.coords.heading,\n    speed: position.coords.speed,\n  };\n\n  return gpsPosition;\n}\n","export enum GeolocatorCapability {\n  Accuracy = 'accuracy',\n  Altitude = 'altitude',\n  AltitudeAccuracy = 'altitude',\n  Heading = 'heading',\n  Speed = 'speed',\n  MagneticVariation = 'magneticVariation',\n  Satellites = 'satellites',\n  PDOP = 'pdop',\n  HDOP = 'hdop',\n  VDOP = 'vdop',\n  TDOP = 'tdop',\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { Observable, Subject, of } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\n// TSS.\nimport { Geolocatable } from './geolocatable.decorator';\nimport { BaseGeolocator } from './base-geolocator.service';\nimport { GpsPosition } from '../gps-position/gps-position';\nimport { positionToGpsPosition } from '../gps-position/position-to-gps-position.function';\nimport { GeolocatorCapability } from './geolocator-capability';\nimport { Logger } from '../../core/logging/logger.service';\nimport { GeolocationConfig } from '../geolocation.config';\nimport { GEOLOCATION_GEOLOCATOR_ID } from '../geolocation.constants';\n\n\n/**\n * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with\n * the \"navigator\" object and to allow for injecting other implementations of geolocation functionality.\n */\n@Injectable({ providedIn: 'root' })\n@Geolocatable(GEOLOCATION_GEOLOCATOR_ID)\nexport class GeolocationGeolocator extends BaseGeolocator {\n  capabilities = [\n    GeolocatorCapability.Accuracy,\n    GeolocatorCapability.Altitude,\n    GeolocatorCapability.AltitudeAccuracy,\n    GeolocatorCapability.Heading,\n    GeolocatorCapability.Speed,\n  ];\n\n  get name(): string {\n    return this.config.geolocationGeolocatorName;\n  }\n\n  get description(): string {\n    return this.config.geolocationGeolocatorDescription;\n  }\n\n  constructor(log: Logger, private readonly config: GeolocationConfig) {\n    super(log);\n  }\n\n  getCurrentPosition(options?: PositionOptions): Promise<GpsPosition> {\n    return new Promise<GpsPosition>((resolve, reject) =>\n      navigator.geolocation\n        .getCurrentPosition((position: Position) => {\n          this.log.trace(`Received current position for ${this.name}`);\n          resolve(\n            positionToGpsPosition(position)\n          );\n        }, reject, options)\n    );\n  }\n\n  watchPosition(options?: PositionOptions): Observable<GpsPosition> {\n    const subject = new Subject<GpsPosition>();\n    const watchId = navigator.geolocation.watchPosition(\n      position => {\n        this.log.trace(`Received watch position for ${this.name}`);\n        subject.next(positionToGpsPosition(position));\n      },\n      error => subject.error(error),\n      options\n    );\n\n    return subject.pipe(\n      finalize(() => navigator.geolocation.clearWatch(watchId))\n    );\n  }\n\n  isAvailable(): Observable<boolean> {\n    return of('geolocation' in navigator);\n  }\n}\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// TSS.\nimport { TssCoreModule } from '../core/core.module';\nimport { GeolocationConfig } from './geolocation.config';\nimport { GeolocationService } from './geolocation.service';\nimport { GeolocationGeolocator } from './geolocator/geolocation-gps-locator.service';\nimport { BaseGeolocator } from './geolocator/base-geolocator.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n    { provide: BaseGeolocator, useClass: GeolocationGeolocator }\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssGeolocationModule { }\n","export function isPositionAcceptable(position: Coordinates, acceptanceThreshold: number): boolean {\n  return position && position.accuracy <= acceptanceThreshold;\n}\n","import { GpsPosition } from './gps-position';\nimport { isNumber } from '../../core/type-check/is-number.function';\n\nexport function isPositionError(position: GpsPosition | PositionError): boolean {\n  const error = position as PositionError;\n  const isError = !error || isNumber(error.code);\n\n  return isError;\n}\n","import { GpsPosition } from './gps-position';\nimport { isDefined } from '../../core/type-check/is-defined.function';\n\n\nexport function gpsPositionToPoint(position: GpsPosition): number[] {\n  const point = [position.longitude, position.latitude];\n  if (isDefined(position.altitude)) {\n    point[2] = position.altitude;\n  }\n\n  return point;\n}\n","import { isNumberBetweenOrEqual } from '../../core/stats/is-number-between-or-equal.function';\nimport { isNumber } from '../../core/type-check/is-number.function';\n\n\nexport function isValidLatitude(latitide: number): boolean {\n  return isNumber(latitide) && isNumberBetweenOrEqual(latitide, -90, 90);\n}\n","import { isNumberBetweenOrEqual } from '../../core/stats/is-number-between-or-equal.function';\nimport { isNumber } from '../../core/type-check/is-number.function';\n\n\nexport function isValidLongitude(longitude: number): boolean {\n  return isNumber(longitude) && isNumberBetweenOrEqual(longitude, -180, 180);\n}\n","import { isValidLatitude } from './is-valid-latitude.function';\nimport { isValidLongitude } from './is-valid-longitude.function';\n\n\nexport function isValidLocation(location: { latitude: number, longitude: number }): boolean {\n  return isValidLatitude(location.latitude) && isValidLongitude(location.longitude);\n}\n","import { isValidLocation } from './is-valid-location.function';\n\n\nexport function isNotValidLocation(location: { latitude: number, longitude: number }): boolean {\n  return !isValidLocation(location);\n}\n","import { GpsPosition } from './gps-position';\nimport { DEFAULT_POINT_EQUALITY_PRECISION } from '../../core/equality/equality.constants';\nimport { pointsAlmostEqual } from '../../core/equality/points-almost-equal.function';\n\n\nexport function gpsPositionsAlmostEqual(\n  position1: GpsPosition,\n  position2: GpsPosition,\n  precision = DEFAULT_POINT_EQUALITY_PRECISION\n): boolean {\n  return pointsAlmostEqual(position1.longitude, position1.latitude, position2.longitude, position2.latitude, precision);\n}\n\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { Observable, ReplaySubject, Subscription, Subject } from 'rxjs';\nimport distance from '@turf/distance';\nimport bearing from '@turf/bearing';\n\n// App.\nimport { isPositionAcceptable } from './is-position-acceptable.function';\nimport { Logger } from '../core/logging/logger.service';\nimport { NotifyService } from '../core/notify/notify.service';\nimport { GeolocationConfig } from './geolocation.config';\nimport { GeolocatorAccuracyUnit } from './geolocator/geolocator-accuracy-unit';\nimport { GpsPosition } from './gps-position/gps-position';\nimport { GeolocatorCapability } from './geolocator/geolocator-capability';\nimport { isPositionError } from './gps-position/is-position-error.function';\nimport { toReadableTime } from '../core/date-time/readable/to-readable-time.function';\nimport { isNumber } from '../core/type-check/is-number.function';\nimport { isNotNumber } from '../core/type-check/is-not-number.function';\nimport { formatNumber } from '../core/formatting/format-number.function';\nimport { errorMsg } from '../core/error/error-msg.function';\nimport { isNotValue } from '../core/type-check/is-not-value.function';\nimport { gpsPositionToPoint } from './gps-position/gps-position-to-point';\nimport { millisecondsToSeconds } from '../core/date-time/conversion/milliseconds-to-seconds.function';\nimport { convertLengthUnits } from '../core/units/convert-length-units.function';\nimport { LengthUnit } from '../core/units/length-unit';\nimport { Geolocator } from './geolocator/geolocator';\nimport { BaseGeolocator } from './geolocator/base-geolocator.service';\nimport { isNotValidLocation } from './gps-position/is-not-valid-location.function';\nimport { gpsPositionsAlmostEqual } from './gps-position/gps-positions-almost-equal';\n\n\n/**\n * Geolocator service. Provides a single point of GPS interaction.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeolocationService {\n  position: GpsPosition;\n  positionRecievedTime: Date;\n  isTrackingPosition = false;\n  /**\n   * Fired when ever a new position is received and the value is different than the previous (unless the Geolocation config\n   * value \"emitDuplicateGpsPositions\" is set to true - in which case duplicates will be published).\n   * This value will alway emit the last recieved position (if you subscribe after it was emitted you will still receive it).\n   */\n  readonly positionChange: Observable<GpsPosition>;\n\n  /**\n   * Fired when ever a new position is received regardless of whether the position has changed since the last position was recieved.\n   */\n  readonly positionRecieved: Observable<GpsPosition>;\n\n  private positionChangeSubject: ReplaySubject<GpsPosition>;\n  private positionRecievedSubject: Subject<GpsPosition>;\n  private gpsLocatorSubscription: Subscription;\n  private geolocator: Geolocator;\n\n  get positionText(): string {\n    return this.position\n      ? `${this.position.longitude.toFixed(this.config.gpsDisplayDecimalPlaces)}\n       , ${this.position.latitude.toFixed(this.config.gpsDisplayDecimalPlaces)}`\n      : '';\n  }\n\n  get positionReceivedEllapsedTime(): string {\n    if (!this.positionRecievedTime) {\n      return '';\n    }\n\n    const differenceMilliseconds = Date.now() - this.positionRecievedTime.getTime();\n    return `${toReadableTime(differenceMilliseconds)} ago`;\n  }\n\n  get isPositionAcceptable(): boolean {\n    const accuracyThreshold = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter\n      ? this.config.gpsRequiredAccuracyMeters\n      : this.config.gpsRequiredDilutionOfPrecision;\n\n    return isPositionAcceptable(this.position, accuracyThreshold);\n  }\n\n  get isPositionUnacceptable(): boolean {\n    return !this.isPositionAcceptable;\n  }\n\n  get isPositionWarnable(): boolean {\n    const accuracyThreshold = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter\n      ? this.config.gpsWarnableAccuracyMeters\n      : this.config.gpsWarnableDilutionOfPrecision;\n\n    return !isPositionAcceptable(this.position, accuracyThreshold);\n  }\n\n  get hasAccuracyCapability(): boolean {\n    return this.geolocator.capabilities.indexOf(GeolocatorCapability.Accuracy) > -1;\n  }\n\n  get isPositionAccuracyKnown(): boolean {\n    return this.position && isNumber(this.position.accuracy);\n  }\n\n  get isPositionAccuracyUnknown(): boolean {\n    return !this.isPositionAccuracyKnown;\n  }\n\n  get isPositionAccuracyInMeters(): boolean {\n    return this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter;\n  }\n\n  get isPositionAccuracyInDilutionOfPrecision(): boolean {\n    return this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Pdop\n      || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Hdop\n      || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Vdop\n      || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Tdop;\n  }\n\n  get geolocatorService(): Geolocator {\n    return this.geolocator;\n  }\n\n  get accuracyStatement(): string {\n    const noPosition = !this.position;\n\n    if (noPosition) {\n      return this.config.gpsNoAccuracyReading;\n    }\n\n    const isPositionAccuracyKnown = this.isPositionAccuracyKnown;\n    let accuracy: number = isPositionAccuracyKnown ? this.position.accuracy : null;\n    let suffix: string;\n\n    if (isPositionAccuracyKnown && this.geolocator.hasCapability(GeolocatorCapability.Accuracy)) {\n      suffix = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter\n        ? 'm'\n        : String(this.geolocator.accuracyUnit).toUpperCase();\n    } else if (this.geolocator.hasCapability(GeolocatorCapability.PDOP)) {\n      accuracy = this.position.pdop;\n      suffix = String(GeolocatorCapability.PDOP).toUpperCase();\n    } else if (this.geolocator.hasCapability(GeolocatorCapability.HDOP)) {\n      accuracy = this.position.hdop;\n      suffix = String(GeolocatorCapability.HDOP).toUpperCase();\n    } else if (this.geolocator.hasCapability(GeolocatorCapability.VDOP)) {\n      accuracy = this.position.vdop;\n      suffix = String(GeolocatorCapability.VDOP).toUpperCase();\n    } else if (this.geolocator.hasCapability(GeolocatorCapability.TDOP)) {\n      accuracy = this.position.tdop;\n      suffix = String(GeolocatorCapability.TDOP).toUpperCase();\n    }\n\n    if (isNotNumber(accuracy)) {\n      return this.config.gpsNoAccuracyReading;\n    }\n\n    return `${formatNumber(accuracy)} ${suffix}`;\n  }\n\n  constructor(\n    geolocator: BaseGeolocator,\n    private readonly log: Logger,\n    private readonly notify: NotifyService,\n    protected readonly config: GeolocationConfig,\n  ) {\n    this.geolocator = geolocator;\n    this.positionChangeSubject = new ReplaySubject(1);\n    this.positionRecievedSubject = new Subject();\n\n    this.positionChange = this.positionChangeSubject.asObservable();\n    this.positionRecieved = this.positionRecievedSubject.asObservable();\n  }\n\n  enableGpsTracking(): this {\n    const geoOptions = {\n      enableHighAccuracy: this.config.gpsEnableHighAccuracy\n    };\n\n    this.position = null;\n    this.tryUnsubscribe();\n    this.log.debug(\n      `Subscribing to GPS watching for '${this.geolocator.name}' with high accuracy set to '${geoOptions.enableHighAccuracy}'`\n    );\n\n    this.gpsLocatorSubscription = this.geolocator.watchPosition(geoOptions)\n      .subscribe(\n        position => this.onPositionRecieved(position),\n        error => this.onLocationError(error)\n      );\n\n    return this;\n  }\n\n  disableGpsTracking(): this {\n    this.isTrackingPosition = false;\n    this.tryUnsubscribe();\n\n    return this;\n  }\n\n  setGeoLocator(geolocator: Geolocator): this {\n    this.tryUnsubscribe();\n    this.geolocator = geolocator;\n    if (this.isTrackingPosition) {\n      this.enableGpsTracking();\n    }\n\n    return this;\n  }\n\n  setGpsTracking(isTrackingLocation: boolean): this {\n    if (isTrackingLocation) {\n      this.enableGpsTracking();\n    } else {\n      this.disableGpsTracking();\n    }\n\n    return this;\n  }\n\n  toggleGpsTracking(): this {\n    this.setGpsTracking(!this.isTrackingPosition);\n    return this;\n  }\n\n  mockGpsPosition(position: GpsPosition | PositionError): this {\n    if (!this.config.allowGpsMocking) {\n      throw new Error('Permission denied to mock GPS location');\n    }\n\n    return this.onPositionRecieved(position);\n  }\n\n  protected onPositionRecieved(position: GpsPosition | PositionError): this {\n    if (isPositionError(position)) {\n      this.onLocationError(position as PositionError);\n      return this;\n    }\n\n    const gpsPosition = position as GpsPosition;\n    if (isNotValidLocation(gpsPosition)) {\n      return this;\n    }\n\n    const isPreviousPointSameAsNew = this.position\n      && gpsPositionsAlmostEqual(this.position, gpsPosition, this.config.gpsPositionDuplicatePrecision);\n\n    if (isPreviousPointSameAsNew && !this.config.emitDuplicateGpsPositions) {\n      this.positionRecievedSubject.next(gpsPosition);\n      return this;\n    }\n\n    this.log.trace(`Location recieved from '${this.geolocator.name}': ${gpsPosition.latitude}, ${gpsPosition.longitude}`);\n    this.adjustCoordinates(gpsPosition);\n    this.position = gpsPosition;\n    this.isTrackingPosition = true;\n    this.positionRecievedTime = new Date(this.position.timestamp || Date.now());\n    this.positionRecievedSubject.next(this.position);\n    this.positionChangeSubject.next(this.position);\n\n    return this;\n  }\n\n  protected onLocationError(error: PositionError): this {\n    const errorMessage = errorMsg('Failed to retrieve location position. {error}', error);\n    this.positionChangeSubject.error(error);\n    this.log.error(errorMessage);\n    this.notify.error(errorMessage);\n    return this;\n  }\n\n  private adjustCoordinates(position: GpsPosition): this {\n    this.tryAdjustMissingPositionValues(position);\n\n    if (this.config.adjustForGpsAntennaHeight && this.config.gpsAntennaHeight) {\n      let adjustedHeight = position.altitude - this.config.gpsAntennaHeight;\n      adjustedHeight = adjustedHeight < 0 ? 0 : adjustedHeight;\n\n      this.log.trace(`Adjusting coordinate altitude from ${position.altitude} to ${adjustedHeight}`);\n      Object.assign(position, {\n        altitude: adjustedHeight\n      });\n    }\n\n    return this;\n  }\n\n  private tryAdjustMissingPositionValues(newPosition: GpsPosition): void {\n    const missingSpeed = isNotValue(newPosition.speed);\n    const missingHeading = isNotValue(newPosition.heading);\n    const positionValuesMissing = missingSpeed || missingHeading;\n    const shouldAdjustPositionValues = this.position && positionValuesMissing && this.config.calculateMissingPositionValues;\n\n    if (shouldAdjustPositionValues) {\n      const fromPoint = gpsPositionToPoint(this.position);\n      const toPoint = gpsPositionToPoint(newPosition);\n\n      if (missingSpeed) {\n        // meters per second\n        const kilometersTraveled = distance(fromPoint, toPoint, { units: 'kilometers' });\n        if (kilometersTraveled) {\n          const metersTraveled = convertLengthUnits(kilometersTraveled, LengthUnit.Kilometer, LengthUnit.Meter);\n          const secondsDelta = millisecondsToSeconds(\n            Math.abs(newPosition.timestamp - this.position.timestamp)\n          );\n          const speed = metersTraveled / secondsDelta;\n          Object.assign(newPosition, { speed });\n        }\n      }\n\n      if (missingHeading) {\n        const heading = bearing(fromPoint, toPoint);\n        Object.assign(newPosition, { heading });\n      }\n    }\n  }\n\n  private tryUnsubscribe(): this {\n    if (this.gpsLocatorSubscription) {\n      this.log.debug(`Unsubscribing from watching GPS stream from '${this.geolocator.name}'`);\n      this.gpsLocatorSubscription.unsubscribe();\n    }\n\n    return this;\n  }\n}\n","// Angular.\nimport { Injectable, Injector } from '@angular/core';\n\n// 3rd party.\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n// TSS.\nimport { GeolocatorSource } from './geolocator-source';\nimport { GEOLOCATOR_REGISTRY } from '../geolocation.constants';\nimport { Geolocator } from './geolocator';\n\n\n@Injectable({ providedIn: 'root' })\nexport class GeolocatorSourceService {\n\n  constructor(private readonly injector: Injector) {\n  }\n\n  getGeolocator(id: string): Geolocator {\n    const registry = GEOLOCATOR_REGISTRY.find(registedSource => registedSource.id === id);\n    return this.getLocatorFromRegistry(registry);\n  }\n\n  getGeolocators(): Geolocator[] {\n    return GEOLOCATOR_REGISTRY\n      .map(registry => this.getLocatorFromRegistry(registry));\n  }\n\n  getGeolocatorSource(id: string): Observable<GeolocatorSource> {\n    return this.getGeolocatorSources()\n      .pipe(\n        map(devices => devices.find(device => device.id === id))\n      );\n  }\n\n  getAvailableGeolocatorSources(): Observable<GeolocatorSource[]> {\n    return this.getGeolocatorSources()\n      .pipe(\n        map(devices => devices.filter(device => device.isAvailable))\n      );\n  }\n\n  getGeolocatorSources(): Observable<GeolocatorSource[]> {\n    const availableObservables = GEOLOCATOR_REGISTRY\n      .map(registry => {\n        const locator = this.getLocatorFromRegistry(registry);\n        const source: GeolocatorSource = {\n          id: registry.id,\n          name: locator.name,\n          description: locator.description,\n          accuracyUnit: locator.accuracyUnit,\n          capabilities: locator.capabilities,\n          isAvailable: false,\n        };\n\n        return locator.isAvailable()\n          .pipe(\n            tap(available => source.isAvailable = available),\n            map(() => source)\n          );\n      });\n\n    return availableObservables.length === 0\n      ? of([])\n      : forkJoin(availableObservables);\n  }\n\n  private getLocatorFromRegistry(registry: { id: string, constructor: any }): Geolocator {\n    const instance: Geolocator = this.injector.get(registry.constructor);\n    return instance;\n  }\n}\n","// 3rd party.\nimport distance from '@turf/distance';\n\n// TSS.\nimport { LineGeometry } from '../line/line-geometry';\nimport { toMultiPartPaths } from '../line/to-multi-part-paths.function';\nimport { getMeasureFromPoint } from '../point/get-measure-from-point.function';\nimport { SetMeasuresByGeometricLengthOptions } from './set-measures-by-geometric-length-options';\nimport { sortAscending } from '../../core/sort/sort.function';\nimport { isNotNumber } from '../../core/type-check/is-not-number.function';\n\n\nconst DEFAULT_EMPTY_Z_VALUE = 0;\nconst DEFAULT_OPTIONS: SetMeasuresByGeometricLengthOptions = {\n  units: 'miles',\n  hasZValues: true,\n  calibrationPositions: []\n};\n\nexport function setMeasuresByGeometricLength(line: LineGeometry, options?: SetMeasuresByGeometricLengthOptions): void {\n  const martiPart: number[][][] = toMultiPartPaths(line);\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  let lastMeasure = 0;\n\n  martiPart.forEach((linePart, partIndex) => {\n    setMeasureForLine(linePart, lastMeasure, partIndex, options);\n    const lastCoordinateIndex = linePart.length - 1;\n    const lastCoordinate = linePart[lastCoordinateIndex];\n\n    lastMeasure += getMeasureFromPoint(lastCoordinate);\n  });\n}\n\nfunction setMeasureForLine(line: number[][], startMeasure: number, partIndex: number, options: SetMeasuresByGeometricLengthOptions): void {\n  const hasCalibrationPoints: boolean = options.calibrationPositions.some(\n    calibrationPosition =>\n      calibrationPosition.partIndex === partIndex\n  );\n\n  if (hasCalibrationPoints) {\n    calibrateLinePart(line, startMeasure, partIndex, options);\n  } else {\n    setLinePartMeasuresByGeometricLength(line, startMeasure, options);\n  }\n}\n\nfunction calibrateLinePart(line: number[][], startMeasure: number, partIndex: number, options: SetMeasuresByGeometricLengthOptions): void {\n  const calibrationPositions = options.calibrationPositions.filter(\n    position => position.partIndex === partIndex\n  );\n\n  let fromVertexIndex = 0;\n  sortAscending(calibrationPositions, calibration => calibration.measure);\n\n  calibrationPositions.forEach(calibration => {\n    const fromVertex = line[fromVertexIndex];\n    const toVertex = line[calibration.vertexIndex];\n    const numberOfVerticesInBetween = calibration.vertexIndex - fromVertexIndex;\n    const distanceForSection = Math.abs(calibration.measure - startMeasure);\n    const measureDistributionIncrement = distanceForSection / numberOfVerticesInBetween;\n\n    setMeasure(fromVertex, startMeasure, options.hasZValues);\n    setMeasure(toVertex, calibration.measure, options.hasZValues);\n    const inBetweenVertices = getVerticesBetween(line, fromVertexIndex, calibration.vertexIndex);\n\n    inBetweenVertices.forEach((vertice, index) => {\n      const partNumber = index + 1;\n      const verticeIncrement = partNumber * measureDistributionIncrement;\n      const measure = startMeasure + verticeIncrement;\n      setMeasure(vertice, measure, options.hasZValues);\n    });\n\n    fromVertexIndex = calibration.vertexIndex;\n    startMeasure = calibration.measure;\n  });\n\n  const areMoreVertices = fromVertexIndex < line.length - 1;\n  if (areMoreVertices) {\n    const remainingPoints: number[][] = getVerticesBetween(line, fromVertexIndex - 1, line.length);\n    setLinePartMeasuresByGeometricLength(remainingPoints, startMeasure, options);\n  }\n}\n\nfunction getVerticesBetween(line: number[][], startRangeIndex: number, endRangeIndex: number): number[][] {\n  let index = startRangeIndex + 1;\n  const vertices: number[][] = [];\n\n  for (; index < endRangeIndex; index++) {\n    const vertice = line[index];\n    vertices.push(vertice);\n  }\n\n  return vertices;\n}\n\nfunction setLinePartMeasuresByGeometricLength(line: number[][], startMeasure: number, options: SetMeasuresByGeometricLengthOptions): void {\n  let previousVertex;\n  let vertexMeasure = startMeasure;\n\n  line.forEach((vertex, index) => {\n    if (index !== 0) {\n      const distanceBetweenVerticees: number = distance(previousVertex, vertex, options);\n      vertexMeasure += distanceBetweenVerticees;\n    }\n\n    setMeasure(vertex, vertexMeasure, options.hasZValues);\n    previousVertex = vertex;\n  });\n}\n\nfunction setMeasure(coordinate: number[], measure: number, hasZValues: boolean): void {\n  const accountForZValue = hasZValues || coordinate.length > 3;\n  const measureIndex = accountForZValue ? 3 : 2;\n  coordinate[measureIndex] = measure;\n\n  if (accountForZValue) {\n    ensureZValue(coordinate);\n  }\n}\n\nfunction ensureZValue(coordinate: number[]): void {\n  if (isNotNumber(coordinate[2])) {\n    coordinate[2] = DEFAULT_EMPTY_Z_VALUE;\n  }\n}\n","// 3rd Party.\nimport { LineString, Feature, MultiPoint, Point, Polygon, MultiLineString, MultiPolygon } from 'geojson';\nimport { Observable, Subscription } from 'rxjs';\nimport destination from '@turf/destination';\nimport bearing from '@turf/bearing';\n\n// TSS.\nimport { PositionPathBuilderOptions } from './position-path-builder-options';\nimport { Disposable } from '../core/disposable';\nimport { isPositionAcceptable } from './is-position-acceptable.function';\nimport { GpsPosition } from './gps-position/gps-position';\nimport { PositionPathUnfilteredGpsPosition } from './position-path-unfiltered-gps-position';\nimport { setMeasuresByGeometricLength } from '../geometry/geometry/set-measures-by-geometric-length.function';\nimport { isMultiPartLine } from '../geometry/line/is-multi-part.function';\nimport { PositionPathCalibrationPosition } from './position-path-calibration-position';\nimport { CalibrationPosition } from '../geometry/line/calibration/calibration-point';\nimport { PositionPathBuilderSummaryPosition } from './positon-path-builder-position-summary';\nimport { getMeasureFromPoint } from '../geometry/point/get-measure-from-point.function';\nimport { PATH_BUILDER_EMPTY_CALIBRATION_MEASURE_VALUE, PATH_BUILDER_CALCULATED_M_DEVICE_SOURCE } from './geolocation.constants';\nimport { getDistanceBetweenLatLng } from '../geometry/point/get-distance-between-points.function';\nimport { convertLengthUnits } from '../core/units/convert-length-units.function';\nimport { LengthUnit } from '../core/units/length-unit';\nimport { sumValues } from '../core/stats/sum-values.function';\nimport { getLastItem } from '../core/array/get-last-item.function';\nimport { isNumber } from '../core/type-check/is-number.function';\nimport { pointsAlmostEqual } from '../core/equality/points-almost-equal.function';\n\n\nconst UNPLACED_CALIBRATION_MEASURE_KEY = 'pending';\n\nconst DEFAULT_OPTIONS: PositionPathBuilderOptions = {\n  gpsRequiredAccuracyMeters: 10,\n  requireAccuracy: true,\n  pointEquivalencyPrecision: 8,\n  returnZValues: true,\n  returnMValues: true,\n  mValueUnit: 'miles',\n  storeUnfilteredPath: false,\n  calibrationMeasureSnappingDistanceDelta: 2,\n  calibrationMeasureSnappingDistanceDeltaUnit: LengthUnit.Foot\n};\n\n\nexport class PositionPathBuilder implements Disposable {\n  readonly parts: GpsPosition[][];\n  readonly unfilteredPath: GpsPosition[];\n  readonly pathBreaks: {}[];\n  readonly calibratedMeasures: Map<string, PositionPathCalibrationPosition>;\n  private readonly options: PositionPathBuilderOptions;\n  private trackSubscription: Subscription;\n\n  get positionCount(): number {\n    const counts = this.parts.map(part => part.length);\n    return sumValues(counts);\n  }\n\n  get currentPartIndex(): number {\n    return this.parts.length - 1;\n  }\n\n  get currentPart(): GpsPosition[] {\n    return this.parts[this.currentPartIndex];\n  }\n\n  get lastPosition(): GpsPosition {\n    return getLastItem(this.currentPart);\n  }\n\n  get hasPosition(): boolean {\n    return Boolean(this.lastPosition);\n  }\n\n  get isEmpty(): boolean {\n    return this.currentPart.length === 0;\n  }\n\n  get isValidPath(): boolean {\n    return this.currentPart.length > 1;\n  }\n\n  get isSinglePoint(): boolean {\n    return this.parts.length === 1 && this.currentPart.length === 1;\n  }\n\n  constructor(options?: PositionPathBuilderOptions) {\n    this.parts = [[]];\n    this.unfilteredPath = [];\n    this.calibratedMeasures = new Map<string, PositionPathCalibrationPosition>();\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n  }\n\n  trackPosition(positionStream: Observable<GpsPosition>): this {\n    this.trackSubscription = positionStream.subscribe(position => this.addPosition(position));\n    return this;\n  }\n\n  addPosition(position: GpsPosition, calibrationMeasure?: number): this {\n    const accuracyCriteriaMet = !this.options.requireAccuracy\n      || isPositionAcceptable(position, this.options.gpsRequiredAccuracyMeters);\n    const positionNotAcceptable = !position || !accuracyCriteriaMet;\n\n    if (positionNotAcceptable) {\n      return this.tryStoreUnfilteredPath(position);\n    }\n\n    if (this.isEmpty) {\n      return this.forceAddPosition(position);\n    }\n\n    const pointsAtSameLocation = this.arePositionsEquivalent(this.lastPosition, position);\n    const bothPointsAtStandStill = this.lastPosition.speed === 0 && position.speed === 0 || pointsAtSameLocation;\n    if (bothPointsAtStandStill) {\n      this\n        .tryStoreUnfilteredPath(position)\n        .replaceLastPositionIfBetter(position);\n\n      return this;\n    }\n\n    this.forceAddPosition(position);\n    if (isNumber(calibrationMeasure)) {\n      this.addCalibrationMeasureToLastPosition(calibrationMeasure);\n    }\n\n    return this;\n  }\n\n  startNewPart(): this {\n    this.parts.push([]);\n    return this;\n  }\n\n  removePositionByIndex(vertexIndex: number, partIndex: number = 0): this {\n    const part = this.parts[partIndex];\n    if (!part) {\n      throw new Error(`Invalid part index\" ${partIndex}`);\n    }\n\n    part.splice(vertexIndex, 1);\n\n    const key = this.getCalibrationMeasureLookupKey(partIndex, vertexIndex);\n    if (this.calibratedMeasures.has(key)) {\n      this.calibratedMeasures.delete(key);\n    }\n\n    return this;\n  }\n\n  removePosition(position: GpsPosition): this {\n    let partIndex = -1;\n    let vertexIndex = -1;\n\n    this.parts.forEach((part, index) => {\n      const foundPositionIndex = part.indexOf(position);\n      if (foundPositionIndex > -1) {\n        partIndex = index;\n        vertexIndex = foundPositionIndex;\n      }\n    });\n\n    if (partIndex > -1 && vertexIndex > -1) {\n      return this.removePositionByIndex(vertexIndex, partIndex);\n    }\n\n    return this;\n  }\n\n  removeCalibrationMeasure(measure: number): this {\n    Array.from(this.calibratedMeasures.values())\n      .filter(calibration => calibration.measure === measure)\n      .forEach(calibration =>\n        this.removeCalibrationMeasureByIndex(calibration.vertexIndex, calibration.partIndex)\n      );\n\n    return this;\n  }\n\n  removeCalibrationMeasureByIndex(vertexIndex: number, partIndex: number = 0): this {\n    const key = this.getCalibrationMeasureLookupKey(partIndex, vertexIndex);\n    if (this.calibratedMeasures.has(key)) {\n      this.calibratedMeasures.delete(key);\n    }\n\n    return this;\n  }\n\n  addCalibrationMeasure(measure: number): this {\n    const timestamp = new Date().getTime();\n    const [lastVertex] = this.currentPart.slice(-1);\n    if (lastVertex && lastVertex.timestamp && lastVertex.timestamp === timestamp) {\n      return this.addCalibrationMeasureToLastPosition(measure);\n    }\n\n    const partIndex = this.currentPartIndex;\n    const key = UNPLACED_CALIBRATION_MEASURE_KEY;\n    this.calibratedMeasures.set(key, {\n      measure,\n      partIndex,\n      vertexIndex: null,\n      timestamp\n    });\n\n    return this;\n  }\n\n  addCalibrationMeasureToLastPosition(measure: number): this {\n    const partIndex = this.currentPartIndex;\n    const lastVertexIndex = this.currentPart.length - 1;\n    return this.addCalibrationMeasureAtIndex(measure, lastVertexIndex, partIndex);\n  }\n\n  addCalibrationMeasureAtIndex(measure: number, vertexIndex: number, partIndex = 0): this {\n    const key = this.getCalibrationMeasureLookupKey(partIndex, vertexIndex);\n    this.calibratedMeasures.set(key, {\n      measure,\n      partIndex,\n      vertexIndex,\n      timestamp: new Date().getTime()\n    });\n\n    return this;\n  }\n\n  forceAddPosition(position: GpsPosition): this {\n    this.tryStoreUnfilteredPath(position);\n    this.addPositionToPath(position);\n    return this;\n  }\n\n  toPointFeature(properties = {}): Feature<Point | MultiPoint> {\n    return {\n      type: 'Feature',\n      geometry: this.toPointGeometry(),\n      properties\n    };\n  }\n\n  toLineFeature(properties = {}): Feature<LineString | MultiLineString> {\n    return {\n      type: 'Feature',\n      geometry: this.toLineGeometry(),\n      properties\n    };\n  }\n\n  toSingleLineFeature(properties = {}): Feature<LineString> {\n    return {\n      type: 'Feature',\n      geometry: this.toSingleLineGeometry(),\n      properties\n    };\n  }\n\n  toMultiLineFeature(properties = {}): Feature<MultiLineString> {\n    return {\n      type: 'Feature',\n      geometry: this.toMultiLineGeometry(),\n      properties\n    };\n  }\n\n  toPolygonFeature(properties = {}): Feature<Polygon | MultiPolygon> {\n    return {\n      type: 'Feature',\n      geometry: this.toPolygonGeometry(),\n      properties\n    };\n  }\n\n  toMultiPolygonFeature(properties = {}): Feature<MultiPolygon> {\n    return {\n      type: 'Feature',\n      geometry: this.toMultiPolygonGeometry(),\n      properties\n    };\n  }\n\n  toSinglePolygonFeature(properties = {}): Feature<Polygon> {\n    return {\n      type: 'Feature',\n      geometry: this.toSinglePolygonGeometry(),\n      properties\n    };\n  }\n\n  toFeature(): Feature<LineString | MultiLineString | Point | MultiPoint> {\n    return this.isSinglePoint\n      ? this.toPointFeature() as Feature<Point>\n      : this.toLineFeature();\n  }\n\n  toGeometry(): LineString | MultiLineString | Point {\n    return this.isSinglePoint\n      ? this.toPointGeometry() as Point\n      : this.toLineGeometry();\n  }\n\n  toSingleLineGeometry(calibrateMeasures = true): LineString {\n    const line = this.toLineGeometry(calibrateMeasures);\n    if (isMultiPartLine(line.coordinates)) {\n      throw new Error('Cannot convert MultiLineString to LineString. Data would be lost');\n    }\n\n    return line as LineString;\n  }\n\n  toMultiLineGeometry(calibrateMeasures = true): MultiLineString {\n    let line = this.toLineGeometry(calibrateMeasures);\n    const isSinglePartLine = !isMultiPartLine(line.coordinates);\n    if (isSinglePartLine) {\n      line = {\n        type: 'MultiLineString',\n        bbox: line.bbox,\n        coordinates: [line.coordinates as number[][]]\n      };\n    }\n\n    return line as MultiLineString;\n  }\n\n  toLineGeometry(calibrateMeasures = true): LineString | MultiLineString {\n    const parts: number[][][] = this.toMultiPartArray();\n    const line: LineString | MultiLineString = parts.length > 1\n      ? {\n        type: 'MultiLineString',\n        coordinates: parts\n      }\n      : {\n        type: 'LineString',\n        coordinates: parts[0]\n      };\n\n    if (this.options.returnMValues) {\n      const calibrationPositions: CalibrationPosition[] = calibrateMeasures\n        ? Array.from(\n          this.calibratedMeasures.values()\n        )\n        : [];\n\n      setMeasuresByGeometricLength(line, {\n        units: this.options.mValueUnit,\n        hasZValues: this.options.returnZValues,\n        calibrationPositions\n      });\n    }\n\n    return line;\n  }\n\n  toMultiPolygonGeometry(): MultiPolygon {\n    let poly = this.toPolygonGeometry();\n    const isSinglePolygon = poly.type === 'Polygon';\n\n    if (isSinglePolygon) {\n      poly = {\n        type: 'MultiPolygon',\n        bbox: poly.bbox,\n        coordinates: [poly.coordinates as number[][][]]\n      };\n    }\n\n    return poly as MultiPolygon;\n  }\n\n  toSinglePolygonGeometry(): Polygon {\n    const poly = this.toPolygonGeometry();\n    const isMultiPart = poly.type === 'MultiPolygon';\n\n    if (isMultiPart) {\n      throw new Error('Cannot convert MultiPolygon to Polygon. Data would be lost');\n    }\n\n    return poly as Polygon;\n  }\n\n  toPolygonGeometry(): Polygon | MultiPolygon {\n    const parts: number[][][] = this.toMultiPartArray();\n    parts.forEach(part => this.ensurePolygonIsClosed(part));\n\n    return parts.length > 1\n      ? {\n        type: 'MultiPolygon',\n        coordinates: [parts]\n      }\n      : {\n        type: 'Polygon',\n        coordinates: parts\n      };\n  }\n\n  toPointGeometry(): Point | MultiPoint {\n    const parts: number[][][] = this.toMultiPartArray();\n\n    return parts.length > 1\n      ? { type: 'MultiPoint', coordinates: parts.map(part => part[0]) }\n      : { type: 'Point', coordinates: parts[0][0] };\n  }\n\n  replaceLastPositionIfBetter(position: GpsPosition): boolean {\n    let wasPositionAdded = true;\n    if (this.isEmpty) {\n      this.addPositionToPath(position);\n      return wasPositionAdded;\n    }\n\n    const newPositionHasBetterAccuracy = this.lastPosition.accuracy > position.accuracy;\n    if (newPositionHasBetterAccuracy) {\n      this.replaceLastPosition(position);\n    } else {\n      wasPositionAdded = false;\n    }\n\n    return wasPositionAdded;\n  }\n\n  replaceLastPosition(position: GpsPosition): this {\n    this.currentPart[this.currentPart.length - 1] = position;\n\n    return this;\n  }\n\n  getBestPosition(): GpsPosition {\n    throw new Error('Not implemented yet');\n  }\n\n  getUnfilteredPath(): PositionPathUnfilteredGpsPosition[] {\n    return this.unfilteredPath.map(position => {\n      const unfilteredGpsPosition: PositionPathUnfilteredGpsPosition = Object.assign({\n        included: this.pathContains(position)\n      }, position);\n\n      return unfilteredGpsPosition;\n    });\n  }\n\n  getGeometryPathSummary(): PositionPathBuilderSummaryPosition[][] {\n    const line = this.toMultiLineGeometry(false);\n\n    return line.coordinates.map(\n      (part: number[][], partIndex: number) => this.getGeometryLinePartSummary(part, partIndex)\n    );\n  }\n\n  pathContains(position: GpsPosition): boolean {\n    const found = this.parts.find(part =>\n      part.indexOf(position) > -1\n    );\n\n    return Boolean(found);\n  }\n\n  getPositionByIndex(partIndex: number, vertexIndex: number): GpsPosition {\n    return this.parts[partIndex][vertexIndex];\n  }\n\n  dispose(): void {\n    if (this.trackSubscription) {\n      this.trackSubscription.unsubscribe();\n    }\n\n    this.parts.length = 0;\n  }\n\n  private getGeometryLinePartSummary(linePart: number[][], partIndex: number): PositionPathBuilderSummaryPosition[] {\n    return linePart.map((vertex, vertexIndex) => {\n      const position = this.getPositionByIndex(partIndex, vertexIndex);\n      const calibrationKey = this.getCalibrationMeasureLookupKey(partIndex, vertexIndex);\n      const calibrationPointMeasureValue = this.calibratedMeasures.has(calibrationKey)\n        ? this.calibratedMeasures.get(calibrationKey).measure\n        : PATH_BUILDER_EMPTY_CALIBRATION_MEASURE_VALUE;\n\n      return Object.assign({\n        geometricMeasure: getMeasureFromPoint(vertex),\n        partIndex,\n        vertexIndex,\n        calibrationPointMeasureValue\n      }, position);\n    });\n  }\n\n  private getCalibrationMeasureLookupKey(partIndex: number, vertexIndex: number): string {\n    return `${partIndex}_${vertexIndex}`;\n  }\n\n  private toMultiPartArray(): number[][][] {\n    const parts: number[][][] = [];\n    this.parts.forEach(part => {\n      const coordinates: number[][] = part.map(\n        position => this.options.returnZValues\n          ? [position.longitude, position.latitude, position.altitude || 0]\n          : [position.longitude, position.latitude]\n      );\n\n      parts.push(coordinates);\n    });\n\n    return parts;\n  }\n\n  private ensurePolygonIsClosed(polygonPoints: number[][]): void {\n    if (polygonPoints.length > 1) {\n      const [first] = polygonPoints;\n      const last: number[] = getLastItem(polygonPoints);\n      const [firstLng, firstLat, firstZ] = first;\n      const [lastLng, lastLat] = last;\n      const doesPolygonNotClose = !this.arePointsEquivalent(firstLng, firstLat, lastLng, lastLat);\n\n      if (doesPolygonNotClose) {\n        const closingPoint = [firstLng, firstLat, firstZ || 0];\n        polygonPoints.push(closingPoint);\n      }\n    }\n  }\n\n  private addPositionToPath(position: GpsPosition): void {\n    this.currentPart.push(position);\n\n    if (this.calibratedMeasures.has(UNPLACED_CALIBRATION_MEASURE_KEY)) {\n      this.addPendingCalibrationPoint();\n    }\n  }\n\n  private addPendingCalibrationPoint(): void {\n    const calibratonPosition = this.calibratedMeasures.get(UNPLACED_CALIBRATION_MEASURE_KEY);\n    const calibrationTimestamp = calibratonPosition.timestamp;\n    const [secondToLastPosition, lastPosition] = this.currentPart.slice(-2);\n    const isTimestampBetweenVertices = calibrationTimestamp > secondToLastPosition.timestamp\n      && calibrationTimestamp < lastPosition.timestamp;\n\n    if (isTimestampBetweenVertices) {\n      const totalTimeDelta = Math.abs(lastPosition.timestamp - secondToLastPosition.timestamp);\n      const offsetTimeDelta = Math.abs(calibrationTimestamp - secondToLastPosition.timestamp);\n      const percentOfDistance = offsetTimeDelta / totalTimeDelta;\n      const distanceBetweenVerticesKilometers = getDistanceBetweenLatLng(\n        secondToLastPosition.latitude,\n        secondToLastPosition.longitude,\n        lastPosition.latitude,\n        lastPosition.longitude,\n        LengthUnit.Mile\n      );\n\n      const distanceToPreviousVertexKilometers = percentOfDistance * distanceBetweenVerticesKilometers;\n      const didSnapCalibrationMeasureToVertes = this.trySnapCalibrationMeasureToVertex(\n        calibratonPosition.measure,\n        distanceBetweenVerticesKilometers,\n        distanceToPreviousVertexKilometers);\n\n      if (didSnapCalibrationMeasureToVertes) {\n        return;\n      }\n\n      const heading = bearing(\n        [secondToLastPosition.longitude, secondToLastPosition.latitude],\n        [lastPosition.longitude, lastPosition.latitude]\n      );\n\n      const newPoint: Feature<Point> = destination(\n        [secondToLastPosition.longitude, secondToLastPosition.latitude],\n        distanceToPreviousVertexKilometers,\n        heading, { units: 'kilometers' }\n      );\n\n      const spliceIndexForSecondToLastPosition = this.currentPart.length - 1;\n      const newPosition: GpsPosition = Object.assign({}, lastPosition, {\n        longitude: newPoint.geometry.coordinates[0],\n        latitude: newPoint.geometry.coordinates[1],\n        deviceSource: PATH_BUILDER_CALCULATED_M_DEVICE_SOURCE\n      });\n\n      this.calibratedMeasures.delete(UNPLACED_CALIBRATION_MEASURE_KEY);\n      this.addCalibrationMeasureAtIndex(calibratonPosition.measure, spliceIndexForSecondToLastPosition, this.currentPartIndex);\n      this.currentPart.splice(spliceIndexForSecondToLastPosition, 0, newPosition);\n    } else if (calibrationTimestamp >= lastPosition.timestamp) {\n      this.addCalibrationMeasureToLastPosition(calibratonPosition.measure);\n    } else {\n      throw new Error(`Calibration measure timestamp '${calibratonPosition.timestamp}' can not be located between`\n        + ` '${secondToLastPosition.timestamp}' and '${lastPosition.timestamp}'`);\n    }\n  }\n\n  private trySnapCalibrationMeasureToVertex(\n    calibrationMeasure: number,\n    totalVerticeDistanceKilometers: number,\n    distanceToPreviousVertexKilometers: number\n  ): boolean {\n    const distanceToNextVertexKilometers = totalVerticeDistanceKilometers - distanceToPreviousVertexKilometers;\n    const distanceThresholdKilometers = convertLengthUnits(\n      this.options.calibrationMeasureSnappingDistanceDelta,\n      this.options.calibrationMeasureSnappingDistanceDeltaUnit,\n      LengthUnit.Kilometer\n    );\n\n    const isPointCloseEnoughToPrevious = distanceToPreviousVertexKilometers < distanceThresholdKilometers;\n    const isPointCloseEnoughToNext = distanceToNextVertexKilometers < distanceThresholdKilometers;\n\n    if (isPointCloseEnoughToPrevious || isPointCloseEnoughToNext) {\n      const previousVertexIndex = this.currentPart.length - 2;\n      const nextVertexIndex = this.currentPart.length - 1;\n      const vertexIndex = distanceToPreviousVertexKilometers < distanceToNextVertexKilometers\n        ? previousVertexIndex\n        : nextVertexIndex;\n\n      this.addCalibrationMeasureAtIndex(calibrationMeasure, vertexIndex, this.currentPartIndex);\n      this.calibratedMeasures.delete(UNPLACED_CALIBRATION_MEASURE_KEY);\n      return true;\n    }\n\n    return false;\n  }\n\n  private arePositionsEquivalent(position1: GpsPosition, position2: GpsPosition): boolean {\n    return this.arePointsEquivalent(\n      position1.longitude,\n      position1.latitude,\n      position2.longitude,\n      position2.latitude\n    );\n  }\n\n  private arePointsEquivalent(longitude1: number, latitude1: number, longitude2: number, latitude2: number): boolean {\n    return pointsAlmostEqual(\n      longitude1,\n      latitude1,\n      longitude2,\n      latitude2,\n      this.options.pointEquivalencyPrecision\n    );\n  }\n\n  private tryStoreUnfilteredPath(position: GpsPosition): this {\n    if (this.options.storeUnfilteredPath) {\n      this.unfilteredPath.push(position);\n    }\n\n    return this;\n  }\n}\n","export function radiansToDegrees(radians) {\n  return radians * 180 / Math.PI;\n}\n","import { Injectable } from '@angular/core';\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing geometry-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('GeometryConfig')\nexport class GeometryConfig {\n}\n","import { SinglePoint } from '../point/single-point';\nimport { toSinglePartPointArray } from '../point/to-single-part-point.function';\n\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction squareRoot(x) {\n  return x * x;\n}\n\nfunction squareRootDistance(v: Point, w: Point) {\n  return squareRoot(v.x - w.x) + squareRoot(v.y - w.y);\n}\n\nfunction distanceToSegmentSquared(testPoint: Point, lineStartPoint: Point, lineEndPoint: Point) {\n  const lengthSquared = squareRootDistance(lineStartPoint, lineEndPoint);\n\n  if (lengthSquared === 0) {\n    return squareRootDistance(testPoint, lineStartPoint);\n  }\n\n  const part1 = (testPoint.x - lineStartPoint.x) * (lineEndPoint.x - lineStartPoint.x);\n  const part2 = (testPoint.y - lineStartPoint.y) * (lineEndPoint.y - lineStartPoint.y);\n  const formulaPart1 = part1 + part2;\n  const delta = formulaPart1 / lengthSquared;\n\n  if (delta < 0) {\n    return squareRootDistance(testPoint, lineStartPoint);\n  }\n\n  if (delta > 1) {\n    return squareRootDistance(testPoint, lineEndPoint);\n  }\n\n  const xValue = lineStartPoint.x + delta * (lineEndPoint.x - lineStartPoint.x);\n  const yValue = lineStartPoint.y + delta * (lineEndPoint.y - lineStartPoint.y);\n\n  return squareRootDistance(testPoint, { x: xValue, y: yValue });\n}\n\nfunction distToSegment(testPoint: Point, lineStartPoint: Point, lineEndPoint: Point) {\n  return Math.sqrt(distanceToSegmentSquared(testPoint, lineStartPoint, lineEndPoint));\n}\n\nexport function getDistanceToLine(testPoint: SinglePoint, lineStartPoint: SinglePoint, lineEndPoint: SinglePoint): number {\n  const testPointArray: number[] = toSinglePartPointArray(testPoint);\n  const lineStartPointArray: number[] = toSinglePartPointArray(lineStartPoint);\n  const lineEndPointArray: number[] = toSinglePartPointArray(lineEndPoint);\n  const [testPointX, testPointY] = testPointArray;\n  const [lineStartX, lineStartY] = lineStartPointArray;\n  const [lineEndX, lineEndY] = lineEndPointArray;\n\n  return distToSegment(\n    { x: testPointX, y: testPointY },\n    { x: lineStartX, y: lineStartY },\n    { x: lineEndX, y: lineEndY },\n  );\n}\n","import { LineGeometry } from './line-geometry';\nimport { toMultiPartPaths } from './to-multi-part-paths.function';\nimport { PointComparisonDetails } from '../point/point-comparison-details';\nimport { SinglePoint } from '../point/single-point';\nimport { getDistanceBetweenPoints, getMetersBetweenLatLng } from '../point/get-distance-between-points.function';\nimport { toSinglePartPointArray } from '../point/to-single-part-point.function';\nimport { getDistanceToLine } from './get-distance-to-line.function';\nimport { addRange } from '../../core/array/add-range.function';\n\n\nexport interface LineVerticeeSummary {\n  nearestPoint: PointComparisonDetails;\n  furthestPoint: PointComparisonDetails;\n  minPoint: PointComparisonDetails;\n  maxPoint: PointComparisonDetails;\n  nextPoint: PointComparisonDetails;\n  previousPoint: PointComparisonDetails;\n}\n\n\nexport function getVerticeeInfos(line: LineGeometry, point: SinglePoint, isPointDegrees: boolean = true): LineVerticeeSummary {\n  const pointComparisonDetails: PointComparisonDetails[] = [];\n  const paths: number[][][] = toMultiPartPaths(line);\n\n  paths.forEach((coordinates: number[][]) => {\n    const details = comparePathWithPoint(coordinates, point, isPointDegrees);\n    addRange(pointComparisonDetails, details);\n  });\n\n  let nearestPoint: PointComparisonDetails;\n  let furthestPoint: PointComparisonDetails;\n  let minPoint: PointComparisonDetails;\n  let maxPoint: PointComparisonDetails;\n\n  pointComparisonDetails.forEach(pointCandidate => {\n    if (!nearestPoint || pointCandidate.distance < nearestPoint.distance) {\n      nearestPoint = pointCandidate;\n    }\n\n    if (!furthestPoint || pointCandidate.distance > furthestPoint.distance) {\n      furthestPoint = pointCandidate;\n    }\n\n    if (!minPoint || pointCandidate.pointMeasure < minPoint.pointMeasure) {\n      minPoint = pointCandidate;\n    }\n\n    if (!maxPoint || pointCandidate.pointMeasure > maxPoint.pointMeasure) {\n      maxPoint = pointCandidate;\n    }\n  });\n\n  // const nearestPoint = pointComparisionDetails\n  //   .reduce((accumulator, value) => accumulator.distance > value.distance ? value : accumulator);\n\n  const pointBefore = pointComparisonDetails[nearestPoint.index - 1];\n  const pointAfter = pointComparisonDetails[nearestPoint.index + 1];\n  let nextPoint = pointAfter;\n  let previousPoint = pointBefore;\n\n  // NOTE: this logic handles the rare case where the distance of the test point matches both the next\n  // and previous verticee.\n  // 0-----4--------------------------100\n  //          5\n  if (pointBefore && pointAfter) {\n    const beforDistance = getDistanceToLine(point, nearestPoint.pointCoordinate, pointBefore.pointCoordinate);\n    const afterDistance = getDistanceToLine(point, nearestPoint.pointCoordinate, pointAfter.pointCoordinate);\n\n    if (beforDistance < afterDistance) {\n      nextPoint = pointBefore;\n      previousPoint = pointComparisonDetails[nextPoint.index - 2];\n    }\n  }\n\n  return {\n    nearestPoint,\n    furthestPoint,\n    nextPoint,\n    previousPoint,\n    minPoint,\n    maxPoint\n  };\n}\n\nexport function getClosestVerticees(\n  line: LineGeometry,\n  point: SinglePoint,\n  isPointDegrees: boolean = true\n): [SinglePoint | null, SinglePoint | null] {\n  const info = getVerticeeInfos(line, point, isPointDegrees);\n\n  return [\n    info.nearestPoint ? info.nearestPoint.pointCoordinate : null,\n    info.nextPoint ? info.nextPoint.pointCoordinate : null\n  ];\n}\n\nexport function getClosestVerticee(line: LineGeometry, point: SinglePoint, isPointDegrees: boolean = true): SinglePoint {\n  const [firstClosest] = getClosestVerticees(line, point, isPointDegrees);\n  return firstClosest;\n}\n\nfunction comparePathWithPoint(coordinates: number[][], pointToCompare: SinglePoint, isPointDegrees: boolean): PointComparisonDetails[] {\n  const pointComparisionDetailsFromPath: PointComparisonDetails[] = coordinates\n    .map(\n      (coordinate: number[], index: number) => compareCoordinateWithPoint(coordinate, pointToCompare, isPointDegrees, index)\n    );\n\n  return pointComparisionDetailsFromPath;\n}\n\nfunction getDegreeDistance(coordinate: number[], pointToCompare: SinglePoint): number {\n  const coordinate2: number[] = toSinglePartPointArray(pointToCompare);\n\n  return getMetersBetweenLatLng(coordinate[1], coordinate[0], coordinate2[1], coordinate2[0]);\n}\n\nfunction compareCoordinateWithPoint(\n  coordinate: number[],\n  pointToCompare: SinglePoint,\n  isPointDegrees: boolean,\n  index: number\n): PointComparisonDetails {\n  const distance = isPointDegrees\n    ? getDegreeDistance(coordinate, pointToCompare)\n    : getDistanceBetweenPoints(coordinate, pointToCompare);\n\n  const pointDetails: PointComparisonDetails = {\n    pointCoordinate: coordinate,\n    distance,\n    index\n  };\n\n  return pointDetails;\n}\n","/**\n * Determines if a point (value) is within a given bounds (line).\n * @param boundStart The start of the restrcting bounds.\n * @param boundEnd The end of the restricting bounds.\n * @param testValue The value to check against the restricting bounds.\n */\nexport function isPointWithinBounds(boundStart: number, boundEnd: number, testValue: number) {\n  return testValue >= boundStart && testValue <= boundEnd;\n}\n\n/**\n * Determines if a point (value) is within a given bounds (line), but will not match the start and end values.\n * @param boundStart The start of the restrcting bounds.\n * @param boundEnd The end of the restricting bounds.\n * @param testValue The value to check against the restricting bounds.\n */\nexport function isPointWithinButNotIncludingBounds(boundStart: number, boundEnd: number, testValue: number) {\n  return testValue > boundStart && testValue < boundEnd;\n}\n","// 3rd Party.\nimport { LineString } from 'geojson';\n\n// TSS.\nimport { SinglePoint } from '../point/single-point';\nimport { toSinglePartPointArray } from '../point/to-single-part-point.function';\nimport { getLastItem } from '../../core/array/get-last-item.function';\n\n\nexport function isPointOnLineString(line: LineString, point: SinglePoint): boolean {\n  return isPointOnLine(line.coordinates[0], getLastItem(line.coordinates), point);\n}\n\nexport function isLatLngOnLineString(line: LineString, lat: number, lng: number): boolean {\n  const [lineStartLng, lineStartLat] = line.coordinates[0];\n  const [lineEndLng, lineEndLat] = getLastItem(line.coordinates);\n\n  return isLatLngOnLine(lineStartLat, lineStartLng, lineEndLat, lineEndLng, lat, lng);\n}\n\nexport function isLatLngOnLine(\n  lineStartLat: number,\n  lineStartLng: number,\n  lineEndLat: number,\n  lineEndLng: number,\n  testPointLat: number,\n  testPointLng: number\n): boolean {\n  throw new Error('AHHH!');\n}\n\nexport function isPointOnLine(lineStartPoint: SinglePoint, lineEndPoint: SinglePoint, testPoint: SinglePoint, tolerance = 0): boolean {\n  const startPoint = toSinglePartPointArray(lineStartPoint);\n  const endPoint = toSinglePartPointArray(lineEndPoint);\n  const point = toSinglePartPointArray(testPoint);\n\n  const [startPointX, startPointY] = startPoint;\n  const [endPointX, endPointY] = endPoint;\n  const [testPointX, testPointY] = point;\n  const slope = (endPointY - startPointY) / (endPointX - startPointX);\n  const y = slope * testPointX + startPointY;\n\n  if ((y <= testPointY + tolerance && y >= testPointY - tolerance) && (testPointX >= startPointX && testPointX <= endPointX)) {\n    return true;\n  }\n\n  return false;\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing Gps Gate-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('GpsGateConfig')\nexport class GpsGateConfig {\n  refreshInterval = 1000;\n  urlTemplate = 'http://localhost:12175/gps/{endpoint}?noCache={cacheBuster}';\n  getInfoEndpoint = 'getGpsInfo';\n  getVersionEndpoint = 'getVersion';\n  jsonpParameterName = 'jsonp';\n  geolocatorName = 'GpsGate Client';\n  geolocatorDescription = 'GpsGate client that can connect to a variety of GPS data sources.';\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n// 3rd Party.\nimport { Observable, Subject, of } from 'rxjs';\nimport { finalize, map, catchError } from 'rxjs/operators';\n\n// TSS.\nimport { GeolocatorCapability } from '../geolocation/geolocator/geolocator-capability';\nimport { BaseGeolocator } from '../geolocation/geolocator/base-geolocator.service';\nimport { GeolocatorAccuracyUnit } from '../geolocation/geolocator/geolocator-accuracy-unit';\nimport { Logger } from '../core/logging/logger.service';\nimport { GpsGateConfig } from './gps-gate.config';\nimport { GpsGateVersionInfo } from './gps-gate-version-info';\nimport { GpsPosition } from '../geolocation/gps-position/gps-position';\nimport { GpsGateGpsInfo } from './gps-gate-gps-info';\nimport { format } from '../core/formatting/format.function';\nimport { Geolocatable } from '../geolocation/geolocator/geolocatable.decorator';\n\n\n/**\n * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with\n * the \"navigator\" object and to allow for injecting other implementations of geolocation functionality.\n */\n@Injectable({ providedIn: 'root' })\n@Geolocatable('gps-gate')\nexport class GpsGateGeolocator extends BaseGeolocator {\n  capabilities = [\n    GeolocatorCapability.Altitude,\n    GeolocatorCapability.AltitudeAccuracy,\n    GeolocatorCapability.Heading,\n    GeolocatorCapability.Speed,\n    GeolocatorCapability.HDOP,\n  ];\n\n  get name(): string {\n    return this.config.geolocatorName;\n  }\n\n  get description(): string {\n    return this.config.geolocatorDescription;\n  }\n\n  constructor(log: Logger, private readonly http: HttpClient, private readonly config: GpsGateConfig) {\n    super(log);\n    this.accuracyUnit = GeolocatorAccuracyUnit.Hdop;\n  }\n\n  getCurrentPosition(options?: PositionOptions): Promise<GpsPosition> {\n    const url = format(this.config.urlTemplate, {\n      endpoint: this.config.getInfoEndpoint,\n      cacheBuster: new Date().getTime()\n    });\n\n    return this.http.jsonp<GpsGateGpsInfo>(url, this.config.jsonpParameterName)\n      .pipe(\n        map((info: GpsGateGpsInfo) => {\n          const timestamp = new Date(info.trackPoint.utc).getTime();\n          const position: GpsPosition = Object.assign({\n            timestamp,\n            // NOTE: We are setting accuracy to HDOP because since this geolocator does not have\n            // accuracy capabilities (see capabilities property), accuracy will not be shown within\n            // the UI - rather fallback PDOP, HDOP, VDOP, etc will be used. However, we want to set\n            // the accuracy because this value is what will be used to do collection\n            // accuracy/precision acceptance (acceptable, warning, unaceptable, etc) - RG.\n            accuracy: info.trackPoint.precision.hdop,\n            altitudeAccuracy: null,\n            speed: info.trackPoint.velocity.groundSpeed,\n            heading: info.trackPoint.velocity.heading,\n            hdop: info.trackPoint.precision.hdop\n          }, info.trackPoint.position);\n\n          this.log.trace(`Received current position for ${this.name}`);\n          return position;\n        })\n      )\n      .toPromise();\n  }\n\n  watchPosition(options?: PositionOptions): Observable<GpsPosition> {\n    let lastPosition: GpsPosition;\n    const subject = new Subject<GpsPosition>();\n    const interval = setInterval(() => {\n      this.getCurrentPosition(options)\n        .then(position => {\n          if (notEqual(position, lastPosition)) {\n            subject.next(position);\n          }\n\n          this.log.trace(`Received watch position for ${this.name}`);\n          lastPosition = position;\n        })\n        .catch(error => subject.error(error));\n    }, this.config.refreshInterval);\n\n    return subject.pipe(\n      finalize(() => clearInterval(interval))\n    );\n  }\n\n  isAvailable(): Observable<boolean> {\n    return this.getVersion()\n      .pipe(\n        map(result => Boolean(result)),\n        catchError(() => of(false))\n      );\n  }\n\n  getVersion(): Observable<GpsGateVersionInfo> {\n    const url = format(this.config.urlTemplate, {\n      endpoint: this.config.getVersionEndpoint,\n      cacheBuster: new Date().getTime()\n    });\n\n    return this.http.jsonp<GpsGateVersionInfo>(url, this.config.jsonpParameterName);\n  }\n}\n\nfunction notEqual(position1: GpsPosition, position2: GpsPosition): boolean {\n  return !equal(position1, position2);\n}\n\nfunction equal(position1: GpsPosition, position2: GpsPosition): boolean {\n  return position1\n    && position2\n    && position1.timestamp === position2.timestamp\n    && position1.latitude === position2.latitude\n    && position1.longitude === position2.longitude\n    && position1.accuracy === position2.accuracy\n    && position1.speed === position2.speed\n    && position1.heading === position2.heading\n    && position1.altitude === position2.altitude\n    && position1.altitudeAccuracy === position2.altitudeAccuracy\n    && position1.pdop === position2.pdop\n    && position1.hdop === position2.hdop\n    && position1.vdop === position2.vdop\n    && position1.tdop === position2.tdop;\n}\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// TSS.\nimport { TssCoreModule } from '../core/core.module';\nimport { TssGeolocationModule } from '../geolocation/geolocation.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    TssCoreModule,\n    TssGeolocationModule\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssGpsGateModule { }\n","import { FeatureClassLayer } from '../../maps/feature-class-layer';\nimport { LayerDateFormat } from '../../maps/map-layer';\n\n\nexport class CalibrationPointLayer extends FeatureClassLayer {\n  versionName: string;\n  dateFormat: LayerDateFormat;\n  routeIdFieldName: string;\n  networkFieldName: string;\n  fromDateFieldName: string;\n  toDateFieldName: string;\n  measureFieldName: string;\n  lrs: { id: string, name: string; };\n}\n","export enum CapturePosition {\n    Center = 'center',\n    Left = 'left',\n    Right = 'right',\n    Sld = 'sld',\n    Map = 'map',\n    Lane = 'lane',\n    Shoulder = 'shoulder',\n    Curb = 'curb',\n}\n","import { FeatureClassLayer } from '../../maps/feature-class-layer';\nimport { LayerDateFormat } from '../../maps/map-layer';\n\n\nexport class CenterlineLayer extends FeatureClassLayer {\n  versionName: string;\n  dateFormat: LayerDateFormat;\n  centerlineIdFieldName: string;\n  roadwayIdFieldName: string;\n  lrs: { id: string, name: string; };\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\n\n// 3rd Party.\nimport { Observable } from 'rxjs';\nimport { LayerField, toFieldName, getGeometryFieldName } from '../../maps/fields/layer-field';\nimport { LrsLayer } from '../lrs-layer';\nimport { DataSource } from '../../data-source/data-source';\nimport { EsriMapServerService } from '../../esri/esri-map-server.service';\nimport { DataSourceService } from '../../data-source/data-source.service';\nimport { NetworkFeatureCollection } from '../networks/network-feature-collection';\nimport { NetworkLayer } from '../networks/network-layer';\nimport { EsriMapServiceQueryOptions } from '../../esri/query/esi-map-service-query-options';\nimport { WhereClauseBuilder } from '../../maps/where-clause-builder';\nimport { DataSourceConfig } from '../../data-source/data-source-config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LrsDataService {\n  constructor(\n    private mapService: EsriMapServerService,\n    private dataSourceService: DataSourceService,\n    private dataSourceConfig: DataSourceConfig\n  ) {\n  }\n\n  getUniqueValues<T>(dataSource: DataSource, layer: LrsLayer, field: string | LayerField, whereClause?: string): Observable<T[]> {\n    const mapServiceParams: EsriMapServiceQueryOptions = { gdbVersion: layer.versionName };\n    let httpParams;\n\n    if (whereClause) {\n      mapServiceParams.where = whereClause;\n      httpParams = new HttpParams().set('where', whereClause);\n    }\n\n    return dataSource.serviceUrl\n      ? this.mapService.getUniqueValues<T>(dataSource.serviceUrl, layer, field, mapServiceParams)\n      : this.dataSourceService.getUniqueColumnValues<T>(dataSource.id, layer.featureClassName, toFieldName(field), httpParams);\n  }\n\n  getQueryCount(dataSource: DataSource, layer: LrsLayer, whereClause: string): Observable<number> {\n    return dataSource.serviceUrl\n      ? this.mapService.getQueryCount(dataSource.serviceUrl, layer, whereClause, { gdbVersion: layer.versionName })\n      : this.dataSourceService.getRecordCount(dataSource.id, layer.featureClassName, whereClause, layer.versionName);\n  }\n\n  queryRoutesByIds(dataSource: DataSource, layer: NetworkLayer, routeIds: string[]): Observable<NetworkFeatureCollection> {\n    if (!routeIds || !routeIds.length) {\n      throw new Error('Failed to query routes. No route IDs supplied.');\n    }\n\n    if (!layer.compositeRouteIdFieldName) {\n      throw new Error(`Failed to query routes. No 'compositeRouteIdFieldName' property found for layer.`);\n    }\n\n    const whereClause = `${layer.compositeRouteIdFieldName} IN ('${routeIds.join(`','`)}')`;\n    return this.queryRoutes(dataSource, layer, whereClause);\n  }\n\n  queryRoutes(dataSource: DataSource, layer: NetworkLayer, whereClause?: string): Observable<NetworkFeatureCollection> {\n    const shapeFieldName = getGeometryFieldName(layer.fields);\n\n    return dataSource.serviceUrl\n      ? this.mapService.queryRoutes(dataSource.serviceUrl, layer, whereClause, { gdbVersion: layer.versionName })\n      : this.dataSourceService.querySpatialData(\n        dataSource.id,\n        layer.featureClassName,\n        whereClause,\n        layer.versionName,\n        null,\n        null,\n        true,\n        shapeFieldName\n      );\n  }\n\n  searchRoutesByText(dataSource: DataSource, layer: NetworkLayer, searchText: string): Observable<NetworkFeatureCollection> {\n    const useMapService = Boolean(dataSource.serviceUrl);\n    const shapeFieldName = getGeometryFieldName(layer.fields);\n    let whereClause: string;\n\n    if (!useMapService) {\n      whereClause = new WhereClauseBuilder({\n        quoteFields: !this.dataSourceConfig.skipColumnQuotes\n      })\n        .whereLike(layer.displayField, searchText)\n        .toWhereClause();\n    }\n\n    return useMapService\n      ? this.mapService.searchRoutesByText(dataSource.serviceUrl, layer, searchText, { gdbVersion: layer.versionName })\n      : this.dataSourceService.querySpatialData(\n        dataSource.id,\n        layer.featureClassName,\n        whereClause,\n        layer.versionName,\n        null,\n        null,\n        true,\n        shapeFieldName\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AutoConfig } from '../core/auto-config.decorator';\nimport { ResourceConfig } from '../core/resource.config';\n\n\n/**\n * Configuration class for storing global ESRI-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('LrsConfig')\nexport class LrsConfig extends ResourceConfig {\n  dataSourceLrsMetadataEndpoint = 'api/spatial/data/sources/{dataSourceId}/lrs/meta';\n  cacheInSessionLrsMetadata = true;\n}\n","// Angular.\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { LrsConfig } from './lrs.config';\nimport { LrsMetadata } from './lrs-metadata';\nimport { join } from '../core/url/join.function';\nimport { BaseResourceService } from '../core/resource/base-resource.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataSourceLrsMetadataService extends BaseResourceService<LrsMetadata> {\n  constructor(protected http: HttpClient, config: LrsConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.dataSourceLrsMetadataEndpoint),\n      idFieldName: 'dataSourceId'\n    });\n  }\n\n  create(entity: LrsMetadata, routeTokens?: any, params?: HttpParams): Observable<LrsMetadata> {\n    routeTokens = routeTokens || {};\n    routeTokens.id = entity.dataSourceId;\n\n    return super.create(entity, routeTokens, params);\n  }\n}\n","import { FeatureClassLayer } from '../maps/feature-class-layer';\nimport { LayerDateFormat, MapLayerType, MapLayer } from '../maps/map-layer';\nimport { SpatialReferenceInfo } from '../maps/spatial-reference';\nimport { stripTableName } from '../data-source/data-table';\nimport { CapturePositionDefinition } from './capture-position-definition';\nimport { LaneMetadata } from './lane-metadata';\nimport { CapturePosition } from './capture-position';\n\n\nexport function getLayerTableName(layer: LrsLayer, stripLayerTableName: boolean = false) {\n  let tableName = layer\n    ? layer.featureClassName || layer.datasetName\n    : null;\n\n  if (stripLayerTableName) {\n    tableName = stripTableName(tableName);\n  }\n\n  return tableName;\n}\n\nexport interface TemporalLayer {\n  fromDateFieldName?: string;\n  toDateFieldName?: string;\n}\n\n\nexport interface DataLayer {\n  featureClassName: string;\n}\n\n\nexport interface NetworkLayerMappingInfo {\n  id: number;\n  name?: string;\n  type?: MapLayerType;\n}\n\n\nexport interface LrsReferenceLayer extends TemporalLayer {\n  routeIdFieldName: string;\n  fromMeasureFieldName: string;\n  toMeasureFieldName: string;\n}\n\n\nexport interface LrsDataReferenceLayer extends LrsReferenceLayer, DataLayer {\n}\n\n\nexport interface ChildLrsLayer {\n  parentNetwork: NetworkLayerMappingInfo;\n}\n\nexport interface EditableLayer {\n  targetFeatureClassName?: string;\n  modifiedDateFieldName?: string;\n  modifiedByFieldName?: string;\n}\n\nexport class LrsLayer extends FeatureClassLayer implements LaneMetadata, EditableLayer {\n  // Standard LRS properties.\n  featureClassName: string;\n\n  lrsNetworkId?: number;\n  datasetName?: string;\n  unitsOfMeasure?: string;\n  measurePrecision?: number;\n  temporalViewDate?: Date;\n  timeZoneOffset?: number;\n  versionName?: string;\n  isRouteEventSource?: boolean;\n  isStaged?: boolean;\n  dateFormat?: LayerDateFormat;\n  spatialReferenceInfo?: SpatialReferenceInfo;\n  fromDateFieldName?: string;\n  toDateFieldName?: string;\n  lrs?: NetworkLayerMappingInfo;\n\n  // Edit properties.\n  targetFeatureClassName?: string;\n  modifiedDateFieldName?: string;\n  modifiedByFieldName?: string;\n\n  preventOverlaps?: boolean;\n  autoStopCaptureOnRecordBreak?: boolean;\n\n  // Lane metadata implementation.\n  forwardLaneCountFieldName?: string;\n  reverseLaneCountFieldName?: string;\n\n  positionIdentifierFieldName?: string;\n  capturePositions: CapturePositionDefinition[];\n\n  laneDrawValueOrder?: string[];\n  laneIdentifierReverseValues?: string[];\n\n  constructor(...sources: MapLayer[]) {\n    super(...sources);\n    this.capturePositions = this.capturePositions ? this.capturePositions : [];\n  }\n\n  getPositionByValue(value): CapturePositionDefinition {\n    return this.capturePositions.find(positionDef => positionDef.value === value);\n  }\n\n  getPositions(position: CapturePosition): CapturePositionDefinition[] {\n    return this.capturePositions.filter(positionDef => positionDef.position === position);\n  }\n\n  hasPosition(position: CapturePosition): boolean {\n    const positions = this.getPositions(position);\n    return positions.length > 0;\n  }\n\n  get hasAnyPositions(): boolean {\n    return this.capturePositions.length > 0;\n  }\n\n  get hasLanePosition(): boolean {\n    const positions = this.getPositions(CapturePosition.Lane);\n    return positions.length > 0;\n  }\n\n  get hasLeftPosition(): boolean {\n    const positions = this.getPositions(CapturePosition.Left);\n    return positions.length > 0;\n  }\n\n  get hasRightPosition(): boolean {\n    const positions = this.getPositions(CapturePosition.Right);\n    return positions.length > 0;\n  }\n\n  get hasCenterPosition(): boolean {\n    const positions = this.getPositions(CapturePosition.Center);\n    return positions.length > 0;\n  }\n}\n","import {\n  LrsLayer,\n  LrsDataReferenceLayer,\n  ChildLrsLayer,\n  NetworkLayerMappingInfo\n} from '../lrs-layer';\n\n\nexport class EventLayer extends LrsLayer implements LrsDataReferenceLayer, ChildLrsLayer {\n  routeIdFieldName: string;\n  eventIdFieldName: string;\n  routeNameFieldName: string;\n  fromMeasureFieldName: string;\n  toMeasureFieldName: string;\n  shapeFieldName: string;\n  xFieldName: string;\n  yFieldName: string;\n  locErrorFieldName: string;\n  canSpanRoutes: boolean;\n  hasReferentLocation: boolean;\n  isStationEvent: boolean;\n  parentNetwork: NetworkLayerMappingInfo;\n}\n","import { NetworkLayer } from '../networks/network-layer';\nimport { HierarchyFilter } from './hierarchy-filter';\n\n\nexport function generateHierarchyFilters(layer: NetworkLayer): HierarchyFilter[] {\n  return layer.routeIdFields.map((fieldName, index) => {\n    const isFirst = index === 0;\n    const field = layer.fields.find(f => f.name === fieldName);\n\n    if (!field) {\n      throw new Error(`Invalid network layer 'routeIdFields' configuration. Field '${fieldName}' not found on layer.`);\n    }\n\n    return {\n      isRoot: isFirst,\n      label: field.alias,\n      networkLayerIdFieldName: field.name\n    };\n  });\n}\n","import { ChildLrsLayer, NetworkLayerMappingInfo } from '../lrs-layer';\nimport { FeatureClassLayer } from '../../maps/feature-class-layer';\n\n\nexport class IntersectionLayer extends FeatureClassLayer implements ChildLrsLayer {\n  intersectionIdFieldName: string;\n  intersectionNameFieldName: string;\n  parentNetworkDescriptionFieldName: string;\n  measureFieldName: string;\n  parentNetwork: NetworkLayerMappingInfo;\n}\n","import { MapLayer } from '../maps/map-layer';\n\n\nexport function findLayer(layerId: number, ...layerList: MapLayer[][]): MapLayer {\n  let layer: MapLayer;\n  layerList.forEach(layers => {\n    layer = layer || (layers || []).find(l => l && l.id === layerId);\n  });\n\n  return layer;\n}\n","import { LrsLayer, NetworkLayerMappingInfo } from '../lrs-layer';\nimport { HierarchyFilter } from '../hierarchy/hierarchy-filter';\nimport { MapLayer } from '../../maps/map-layer';\nimport { generateHierarchyFilters } from '../hierarchy/generate-hierarchy-filters.function';\n\n\nexport class NetworkLayer extends LrsLayer {\n  routeIdFields: string[];\n  routeIdSeparator: string;\n  compositeRouteIdFieldName: string;\n  routeNameFieldName: string;\n  hasDominanceRules: boolean;\n  autoGenerateRouteName: boolean;\n  supportsLines: boolean;\n  eventLayers: NetworkLayerMappingInfo[];\n  intersectionLayers: NetworkLayerMappingInfo[];\n  hierarchyFilter: HierarchyFilter[];\n\n  constructor(...sources: MapLayer[]) {\n    super(...sources);\n\n    this.routeIdFields = this.routeIdFields || [];\n    this.eventLayers = this.eventLayers || [];\n    this.intersectionLayers = this.intersectionLayers || [];\n    this.hierarchyFilter = this.hierarchyFilter && this.hierarchyFilter.length\n      ? this.hierarchyFilter\n      : generateHierarchyFilters(this);\n  }\n}\n","import { LrsReferenceLayer, LrsLayer } from '../lrs-layer';\n\n\nexport class RedlineLayer extends LrsLayer implements LrsReferenceLayer {\n  routeIdFieldName: string;\n  routeNameFieldName: string;\n  fromMeasureFieldName: string;\n  toMeasureFieldName: string;\n  activityTypeFieldName: string;\n  networkFieldName: string;\n\n  get effectiveDateFieldName(): string {\n    return this.fromDateFieldName;\n  }\n\n  set effectiveDateFieldName(effectiveDateFieldName: string) {\n    this.fromDateFieldName = effectiveDateFieldName;\n  }\n}\n","import { FeatureClassLayer } from './feature-class-layer';\nimport { MapTable } from './map-table';\nimport { clone } from '../core/clone/clone.function';\nimport { Cloneable } from '../core/clone/cloneable';\n\n\nexport class MapServerMetadata implements Cloneable<MapServerMetadata> {\n  layers: FeatureClassLayer[];\n  tables: MapTable[];\n\n  assign(source: any): MapServerMetadata {\n    Object.assign(this, source);\n    return this;\n  }\n\n  clone(): MapServerMetadata {\n    const copy = clone(this);\n    return new MapServerMetadata()\n      .assign(copy);\n  }\n}\n","import { LrsLayer } from './lrs-layer';\nimport { NetworkLayer } from './networks/network-layer';\nimport { getIdField } from '../maps/fields/layer-field';\nimport { LrsMetadata } from './lrs-metadata';\nimport { ValidationCheck } from '../core/validation/validation-check';\n\n\nexport const LRS_LAYER_VALIDATIONS: ValidationCheck<LrsLayer> = new ValidationCheck<LrsLayer>(`Layer '{name}'`)\n  .add(\n    new ValidationCheck<LrsLayer>('should have list of fields')\n      .pass(l => Boolean(l.fields && l.fields.length)),\n\n    new ValidationCheck<LrsLayer>('should have an ID field in list of fields')\n      .pass(l => Boolean(getIdField(l.fields)))\n  );\n\nexport const LRS_NETWORK_LAYER_VALIDATIONS: ValidationCheck<NetworkLayer> = new ValidationCheck<NetworkLayer>(\n  `Network layer '{name}' (ID: {id})`\n)\n  .add(\n    new ValidationCheck<NetworkLayer>(`should have a 'Composite Route ID Field Name' value specified`)\n      .pass(l => Boolean(l.compositeRouteIdFieldName))\n  );\n\nexport const LRS_EVENT_LAYER_VALIDATIONS: ValidationCheck<NetworkLayer> = new ValidationCheck<NetworkLayer>(\n  `Event layer '{name}' (ID: {id})`\n)\n  .add(\n    new ValidationCheck<NetworkLayer>(`should have a 'From Measure Field Name' value specified`)\n      .pass(l => Boolean(l.compositeRouteIdFieldName))\n  );\n\nexport const LRS_METADATA_VALIDATIONS: ValidationCheck<LrsMetadata> = new ValidationCheck<LrsMetadata>('LRS Metadata')\n  .add(\n    new ValidationCheck<LrsMetadata>('should have network layers')\n      .pass(x => Boolean(x.networkLayers && x.networkLayers.length)),\n\n    new ValidationCheck<LrsMetadata>('should have event layers')\n      .pass(x => Boolean(x.eventLayers && x.eventLayers.length)),\n\n    // TODO: Add other nested validations - RG.\n    // .forProperty(lrsMeta => lrsMeta.eventLayers)\n    // .add()\n  );\n","import { FeatureClassLayer } from '../../maps/feature-class-layer';\nimport { LayerDateFormat } from '../../maps/map-layer';\n\n\nexport class NonLrsLayer extends FeatureClassLayer {\n  featureClassName: string;\n  versionName: string;\n  dateFormat: LayerDateFormat;\n}\n","import { DataSource } from '../data-source/data-source';\nimport { FeatureClassLayer } from '../maps/feature-class-layer';\nimport { IntersectionLayer } from './intersections/intersection-layer';\nimport { EventLayer } from './events/event-layer';\nimport { NetworkLayer } from './networks/network-layer';\nimport { RedlineLayer } from './redlines/redline-layer';\nimport { CenterlineLayer } from './centerlines/centerline-layer';\nimport { CalibrationPointLayer } from './calibration-points/calibration-point-layer';\nimport { MapServerMetadata } from '../maps/map-server-metadata';\nimport { getGeometryField, getIdField, LayerFieldDomain } from '../maps/fields/layer-field';\nimport { MapLayer } from '../maps/map-layer';\nimport { LrsLayer } from './lrs-layer';\nimport { LrsLayerDetail } from './lrs-layer-detail';\nimport { LrsInfo } from './lrs-info';\nimport { findLayer } from './layer-search';\nimport { mergeMapMetadata, mergeLrsMetadata, deepMergeMapMetadata } from './lrs-metadata-merge';\nimport { LRS_METADATA_VALIDATIONS } from './lrs-metadata-validations';\nimport { NonLrsLayer } from './non-lrs/non-lrs-layer';\nimport { Cloneable } from '../core/clone/cloneable';\nimport { isNotValue } from '../core/type-check/is-not-value.function';\nimport { clone } from '../core/clone/clone.function';\nimport { ValidationResult } from '../core/validation/validation-results';\n\n\nfunction find(layerId: number, ...layerList: MapLayer[][]): MapLayer {\n  return findLayer(layerId, ...layerList);\n}\n\n\nexport class LrsMetadata extends MapServerMetadata implements Cloneable<LrsMetadata> {\n  dataSource: DataSource;\n  dataSourceId: string;\n  name: string;\n  serviceHasLrsMeta: boolean;\n  networkLayers: NetworkLayer[] = [];\n  eventLayers: EventLayer[] = [];\n  redlineLayers: RedlineLayer[] = [];\n  centerlineLayers: CenterlineLayer[] = [];\n  calibrationPointLayers: CalibrationPointLayer[] = [];\n  intersectionLayers: IntersectionLayer[] = [];\n  nonLRSLayers: FeatureClassLayer[] = [];\n  lrs: LrsInfo[] = [];\n  domains: LayerFieldDomain[] = [];\n\n  constructor(dataSource?: DataSource) {\n    super();\n\n    if (dataSource) {\n      this.dataSource = dataSource;\n      this.dataSourceId = dataSource.id;\n    }\n  }\n\n  /**\n   * Gets a layer by ID - searching across all types (event layers, network layers, etc).\n   */\n  getLayer(layerId: number): MapLayer {\n    return find(layerId, this.getAllLayers());\n  }\n\n  getLrsLayer(layerId: number): LrsLayer {\n    return (\n      find(layerId, this.networkLayers, this.eventLayers, this.redlineLayers)\n    ) as LrsLayer;\n  }\n\n  getLayerDetail(layerId: number): LrsLayerDetail {\n    // TODO: Come up with a better way to check these layer types.\n    // NOTE: We are doing all of these boolean checks instead of just simply calling\n    // isEventLayer = this.isEventLayer(layerId) because of performance reasons.\n    const isLrsLayer = this.isLrsLayer(layerId);\n    const isEventLayer = this.isEventLayer(layerId);\n    const isNetworkLayer = !isEventLayer && this.isNetworkLayer(layerId);\n    const isCalibrationPointLayer = !isEventLayer && !isNetworkLayer && this.isCalibrationPointLayer(layerId);\n    const isCenterlineLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && this.isCenterlineLayer(layerId);\n    const isIntersectionLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer\n      && this.isIntersectionLayer(layerId);\n    const isRedlineLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer && !isIntersectionLayer\n      && this.isRedlineLayer(layerId);\n    const isTable = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer && !isIntersectionLayer\n      && !isRedlineLayer && this.isTable(layerId);\n    const isNonLRSLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer && !isIntersectionLayer\n      && !isRedlineLayer && !isTable && this.isNonLRSLayer(layerId);\n    const layer: MapLayer = this.getLayer(layerId);\n    const shapeField = layer ? getGeometryField(layer.fields) : null;\n    const idField = layer ? getIdField(layer.fields) : null;\n\n    return {\n      layer,\n      layerId,\n      isEventLayer,\n      isNetworkLayer,\n      isCalibrationPointLayer,\n      isCenterlineLayer,\n      isIntersectionLayer,\n      isRedlineLayer,\n      isTable,\n      isNonLRSLayer,\n      isLrsLayer,\n      shapeField,\n      idField,\n    };\n  }\n\n  isLrsLayer(layerId: number): boolean {\n    return Boolean(\n      this.getLrsLayer(layerId)\n    );\n  }\n\n  isNetworkLayer(layerId: number): boolean {\n    return Boolean(find(layerId, this.networkLayers));\n  }\n\n  isEventLayer(layerId: number): boolean {\n    return Boolean(find(layerId, this.eventLayers));\n  }\n\n  isIntersectionLayer(layerId: number): boolean {\n    return Boolean(find(layerId, this.intersectionLayers));\n  }\n\n  isRedlineLayer(layerId: number): boolean {\n    return Boolean(find(layerId, this.redlineLayers));\n  }\n\n  isCenterlineLayer(layerId: number): boolean {\n    return Boolean(find(layerId, this.centerlineLayers));\n  }\n\n  isCalibrationPointLayer(layerId: number): boolean {\n    return Boolean(find(layerId, this.calibrationPointLayers));\n  }\n\n  isNonLRSLayer(layerId: number): boolean {\n    return Boolean(find(layerId, this.nonLRSLayers));\n  }\n\n  isTable(layerId: number): boolean {\n    return Boolean(find(layerId, this.tables));\n  }\n\n  /**\n   * Merges map server general information into this LRS metadata instance.\n   */\n  mergeMapMetadata(mapMetadata: MapServerMetadata): LrsMetadata {\n    mergeMapMetadata(this, mapMetadata);\n    return this;\n  }\n\n  deepMergeMapMetadata(mapMetadata: MapServerMetadata): LrsMetadata {\n    deepMergeMapMetadata(this, mapMetadata);\n    return this;\n  }\n\n  /**\n   * Merges other LRS metadata into this LRS metdata instance.\n   */\n  mergeLrsMetadata(lrsMetadata: LrsMetadata): LrsMetadata {\n    mergeLrsMetadata(this, lrsMetadata);\n    return this;\n  }\n\n  getNetworkLayer(layerId: number): NetworkLayer {\n    return find(layerId, this.networkLayers) as NetworkLayer;\n  }\n\n  getEventLayer(layerId: number): EventLayer {\n    return find(layerId, this.eventLayers) as EventLayer;\n  }\n\n  getIntersectionLayer(layerId: number): IntersectionLayer {\n    return find(layerId, this.intersectionLayers) as IntersectionLayer;\n  }\n\n  getLrsLayers(): LrsLayer[] {\n    return (this.eventLayers as LrsLayer[])\n      .concat(this.networkLayers)\n      .concat(this.redlineLayers);\n  }\n\n  getFeatureClassLayers(): FeatureClassLayer[] {\n    return (this.eventLayers as FeatureClassLayer[])\n      .concat(this.networkLayers)\n      .concat(this.redlineLayers)\n      .concat(this.calibrationPointLayers)\n      .concat(this.centerlineLayers)\n      .concat(this.nonLRSLayers);\n  }\n\n  getAllLayers(): MapLayer[] {\n    return (this.getFeatureClassLayers() as MapLayer[])\n      .concat(this.tables)\n      .concat(this.layers);\n  }\n\n  getNetworkIdForLayer(layer: LrsLayer): number | null {\n    let networkId: number = null;\n    if (this.isEventLayer(layer.id)) {\n      const eventLayer = layer as EventLayer;\n      networkId = eventLayer.parentNetwork ? eventLayer.parentNetwork.id : null;\n    }\n\n    if (isNotValue(networkId)) {\n      this.networkLayers.forEach(network => {\n        if (network.eventLayers.find(l => l.id === layer.id)) {\n          networkId = network.id;\n        }\n      });\n    }\n\n    return networkId;\n  }\n\n  getEventLayersByNetwork(networkLayerId: number): EventLayer[] {\n    const networkLayer = this.getNetworkLayer(networkLayerId);\n    return this.eventLayers.filter(layer =>\n      layer.parentNetwork\n      && layer.parentNetwork.id === networkLayerId\n      || networkLayer.eventLayers\n      && networkLayer.eventLayers.find(l => l.id === layer.id)\n    );\n  }\n\n  rebuildLayers(): this {\n    this.eventLayers = this.eventLayers.map(eventLayer => new EventLayer(find(eventLayer.id, this.layers), eventLayer));\n    this.networkLayers = this.networkLayers.map(networkLayer => new NetworkLayer(find(networkLayer.id, this.layers), networkLayer));\n    this.redlineLayers = this.redlineLayers.map(redlineLayer => new RedlineLayer(find(redlineLayer.id, this.layers), redlineLayer));\n    this.centerlineLayers = this.centerlineLayers.map(centerlineLayer => new CenterlineLayer(centerlineLayer));\n    this.calibrationPointLayers = this.calibrationPointLayers.map(\n      calibrationPointLayer => new CalibrationPointLayer(calibrationPointLayer)\n    );\n    this.intersectionLayers = this.intersectionLayers.map(intersectionLayer => new IntersectionLayer(intersectionLayer));\n    this.nonLRSLayers = this.nonLRSLayers.map(nonLrsLayer => new NonLrsLayer(find(nonLrsLayer.id, this.layers), nonLrsLayer));\n\n    return this.assignCodedValueDomainsToFields();\n  }\n\n  assignCodedValueDomainsToFields(): this {\n    if (this.domains.length) {\n      this.getFeatureClassLayers()\n        .forEach(layer => layer.applyFieldDomains(this.domains));\n    }\n\n    return this;\n  }\n\n  assign(source: any): this {\n    Object.assign(this, source);\n    return this;\n  }\n\n  clone(): LrsMetadata {\n    const copy = clone(this);\n    return new LrsMetadata()\n      .assign(copy)\n      .rebuildLayers();\n  }\n\n  validate(): ValidationResult {\n    return LRS_METADATA_VALIDATIONS\n      .check(this);\n  }\n}\n","import { LayerField, LayerFieldDomain } from '../maps/fields/layer-field';\nimport { LrsMetadata } from './lrs-metadata';\nimport { MapServerMetadata } from '../maps/map-server-metadata';\nimport { findLayer } from './layer-search';\nimport { MapLayer } from '../maps/map-layer';\nimport { NetworkLayer } from './networks/network-layer';\nimport { DataSource } from '../data-source/data-source';\nimport { LayerDrawingInfo } from '../maps/drawing/layer-drawing-info';\nimport { FeatureClassLayer } from '../maps/feature-class-layer';\nimport { mergeDeep } from '../core/merge/merge-deep.function';\nimport { mergeDeepArray } from '../core/merge/merge-deep-array.function';\nimport { isNumber } from '../core/type-check/is-number.function';\nimport { LrsLayer } from './lrs-layer';\n\n\nfunction find(layerId: number, ...layerList: MapLayer[][]): MapLayer {\n  return findLayer(layerId, ...layerList);\n}\n\nfunction setLayerDefaults(layer: MapLayer): void {\n  layer.fields = layer.fields || [];\n}\n\nfunction setNetworkLayerDefaults(layer: NetworkLayer): void {\n  if (layer) {\n    layer.hierarchyFilter = layer.hierarchyFilter || [];\n  }\n}\n\nexport function mergeFieldDomains(target: LayerFieldDomain, source: LayerFieldDomain) {\n  mergeDeep(target, source, { ignoreArrays: true });\n\n  if (target && target.codedValues && source && source.codedValues) {\n    mergeDeepArray(target.codedValues, source.codedValues, { identifier: 'code' });\n  }\n}\n\nexport function mergeFields(target: LayerField[], source: LayerField[]) {\n  target = target || [];\n  source = source || [];\n\n  mergeDeepArray(target, source, {\n    identifier: 'name',\n    beforeMerge: (targetField: LayerField, sourceField: LayerField) => {\n      if (targetField.domain && sourceField.domain && sourceField.domain.codedValues) {\n        const doValuesNeedMerged = sourceField.domain.codedValues.filter(c => isNumber(c.order));\n\n        if (doValuesNeedMerged && doValuesNeedMerged.length) {\n          mergeFieldDomains(targetField.domain, sourceField.domain);\n          return false;\n        }\n      }\n    }\n  });\n}\n\nexport function mergeLayer(target: MapLayer, source: MapLayer) {\n  if (!target || !source) {\n    return;\n  }\n\n\n  const lrsTarget = target as LrsLayer;\n  const lrsSource = source as LrsLayer;\n  const targetCapturePositions = lrsTarget.capturePositions || [];\n  const sourceCapturePositions = lrsSource.capturePositions || [];\n  const targetDrawingInfo = lrsTarget.drawingInfo as LayerDrawingInfo;\n  const sourceDrawingInfo = lrsSource.drawingInfo as LayerDrawingInfo;\n  const hasDrawingInfo = Boolean(targetDrawingInfo || sourceDrawingInfo);\n  const drawingInfo = new LayerDrawingInfo(lrsTarget.drawingInfo as LayerDrawingInfo, lrsSource.drawingInfo as LayerDrawingInfo);\n\n  mergeDeep(target, source, { ignoreArrays: true });\n  mergeFields(target.fields, source.fields);\n\n  if (hasDrawingInfo) {\n    (target as FeatureClassLayer).drawingInfo = drawingInfo;\n  }\n\n  if (!targetCapturePositions.length && sourceCapturePositions.length) {\n    lrsTarget.capturePositions = sourceCapturePositions;\n  }\n}\n\nexport function mergeLayers(\n  target: MapLayer[],\n  source: MapLayer[],\n  sourceMetadata?: LrsMetadata,\n  sort = true,\n  onMergeComplete: (target: MapLayer, source: MapLayer) => any = null\n) {\n  target = target || [];\n  source = source || [];\n\n  target.forEach((targetLayer: MapLayer) => {\n    setLayerDefaults(targetLayer);\n    mergeLayer(targetLayer, source.find(sourceLayer => sourceLayer.id === targetLayer.id));\n  });\n\n  // There will be occurences where the source has layers that the target doesn't, which\n  // means that the merge will not happen above, because the target is the one being looped.\n  source\n    .filter(src => !target.find(x => src.id === x.id))\n    .forEach(missing => {\n      let newLayer: MapLayer = missing;\n      if (sourceMetadata) {\n        const merger: MapLayer = find(missing.id, sourceMetadata.tables, sourceMetadata.layers, sourceMetadata.nonLRSLayers);\n\n        // We want to preseve the original table or layer, so we don't overwrite it here.\n        newLayer = Object.assign({}, merger);\n        mergeLayer(newLayer, missing);\n      }\n\n      setLayerDefaults(newLayer);\n      target.push(newLayer);\n    });\n\n  if (sort) {\n    target.sort((layer1, layer2) => layer1.order - layer2.order);\n  }\n\n  if (onMergeComplete) {\n    target.forEach((targetLayer: MapLayer) => {\n      onMergeComplete(targetLayer, source.find(sourceLayer => sourceLayer.id === targetLayer.id));\n    });\n  }\n}\n\nexport function mergeNetworkLayers(target: NetworkLayer[], source: NetworkLayer[], sourceMetadata?: LrsMetadata) {\n  const isSorted = true;\n  mergeLayers(target, source, sourceMetadata, isSorted, onMergeNetworkLayerComplete);\n}\n\nexport function onMergeNetworkLayerComplete(targetLayer: NetworkLayer, sourceLayer: NetworkLayer): void {\n  setNetworkLayerDefaults(targetLayer);\n  setNetworkLayerDefaults(sourceLayer);\n\n  if (targetLayer && sourceLayer) {\n    mergeDeepArray(targetLayer.hierarchyFilter, sourceLayer.hierarchyFilter, { identifier: 'name' });\n  }\n}\n\nexport function mergeLrsMetadata(target: LrsMetadata, ...source: LrsMetadata[]): void {\n  source.forEach(srcMeta => {\n    const dataSource = srcMeta.dataSource || target.dataSource;\n    mergeDeep(target, srcMeta, { ignoreArrays: true });\n\n    if (dataSource) {\n      target.dataSource = dataSource;\n    }\n\n    mergeNetworkLayers(target.networkLayers, srcMeta.networkLayers, target);\n    mergeLayers(target.eventLayers, srcMeta.eventLayers, target);\n    mergeLayers(target.calibrationPointLayers, srcMeta.calibrationPointLayers, target);\n    mergeLayers(target.intersectionLayers, srcMeta.intersectionLayers, target);\n    mergeLayers(target.centerlineLayers, srcMeta.centerlineLayers, target);\n    mergeLayers(target.redlineLayers, srcMeta.redlineLayers, target);\n    mergeLayers(target.nonLRSLayers, srcMeta.nonLRSLayers, target);\n    mergeLayers(target.layers, srcMeta.layers);\n    mergeLayers(target.tables, srcMeta.tables);\n  });\n}\n\nexport function mergeMapMetadata(target: LrsMetadata, ...source: MapServerMetadata[]): void {\n  source.forEach(meta => {\n    Object.assign(target, meta);\n  });\n}\n\nexport function deepMergeMapMetadata(target: LrsMetadata, ...source: MapServerMetadata[]): void {\n  source.forEach(meta => {\n    meta.layers.forEach(nonLrsLayerInfo => {\n      const targetLayer = target.getLrsLayer(nonLrsLayerInfo.id);\n      if (targetLayer) {\n        const baseFields = [...nonLrsLayerInfo.fields];\n        mergeFields(baseFields, targetLayer.fields);\n        targetLayer.fields = baseFields;\n        if (nonLrsLayerInfo.geometryType) {\n          targetLayer.geometryType = nonLrsLayerInfo.geometryType;\n        }\n\n        targetLayer.drawingInfo = new LayerDrawingInfo(nonLrsLayerInfo.drawingInfo, targetLayer.drawingInfo);\n      }\n    });\n  });\n}\n\nexport function mergeLrsMetadataSources(\n  dataSource: DataSource,\n  dataSourceLrsMetadata: LrsMetadata,\n  mapServerLrsMetadata: LrsMetadata,\n  mapServerMetadata: MapServerMetadata\n): LrsMetadata {\n  const hasMapServerLrsMetadata = Boolean(mapServerLrsMetadata);\n  const fullLrsMeta = mapServerLrsMetadata\n    || dataSourceLrsMetadata\n    || new LrsMetadata(dataSource);\n\n  fullLrsMeta.mergeMapMetadata(mapServerMetadata);\n  fullLrsMeta.dataSource = fullLrsMeta.dataSource || dataSource;\n  fullLrsMeta.dataSourceId = fullLrsMeta.dataSourceId || dataSource.id;\n\n  if (hasMapServerLrsMetadata) {\n    // If the map service has LRS metadata then we need to merge the\n    // data source LRS metadata into the map service lrs metadata\n    // because we want the data source metadata to be priority.\n    fullLrsMeta.mergeLrsMetadata(dataSourceLrsMetadata);\n  } else {\n    // We only need to do a dep merge when there is no LRS metadata available in the map service because\n    // the map service LRS metadata provides all of the same information as the map server metadata (like fields).\n    fullLrsMeta.deepMergeMapMetadata(mapServerMetadata);\n  }\n\n  fullLrsMeta.rebuildLayers();\n\n  return fullLrsMeta;\n}\n","import { HttpClient } from '@angular/common/http';\n\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, tap, mergeMap } from 'rxjs/operators';\n\nimport { LrsMetadata } from './lrs-metadata';\nimport { DataSource } from '../data-source/data-source';\nimport { DataSourceService } from '../data-source/data-source.service';\nimport { MapServerMetadata } from '../maps/map-server-metadata';\nimport { DataSourceLrsMetadataService } from './data-source-lrs-metadata.service';\nimport { Logger } from '../core/logging/logger.service';\nimport { NotifyService } from '../core/notify/notify.service';\nimport { EsriMapServerService } from '../esri/esri-map-server.service';\nimport { mergeLrsMetadataSources } from './lrs-metadata-merge';\nimport { isString } from '../core/type-check/is-string.function';\n\n\nexport class LrsMetadataRetriever {\n  private dataSourceId: string;\n  private dataSource: DataSource;\n  private dataSourceLrsMetadata: LrsMetadata;\n  private mapServerMetadata: MapServerMetadata;\n  private mapServerLrsMetadata: LrsMetadata;\n\n  constructor(\n    protected http: HttpClient,\n    protected mapServer: EsriMapServerService,\n    protected dataSourceService: DataSourceService,\n    protected dataSourceLrsMetadataService: DataSourceLrsMetadataService,\n    protected notify: NotifyService,\n    protected log: Logger) {\n  }\n\n  public withDataSource(dataSource: string | DataSource): LrsMetadataRetriever {\n    if (isString(dataSource)) {\n      this.dataSourceId = dataSource as string;\n    } else {\n      this.dataSource = dataSource as DataSource;\n      this.dataSourceId = this.dataSource.id;\n    }\n\n    return this;\n  }\n\n  public withLrsMetadata(lrsMeta: LrsMetadata): LrsMetadataRetriever {\n    this.dataSourceLrsMetadata = lrsMeta;\n    return this;\n  }\n\n  public retrieve(): Observable<LrsMetadata> {\n    if (!this.dataSourceId) {\n      throw new Error('A data source ID must be supplied');\n    }\n\n    return of(null)\n      .pipe(\n        mergeMap(this.getDataSource.bind(this)),\n        mergeMap(this.getDataSourceLrsMetadata.bind(this)),\n        mergeMap(this.getMapServiceLayers.bind(this)),\n        mergeMap(this.getMapServiceLrsMetadata.bind(this)),\n        mergeMap(this.mergeAll.bind(this))\n      );\n  }\n\n  private getDataSource(): Observable<DataSource> {\n    const observable = this.dataSource\n      ? of(this.dataSource)\n      : this.dataSourceService\n        .get(this.dataSourceId)\n        .pipe(\n          tap((dataSource: DataSource) => this.dataSource = dataSource)\n        );\n\n    return this.notify\n      .with(observable)\n      .error(`Failed to retrieve data source by ID: ${this.dataSourceId}: {error}`)\n      .source;\n  }\n\n  private getDataSourceLrsMetadata(): Observable<LrsMetadata> {\n    const observable = this.dataSourceLrsMetadata\n      ? of(this.dataSourceLrsMetadata)\n      : this.dataSourceLrsMetadataService\n        .get(this.dataSourceId)\n        .pipe(\n          tap((meta: LrsMetadata) => {\n            this.dataSourceLrsMetadata = new LrsMetadata(this.dataSource)\n              .assign(meta);\n\n            // NOTE: If we don't recieve any data source LRS metadata back then we assume that\n            // the map service has LRS capabiliities - otherwise we have no LRS server data available.\n            if (!meta) {\n              this.dataSourceLrsMetadata.serviceHasLrsMeta = true;\n            }\n          })\n        );\n\n    return this.notify\n      .with(observable)\n      .error(`Failed to retrieve data source LRS metadata by data source ID: ${this.dataSourceId}: {error}`)\n      .source;\n  }\n\n  private getMapServiceLayers(): Observable<MapServerMetadata> {\n    const observable = this.mapServerMetadata || !this.dataSource.serviceUrl\n      ? of(this.mapServerMetadata)\n      : this.mapServer\n        .getMapLayers(this.dataSource.serviceUrl)\n        .pipe(\n          tap((meta: MapServerMetadata) => this.mapServerMetadata = new MapServerMetadata().assign(meta))\n        );\n\n    return this.notify\n      .with(observable)\n      .error(`Failed to retrieve map service metadata from URL: ${this.dataSource.serviceUrl}: {error}`)\n      .source;\n  }\n\n  private getMapServiceLrsMetadata(): Observable<LrsMetadata> {\n    const observable = !this.dataSource.serviceUrl || !this.dataSourceLrsMetadata.serviceHasLrsMeta\n      ? of(this.mapServerLrsMetadata)\n      : forkJoin([\n        this.mapServer.getLrsServer(this.dataSource.serviceUrl),\n        this.mapServer.getLrsLayers(this.dataSource.serviceUrl)\n      ])\n        .pipe(\n          map((meta: LrsMetadata[]) => {\n            const [lrsServerMeta, lrsLayersMeta] = meta;\n            const lrsMetadata = Object.assign({}, lrsServerMeta, lrsLayersMeta);\n            const mapServerLrsMetadata = new LrsMetadata().assign(lrsMetadata);\n            return mapServerLrsMetadata;\n          }),\n          tap((meta: LrsMetadata) => this.mapServerLrsMetadata = new LrsMetadata().assign(meta))\n        );\n\n    return this.notify\n      .with(observable)\n      .error(`Failed to retrieve map service LRS metadata from URL: ${this.dataSource.serviceUrl}: {error}`)\n      .source;\n  }\n\n  private mergeAll(): Observable<LrsMetadata> {\n    const fullLrsMeta = mergeLrsMetadataSources(\n      this.dataSource,\n      this.dataSourceLrsMetadata,\n      this.mapServerLrsMetadata,\n      this.mapServerMetadata\n    );\n\n    return of(fullLrsMeta);\n  }\n}\n","// Angular.\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n// TSS.\nimport { DataSourceService } from '../data-source/data-source.service';\nimport { DataSourceLrsMetadataService } from './data-source-lrs-metadata.service';\nimport { Logger } from '../core/logging/logger.service';\nimport { NotifyService } from '../core/notify/notify.service';\nimport { LrsMetadata } from './lrs-metadata';\nimport { LrsMetadataRetriever } from './lrs-metadata-retriever';\nimport { DataSource } from '../data-source/data-source';\nimport { LrsConfig } from './lrs.config';\nimport { EsriMapServerService } from '../esri/esri-map-server.service';\nimport { getDataSourceId } from '../data-source/get-data-source-id.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LrsMetadataService {\n  lrsCache: { dataSourceId: string, metaData: LrsMetadata }[] = [];\n\n  constructor(\n    protected http: HttpClient,\n    protected mapServer: EsriMapServerService,\n    protected dataSourceService: DataSourceService,\n    protected dataSourceLrsMetadataService: DataSourceLrsMetadataService,\n    protected notify: NotifyService,\n    protected config: LrsConfig,\n    protected log: Logger) {\n  }\n\n  get(dataSource: string | DataSource, lrsMetadata?: LrsMetadata): Observable<LrsMetadata> {\n    const dataSourceId = getDataSourceId(dataSource);\n    const cachedMeta = this.lrsCache.find(cache => cache.dataSourceId === dataSourceId);\n\n    if (cachedMeta) {\n      return of(cachedMeta.metaData);\n    }\n\n    return new LrsMetadataRetriever(\n      this.http,\n      this.mapServer,\n      this.dataSourceService,\n      this.dataSourceLrsMetadataService,\n      this.notify,\n      this.log\n    )\n      .withDataSource(dataSource)\n      .withLrsMetadata(lrsMetadata)\n      .retrieve()\n      .pipe(\n        tap(meta => this.tryCacheLrsMetadata(meta))\n      );\n  }\n\n  private tryCacheLrsMetadata(meta: LrsMetadata) {\n    if (this.config.cacheInSessionLrsMetadata) {\n      this.lrsCache.push({\n        dataSourceId: meta.dataSourceId,\n        metaData: meta\n      });\n    }\n  }\n}\n","// 3rd Party.\nimport { Feature, Geometry, LineString, Point, MultiLineString } from 'geojson';\n\n// TSS.\nimport { LrsFeature } from '../lrs-feature';\nimport { LrsReferenceFeature } from '../lrs-reference-feature';\nimport { toFeature } from '../feature';\nimport { RedlineLayer } from './redline-layer';\nimport { isPolygon } from '../../geometry/geometry/is-polygon.function';\nimport { Cloneable } from '../../core/clone/cloneable';\nimport { clone } from '../../core/clone/clone.function';\n\n\nexport class RedlineFeature extends LrsFeature implements LrsReferenceFeature, Cloneable<RedlineFeature> {\n  layer: RedlineLayer;\n\n  constructor(feature: Feature, layer: RedlineLayer) {\n    super(feature, layer);\n\n    this.routeId = this.getValue(layer.routeIdFieldName);\n    this.fromMeasure = this.getValue(layer.fromMeasureFieldName);\n    this.toMeasure = this.getValue(layer.toMeasureFieldName);\n    this.isLinear = Boolean(layer.toMeasureFieldName);\n  }\n\n  static create(\n    layer: RedlineLayer,\n    properties: { [name: string]: any; } = {},\n    geometry: Point | LineString | MultiLineString = null\n  ): RedlineFeature {\n    const feature: Feature = toFeature(properties, geometry as Geometry);\n    return new RedlineFeature(feature, layer);\n  }\n\n  setFromMeasure(measure: number): this {\n    this.fromMeasure = measure;\n    return this.setValue(this.layer.fromMeasureFieldName, measure);\n  }\n\n  setToMeasure(measure: number): this {\n    if (!this.isLinear) {\n      throw new Error('Cannot set to measure for a point-based feature');\n    }\n\n    this.toMeasure = measure;\n    return this.setValue(this.layer.toMeasureFieldName, measure);\n  }\n\n  setMeasureExtent(fromMeasure: number, toMeasure: number): this {\n    return this\n      .setFromMeasure(fromMeasure)\n      .setToMeasure(toMeasure);\n  }\n\n  clone(): RedlineFeature {\n    const copyFeature = clone(this.toFeature());\n    return new RedlineFeature(copyFeature, this.layer);\n  }\n\n  protected isGeometryTypeValid(): boolean {\n    return isPolygon(this.geometry) || super.isGeometryTypeValid();\n  }\n}\n","import { MapLayerType, MapLayer } from './map-layer';\nimport { LayerRelationship } from './layer-relationship';\nimport { LayerField } from './fields/layer-field';\nimport { LayerIndex } from './layer-index';\n\n\nexport class MapTable implements MapLayer {\n  currentVersion: number;\n  id: number;\n  name: string;\n  type: MapLayerType;\n  description: string;\n  hasAttachments: boolean;\n  displayField: string;\n  typeIdField: string;\n  fields: LayerField[] = [];\n  indexes: LayerIndex[] = [];\n  relationships: LayerRelationship[] = [];\n  maxRecordCount: number;\n  supportsStatistics: boolean;\n  supportsAdvancedQueries: boolean;\n  isDataVersioned: boolean;\n}\n","import { Injectable } from '@angular/core';\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing mapping-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('MapsConfig')\nexport class MapsConfig {\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing motion-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('MotionConfig')\nexport class MotionConfig {\n  allowMotionMocking = true;\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { Observable, Subject, fromEvent } from 'rxjs';\n\n// App.\nimport { Motion } from './motion';\nimport { MotionConfig } from './motion.config';\n\n\n/**\n * Geolocator service. Provides a single point of motion API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceMotionService {\n  readonly motionChange: Observable<Motion>;\n  readonly motionChangeSource: Subject<Motion>;\n\n  constructor(private readonly config: MotionConfig) {\n    this.motionChangeSource = new Subject();\n    this.motionChange = this.motionChangeSource.asObservable();\n\n    fromEvent(window, 'ondevicemotion').subscribe((event: DeviceMotionEvent) => this.emitMotionChange(event));\n  }\n\n  mockMotion(motion: Motion): this {\n    if (!this.config.allowMotionMocking) {\n      throw new Error('Permission denied to mock device motion');\n    }\n\n    this.motionChangeSource.next(motion);\n    return this;\n  }\n\n  private emitMotionChange(event: DeviceMotionEvent): void {\n    this.motionChangeSource.next({\n      x: event.acceleration.x,\n      y: event.acceleration.y,\n      z: event.acceleration.z,\n      withGravityX: event.accelerationIncludingGravity.x,\n      withGravityY: event.accelerationIncludingGravity.y,\n      withGravityZ: event.accelerationIncludingGravity.z,\n      rotationRateAlpha: event.rotationRate.alpha,\n      rotationRateBeta: event.rotationRate.beta,\n      rotationRateGamma: event.rotationRate.gamma,\n    });\n  }\n}\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssMotionModule { }\n","import { Orientation } from '../orientation';\nimport { degreesToRadians } from '../../geometry/geometry/degrees-to-radians.function';\nimport { radiansToDegrees } from '../../geometry/geometry/radians-to-degrees.function';\n\n\n\n/**\n * Returns the heading based on an orientation (alpha, beta, and gamma).\n * Note: this code was sourced from: https://stackoverflow.com/questions/18112729/calculate-compass-heading-from-deviceorientation-event-api\n */\nexport function getHeadingFromOrientation(orientation: { alpha: number, beta: number, gamma: number }): number {\n  // Convert degrees to radians\n  const alphaRad = degreesToRadians(orientation.alpha);\n  const betaRad = degreesToRadians(orientation.beta);\n  const gammaRad = degreesToRadians(orientation.gamma);\n\n  // Calculate equation components\n  const cA = Math.cos(alphaRad);\n  const sA = Math.sin(alphaRad);\n  const sB = Math.sin(betaRad);\n  const cG = Math.cos(gammaRad);\n  const sG = Math.sin(gammaRad);\n\n  // Calculate A, B, C rotation components\n  const rA = - cA * sG - sA * sB * cG;\n  const rB = - sA * sG + cA * sB * cG;\n\n  // Calculate compass heading\n  let compassHeading = Math.atan(rA / rB);\n\n  // Convert from half unit circle to whole unit circle\n  compassHeading = rB < 0\n    ? compassHeading += Math.PI\n    : compassHeading += 2 * Math.PI;\n\n  // Convert radians to degrees\n  compassHeading = radiansToDegrees(compassHeading);\n\n  return compassHeading;\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing orientation-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('OrientationConfig')\nexport class OrientationConfig {\n  allowOrientationMocking = true;\n  allowHeadingMocking = true;\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// 3rd Party.\nimport { Observable, Subject, fromEvent, merge } from 'rxjs';\n\n// App.\nimport { Orientation } from './orientation';\nimport { getHeadingFromOrientation } from './heading/get-heading-from-orientation.function';\nimport { OrientationConfig } from './orientation.config';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Geolocator service. Provides a single point of GPS interaction.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceOrientationService {\n  readonly orientationChange: Observable<Orientation>;\n  readonly headingChange: Observable<number>;\n  readonly orientationChangeSource: Subject<Orientation>;\n  readonly headingChangeSource: Subject<number>;\n\n  private internalDeviceNeedsCalibrated = false;\n\n  get deviceNeedsCalibrated(): boolean {\n    return this.internalDeviceNeedsCalibrated;\n  }\n\n  constructor(private readonly config: OrientationConfig) {\n    this.headingChangeSource = new Subject();\n    this.orientationChangeSource = new Subject();\n    this.orientationChange = this.orientationChangeSource.asObservable();\n    this.headingChange = merge(\n      this.headingChangeSource,\n      this.orientationChange.pipe(\n        map(orientation => orientation.heading)\n      )\n    );\n\n    fromEvent(window, 'deviceorientation').subscribe((event: DeviceOrientationEvent) => this.emitOrientationChange(event));\n    fromEvent(window, 'oncompassneedscalibration').subscribe(() => this.internalDeviceNeedsCalibrated = true);\n    fromEvent(window, 'compassneedscalibration').subscribe(() => this.internalDeviceNeedsCalibrated = true);\n  }\n\n  mockOrientation(orientation: Orientation): this {\n    if (!this.config.allowOrientationMocking) {\n      throw new Error('Permission denied to mock device orientation');\n    }\n\n    this.orientationChangeSource.next(orientation);\n    return this;\n  }\n\n  mockHeading(heading: number): this {\n    if (!this.config.allowHeadingMocking) {\n      throw new Error('Permission denied to mock heading');\n    }\n\n    this.headingChangeSource.next(heading);\n    return this;\n  }\n\n  private emitOrientationChange(event: DeviceOrientationEvent): void {\n    this.orientationChangeSource.next({\n      alpha: event.alpha,\n      beta: event.beta,\n      gamma: event.gamma,\n      heading: getHeadingFromOrientation(event)\n    });\n  }\n}\n","// Angular.\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n  ],\n  exports: [\n  ],\n  providers: [\n  ],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class TssOrientationModule { }\n","import { Guid } from '../core/uuid/guid';\nimport { getElapsedSeconds } from '../core/date-time/get-elapsed-seconds.function';\nimport { calculateRemainingSeconds } from '../core/stats/calculate-remaining-seconds.function';\n\n\n/**\n * Unique token created for each queue worker\n */\nexport class QueueWorkerToken {\n  readonly id: string;\n  isWorking = false;\n  isCanceled = false;\n  totalComplete: number;\n  totalFailed: number;\n  startTime: Date;\n  endTime: Date;\n\n  get isComplete(): boolean {\n    return !this.isWorking;\n  }\n\n  get ellapsedSeconds(): number {\n    return getElapsedSeconds(new Date(), this.startTime);\n  }\n\n  get totalProcessed(): number {\n    return this.totalComplete + this.totalFailed;\n  }\n\n  get recordsProcessedPerSecond(): number {\n    return this.totalComplete / this.ellapsedSeconds;\n  }\n\n  get recordsProcessedPerMinute(): number {\n    return this.recordsProcessedPerSecond * 60;\n  }\n\n  constructor() {\n    this.id = Guid.newGuid().value;\n  }\n\n  start(): QueueWorkerToken {\n    this.reset();\n    this.startTime = new Date();\n    this.isWorking = true;\n\n    return this;\n  }\n\n  reset(): QueueWorkerToken {\n    this.isWorking = false;\n    this.isCanceled = false;\n    this.totalComplete = 0;\n    this.totalFailed = 0;\n    this.startTime = null;\n    this.endTime = null;\n\n    return this;\n  }\n\n  calculateRemainingSeconds(remainingCount: number): number {\n    return this.isComplete\n      ? 0\n      : calculateRemainingSeconds(this.totalProcessed, this.ellapsedSeconds, remainingCount);\n  }\n\n  complete(): QueueWorkerToken {\n    this.endTime = new Date();\n    this.isWorking = false;\n\n    return this;\n  }\n\n  cancel(): QueueWorkerToken {\n    this.isCanceled = true;\n    this.isWorking = false;\n\n    return this;\n  }\n}\n","/**\n * Represents a status of a queued work item event.\n * * UnitOfWorkStarted: A given work item has begun.\n * * UnitOfWorkComplete: A given work item has completed.\n * * QueueWorkerStarted: A new worker has started processing the queue.\n * * QueueWorkerComplete: A given worker has completed processing of the queue (no more items found).\n * * QueueStarted: The process of starting workers to run through the queue has occurred.\n * * QueueStarted: All workers have completed working through the queue (all work is done).\n */\nexport enum WorkQueueStatusEventType {\n  UnitOfWorkStarted,\n  UnitOfWorkComplete,\n  UnitOfWorkStatusUpdate,\n  QueueWorkerStarted,\n  QueueWorkerComplete,\n  QueueStarted,\n  QueueComplete,\n}\n","import { QueueWorkerToken } from './queue-worker-token';\nimport { WorkQueueStatus } from './work-queue-status';\nimport { average } from '../core/stats/average.function';\n\n\nexport class WorkQueueStatusTracker implements WorkQueueStatus {\n  totalQueueSize = 0;\n\n  protected readonly workers: QueueWorkerToken[] = [];\n\n  get workerCount(): number {\n    return this.workers.length;\n  }\n\n  get percentComplete(): number {\n    return this.totalQueueSize >= 0\n      ? Math.round(this.totalProcessed / this.totalQueueSize * 100) || 0\n      : 0;\n  }\n\n  get totalComplete(): number {\n    return this.workers.reduce((accumulator, current) => accumulator + current.totalComplete, 0) || 0;\n  }\n\n  get totalFailed(): number {\n    return this.workers.reduce((accumulator, current) => accumulator + current.totalFailed, 0) || 0;\n  }\n\n  get totalProcessed(): number {\n    return this.totalComplete + this.totalFailed;\n  }\n\n  get isWorking(): boolean {\n    return Boolean(this.runningWorkerCount);\n  }\n\n  get isComplete(): boolean {\n    return this.startTime && !this.isWorking;\n  }\n\n  get isCanceled(): boolean {\n    const canceledWorkersCount = this.workers.filter(worker => worker.isCanceled).length;\n    return Boolean(canceledWorkersCount && canceledWorkersCount === this.workers.length);\n  }\n\n  get runningWorkerCount(): number {\n    return this.workers.filter(worker => worker.isWorking).length;\n  }\n\n  get startTime(): Date {\n    const startTimes: number[] = this.workers\n      .filter(worker => worker.startTime)\n      .map(worker => worker.startTime\n        ? worker.startTime.getTime()\n        : null\n      );\n\n    return new Date(Math.min(...startTimes));\n  }\n\n  get endTime(): Date {\n    const startTimes: number[] = this.workers\n      .filter(worker => worker.startTime)\n      .map(worker => worker.startTime\n        ? worker.startTime.getTime()\n        : null\n      );\n\n    return new Date(Math.max(...startTimes));\n  }\n\n  get remainingQueueSize(): number {\n    return this.totalQueueSize - this.totalProcessed;\n  }\n\n  get estimatedSecondsLeft(): number {\n    const remainingCount = this.remainingQueueSize;\n    return remainingCount\n      ? average(\n        this.workers\n          .map(worker => worker.calculateRemainingSeconds(remainingCount))\n      )\n      : 0;\n  }\n\n  get averageRecordsProcessedPerMinute(): number {\n    return average(\n      this.workers\n        .map(worker => worker.recordsProcessedPerMinute)\n    );\n  }\n\n  setQueueSize(totalQueueSize: number): WorkQueueStatusTracker {\n    this.totalQueueSize = totalQueueSize;\n    return this;\n  }\n\n  complete(): WorkQueueStatusTracker {\n    this.workers.splice(0, this.workers.length);\n    this.totalQueueSize = 0;\n    return this;\n  }\n\n  addWorker(...workers: QueueWorkerToken[]): WorkQueueStatusTracker {\n    workers.forEach(worker => {\n      this.workers.push(worker);\n    });\n\n    return this;\n  }\n\n  getStatus(): WorkQueueStatus {\n    return {\n      isWorking: this.isWorking,\n      isCanceled: this.isCanceled,\n      isComplete: this.isComplete,\n      totalProcessed: this.totalProcessed,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      percentComplete: this.percentComplete,\n      totalQueueSize: this.totalQueueSize,\n      remainingQueueSize: this.remainingQueueSize,\n      totalComplete: this.totalComplete,\n      totalFailed: this.totalFailed,\n      estimatedSecondsLeft: this.estimatedSecondsLeft,\n      workerCount: this.workers.length,\n    };\n  }\n}\n","// 3rd Party.\nimport { Observable, Subject, of, iif } from 'rxjs';\nimport { takeWhile, tap, filter, mergeMap, map } from 'rxjs/operators';\n\n// TSS.\nimport { WorkerQueueOptions } from './worker-queue-options';\nimport { QueueWorkerToken } from './queue-worker-token';\nimport { WorkQueueStatusEvent } from './work-queue-status-event';\nimport { WorkQueueStatusEventType } from './work-queue-status-event-type';\nimport { WorkQueueStatusTracker } from './work-queue-status-tracker';\nimport { Logger } from '../core/logging/logger.service';\nimport { WorkQueueStatus } from './work-queue-status';\nimport { QueuePayload } from './queue-payload';\nimport { isValue } from '../core/type-check/is-value.function';\nimport { isNotValue } from '../core/type-check/is-not-value.function';\n\n\nexport const DEFAULT_WORK_QUEUE_OPTIONS = {\n  autoStartWorkers: true,\n  workerCount: 1,\n};\n\n\n/**\n * Provides the core queueing workflow for basic unit of work queues.\n * High Priority Todos:\n * * Implement worker cancelation into the worker token - RG.\n *\n * Low Priority Todos:\n * * Add queue prioritization - a queue priority flag to pull those items first from the queue - RG.\n * * Change overriding of methods to use metho attributes instead. Example: @OnWorkComplete.\n */\nexport abstract class WorkQueueManager<TInput, TOutput> {\n  private queueChangeObserver: Subject<WorkQueueStatusEvent<TInput, TOutput>>;\n\n  protected readonly workerTokens: QueueWorkerToken[] = [];\n  protected readonly tracker: WorkQueueStatusTracker = new WorkQueueStatusTracker();\n\n  readonly queueChange: Observable<WorkQueueStatusEvent<TInput, TOutput>>;\n  readonly queueStarted: Observable<WorkQueueStatusEvent<TInput, TOutput>>;\n  readonly queueComplete: Observable<WorkQueueStatusEvent<TInput, TOutput>>;\n  readonly options: WorkerQueueOptions = Object.assign({}, DEFAULT_WORK_QUEUE_OPTIONS);\n\n  get isWorking(): boolean {\n    return this.tracker.isWorking;\n  }\n\n  get status(): WorkQueueStatus {\n    return this.tracker.getStatus();\n  }\n\n  constructor(protected log: Logger, options?: WorkerQueueOptions) {\n    this.setOptions(options);\n    this.queueChangeObserver = new Subject();\n    this.queueChange = this.queueChangeObserver.pipe();\n\n    this.queueStarted = this.queueChangeObserver.pipe(\n      filter(change => change.event === WorkQueueStatusEventType.QueueStarted)\n    );\n\n    this.queueComplete = this.queueChangeObserver.pipe(\n      filter(change => change.event === WorkQueueStatusEventType.QueueComplete)\n    );\n\n    if (this.options.autoStartWorkers) {\n      setTimeout(() => this.startWork());\n    }\n  }\n\n  /**\n   * Overrides default options.\n   * @param options Options to override the defaults.\n   */\n  setOptions(options: WorkerQueueOptions): WorkQueueManager<TInput, TOutput> {\n    Object.assign(this.options, options);\n    return this;\n  }\n\n  /**\n   * Kicks off the queue workflow with the specified number of workers. If\n   * the maximum number of workers are currently running, no additional workers\n   * will be created (only the delta of allowed and running will be started).\n   */\n  startWork(): void {\n    // We dont' want to change the queue size if the queue is already working\n    // because it will mess up the statistics (percent copmlete, etc).\n    const starterSource = iif(() => !this.isWorking,\n      this.getRemainingQueueCount()\n        .pipe(\n          tap((queueCount: number) => this.tracker.setQueueSize(queueCount))\n        )\n    );\n\n    this.onReady()\n      .pipe(\n        mergeMap(() => starterSource)\n      )\n      .subscribe(() => {\n        const workersToStart = this.options.workerCount - this.workerTokens.length;\n\n        if (workersToStart > 0) {\n          this.emitQueueChange(null, WorkQueueStatusEventType.QueueStarted);\n        }\n\n        for (let i = 0; i < workersToStart; i++) {\n          const token = new QueueWorkerToken().start();\n          this.tracker.addWorker(token);\n          this.workerTokens.push(token);\n          this.emitQueueChange(token, WorkQueueStatusEventType.QueueWorkerStarted);\n          this.getNextAndDoWork(token);\n        }\n      });\n  }\n\n  /**\n   * Stops all workers from processing the queue.\n   */\n  stopWork(): void {\n    this.workerTokens.forEach(token => token.cancel());\n  }\n\n  /**\n   * Implementation method to do the actual unit of work.\n   * @param item The input paramater needed to process the unit of work and return an output result.\n   */\n  protected abstract doWork(item: TInput): Observable<TOutput>;\n\n  /**\n   * Implementation method to retrieve the next value in the queue. Note, there are no further checks\n   * to verify duplicate items are not processed - it is the responsibility of the implementer of this\n   * base class to never return the same item from this method. Typically the item in the queue is either\n   * dequeued or marked as \"processing\" to prevent this potential issue.\n   */\n  protected abstract getNext(): Observable<TInput>;\n\n  /**\n   * Method that determines that the workers are ready to be started. Note, in this implementation it\n   * makes use of an empty promise. The main reason for this is to provide a hook for other implementers\n   * to setup/initialize the queue before starting the workers. Additionaly, this practices provides a\n   * way to run the workers asynchronously.\n   */\n  protected onReady(): Observable<any> {\n    return of(null);\n  }\n\n  protected onBeforeWorkStarted(input: TInput): Observable<TInput> {\n    return of(input);\n  }\n\n  protected onWorkComplete(data: QueuePayload<TInput, TOutput>): Observable<QueuePayload<TInput, TOutput>> {\n    return of(data);\n  }\n\n  protected onWorkFailed(data: QueuePayload<TInput, TOutput>, error: any): Observable<any> {\n    return of(data, error);\n  }\n\n  protected getRemainingQueueCount(): Observable<number> {\n    return of(-1);\n  }\n\n  protected emitQueueChange(token: QueueWorkerToken, event: WorkQueueStatusEventType, input?: TInput, output?: TOutput): void {\n    this.queueChangeObserver.next({\n      event,\n      input,\n      output,\n      status: this.tracker.getStatus(),\n      tokenId: token ? token.id : null,\n    });\n  }\n\n  private emitWorkStarted(token: QueueWorkerToken, input?: TInput, output?: TOutput): void {\n    this.emitQueueChange(token, WorkQueueStatusEventType.UnitOfWorkStarted, input, output);\n  }\n\n  private emitWorkComplete(token: QueueWorkerToken, input?: TInput, output?: TOutput): void {\n    this.emitQueueChange(token, WorkQueueStatusEventType.UnitOfWorkComplete, input, output);\n  }\n\n  private onWorkerCompleted(token: QueueWorkerToken) {\n    if (token.isComplete) {\n      return;\n    }\n\n    const index = this.workerTokens.indexOf(token);\n    token.complete();\n\n    if (index !== -1) {\n      this.workerTokens.splice(index, 1);\n    }\n\n    this.emitQueueChange(token, WorkQueueStatusEventType.QueueWorkerComplete);\n    if (this.workerTokens.length === 0) {\n      this.emitQueueChange(token, WorkQueueStatusEventType.QueueComplete);\n      this.tracker.complete();\n    }\n  }\n\n  private checkIfWorkerComplete(token: QueueWorkerToken, next: TInput) {\n    if (isNotValue(next)) {\n      this.onWorkerCompleted(token);\n    }\n  }\n\n  private getNextAndDoWork(token: QueueWorkerToken): void {\n    if (token.isCanceled) {\n      this.log.debug(`Canceling worker due to canceled toke: ${token.id}`);\n      this.onWorkerCompleted(token);\n    }\n\n    this.log.trace('Retrieving next queue item to start processing');\n    const processingData: QueuePayload<TInput, TOutput> = { input: null, output: null };\n    this.getNext()\n      .pipe(\n        tap((input: TInput) => processingData.input = input),\n        tap((input: TInput) => this.checkIfWorkerComplete(token, input)),\n        takeWhile((input: TInput) => isValue(input) && !token.isCanceled),\n        tap((input: TInput) => this.emitWorkStarted(token, input)),\n        mergeMap((input: TInput) => this.onBeforeWorkStarted(input)),\n        mergeMap((input: TInput) => this.doWork(input)),\n        tap((output: TOutput) => processingData.output = output),\n        map(() => processingData),\n        mergeMap((data: QueuePayload<TInput, TOutput>) => this.onWorkComplete(data)),\n    )\n      .subscribe((data: QueuePayload<TInput, TOutput>) => {\n        this.log.trace('Completed work for item');\n        token.totalComplete++;\n        this.emitWorkComplete(token, data.input, data.output);\n        this.getNextAndDoWork(token);\n      }, (error) => {\n        this.log.error(`Failed to process item. {error}`, error);\n        token.totalFailed++;\n        this.onWorkFailed(processingData, error)\n          .toPromise()\n          .then(() => this.getNextAndDoWork(token));\n      });\n  }\n}\n","// 3rd Party.\nimport { Observable, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n// TSS.\nimport { WorkQueueManager, DEFAULT_WORK_QUEUE_OPTIONS } from './work-queue-manager';\nimport { Queuable } from './queuable';\nimport { QueuableWorkerQueueOptions } from './queuable-worker-queue-options';\nimport { QueuePayload } from './queue-payload';\n\n\nexport abstract class QueuableWorkQueueManager<TInput, TOutput> extends WorkQueueManager<TInput, TOutput> implements Queuable<TInput> {\n  readonly options: QueuableWorkerQueueOptions = Object.assign({\n    autoDequeu: true\n  }, DEFAULT_WORK_QUEUE_OPTIONS);\n\n  abstract enqueue(item: TInput): Observable<TInput>;\n  abstract dequeue(item: TInput): Observable<TInput>;\n\n  /**\n   * Enqueues multiple items into an array.\n   * @param items Items to enqueue.\n   *\n   * TODO: We want to change this to use \"mergeAll\" once we\n   *  upgrade to rxjs 6, as that is the desired behavior here.\n   *\n   * // The following works in rxjs 6, but not in 5:\n   * of(...sources)\n   * .pipe(\n   *   mergeAll(),\n   *   // NOTE: in rxjs 5\n   *   tap((x: TInput) => x)\n   * )\n   */\n  enqueuMany(...items: TInput[]): Observable<TInput> {\n    const sources: Observable<TInput>[] = items\n      .map(i => this.enqueue(i));\n\n    return forkJoin(sources)\n      .pipe(\n        map((results: TInput[]) => results.pop())\n      );\n  }\n\n  /**\n   * Deque many items from the queue.\n   * @param items Items do deque.\n   */\n  dequeuMany(...items: TInput[]): Observable<TInput> {\n    const sources: Observable<TInput>[] = items\n      .map(i => this.dequeue(i));\n\n    return forkJoin(sources)\n      .pipe(\n        map((results: TInput[]) => results.pop())\n      );\n  }\n\n  protected onWorkComplete(payload: QueuePayload<TInput, TOutput>): Observable<QueuePayload<TInput, TOutput>> {\n    return forkJoin(\n      super.onWorkComplete(payload),\n      this.dequeue(payload.input)\n    )\n      .pipe(\n        map((result) => result[0])\n      );\n  }\n}\n","/**\n * Represents all potential states of a queued item.\n * * Queued: The item is in the queue, waiting for the next available worker to retrieve it.\n * * InProgress: The item has been picked up by a worker and currently being processed.\n * * Complete: The item has been sucesfully completed.\n * * Canceled: The item was canceled before completion.\n * * Failed: The item failed to process.\n */\nexport enum QueueItemStatus {\n  Queued,\n  InProgress,\n  Complete,\n  Canceled,\n  Failed,\n}\n","// Angular.\nimport { Injectable } from '@angular/core';\n\n// TSS.\nimport { AutoConfig } from '../core/auto-config.decorator';\n\n\n/**\n * Configuration class for storing global queue-related settings.\n */\n@Injectable({\n  providedIn: 'root'\n})\n@AutoConfig('QueueConfig')\nexport class QueueConfig {\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { BaseResourceService } from '../../core/resource/base-resource.service';\nimport { Privilege } from './privilege';\nimport { SecurityConfig } from '../security-config';\nimport { join } from '../../core/url/join.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PrivilegeService extends BaseResourceService<Privilege> {\n  constructor(protected http: HttpClient, config: SecurityConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.privilegesEndpoint)\n    });\n  }\n}\n","export const MISSING_ROLE_PARAM_EXCEPTION_MSG = 'Missing role ID parameter';\n\n\nexport interface Role {\n  id: string;\n  name: string;\n  description: string;\n  isExternal: boolean;\n}\n","// Angular.\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n// 3rd party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { SecurityConfig } from '../security-config';\nimport { Privilege } from '../privileges/privilege';\nimport { MISSING_ROLE_PARAM_EXCEPTION_MSG } from './role';\nimport { BaseResourceService } from '../../core/resource/base-resource.service';\nimport { join } from '../../core/url/join.function';\nimport { UNSUPPORTED_GET_EXCEPTION_MSG, UNSUPPORTED_CREATE_EXCEPTION_MSG } from '../../core/resource/resource.constants';\n\n\nexport const MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG = 'Missing privilege identifier parameter';\n\n\n/**\n * Service to provide all CRUD operations for privilege/role assignment.\n *\n * @example\n * ## Gets privileges for a given role:\n * service.privilegesByRole('879e27e1-b139-4348-86ca-ec4d5651475f')\n *\n * // Which is just a shortcut for:\n * service.query({ roleId: 'admin' });\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class RolePrivilegeService extends BaseResourceService<Privilege> {\n  constructor(protected http: HttpClient, config: SecurityConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.rolesPrivilegesEndpoint),\n      idFieldName: 'roleId'\n    });\n  }\n\n  /**\n   * Retrieves a list of privileges for a given role ID.\n   */\n  query(routeTokens?: any, params?: HttpParams): Observable<Privilege[]> {\n    if (!routeTokens || !routeTokens.roleId) {\n      throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);\n    }\n\n    return super.query(routeTokens, params);\n  }\n\n  /**\n   * This method is not supported for this resource. Please use \"privilegesByRole\".\n   */\n  get(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Privilege> {\n    throw new Error(UNSUPPORTED_GET_EXCEPTION_MSG);\n  }\n\n  /**\n   * This method is not supported for this resource. Please use \"addPrivilegeToRole\".\n   */\n  create(entity: Privilege, routeTokens?: any, params?: HttpParams): Observable<Privilege> {\n    throw new Error(UNSUPPORTED_CREATE_EXCEPTION_MSG);\n  }\n\n  /**\n   * Updates a privilege assignment (adds a privilege to a role).\n   */\n  update(entity: Privilege, routeTokens?: any, params?: HttpParams): Observable<any> {\n    if (!routeTokens || !routeTokens.roleId) {\n      throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);\n    } else if (!routeTokens.privilegeId) {\n      throw new Error(MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG);\n    }\n\n    return super.update(null, routeTokens, params);\n  }\n\n  /**\n   * Removes a privilege from a role assignment.\n   */\n  delete(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Privilege> {\n    if (!routeTokens || !routeTokens.roleId) {\n      throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);\n    } else if (!routeTokens.privilegeId) {\n      throw new Error(MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG);\n    }\n\n    return super.delete(id, routeTokens, params);\n  }\n\n  /**\n   * Retrieves all privileges assigned to the given role ID.\n   */\n  privilegesByRole(roleId: string, params?: HttpParams): Observable<Privilege[]> {\n    return this.query({ roleId }, params);\n  }\n\n  /**\n   * Adds a privilege to role.\n   */\n  addPrivilegeToRole(roleId: string, privilegeId: string): Observable<Privilege> {\n    return this.update(null, { roleId, privilegeId });\n  }\n\n\n  /**\n   * Removes a privilege from the given role.\n   */\n  removePrivilegeFromRole(roleId: string, privilegeId: string): Observable<Privilege> {\n    return this.delete(roleId, { roleId, privilegeId });\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { BaseResourceService } from '../../core/resource/base-resource.service';\nimport { Role } from './role';\nimport { SecurityConfig } from '../security-config';\nimport { join } from '../../core/url/join.function';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService extends BaseResourceService<Role> {\n  constructor(protected http: HttpClient, config: SecurityConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.rolesEndpoint)\n    });\n  }\n}\n","export const MISSING_USER_PARAM_EXCEPTION_MSG = 'Missing user ID parameter';\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { Role, MISSING_ROLE_PARAM_EXCEPTION_MSG } from './role';\nimport { SecurityConfig } from '../security-config';\nimport { BaseResourceService } from '../../core/resource/base-resource.service';\nimport { join } from '../../core/url/join.function';\nimport { UNSUPPORTED_GET_EXCEPTION_MSG, UNSUPPORTED_CREATE_EXCEPTION_MSG } from '../../core/resource/resource.constants';\nimport { MISSING_USER_PARAM_EXCEPTION_MSG } from '../security.constants';\n\n\n/**\n * Service to provide all CRUD operations for user/role assignment.\n *\n * @example\n * ## Gets roles for a given user:\n * service.rolesByUser('879e27e1-b139-4348-86ca-ec4d5651475f')\n *\n * // Which is just a shortcut for:\n * service.query({ userId: '879e27e1-b139-4348-86ca-ec4d5651475f' });\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserRoleService extends BaseResourceService<Role> {\n  constructor(protected http: HttpClient, config: SecurityConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.userRolesEndpoint),\n      idFieldName: 'userId'\n    });\n  }\n\n  /**\n   * Retrieves a list of roles for a given user ID.\n   */\n  query(routeTokens?: any, params?: HttpParams): Observable<Role[]> {\n    if (!routeTokens || !routeTokens.userId) {\n      throw new Error(MISSING_USER_PARAM_EXCEPTION_MSG);\n    }\n\n    return super.query(routeTokens, params);\n  }\n\n  /**\n   * This method is not supported for this resource. Please use \"rolesByUser\".\n   */\n  get(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Role> {\n    throw new Error(UNSUPPORTED_GET_EXCEPTION_MSG);\n  }\n\n  /**\n   * This method is not supported for this resource. Please use \"addUserToRole\".\n   */\n  create(entity: Role, routeTokens?: any, params?: HttpParams): Observable<Role> {\n    throw new Error(UNSUPPORTED_CREATE_EXCEPTION_MSG);\n  }\n\n  /**\n   * Updates a users role assignment (adds a role to a user).\n   */\n  update(entity: Role, routeTokens?: any, params?: HttpParams): Observable<any> {\n    if (!routeTokens || !routeTokens.userId) {\n      throw new Error(MISSING_USER_PARAM_EXCEPTION_MSG);\n    } else if (!routeTokens.roleName) {\n      throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);\n    }\n\n    return super.update(null, routeTokens, params);\n  }\n\n  /**\n   * Removes a user from a role assignment.\n   */\n  delete(id: string | number, routeTokens?: any, params?: HttpParams): Observable<Role> {\n    if (!routeTokens || !routeTokens.userId) {\n      throw new Error(MISSING_USER_PARAM_EXCEPTION_MSG);\n    } else if (!routeTokens.roleName) {\n      throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);\n    }\n\n    return super.delete(id, routeTokens, params);\n  }\n\n  /**\n   * Retrieves all roles assigned to the given user ID.\n   */\n  rolesByUser(userId: string, params?: HttpParams): Observable<Role[]> {\n    return this.query({ userId }, params);\n  }\n\n  /**\n   * Adds a user to role.\n   */\n  addUserToRole(userId: string, role: Role, params?: HttpParams): Observable<Role> {\n    // NOTE: We pass an arbitrary \"_\" role name because the route requires a role name,\n    // however the role's name is going to be pulled from the role entity on the server.\n    // The reason we don't pass \"role.name\" here is because of issues with IIS not\n    // handling decoded backslashes (ex: TSS\\TSS Users).\n    return super.update(role, { userId, roleName: '_' }, params);\n  }\n\n  /**\n   * Adds a user to role.\n   */\n  addUserToRoleByName(userId: string, roleName: string, params?: HttpParams): Observable<Role> {\n    roleName = decodeURIComponent(roleName);\n    return this.update(null, { userId, roleName }, params);\n  }\n\n  /**\n   * Removes a user from the given role.\n   */\n  removeUserFromRole(userId: string, role: Role, params?: HttpParams): Observable<Role> {\n    return this.removeUserFromRoleByName(userId, role.name, params);\n  }\n\n  /**\n   * Removes a user from the given role.\n   */\n  removeUserFromRoleByName(userId: string, roleName: string, params?: HttpParams): Observable<Role> {\n    roleName = decodeURIComponent(roleName);\n    return this.delete(userId, { userId, roleName }, params);\n  }\n}\n","// Angular.\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n// 3rd party.\nimport { Observable } from 'rxjs';\n\n// TSS.\nimport { BaseResourceService } from '../../core/resource/base-resource.service';\nimport { User } from './user';\nimport { SecurityConfig } from '../security-config';\nimport { join } from '../../core/url/join.function';\n\n\n/**\n * @example\n * ## Get Users that belong to a given role (by ID).\n * service.usersByRoleId('1428a342-8a95-4b6c-b3e9-da135e3ced04')\n *\n * // ...which is just a shortcut for:\n * service.query({}, new HttpParams().set('filterByRoleId', roleName));\n *\n * ## Get Users that belong to a given role (by name).\n * service.usersByRoleName('Admin')\n *\n * // ...which is just a shortcut for:\n * service.query({}, new HttpParams().set('filterByRoleName', roleName));\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService extends BaseResourceService<User> {\n  constructor(protected http: HttpClient, config: SecurityConfig) {\n    super(http, {\n      url: join(config.serviceUrl, config.usersEndpoint)\n    });\n  }\n\n  usersByRoleId(roleId: string, params?: HttpParams): Observable<User[]> {\n    params = (params || new HttpParams()).set('filterByRoleId', roleId);\n    return this.query({}, params);\n  }\n\n  usersByRoleName(roleName: string, params?: HttpParams): Observable<User[]> {\n    params = (params || new HttpParams()).set('filterByRoleName', roleName);\n    return this.query({}, params);\n  }\n\n  search(searchText: string, params?: HttpParams) {\n    params = (params || new HttpParams()).set('search', searchText);\n    return this.query({}, params);\n  }\n}\n","/**\n * The storage persistance mechanism to use when storing cached data.\n * * inMemory: Only caches data in the users immediate session. Closing and re-opening\n *             the browser window will not keep the cached data.\n * * persistent: Persists the cache data across sessions. This can resolve to any\n *               number of storage mechasims (such as local storage, indexDb, etc).\n */\nexport enum CachePersistence {\n  Persistent = 'persistent',\n  InMemory = 'in-memory',\n}\n","export function addIfNotExist<T>(list: T[], ...itemsToAdd: T[]): void {\n  itemsToAdd.forEach(item => {\n    if (list.indexOf(item) === -1) {\n      list.push(item);\n    }\n  });\n}\n","export function addRangeToBeginning<T>(list: T[], itemsToAdd: T[]): void {\n  list.unshift(...itemsToAdd);\n}\n","export function removeDuplicates<T>(list: T[]): T[] {\n  return list\n    .filter((element: T, position: number, filteredList: T[]) =>\n      filteredList.indexOf(element) === position);\n}\n","export function hexToRgb(hex: string): [number, number, number] {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  let result = null;\n  hex = hex.replace(shorthandRegex, (_, red, green, blue) => {\n    return red + red + green + green + blue + blue;\n  });\n\n  const matchResult = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  if (matchResult) {\n    const red = parseInt(matchResult[1], 16);\n    const blue = parseInt(matchResult[2], 16);\n    const green = parseInt(matchResult[3], 16);\n    result = [red, blue, green];\n  }\n\n  return result;\n}\n","export function isHexColor(colorTest: string) {\n  return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(colorTest);\n}\n","/**\n * Given a cookie key `name`, returns the value of\n * the cookie or `null`, if the key is not found.\n */\nexport function getCookie(name: string): string {\n  const nameMatchLength = name.length + 1;\n  return document.cookie\n    .split(';')\n    .map(c => c.trim())\n    .filter(cookie =>\n      cookie.substring(0, nameMatchLength) === `${name}=`\n    )\n    .map(cookie =>\n      decodeURIComponent(cookie.substring(nameMatchLength))\n    )[0] || null;\n}\n","import { STANDARDIZED_QUERY_DATE_FORMAT } from '../date-time.constants';\nimport { toUtcDate } from './to-utc-date.function';\nimport { formatDate } from '../format/format-date.function';\n\n\nexport function toStandardizedQueryDateFormat(date: Date): string {\n  // Attribute query expects UTC time, so convert from local time.\n  // The date formatter uses local time, so create a new Date object\n  // whose local time is set to UTC time from the input date.\n  date = toUtcDate(date);\n  return formatDate(date, STANDARDIZED_QUERY_DATE_FORMAT);\n}\n","import { toUtcDate } from './conversion/to-utc-date.function';\n\n\nexport function getCurrentDateAsUtc(): Date {\n  return toUtcDate(new Date());\n}\n","import { toUtcDate } from './conversion/to-utc-date.function';\n\n\nexport function getCurrentDateEpochAsUtc(): number {\n  return toUtcDate(new Date()).getTime();\n}\n","import { toReadableTime } from './to-readable-time.function';\nimport { MILLISECONDS_PER_SECOND } from '../date-time.constants';\n\n\nexport function secondsToReadableTime(seconds: number, suffixMap: any = {}): string {\n  return toReadableTime(seconds * MILLISECONDS_PER_SECOND, suffixMap);\n}\n","export function setDateToEndOfDay(date: Date): void {\n  date.setHours(23, 59, 59);\n}\n","import { addDays } from '../add/add-days.function';\n\n\nexport function subtractDays(days: number, date?: Date): Date {\n  return addDays(days * -1, date);\n}\n","import { addMinutes } from '../add/add-minutes.function';\n\n\nexport function subtractMinutes(minutes: number, date?: Date): Date {\n  return addMinutes(minutes * -1, date);\n}\n","import { addSeconds } from '../add/add-seconds.function';\n\n\nexport function subtractSeconds(minutes: number, date?: Date): Date {\n  return addSeconds(minutes * -1, date);\n}\n","import { addHours } from '../add/add-hours.function';\n\n\nexport function subtractHours(hours: number, date?: Date): Date {\n  return addHours(hours * -1, date);\n}\n","import { addMilliseconds } from '../add/add-milliseconds.function';\n\n\nexport function subtractMilliseconds(milliseconds: number, date?: Date): Date {\n  return addMilliseconds(milliseconds * -1, date);\n}\n","import { hasWindow } from './has-window.function';\n\n\nexport function hasLocalStorage(): boolean {\n  return hasWindow() && Boolean(window.localStorage);\n}\n","import { upperCaseEachWord } from './upper-case-each-word.function';\nimport { upperCaseFirstLetter } from './upper-case-first-letter.function';\nimport {\n  PASCAL_CASE_FIRST_LETTER_MATCH_REGEX,\n  LEADING_AND_TRAILING_UNDERSCORE_MATCH_REGEX,\n  LEADING_AND_TRAILING_HYPHEN_MATCH_REGEX,\n  UNDERSCORE_MATCH_REGEX,\n  HYPHEN_MATCH_REGEX\n} from './formatting.constants';\n\n\nexport function humanize(text: string, upperCaseAllWords = true) {\n  const result = (text || '')\n    .split(PASCAL_CASE_FIRST_LETTER_MATCH_REGEX)\n    .join(' ')\n    .replace(LEADING_AND_TRAILING_UNDERSCORE_MATCH_REGEX, '')\n    .replace(LEADING_AND_TRAILING_HYPHEN_MATCH_REGEX, '')\n    .replace(UNDERSCORE_MATCH_REGEX, ' ')\n    .replace(HYPHEN_MATCH_REGEX, ' ')\n    .toLowerCase();\n\n  return upperCaseAllWords\n    ? upperCaseEachWord(result)\n    : upperCaseFirstLetter(result);\n}\n","import { trimStart } from './trip-start.function';\nimport { trimEnd } from './trim-end.function';\n\n\nexport function trim(value: string, trimCharacter = ' '): string {\n  value = trimStart(value, trimCharacter);\n  value = trimEnd(value, trimCharacter);\n\n  return value;\n}\n","export function groupBy<Key, Value>(list: Value[], keyGetter: ((item: Value) => Key)): Map<Key, Value[]> {\n  const map = new Map();\n\n  list.forEach((item: Value) => {\n    const key: Key = keyGetter(item);\n    const collection: Value[] = map.get(key);\n\n    if (!collection) {\n      map.set(key, [item]);\n    } else {\n      collection.push(item);\n    }\n  });\n\n  return map;\n}\n","import { isValue } from '../type-check/is-value.function';\n\n\n/**\n * Assigns values from one object to another, but only for values that are valid (not null, undefined, or empty string).\n * Restriction properties can be passed in to specificy explicitly which properties to assign (if valid).\n */\nexport function assignValidValues<T>(targetItem: T, sourceItem: any, ...restrictionProperties: string[]): T {\n  if (restrictionProperties.length === 0) {\n    restrictionProperties = Object.keys(sourceItem);\n  }\n\n  restrictionProperties\n    .filter(property => isValue(sourceItem[property]))\n    .forEach(property => targetItem[property] = sourceItem[property]);\n\n  return targetItem;\n}\n","// TODO: Refactor this method and give it proper names.\n// This was a copy/paste from online - RG.\nexport function getValue(obj: any, path: string): any {\n  const arr = path.split('.');\n  while (arr.length && obj) {\n    obj = obj[arr.shift()];\n  }\n\n  return obj;\n}\n","/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * Using Math.round() will give you a non-uniform distribution!\n */\nexport function getRandomInteger(min: number = 0, max: number = 1000) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","/**\n * Returns a random number between min (inclusive) and max (exclusive)\n */\nexport function getRandomNumber(min: number = 0, max: number = 10) {\n  return Math.random() * (max - min) + min;\n}\n","import { isNumber } from '../type-check/is-number.function';\n\n\nexport function round(numberToRound: number, decimalPlaces = 3): number {\n  return isNumber(numberToRound)\n    ? Number(numberToRound.toFixed(decimalPlaces))\n    : numberToRound;\n}\n","import { sortByOrder } from './sort-by-order.function';\nimport { Orderable } from './orderable';\n\n\nexport function sortAndReorder<T extends Orderable>(list: T[]) {\n  sortByOrder(list);\n  list\n    .forEach((item, index) => item.order = index + 1);\n}\n","export function calculatePercentComplete(partialValue: number, totalValue: number): number {\n  return (100 * partialValue) / totalValue;\n}\n","export function isNumberBetween(testNumber: number, rangeStart: number, rangeEnd: number): boolean {\n  const minRange = Math.min(rangeStart, rangeEnd);\n  const maxRange = Math.max(rangeStart, rangeEnd);\n\n  return testNumber > minRange && testNumber < maxRange;\n}\n","import { sum } from './sum.function';\n\n\nexport function sumProperty<T>(list: T[], property: string): number {\n  return sum(list, (value: T) => value[property]);\n}\n","import { isBoolean } from './is-boolean.function';\n\n\nexport function isNotBoolean(val: any): boolean {\n  return !isBoolean(val);\n}\n","import { isDate } from './is-date.function';\n\n\nexport function isNotDate(val: any): boolean {\n  return !isDate(val);\n}\n","import { isDefined } from './is-defined.function';\n\n\nexport function isNotDefined(val: any): boolean {\n  return !isDefined(val);\n}\n","import { isObject } from './is-object.function';\n\n\nexport function isNotObject(val: any): boolean {\n  return !isObject(val);\n}\n","import { isPrimitive } from './is-primitive.function';\n\n\nexport function isNotPrimitive(val: any): boolean {\n  return !isPrimitive(val);\n}\n","import { isString } from './is-string.function';\n\n\nexport function isNotString(val: any): boolean {\n  return !isString(val);\n}\n","import { isType } from './is-type.function';\n\n\nexport function isNotType(val: any, expectedType: string): boolean {\n  return !isType(val, expectedType);\n}\n","export enum AreaUnit {\n  Acres = 'acres',\n  Hectares = 'hectares',\n  SquareFeet = 'square-feet',\n  SquareMeters = 'square-meters',\n  SquareMiles = 'square-miles',\n}\n","import { AreaUnit } from './area-unit';\n\n\nexport function convertAreaUnits(fromUnit: AreaUnit, toUnit: AreaUnit): number {\n  throw new Error(`'convertAreaUnits' is not implemented yet`);\n}\n","export function metersPerSecondToKilometersPerHour(metersPerSecond: number) {\n  return metersPerSecond * 3.6;\n}\n","export function metersPerSecondToMilesPerHour(metersPerSecond: number) {\n  return metersPerSecond * 2.237;\n}\n","import { hasWindow } from '../environment/has-window.function';\n\n\nexport function ensureProtocol(url: string): string {\n  if (hasWindow() && String(url).startsWith('//')) {\n    url = `${window.location.protocol}${url}`;\n  }\n\n  return url;\n}\n","import { clean } from './clean.function';\n\n\nexport function getBaseUrl(url: string): string {\n  let [someUrl] = clean(url).split('#');\n  [someUrl] = someUrl.split('?');\n  return someUrl;\n}\n","import { isValue } from '../type-check/is-value.function';\nimport { isObject } from '../type-check/is-object.function';\n\n\nexport function parametersToString(queryParameters: {}) {\n  return Object\n    .keys(queryParameters)\n    .filter(key => isValue(queryParameters[key]))\n    .map(key => {\n      const value = isObject(queryParameters[key])\n        ? JSON.stringify(queryParameters[key])\n        : queryParameters[key];\n\n      return `${key}=${value}`;\n    })\n    .join('&');\n}\n","import { EMPTY_PARAMS_REGEX } from './url.constants';\n\n\nexport function removeEmptyParams(url: string): string {\n  return url.replace(EMPTY_PARAMS_REGEX, '');\n}\n","import { Disposable } from './disposable';\n\n\n/**\n * Provides a syntax that ensures the correct use of Disposable objects.\n */\nexport async function using<T extends Disposable>(resource: T, func: (resource: T) => Promise<void> | void) {\n  try {\n    await func(resource);\n  } finally {\n    await resource.dispose();\n  }\n}\n","// 3rd party.\nimport { Geometry, Position, Point, Polygon, LineString } from 'geojson';\n\n// TSS.\nimport { toCsv } from './to-csv.function';\nimport { isLine } from '../geometry/geometry/is-line.function';\nimport { flattenLine } from '../geometry/line/flatten-line.function';\nimport { isPoint } from '../geometry/geometry/is-point.function';\nimport { toMultiPartPoint } from '../geometry/point/to-multi-part-point.function';\nimport { isPolygon } from '../geometry/geometry/is-polygon.function';\n\n\nexport function geometryToCsv(geometry: Geometry, ...verticeeOrdinalNames: string[]): string {\n  const pointInfos = [];\n  let verticees: Position[] = [];\n\n  if (isLine(geometry)) {\n    verticees = flattenLine(geometry as LineString);\n  } else if (isPoint(geometry)) {\n    verticees = toMultiPartPoint(geometry as Point);\n  } else if (isPolygon(geometry)) {\n    const polygon = geometry as Polygon;\n    verticees = flattenLine(polygon.coordinates);\n  } else {\n    throw new Error('Unknown or unsupported geometry type provided');\n  }\n\n  verticees.map(verticee => {\n    const info = {};\n    pointInfos.push(info);\n\n    if (!verticeeOrdinalNames || !verticeeOrdinalNames.length) {\n      verticeeOrdinalNames = ['x', 'y'];\n\n      if (verticee.length > 2) {\n        verticeeOrdinalNames.push('z');\n      }\n\n      if (verticee.length > 3) {\n        verticeeOrdinalNames.push('m');\n      }\n    }\n\n    verticeeOrdinalNames.forEach((name: string, index: number) => {\n      info[name] = verticee[index];\n    });\n  });\n\n  return toCsv(pointInfos);\n}\n","import { DataSourceProviderType } from './data-source-provider-type';\n\n\nexport function isEnterpriseProvider(providerType: DataSourceProviderType) {\n  return providerType === DataSourceProviderType.SqlServer\n    || providerType === DataSourceProviderType.Oracle\n    || providerType === DataSourceProviderType.OracleDevArt;\n}\n","import { FEATURE_SERVER_LAYER_SERVICE_IDENTIFIER } from '../esri.constants';\n\n\nexport function isFeatureServerLayerUrl(url: string): boolean {\n  return FEATURE_SERVER_LAYER_SERVICE_IDENTIFIER.test(url);\n}\n","import { isMapServerServiceUrl } from './map-server/is-map-server-service-url';\nimport { isFeatureServerServiceUrl } from './feature-server/is-feature-server-service-url';\nimport { isLrsServerServiceUrl } from './lrs-server/is-lrs-server-service-url.function';\nimport { isLrsServerLayersServiceUrl } from './lrs-server/is-lrs-server-layers-service-url.function';\n\n\nexport function isCacheableEsriServiceRoute(urlPattern: string, testUrl: string): boolean {\n  [testUrl] = (testUrl || '').split('?');\n  return Boolean(urlPattern\n    && testUrl\n    && new RegExp(urlPattern, 'gi').test(testUrl)\n    && isMapServerServiceUrl(testUrl)\n    || isFeatureServerServiceUrl(testUrl)\n    || isLrsServerServiceUrl(testUrl)\n    || isLrsServerLayersServiceUrl(testUrl)\n  );\n}\n","import { MAP_SERVER_LAYER_SERVICE_MATCH_IDENTIFIER } from '../esri.constants';\n\n\n/**\n * Extracts the layer ID from an ESRI map service URL.\n * @example\n * extractMapServerLayerId('http://my-service/ags/MapServer/123') // --> 123\n */\nexport function extractMapServerLayerId(serviceUrl: string): number | null {\n  let layerId: number = null;\n  let [, , layerIdPart] = (serviceUrl || '').split(MAP_SERVER_LAYER_SERVICE_MATCH_IDENTIFIER);\n\n  if (layerIdPart) {\n    layerIdPart = layerIdPart.replace('/', '');\n    layerId = Number(layerIdPart);\n  }\n\n  return layerId;\n}\n","import { MAP_SERVER_SERVICE_MATCH_IDENTIFIER } from '../esri.constants';\nimport { join } from '../../core/url/join.function';\n\n\n/**\n * Extracts the service ID from an ESRI map layer service URL.\n * @example\n * extractMapServerUrl('http://my-service/ags/MapServer/123') // --> 'http://my-service/ags/MapServer'\n */\nexport function extractMapServerUrl(serviceUrl: string): string {\n  const [base] = (serviceUrl || '').split(MAP_SERVER_SERVICE_MATCH_IDENTIFIER);\n  return base === serviceUrl\n    ? null\n    : join(base, 'MapServer');\n}\n","import { MAP_SERVER_LAYER_SERVICE_IDENTIFIER } from '../esri.constants';\n\n\nexport function isMapServerLayerUrl(url: string): boolean {\n  return MAP_SERVER_LAYER_SERVICE_IDENTIFIER.test(url);\n}\n","export function doesPathIncludePortalAccessCode(urlPath: string): boolean {\n  return urlPath.includes('code=');\n}\n","export function doesPathIncludePortalAccessToken(urlPath: string): boolean {\n  return urlPath.includes('access_token=') && urlPath.includes('expires_in=');\n}\n","import { EsriPortalAccessToken } from './esri-portal-access-token';\nimport { PORTAL_REDIRECT_URL_PARAMS_BREAK_CHARACTER } from '../esri.constants';\nimport { toEsriPortalAccessToken } from './to-esri-portal-access-token.function';\nimport { trimStart } from '../../core/formatting/trip-start.function';\nimport { getQueryParams } from '../../core/url/get-query-params.function';\n\n\nexport function extractPortalAccessToken(urlHash: string = window.location.hash): EsriPortalAccessToken {\n  const portalParamsStartIndex = urlHash.lastIndexOf(PORTAL_REDIRECT_URL_PARAMS_BREAK_CHARACTER);\n  const portalParamsHash = trimStart(\n    urlHash.substr(portalParamsStartIndex)\n  );\n\n  const portalParams = getQueryParams(portalParamsHash);\n  const accessToken = portalParams.access_token;\n  const username = portalParams.username;\n  const expiresIn = Number(portalParams.expires_in);\n  const isSecure = Boolean(portalParams.ssl);\n\n  return toEsriPortalAccessToken({\n    accessToken,\n    username,\n    expiresIn,\n    isSecure\n  });\n}\n","import { EsriPortalAuthRedirectOptions } from './esri-portal-auth-redirect-options';\nimport { PORTAL_OAUTH_AUTHORIZE_ENDPOINT, DEFAULT_PORTAL_OAUTH_REDIRECT_OPTIONS } from '../esri.constants';\nimport { getPortalUrl } from './get-portal-url.function';\nimport { join } from '../../core/url/join.function';\n\n\nexport function getPortalOAuthRedirectUrl(portalUrl: string, clientId: string, options: EsriPortalAuthRedirectOptions = {}): string {\n  options = Object.assign({}, DEFAULT_PORTAL_OAUTH_REDIRECT_OPTIONS, options);\n  portalUrl = getPortalUrl(portalUrl);\n\n  const redirectUrl = encodeURIComponent(`${options.redirectUrl}${options.urlParamsBreak}`);\n  const url = join(portalUrl, PORTAL_OAUTH_AUTHORIZE_ENDPOINT);\n\n  return `${url}?client_id=${clientId}&redirect_uri=${redirectUrl}&response_type=${options.responseType}`;\n}\n","import { PORTAL_SHARING_ENDPOINT } from '../esri.constants';\nimport { getPortalUrl } from './get-portal-url.function';\nimport { join } from '../../core/url/join.function';\n\n\nexport function getPortalSharingUrl(portalUrl: string): string {\n  const basePortalUrl = getPortalUrl(portalUrl);\n  return join(basePortalUrl, PORTAL_SHARING_ENDPOINT);\n}\n","import { GpsPosition } from './gps-position';\nimport { gpsPositionToPoint } from './gps-position-to-point';\n\n\nexport function gpsPositionsToPoint(...positions: GpsPosition[]): number[][] {\n  return positions.map(position => gpsPositionToPoint(position));\n}\n","import { isValidLatitude } from './is-valid-latitude.function';\n\nexport function isNotValidLatitude(latitude: number): boolean {\n  return !isValidLatitude(latitude);\n}\n","import { isValidLongitude } from './is-valid-longitude.function';\n\n\nexport function isNotValidLongitude(longitude: number): boolean {\n  return !isValidLongitude(longitude);\n}\n","import { toMultiPartPaths } from './to-multi-part-paths.function';\nimport { LineGeometry } from './line-geometry';\nimport { getMeasureFromPoint } from '../point/get-measure-from-point.function';\nimport { addRange } from '../../core/array/add-range.function';\n\n\nexport function extractMeasuresFromLine(line: LineGeometry): number[] {\n  const measures = [];\n  const paths: number[][][] = toMultiPartPaths(line);\n  paths.forEach((coordinates: number[][]) => {\n    const pathMeasures = coordinates.map((coordinate: number[]) => getMeasureFromPoint(coordinate));\n    addRange(measures, pathMeasures);\n  });\n\n  return measures;\n}\n","import { getMeasure } from './get-measure.function';\nimport { LineGeometry } from './line-geometry';\nimport { SinglePoint } from '../point/single-point';\nimport { GetMeasureOptions } from './get-measure-options';\n\n\nexport function getMeasureFromFlatCoordinateSystem(line: LineGeometry, point: SinglePoint, options?: GetMeasureOptions): number {\n  return getMeasure(line, point, Object.assign({ coordinateSystem: 'flat' }, options));\n}\n","import { LineGeometry } from './line-geometry';\nimport { GetMeasureOptions } from './get-measure-options';\n\n\nexport function getMeasureFromLatLng(line: LineGeometry, lat: number, lng: number, options: GetMeasureOptions): number {\n  return this.getMeasure(line, [lng, lat], options);\n}\n","import { isPointWithinButNotIncludingBounds } from '../point/bounds.function';\n\n\n/**\n * Determines if two points (a line) are within a given bounds (line).\n * @param boundStart The start of the restrcting bounds.\n * @param boundEnd The end of the restricting bounds.\n * @param testStartValue The start value of the line to check against the restricting bounds.\n * @param testEndValue The end value of the line to check against the restricting bounds.\n */\nexport function isLineWithinBounds(boundStart: number, boundEnd: number, testStartValue: number, testEndValue: number) {\n  /**\n   * Runs through:\n   * BOUNDS:   10---------15\n   * TEST:   8---------------18\n   *\n   * Starts and runs through:\n   * BOUNDS: 0---------15\n   * TEST:   0---------------18\n   *\n   * Ends and runs through:\n   * BOUNDS:       5---------18\n   * TEST:   0---------------18\n   */\n  const runsThrough = testStartValue < boundStart && testEndValue > boundEnd;\n  const isFullMatch = testStartValue === boundStart && testEndValue === boundEnd;\n  const isStartInBounds = isPointWithinButNotIncludingBounds(boundStart, boundEnd, testStartValue);\n  const isEndInBounds = isPointWithinButNotIncludingBounds(boundStart, boundEnd, testEndValue);\n\n  const isStartMatch = boundStart === testStartValue;\n  const isEndMatch = boundEnd === testEndValue;\n  const startsAndRunsThrough = isStartMatch && boundStart <= testEndValue;\n  const endsAndRunsThrough = isEndMatch && boundEnd >= testStartValue;\n\n  return runsThrough\n    || isFullMatch\n    || isStartInBounds\n    || isEndInBounds\n    || startsAndRunsThrough\n    || endsAndRunsThrough;\n}\n","import { SinglePoint } from './single-point';\nimport { toSinglePartPointArray } from './to-single-part-point.function';\nimport { calculateCrossProduct } from '../../core/stats/calculate-cross-product.function';\n\n\nexport function calculateCrossProductByPoints(startPoint: SinglePoint, endPoint: SinglePoint, testPoint: SinglePoint): number {\n  const [x1, y1] = toSinglePartPointArray(startPoint);\n  const [x2, y2] = toSinglePartPointArray(endPoint);\n  const [testX, testY] = toSinglePartPointArray(testPoint);\n\n  return calculateCrossProduct(x1, y1, x2, y2, testX, testY);\n}\n","import { SymbolLocationType } from './types';\n\n\nexport const SYMBOL_LOCATION_TYPES: SymbolLocationTypeDefinition[] = [\n  { alias: 'Left', locationType: 'left' },\n  { alias: 'Right', locationType: 'right' },\n  { alias: 'Top', locationType: 'top' },\n  { alias: 'Bottom', locationType: 'bottom' },\n];\n\nexport interface SymbolLocationTypeDefinition {\n  alias: string;\n  locationType: SymbolLocationType;\n}\n"]}