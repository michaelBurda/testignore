/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { degreesToRadians } from '../../geometry/geometry/degrees-to-radians.function';
import { radiansToDegrees } from '../../geometry/geometry/radians-to-degrees.function';
/**
 * Returns the heading based on an orientation (alpha, beta, and gamma).
 * Note: this code was sourced from: https://stackoverflow.com/questions/18112729/calculate-compass-heading-from-deviceorientation-event-api
 * @param {?} orientation
 * @return {?}
 */
export function getHeadingFromOrientation(orientation) {
    // Convert degrees to radians
    /** @type {?} */
    var alphaRad = degreesToRadians(orientation.alpha);
    /** @type {?} */
    var betaRad = degreesToRadians(orientation.beta);
    /** @type {?} */
    var gammaRad = degreesToRadians(orientation.gamma);
    // Calculate equation components
    /** @type {?} */
    var cA = Math.cos(alphaRad);
    /** @type {?} */
    var sA = Math.sin(alphaRad);
    /** @type {?} */
    var sB = Math.sin(betaRad);
    /** @type {?} */
    var cG = Math.cos(gammaRad);
    /** @type {?} */
    var sG = Math.sin(gammaRad);
    // Calculate A, B, C rotation components
    /** @type {?} */
    var rA = -cA * sG - sA * sB * cG;
    /** @type {?} */
    var rB = -sA * sG + cA * sB * cG;
    // Calculate compass heading
    /** @type {?} */
    var compassHeading = Math.atan(rA / rB);
    // Convert from half unit circle to whole unit circle
    compassHeading = rB < 0
        ? compassHeading += Math.PI
        : compassHeading += 2 * Math.PI;
    // Convert radians to degrees
    compassHeading = radiansToDegrees(compassHeading);
    return compassHeading;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWhlYWRpbmctZnJvbS1vcmllbnRhdGlvbi5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL29yaWVudGF0aW9uL2hlYWRpbmcvZ2V0LWhlYWRpbmctZnJvbS1vcmllbnRhdGlvbi5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFDdkYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scURBQXFELENBQUM7Ozs7Ozs7QUFRdkYsTUFBTSxVQUFVLHlCQUF5QixDQUFDLFdBQTJEOzs7UUFFN0YsUUFBUSxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7O1FBQzlDLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDOztRQUM1QyxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQzs7O1FBRzlDLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQzs7UUFDdkIsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDOztRQUN2QixFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7O1FBQ3RCLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQzs7UUFDdkIsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDOzs7UUFHdkIsRUFBRSxHQUFHLENBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7O1FBQzdCLEVBQUUsR0FBRyxDQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFOzs7UUFHL0IsY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUV2QyxxREFBcUQ7SUFDckQsY0FBYyxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLEVBQUU7UUFDM0IsQ0FBQyxDQUFDLGNBQWMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUVsQyw2QkFBNkI7SUFDN0IsY0FBYyxHQUFHLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRWxELE9BQU8sY0FBYyxDQUFDO0FBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gJy4uL29yaWVudGF0aW9uJztcbmltcG9ydCB7IGRlZ3JlZXNUb1JhZGlhbnMgfSBmcm9tICcuLi8uLi9nZW9tZXRyeS9nZW9tZXRyeS9kZWdyZWVzLXRvLXJhZGlhbnMuZnVuY3Rpb24nO1xuaW1wb3J0IHsgcmFkaWFuc1RvRGVncmVlcyB9IGZyb20gJy4uLy4uL2dlb21ldHJ5L2dlb21ldHJ5L3JhZGlhbnMtdG8tZGVncmVlcy5mdW5jdGlvbic7XG5cblxuXG4vKipcbiAqIFJldHVybnMgdGhlIGhlYWRpbmcgYmFzZWQgb24gYW4gb3JpZW50YXRpb24gKGFscGhhLCBiZXRhLCBhbmQgZ2FtbWEpLlxuICogTm90ZTogdGhpcyBjb2RlIHdhcyBzb3VyY2VkIGZyb206IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4MTEyNzI5L2NhbGN1bGF0ZS1jb21wYXNzLWhlYWRpbmctZnJvbS1kZXZpY2VvcmllbnRhdGlvbi1ldmVudC1hcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhlYWRpbmdGcm9tT3JpZW50YXRpb24ob3JpZW50YXRpb246IHsgYWxwaGE6IG51bWJlciwgYmV0YTogbnVtYmVyLCBnYW1tYTogbnVtYmVyIH0pOiBudW1iZXIge1xuICAvLyBDb252ZXJ0IGRlZ3JlZXMgdG8gcmFkaWFuc1xuICBjb25zdCBhbHBoYVJhZCA9IGRlZ3JlZXNUb1JhZGlhbnMob3JpZW50YXRpb24uYWxwaGEpO1xuICBjb25zdCBiZXRhUmFkID0gZGVncmVlc1RvUmFkaWFucyhvcmllbnRhdGlvbi5iZXRhKTtcbiAgY29uc3QgZ2FtbWFSYWQgPSBkZWdyZWVzVG9SYWRpYW5zKG9yaWVudGF0aW9uLmdhbW1hKTtcblxuICAvLyBDYWxjdWxhdGUgZXF1YXRpb24gY29tcG9uZW50c1xuICBjb25zdCBjQSA9IE1hdGguY29zKGFscGhhUmFkKTtcbiAgY29uc3Qgc0EgPSBNYXRoLnNpbihhbHBoYVJhZCk7XG4gIGNvbnN0IHNCID0gTWF0aC5zaW4oYmV0YVJhZCk7XG4gIGNvbnN0IGNHID0gTWF0aC5jb3MoZ2FtbWFSYWQpO1xuICBjb25zdCBzRyA9IE1hdGguc2luKGdhbW1hUmFkKTtcblxuICAvLyBDYWxjdWxhdGUgQSwgQiwgQyByb3RhdGlvbiBjb21wb25lbnRzXG4gIGNvbnN0IHJBID0gLSBjQSAqIHNHIC0gc0EgKiBzQiAqIGNHO1xuICBjb25zdCByQiA9IC0gc0EgKiBzRyArIGNBICogc0IgKiBjRztcblxuICAvLyBDYWxjdWxhdGUgY29tcGFzcyBoZWFkaW5nXG4gIGxldCBjb21wYXNzSGVhZGluZyA9IE1hdGguYXRhbihyQSAvIHJCKTtcblxuICAvLyBDb252ZXJ0IGZyb20gaGFsZiB1bml0IGNpcmNsZSB0byB3aG9sZSB1bml0IGNpcmNsZVxuICBjb21wYXNzSGVhZGluZyA9IHJCIDwgMFxuICAgID8gY29tcGFzc0hlYWRpbmcgKz0gTWF0aC5QSVxuICAgIDogY29tcGFzc0hlYWRpbmcgKz0gMiAqIE1hdGguUEk7XG5cbiAgLy8gQ29udmVydCByYWRpYW5zIHRvIGRlZ3JlZXNcbiAgY29tcGFzc0hlYWRpbmcgPSByYWRpYW5zVG9EZWdyZWVzKGNvbXBhc3NIZWFkaW5nKTtcblxuICByZXR1cm4gY29tcGFzc0hlYWRpbmc7XG59XG4iXX0=