/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// 3rd Party.
import { Subject, fromEvent, merge } from 'rxjs';
import { getHeadingFromOrientation } from './heading/get-heading-from-orientation.function';
import { OrientationConfig } from './orientation.config';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./orientation.config";
/**
 * Geolocator service. Provides a single point of GPS interaction.
 */
var DeviceOrientationService = /** @class */ (function () {
    function DeviceOrientationService(config) {
        var _this = this;
        this.config = config;
        this.internalDeviceNeedsCalibrated = false;
        this.headingChangeSource = new Subject();
        this.orientationChangeSource = new Subject();
        this.orientationChange = this.orientationChangeSource.asObservable();
        this.headingChange = merge(this.headingChangeSource, this.orientationChange.pipe(map((/**
         * @param {?} orientation
         * @return {?}
         */
        function (orientation) { return orientation.heading; }))));
        fromEvent(window, 'deviceorientation').subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.emitOrientationChange(event); }));
        fromEvent(window, 'oncompassneedscalibration').subscribe((/**
         * @return {?}
         */
        function () { return _this.internalDeviceNeedsCalibrated = true; }));
        fromEvent(window, 'compassneedscalibration').subscribe((/**
         * @return {?}
         */
        function () { return _this.internalDeviceNeedsCalibrated = true; }));
    }
    Object.defineProperty(DeviceOrientationService.prototype, "deviceNeedsCalibrated", {
        get: /**
         * @return {?}
         */
        function () {
            return this.internalDeviceNeedsCalibrated;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} orientation
     * @return {THIS}
     */
    DeviceOrientationService.prototype.mockOrientation = /**
     * @template THIS
     * @this {THIS}
     * @param {?} orientation
     * @return {THIS}
     */
    function (orientation) {
        if (!(/** @type {?} */ (this)).config.allowOrientationMocking) {
            throw new Error('Permission denied to mock device orientation');
        }
        (/** @type {?} */ (this)).orientationChangeSource.next(orientation);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} heading
     * @return {THIS}
     */
    DeviceOrientationService.prototype.mockHeading = /**
     * @template THIS
     * @this {THIS}
     * @param {?} heading
     * @return {THIS}
     */
    function (heading) {
        if (!(/** @type {?} */ (this)).config.allowHeadingMocking) {
            throw new Error('Permission denied to mock heading');
        }
        (/** @type {?} */ (this)).headingChangeSource.next(heading);
        return (/** @type {?} */ (this));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    DeviceOrientationService.prototype.emitOrientationChange = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.orientationChangeSource.next({
            alpha: event.alpha,
            beta: event.beta,
            gamma: event.gamma,
            heading: getHeadingFromOrientation(event)
        });
    };
    DeviceOrientationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DeviceOrientationService.ctorParameters = function () { return [
        { type: OrientationConfig }
    ]; };
    /** @nocollapse */ DeviceOrientationService.ngInjectableDef = i0.defineInjectable({ factory: function DeviceOrientationService_Factory() { return new DeviceOrientationService(i0.inject(i1.OrientationConfig)); }, token: DeviceOrientationService, providedIn: "root" });
    return DeviceOrientationService;
}());
export { DeviceOrientationService };
if (false) {
    /** @type {?} */
    DeviceOrientationService.prototype.orientationChange;
    /** @type {?} */
    DeviceOrientationService.prototype.headingChange;
    /** @type {?} */
    DeviceOrientationService.prototype.orientationChangeSource;
    /** @type {?} */
    DeviceOrientationService.prototype.headingChangeSource;
    /**
     * @type {?}
     * @private
     */
    DeviceOrientationService.prototype.internalDeviceNeedsCalibrated;
    /**
     * @type {?}
     * @private
     */
    DeviceOrientationService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLW9yaWVudGF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9vcmllbnRhdGlvbi9kZXZpY2Utb3JpZW50YXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUk3RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUM1RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7OztBQU1yQztJQWVFLGtDQUE2QixNQUF5QjtRQUF0RCxpQkFjQztRQWQ0QixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQU45QyxrQ0FBNkIsR0FBRyxLQUFLLENBQUM7UUFPNUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyRSxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FDeEIsSUFBSSxDQUFDLG1CQUFtQixFQUN4QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUN6QixHQUFHOzs7O1FBQUMsVUFBQSxXQUFXLElBQUksT0FBQSxXQUFXLENBQUMsT0FBTyxFQUFuQixDQUFtQixFQUFDLENBQ3hDLENBQ0YsQ0FBQztRQUVGLFNBQVMsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxLQUE2QixJQUFLLE9BQUEsS0FBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxFQUFqQyxDQUFpQyxFQUFDLENBQUM7UUFDdkgsU0FBUyxDQUFDLE1BQU0sRUFBRSwyQkFBMkIsQ0FBQyxDQUFDLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxFQUF6QyxDQUF5QyxFQUFDLENBQUM7UUFDMUcsU0FBUyxDQUFDLE1BQU0sRUFBRSx5QkFBeUIsQ0FBQyxDQUFDLFNBQVM7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxFQUF6QyxDQUF5QyxFQUFDLENBQUM7SUFDMUcsQ0FBQztJQWxCRCxzQkFBSSwyREFBcUI7Ozs7UUFBekI7WUFDRSxPQUFPLElBQUksQ0FBQyw2QkFBNkIsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTs7Ozs7OztJQWtCRCxrREFBZTs7Ozs7O0lBQWYsVUFBZ0IsV0FBd0I7UUFDdEMsSUFBSSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRTtZQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7U0FDakU7UUFFRCxtQkFBQSxJQUFJLEVBQUEsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0MsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNkLENBQUM7Ozs7Ozs7SUFFRCw4Q0FBVzs7Ozs7O0lBQVgsVUFBWSxPQUFlO1FBQ3pCLElBQUksQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsbUJBQUEsSUFBSSxFQUFBLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFFTyx3REFBcUI7Ozs7O0lBQTdCLFVBQThCLEtBQTZCO1FBQ3pELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUM7WUFDaEMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsT0FBTyxFQUFFLHlCQUF5QixDQUFDLEtBQUssQ0FBQztTQUMxQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkF4REYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFUUSxpQkFBaUI7OzttQ0FUMUI7Q0F5RUMsQUF6REQsSUF5REM7U0F0RFksd0JBQXdCOzs7SUFDbkMscURBQW9EOztJQUNwRCxpREFBMkM7O0lBQzNDLDJEQUF1RDs7SUFDdkQsdURBQThDOzs7OztJQUU5QyxpRUFBOEM7Ozs7O0lBTWxDLDBDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIDNyZCBQYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIGZyb21FdmVudCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcblxuLy8gQXBwLlxuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tICcuL29yaWVudGF0aW9uJztcbmltcG9ydCB7IGdldEhlYWRpbmdGcm9tT3JpZW50YXRpb24gfSBmcm9tICcuL2hlYWRpbmcvZ2V0LWhlYWRpbmctZnJvbS1vcmllbnRhdGlvbi5mdW5jdGlvbic7XG5pbXBvcnQgeyBPcmllbnRhdGlvbkNvbmZpZyB9IGZyb20gJy4vb3JpZW50YXRpb24uY29uZmlnJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuXG4vKipcbiAqIEdlb2xvY2F0b3Igc2VydmljZS4gUHJvdmlkZXMgYSBzaW5nbGUgcG9pbnQgb2YgR1BTIGludGVyYWN0aW9uLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VPcmllbnRhdGlvblNlcnZpY2Uge1xuICByZWFkb25seSBvcmllbnRhdGlvbkNoYW5nZTogT2JzZXJ2YWJsZTxPcmllbnRhdGlvbj47XG4gIHJlYWRvbmx5IGhlYWRpbmdDaGFuZ2U6IE9ic2VydmFibGU8bnVtYmVyPjtcbiAgcmVhZG9ubHkgb3JpZW50YXRpb25DaGFuZ2VTb3VyY2U6IFN1YmplY3Q8T3JpZW50YXRpb24+O1xuICByZWFkb25seSBoZWFkaW5nQ2hhbmdlU291cmNlOiBTdWJqZWN0PG51bWJlcj47XG5cbiAgcHJpdmF0ZSBpbnRlcm5hbERldmljZU5lZWRzQ2FsaWJyYXRlZCA9IGZhbHNlO1xuXG4gIGdldCBkZXZpY2VOZWVkc0NhbGlicmF0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxEZXZpY2VOZWVkc0NhbGlicmF0ZWQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvbmZpZzogT3JpZW50YXRpb25Db25maWcpIHtcbiAgICB0aGlzLmhlYWRpbmdDaGFuZ2VTb3VyY2UgPSBuZXcgU3ViamVjdCgpO1xuICAgIHRoaXMub3JpZW50YXRpb25DaGFuZ2VTb3VyY2UgPSBuZXcgU3ViamVjdCgpO1xuICAgIHRoaXMub3JpZW50YXRpb25DaGFuZ2UgPSB0aGlzLm9yaWVudGF0aW9uQ2hhbmdlU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICAgIHRoaXMuaGVhZGluZ0NoYW5nZSA9IG1lcmdlKFxuICAgICAgdGhpcy5oZWFkaW5nQ2hhbmdlU291cmNlLFxuICAgICAgdGhpcy5vcmllbnRhdGlvbkNoYW5nZS5waXBlKFxuICAgICAgICBtYXAob3JpZW50YXRpb24gPT4gb3JpZW50YXRpb24uaGVhZGluZylcbiAgICAgIClcbiAgICApO1xuXG4gICAgZnJvbUV2ZW50KHdpbmRvdywgJ2RldmljZW9yaWVudGF0aW9uJykuc3Vic2NyaWJlKChldmVudDogRGV2aWNlT3JpZW50YXRpb25FdmVudCkgPT4gdGhpcy5lbWl0T3JpZW50YXRpb25DaGFuZ2UoZXZlbnQpKTtcbiAgICBmcm9tRXZlbnQod2luZG93LCAnb25jb21wYXNzbmVlZHNjYWxpYnJhdGlvbicpLnN1YnNjcmliZSgoKSA9PiB0aGlzLmludGVybmFsRGV2aWNlTmVlZHNDYWxpYnJhdGVkID0gdHJ1ZSk7XG4gICAgZnJvbUV2ZW50KHdpbmRvdywgJ2NvbXBhc3NuZWVkc2NhbGlicmF0aW9uJykuc3Vic2NyaWJlKCgpID0+IHRoaXMuaW50ZXJuYWxEZXZpY2VOZWVkc0NhbGlicmF0ZWQgPSB0cnVlKTtcbiAgfVxuXG4gIG1vY2tPcmllbnRhdGlvbihvcmllbnRhdGlvbjogT3JpZW50YXRpb24pOiB0aGlzIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmFsbG93T3JpZW50YXRpb25Nb2NraW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Blcm1pc3Npb24gZGVuaWVkIHRvIG1vY2sgZGV2aWNlIG9yaWVudGF0aW9uJyk7XG4gICAgfVxuXG4gICAgdGhpcy5vcmllbnRhdGlvbkNoYW5nZVNvdXJjZS5uZXh0KG9yaWVudGF0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG1vY2tIZWFkaW5nKGhlYWRpbmc6IG51bWJlcik6IHRoaXMge1xuICAgIGlmICghdGhpcy5jb25maWcuYWxsb3dIZWFkaW5nTW9ja2luZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQZXJtaXNzaW9uIGRlbmllZCB0byBtb2NrIGhlYWRpbmcnKTtcbiAgICB9XG5cbiAgICB0aGlzLmhlYWRpbmdDaGFuZ2VTb3VyY2UubmV4dChoZWFkaW5nKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHByaXZhdGUgZW1pdE9yaWVudGF0aW9uQ2hhbmdlKGV2ZW50OiBEZXZpY2VPcmllbnRhdGlvbkV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5vcmllbnRhdGlvbkNoYW5nZVNvdXJjZS5uZXh0KHtcbiAgICAgIGFscGhhOiBldmVudC5hbHBoYSxcbiAgICAgIGJldGE6IGV2ZW50LmJldGEsXG4gICAgICBnYW1tYTogZXZlbnQuZ2FtbWEsXG4gICAgICBoZWFkaW5nOiBnZXRIZWFkaW5nRnJvbU9yaWVudGF0aW9uKGV2ZW50KVxuICAgIH0pO1xuICB9XG59XG4iXX0=