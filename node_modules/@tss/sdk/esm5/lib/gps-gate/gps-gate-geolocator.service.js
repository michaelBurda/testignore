/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// 3rd Party.
import { Subject, of } from 'rxjs';
import { finalize, map, catchError } from 'rxjs/operators';
// TSS.
import { GeolocatorCapability } from '../geolocation/geolocator/geolocator-capability';
import { BaseGeolocator } from '../geolocation/geolocator/base-geolocator.service';
import { GeolocatorAccuracyUnit } from '../geolocation/geolocator/geolocator-accuracy-unit';
import { Logger } from '../core/logging/logger.service';
import { GpsGateConfig } from './gps-gate.config';
import { format } from '../core/formatting/format.function';
import { Geolocatable } from '../geolocation/geolocator/geolocatable.decorator';
import * as i0 from "@angular/core";
import * as i1 from "../core/logging/logger.service";
import * as i2 from "@angular/common/http";
import * as i3 from "./gps-gate.config";
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
var GpsGateGeolocator = /** @class */ (function (_super) {
    tslib_1.__extends(GpsGateGeolocator, _super);
    function GpsGateGeolocator(log, http, config) {
        var _this = _super.call(this, log) || this;
        _this.http = http;
        _this.config = config;
        _this.capabilities = [
            GeolocatorCapability.Altitude,
            GeolocatorCapability.AltitudeAccuracy,
            GeolocatorCapability.Heading,
            GeolocatorCapability.Speed,
            GeolocatorCapability.HDOP,
        ];
        _this.accuracyUnit = GeolocatorAccuracyUnit.Hdop;
        return _this;
    }
    Object.defineProperty(GpsGateGeolocator.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.geolocatorName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GpsGateGeolocator.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.geolocatorDescription;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} options
     * @return {?}
     */
    GpsGateGeolocator.prototype.getCurrentPosition = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        /** @type {?} */
        var url = format(this.config.urlTemplate, {
            endpoint: this.config.getInfoEndpoint,
            cacheBuster: new Date().getTime()
        });
        return this.http.jsonp(url, this.config.jsonpParameterName)
            .pipe(map((/**
         * @param {?} info
         * @return {?}
         */
        function (info) {
            /** @type {?} */
            var timestamp = new Date(info.trackPoint.utc).getTime();
            /** @type {?} */
            var position = Object.assign({
                timestamp: timestamp,
                // NOTE: We are setting accuracy to HDOP because since this geolocator does not have
                // accuracy capabilities (see capabilities property), accuracy will not be shown within
                // the UI - rather fallback PDOP, HDOP, VDOP, etc will be used. However, we want to set
                // the accuracy because this value is what will be used to do collection
                // accuracy/precision acceptance (acceptable, warning, unaceptable, etc) - RG.
                accuracy: info.trackPoint.precision.hdop,
                altitudeAccuracy: null,
                speed: info.trackPoint.velocity.groundSpeed,
                heading: info.trackPoint.velocity.heading,
                hdop: info.trackPoint.precision.hdop
            }, info.trackPoint.position);
            _this.log.trace("Received current position for " + _this.name);
            return position;
        })))
            .toPromise();
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    GpsGateGeolocator.prototype.watchPosition = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        /** @type {?} */
        var lastPosition;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var interval = setInterval((/**
         * @return {?}
         */
        function () {
            _this.getCurrentPosition(options)
                .then((/**
             * @param {?} position
             * @return {?}
             */
            function (position) {
                if (notEqual(position, lastPosition)) {
                    subject.next(position);
                }
                _this.log.trace("Received watch position for " + _this.name);
                lastPosition = position;
            }))
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return subject.error(error); }));
        }), this.config.refreshInterval);
        return subject.pipe(finalize((/**
         * @return {?}
         */
        function () { return clearInterval(interval); })));
    };
    /**
     * @return {?}
     */
    GpsGateGeolocator.prototype.isAvailable = /**
     * @return {?}
     */
    function () {
        return this.getVersion()
            .pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return Boolean(result); })), catchError((/**
         * @return {?}
         */
        function () { return of(false); })));
    };
    /**
     * @return {?}
     */
    GpsGateGeolocator.prototype.getVersion = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = format(this.config.urlTemplate, {
            endpoint: this.config.getVersionEndpoint,
            cacheBuster: new Date().getTime()
        });
        return this.http.jsonp(url, this.config.jsonpParameterName);
    };
    GpsGateGeolocator.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    GpsGateGeolocator.ctorParameters = function () { return [
        { type: Logger },
        { type: HttpClient },
        { type: GpsGateConfig }
    ]; };
    /** @nocollapse */ GpsGateGeolocator.ngInjectableDef = i0.defineInjectable({ factory: function GpsGateGeolocator_Factory() { return new GpsGateGeolocator(i0.inject(i1.Logger), i0.inject(i2.HttpClient), i0.inject(i3.GpsGateConfig)); }, token: GpsGateGeolocator, providedIn: "root" });
    /**
     * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
     * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
     */
    GpsGateGeolocator = tslib_1.__decorate([
        Geolocatable('gps-gate'),
        tslib_1.__metadata("design:paramtypes", [Logger, HttpClient, GpsGateConfig])
    ], GpsGateGeolocator);
    return GpsGateGeolocator;
}(BaseGeolocator));
export { GpsGateGeolocator };
if (false) {
    /** @type {?} */
    GpsGateGeolocator.prototype.capabilities;
    /**
     * @type {?}
     * @private
     */
    GpsGateGeolocator.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GpsGateGeolocator.prototype.config;
}
/**
 * @param {?} position1
 * @param {?} position2
 * @return {?}
 */
function notEqual(position1, position2) {
    return !equal(position1, position2);
}
/**
 * @param {?} position1
 * @param {?} position2
 * @return {?}
 */
function equal(position1, position2) {
    return position1
        && position2
        && position1.timestamp === position2.timestamp
        && position1.latitude === position2.latitude
        && position1.longitude === position2.longitude
        && position1.accuracy === position2.accuracy
        && position1.speed === position2.speed
        && position1.heading === position2.heading
        && position1.altitude === position2.altitude
        && position1.altitudeAccuracy === position2.altitudeAccuracy
        && position1.pdop === position2.pdop
        && position1.hdop === position2.hdop
        && position1.vdop === position2.vdop
        && position1.tdop === position2.tdop;
}
//# sourceMappingURL=data:application/json;base64,