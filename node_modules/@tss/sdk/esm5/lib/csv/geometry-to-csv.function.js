/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { toCsv } from './to-csv.function';
import { isLine } from '../geometry/geometry/is-line.function';
import { flattenLine } from '../geometry/line/flatten-line.function';
import { isPoint } from '../geometry/geometry/is-point.function';
import { toMultiPartPoint } from '../geometry/point/to-multi-part-point.function';
import { isPolygon } from '../geometry/geometry/is-polygon.function';
/**
 * @param {?} geometry
 * @param {...?} verticeeOrdinalNames
 * @return {?}
 */
export function geometryToCsv(geometry) {
    var verticeeOrdinalNames = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        verticeeOrdinalNames[_i - 1] = arguments[_i];
    }
    /** @type {?} */
    var pointInfos = [];
    /** @type {?} */
    var verticees = [];
    if (isLine(geometry)) {
        verticees = flattenLine((/** @type {?} */ (geometry)));
    }
    else if (isPoint(geometry)) {
        verticees = toMultiPartPoint((/** @type {?} */ (geometry)));
    }
    else if (isPolygon(geometry)) {
        /** @type {?} */
        var polygon = (/** @type {?} */ (geometry));
        verticees = flattenLine(polygon.coordinates);
    }
    else {
        throw new Error('Unknown or unsupported geometry type provided');
    }
    verticees.map((/**
     * @param {?} verticee
     * @return {?}
     */
    function (verticee) {
        /** @type {?} */
        var info = {};
        pointInfos.push(info);
        if (!verticeeOrdinalNames || !verticeeOrdinalNames.length) {
            verticeeOrdinalNames = ['x', 'y'];
            if (verticee.length > 2) {
                verticeeOrdinalNames.push('z');
            }
            if (verticee.length > 3) {
                verticeeOrdinalNames.push('m');
            }
        }
        verticeeOrdinalNames.forEach((/**
         * @param {?} name
         * @param {?} index
         * @return {?}
         */
        function (name, index) {
            info[name] = verticee[index];
        }));
    }));
    return toCsv(pointInfos);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbWV0cnktdG8tY3N2LmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY3N2L2dlb21ldHJ5LXRvLWNzdi5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNsRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMENBQTBDLENBQUM7Ozs7OztBQUdyRSxNQUFNLFVBQVUsYUFBYSxDQUFDLFFBQWtCO0lBQUUsOEJBQWlDO1NBQWpDLFVBQWlDLEVBQWpDLHFCQUFpQyxFQUFqQyxJQUFpQztRQUFqQyw2Q0FBaUM7OztRQUMzRSxVQUFVLEdBQUcsRUFBRTs7UUFDakIsU0FBUyxHQUFlLEVBQUU7SUFFOUIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDcEIsU0FBUyxHQUFHLFdBQVcsQ0FBQyxtQkFBQSxRQUFRLEVBQWMsQ0FBQyxDQUFDO0tBQ2pEO1NBQU0sSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDNUIsU0FBUyxHQUFHLGdCQUFnQixDQUFDLG1CQUFBLFFBQVEsRUFBUyxDQUFDLENBQUM7S0FDakQ7U0FBTSxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTs7WUFDeEIsT0FBTyxHQUFHLG1CQUFBLFFBQVEsRUFBVztRQUNuQyxTQUFTLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUM5QztTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsU0FBUyxDQUFDLEdBQUc7Ozs7SUFBQyxVQUFBLFFBQVE7O1lBQ2QsSUFBSSxHQUFHLEVBQUU7UUFDZixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRTtZQUN6RCxvQkFBb0IsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVsQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEM7WUFFRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDaEM7U0FDRjtRQUVELG9CQUFvQixDQUFDLE9BQU87Ozs7O1FBQUMsVUFBQyxJQUFZLEVBQUUsS0FBYTtZQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQyxFQUFDLENBQUM7SUFFSCxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gM3JkIHBhcnR5LlxuaW1wb3J0IHsgR2VvbWV0cnksIFBvc2l0aW9uLCBQb2ludCwgUG9seWdvbiwgTGluZVN0cmluZyB9IGZyb20gJ2dlb2pzb24nO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyB0b0NzdiB9IGZyb20gJy4vdG8tY3N2LmZ1bmN0aW9uJztcbmltcG9ydCB7IGlzTGluZSB9IGZyb20gJy4uL2dlb21ldHJ5L2dlb21ldHJ5L2lzLWxpbmUuZnVuY3Rpb24nO1xuaW1wb3J0IHsgZmxhdHRlbkxpbmUgfSBmcm9tICcuLi9nZW9tZXRyeS9saW5lL2ZsYXR0ZW4tbGluZS5mdW5jdGlvbic7XG5pbXBvcnQgeyBpc1BvaW50IH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkvaXMtcG9pbnQuZnVuY3Rpb24nO1xuaW1wb3J0IHsgdG9NdWx0aVBhcnRQb2ludCB9IGZyb20gJy4uL2dlb21ldHJ5L3BvaW50L3RvLW11bHRpLXBhcnQtcG9pbnQuZnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNQb2x5Z29uIH0gZnJvbSAnLi4vZ2VvbWV0cnkvZ2VvbWV0cnkvaXMtcG9seWdvbi5mdW5jdGlvbic7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdlb21ldHJ5VG9Dc3YoZ2VvbWV0cnk6IEdlb21ldHJ5LCAuLi52ZXJ0aWNlZU9yZGluYWxOYW1lczogc3RyaW5nW10pOiBzdHJpbmcge1xuICBjb25zdCBwb2ludEluZm9zID0gW107XG4gIGxldCB2ZXJ0aWNlZXM6IFBvc2l0aW9uW10gPSBbXTtcblxuICBpZiAoaXNMaW5lKGdlb21ldHJ5KSkge1xuICAgIHZlcnRpY2VlcyA9IGZsYXR0ZW5MaW5lKGdlb21ldHJ5IGFzIExpbmVTdHJpbmcpO1xuICB9IGVsc2UgaWYgKGlzUG9pbnQoZ2VvbWV0cnkpKSB7XG4gICAgdmVydGljZWVzID0gdG9NdWx0aVBhcnRQb2ludChnZW9tZXRyeSBhcyBQb2ludCk7XG4gIH0gZWxzZSBpZiAoaXNQb2x5Z29uKGdlb21ldHJ5KSkge1xuICAgIGNvbnN0IHBvbHlnb24gPSBnZW9tZXRyeSBhcyBQb2x5Z29uO1xuICAgIHZlcnRpY2VlcyA9IGZsYXR0ZW5MaW5lKHBvbHlnb24uY29vcmRpbmF0ZXMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBvciB1bnN1cHBvcnRlZCBnZW9tZXRyeSB0eXBlIHByb3ZpZGVkJyk7XG4gIH1cblxuICB2ZXJ0aWNlZXMubWFwKHZlcnRpY2VlID0+IHtcbiAgICBjb25zdCBpbmZvID0ge307XG4gICAgcG9pbnRJbmZvcy5wdXNoKGluZm8pO1xuXG4gICAgaWYgKCF2ZXJ0aWNlZU9yZGluYWxOYW1lcyB8fCAhdmVydGljZWVPcmRpbmFsTmFtZXMubGVuZ3RoKSB7XG4gICAgICB2ZXJ0aWNlZU9yZGluYWxOYW1lcyA9IFsneCcsICd5J107XG5cbiAgICAgIGlmICh2ZXJ0aWNlZS5sZW5ndGggPiAyKSB7XG4gICAgICAgIHZlcnRpY2VlT3JkaW5hbE5hbWVzLnB1c2goJ3onKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZlcnRpY2VlLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgdmVydGljZWVPcmRpbmFsTmFtZXMucHVzaCgnbScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZlcnRpY2VlT3JkaW5hbE5hbWVzLmZvckVhY2goKG5hbWU6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgaW5mb1tuYW1lXSA9IHZlcnRpY2VlW2luZGV4XTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRvQ3N2KHBvaW50SW5mb3MpO1xufVxuIl19