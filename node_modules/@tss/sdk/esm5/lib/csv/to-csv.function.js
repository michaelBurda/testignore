/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// TSS.
import { CSV_NEW_LINE, CSV_SEPARATOR } from './csv.constants';
import { clone } from '../core/clone/clone.function';
import { isDefined } from '../core/type-check/is-defined.function';
/**
 * @param {?} data
 * @param {...?} properties
 * @return {?}
 */
export function toCsv(data) {
    var properties = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        properties[_i - 1] = arguments[_i];
    }
    var _a = tslib_1.__read(data, 1), firstItem = _a[0];
    /** @type {?} */
    var csv = '';
    if (firstItem) {
        // NOTE: We need to clone the object here because we can't trust on Object.keys working
        // on every object type. For example, a true "coordinate", object.keys doesn't work - RG.
        properties = properties && properties.length
            ? properties
            : Object.keys(clone(firstItem));
        /** @type {?} */
        var header = "" + properties.join(CSV_SEPARATOR);
        /** @type {?} */
        var csvLines = data.map((/**
         * @param {?} point
         * @return {?}
         */
        function (point) {
            /** @type {?} */
            var fields = properties.map((/**
             * @param {?} property
             * @return {?}
             */
            function (property) {
                /** @type {?} */
                var value = point[property];
                /** @type {?} */
                var hasPropertyValue = isDefined(value);
                return hasPropertyValue ? value : '';
            }));
            return fields.join(CSV_SEPARATOR);
        }));
        csv = "" + header + CSV_NEW_LINE + csvLines.join(CSV_NEW_LINE);
    }
    return csv;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tY3N2LmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY3N2L3RvLWNzdi5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7Ozs7OztBQUduRSxNQUFNLFVBQVUsS0FBSyxDQUFDLElBQVc7SUFBRSxvQkFBdUI7U0FBdkIsVUFBdUIsRUFBdkIscUJBQXVCLEVBQXZCLElBQXVCO1FBQXZCLG1DQUF1Qjs7SUFDbEQsSUFBQSw0QkFBa0IsRUFBakIsaUJBQWlCOztRQUNwQixHQUFHLEdBQUcsRUFBRTtJQUVaLElBQUksU0FBUyxFQUFFO1FBQ2IsdUZBQXVGO1FBQ3ZGLHlGQUF5RjtRQUN6RixVQUFVLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNO1lBQzFDLENBQUMsQ0FBQyxVQUFVO1lBQ1osQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7O1lBRTVCLE1BQU0sR0FBRyxLQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFHOztZQUM1QyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLEtBQUs7O2dCQUN2QixNQUFNLEdBQUcsVUFBVSxDQUFDLEdBQUc7Ozs7WUFBQyxVQUFBLFFBQVE7O29CQUM5QixLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7b0JBQ3ZCLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7Z0JBQ3pDLE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLENBQUMsRUFBQztZQUVGLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNwQyxDQUFDLEVBQUM7UUFFRixHQUFHLEdBQUcsS0FBRyxNQUFNLEdBQUcsWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFHLENBQUM7S0FDaEU7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUU1MuXG5pbXBvcnQgeyBDU1ZfTkVXX0xJTkUsIENTVl9TRVBBUkFUT1IgfSBmcm9tICcuL2Nzdi5jb25zdGFudHMnO1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tICcuLi9jb3JlL2Nsb25lL2Nsb25lLmZ1bmN0aW9uJztcbmltcG9ydCB7IGlzRGVmaW5lZCB9IGZyb20gJy4uL2NvcmUvdHlwZS1jaGVjay9pcy1kZWZpbmVkLmZ1bmN0aW9uJztcblxuXG5leHBvcnQgZnVuY3Rpb24gdG9Dc3YoZGF0YTogYW55W10sIC4uLnByb3BlcnRpZXM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgY29uc3QgW2ZpcnN0SXRlbV0gPSBkYXRhO1xuICBsZXQgY3N2ID0gJyc7XG5cbiAgaWYgKGZpcnN0SXRlbSkge1xuICAgIC8vIE5PVEU6IFdlIG5lZWQgdG8gY2xvbmUgdGhlIG9iamVjdCBoZXJlIGJlY2F1c2Ugd2UgY2FuJ3QgdHJ1c3Qgb24gT2JqZWN0LmtleXMgd29ya2luZ1xuICAgIC8vIG9uIGV2ZXJ5IG9iamVjdCB0eXBlLiBGb3IgZXhhbXBsZSwgYSB0cnVlIFwiY29vcmRpbmF0ZVwiLCBvYmplY3Qua2V5cyBkb2Vzbid0IHdvcmsgLSBSRy5cbiAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyAmJiBwcm9wZXJ0aWVzLmxlbmd0aFxuICAgICAgPyBwcm9wZXJ0aWVzXG4gICAgICA6IE9iamVjdC5rZXlzKGNsb25lKGZpcnN0SXRlbSkpO1xuXG4gICAgY29uc3QgaGVhZGVyID0gYCR7cHJvcGVydGllcy5qb2luKENTVl9TRVBBUkFUT1IpfWA7XG4gICAgY29uc3QgY3N2TGluZXMgPSBkYXRhLm1hcChwb2ludCA9PiB7XG4gICAgICBjb25zdCBmaWVsZHMgPSBwcm9wZXJ0aWVzLm1hcChwcm9wZXJ0eSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnRbcHJvcGVydHldO1xuICAgICAgICBjb25zdCBoYXNQcm9wZXJ0eVZhbHVlID0gaXNEZWZpbmVkKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGhhc1Byb3BlcnR5VmFsdWUgPyB2YWx1ZSA6ICcnO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmaWVsZHMuam9pbihDU1ZfU0VQQVJBVE9SKTtcbiAgICB9KTtcblxuICAgIGNzdiA9IGAke2hlYWRlcn0ke0NTVl9ORVdfTElORX0ke2NzdkxpbmVzLmpvaW4oQ1NWX05FV19MSU5FKX1gO1xuICB9XG5cbiAgcmV0dXJuIGNzdjtcbn1cbiJdfQ==