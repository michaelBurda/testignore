/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { CoreConfig } from '../core.config';
import { NotifyType } from './notify-type';
import { Logger } from '../logging/logger.service';
import { NotificationSubscriptionTracker } from './notification-subscription-tracker';
import { NotificationPromiseTracker } from './notification-promise-tracker';
import { format } from '../formatting/format.function';
import * as i0 from "@angular/core";
import * as i1 from "../core.config";
import * as i2 from "../logging/logger.service";
/**
 * Notification service.
 */
var NotifyService = /** @class */ (function () {
    function NotifyService(config, log) {
        this.config = config;
        this.log = log;
    }
    /**
     * @param {?} type
     * @param {?} message
     * @param {?} title
     * @param {?=} config
     * @return {?}
     */
    NotifyService.prototype.notify = /**
     * @param {?} type
     * @param {?} message
     * @param {?} title
     * @param {?=} config
     * @return {?}
     */
    function (type, message, title, config) {
        // Add actual notification implementation here.
        return {};
    };
    /**
     * @param {?=} notifyId
     * @param {?=} containerId
     * @return {?}
     */
    NotifyService.prototype.clear = /**
     * @param {?=} notifyId
     * @param {?=} containerId
     * @return {?}
     */
    function (notifyId, containerId) {
    };
    /**
     * @template T
     * @param {?} source
     * @return {?}
     */
    NotifyService.prototype.with = /**
     * @template T
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return new NotificationSubscriptionTracker(source, this, this.log);
    };
    /**
     * @template T
     * @param {?} source
     * @return {?}
     */
    NotifyService.prototype.promise = /**
     * @template T
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return new NotificationPromiseTracker(source, this, this.log);
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    NotifyService.prototype.wait = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    function (message, title, config) {
        if (title === void 0) { title = this.config.defaultNotifyWaitMsg; }
        return this.notify(NotifyType.Wait, message, title, config);
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    NotifyService.prototype.success = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    function (message, title, config) {
        if (title === void 0) { title = this.config.defaultNotifySuccessMsg; }
        return this.notify(NotifyType.Success, message, title, config);
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} error
     * @param {?=} config
     * @return {?}
     */
    NotifyService.prototype.error = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} error
     * @param {?=} config
     * @return {?}
     */
    function (message, title, error, config) {
        if (title === void 0) { title = this.config.defaultNotifyErrorMsg; }
        if (error === void 0) { error = null; }
        return this.notify(NotifyType.Error, format(message, { error: error }), title, config);
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} error
     * @param {?=} config
     * @return {?}
     */
    NotifyService.prototype.warn = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} error
     * @param {?=} config
     * @return {?}
     */
    function (message, title, error, config) {
        if (title === void 0) { title = this.config.defaultNotifyWarnMsg; }
        if (error === void 0) { error = null; }
        return this.notify(NotifyType.Warn, format(message, { error: error }), title, config);
    };
    /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    NotifyService.prototype.info = /**
     * @param {?} message
     * @param {?=} title
     * @param {?=} config
     * @return {?}
     */
    function (message, title, config) {
        if (title === void 0) { title = this.config.defaultNotifyInfoMsg; }
        return this.notify(NotifyType.Info, message, title, config);
    };
    NotifyService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    NotifyService.ctorParameters = function () { return [
        { type: CoreConfig },
        { type: Logger }
    ]; };
    /** @nocollapse */ NotifyService.ngInjectableDef = i0.defineInjectable({ factory: function NotifyService_Factory() { return new NotifyService(i0.inject(i1.CoreConfig), i0.inject(i2.Logger)); }, token: NotifyService, providedIn: "root" });
    return NotifyService;
}());
export { NotifyService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    NotifyService.prototype.config;
    /**
     * @type {?}
     * @protected
     */
    NotifyService.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL25vdGlmeS9ub3RpZnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU1RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7Ozs7QUFNdkQ7SUFFRSx1QkFBc0IsTUFBa0IsRUFBWSxHQUFXO1FBQXpDLFdBQU0sR0FBTixNQUFNLENBQVk7UUFBWSxRQUFHLEdBQUgsR0FBRyxDQUFRO0lBQy9ELENBQUM7Ozs7Ozs7O0lBRUQsOEJBQU07Ozs7Ozs7SUFBTixVQUFPLElBQWdCLEVBQUUsT0FBZSxFQUFFLEtBQWEsRUFBRSxNQUFZO1FBQ25FLCtDQUErQztRQUMvQyxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Ozs7OztJQUVELDZCQUFLOzs7OztJQUFMLFVBQU0sUUFBaUIsRUFBRSxXQUFvQjtJQUM3QyxDQUFDOzs7Ozs7SUFFRCw0QkFBSTs7Ozs7SUFBSixVQUFRLE1BQXFCO1FBQzNCLE9BQU8sSUFBSSwrQkFBK0IsQ0FBSSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4RSxDQUFDOzs7Ozs7SUFFRCwrQkFBTzs7Ozs7SUFBUCxVQUFXLE1BQWtCO1FBQzNCLE9BQU8sSUFBSSwwQkFBMEIsQ0FBSSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7Ozs7O0lBRUQsNEJBQUk7Ozs7OztJQUFKLFVBQUssT0FBZSxFQUFFLEtBQXdDLEVBQUUsTUFBWTtRQUF0RCxzQkFBQSxFQUFBLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0I7UUFDNUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7Ozs7O0lBRUQsK0JBQU87Ozs7OztJQUFQLFVBQVEsT0FBZSxFQUFFLEtBQTJDLEVBQUUsTUFBWTtRQUF6RCxzQkFBQSxFQUFBLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUI7UUFDbEUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7Ozs7OztJQUVELDZCQUFLOzs7Ozs7O0lBQUwsVUFBTSxPQUFlLEVBQUUsS0FBeUMsRUFBRSxLQUFpQixFQUFFLE1BQVk7UUFBMUUsc0JBQUEsRUFBQSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMscUJBQXFCO1FBQUUsc0JBQUEsRUFBQSxZQUFpQjtRQUNqRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsRixDQUFDOzs7Ozs7OztJQUVELDRCQUFJOzs7Ozs7O0lBQUosVUFBSyxPQUFlLEVBQUUsS0FBd0MsRUFBRSxLQUFpQixFQUFFLE1BQVk7UUFBekUsc0JBQUEsRUFBQSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CO1FBQUUsc0JBQUEsRUFBQSxZQUFpQjtRQUMvRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRixDQUFDOzs7Ozs7O0lBRUQsNEJBQUk7Ozs7OztJQUFKLFVBQUssT0FBZSxFQUFFLEtBQXdDLEVBQUUsTUFBWTtRQUF0RCxzQkFBQSxFQUFBLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0I7UUFDNUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDOztnQkF2Q0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztnQkFiekIsVUFBVTtnQkFHVixNQUFNOzs7d0JBVmY7Q0E0REMsQUF4Q0QsSUF3Q0M7U0F2Q1ksYUFBYTs7Ozs7O0lBQ1osK0JBQTRCOzs7OztJQUFFLDRCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIDNyZCBwYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgQ29yZUNvbmZpZyB9IGZyb20gJy4uL2NvcmUuY29uZmlnJztcbmltcG9ydCB7IE5vdGlmeVR5cGUgfSBmcm9tICcuL25vdGlmeS10eXBlJztcbmltcG9ydCB7IE5vdGlmeSB9IGZyb20gJy4vbm90aWZ5JztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHJhY2tlciB9IGZyb20gJy4vbm90aWZpY2F0aW9uLXN1YnNjcmlwdGlvbi10cmFja2VyJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByb21pc2VUcmFja2VyIH0gZnJvbSAnLi9ub3RpZmljYXRpb24tcHJvbWlzZS10cmFja2VyJztcbmltcG9ydCB7IE5vdGlmeVJlc3BvbnNlIH0gZnJvbSAnLi9ub3RpZnktcmVzcG9uc2UnO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnLi4vZm9ybWF0dGluZy9mb3JtYXQuZnVuY3Rpb24nO1xuXG5cbi8qKlxuICogTm90aWZpY2F0aW9uIHNlcnZpY2UuXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTm90aWZ5U2VydmljZSBpbXBsZW1lbnRzIE5vdGlmeSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb25maWc6IENvcmVDb25maWcsIHByb3RlY3RlZCBsb2c6IExvZ2dlcikge1xuICB9XG5cbiAgbm90aWZ5KHR5cGU6IE5vdGlmeVR5cGUsIG1lc3NhZ2U6IHN0cmluZywgdGl0bGU6IHN0cmluZywgY29uZmlnPzogYW55KTogTm90aWZ5UmVzcG9uc2Uge1xuICAgIC8vIEFkZCBhY3R1YWwgbm90aWZpY2F0aW9uIGltcGxlbWVudGF0aW9uIGhlcmUuXG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgY2xlYXIobm90aWZ5SWQ/OiBzdHJpbmcsIGNvbnRhaW5lcklkPzogc3RyaW5nKTogdm9pZCB7XG4gIH1cblxuICB3aXRoPFQ+KHNvdXJjZTogT2JzZXJ2YWJsZTxUPik6IE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblRyYWNrZXI8VD4ge1xuICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uVHJhY2tlcjxUPihzb3VyY2UsIHRoaXMsIHRoaXMubG9nKTtcbiAgfVxuXG4gIHByb21pc2U8VD4oc291cmNlOiBQcm9taXNlPFQ+KTogTm90aWZpY2F0aW9uUHJvbWlzZVRyYWNrZXI8VD4ge1xuICAgIHJldHVybiBuZXcgTm90aWZpY2F0aW9uUHJvbWlzZVRyYWNrZXI8VD4oc291cmNlLCB0aGlzLCB0aGlzLmxvZyk7XG4gIH1cblxuICB3YWl0KG1lc3NhZ2U6IHN0cmluZywgdGl0bGUgPSB0aGlzLmNvbmZpZy5kZWZhdWx0Tm90aWZ5V2FpdE1zZywgY29uZmlnPzogYW55KTogTm90aWZ5UmVzcG9uc2Uge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeShOb3RpZnlUeXBlLldhaXQsIG1lc3NhZ2UsIHRpdGxlLCBjb25maWcpO1xuICB9XG5cbiAgc3VjY2VzcyhtZXNzYWdlOiBzdHJpbmcsIHRpdGxlID0gdGhpcy5jb25maWcuZGVmYXVsdE5vdGlmeVN1Y2Nlc3NNc2csIGNvbmZpZz86IGFueSk6IE5vdGlmeVJlc3BvbnNlIHtcbiAgICByZXR1cm4gdGhpcy5ub3RpZnkoTm90aWZ5VHlwZS5TdWNjZXNzLCBtZXNzYWdlLCB0aXRsZSwgY29uZmlnKTtcbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZywgdGl0bGUgPSB0aGlzLmNvbmZpZy5kZWZhdWx0Tm90aWZ5RXJyb3JNc2csIGVycm9yOiBhbnkgPSBudWxsLCBjb25maWc/OiBhbnkpOiBOb3RpZnlSZXNwb25zZSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5KE5vdGlmeVR5cGUuRXJyb3IsIGZvcm1hdChtZXNzYWdlLCB7IGVycm9yIH0pLCB0aXRsZSwgY29uZmlnKTtcbiAgfVxuXG4gIHdhcm4obWVzc2FnZTogc3RyaW5nLCB0aXRsZSA9IHRoaXMuY29uZmlnLmRlZmF1bHROb3RpZnlXYXJuTXNnLCBlcnJvcjogYW55ID0gbnVsbCwgY29uZmlnPzogYW55KTogTm90aWZ5UmVzcG9uc2Uge1xuICAgIHJldHVybiB0aGlzLm5vdGlmeShOb3RpZnlUeXBlLldhcm4sIGZvcm1hdChtZXNzYWdlLCB7IGVycm9yIH0pLCB0aXRsZSwgY29uZmlnKTtcbiAgfVxuXG4gIGluZm8obWVzc2FnZTogc3RyaW5nLCB0aXRsZSA9IHRoaXMuY29uZmlnLmRlZmF1bHROb3RpZnlJbmZvTXNnLCBjb25maWc/OiBhbnkpOiBOb3RpZnlSZXNwb25zZSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZ5KE5vdGlmeVR5cGUuSW5mbywgbWVzc2FnZSwgdGl0bGUsIGNvbmZpZyk7XG4gIH1cbn1cbiJdfQ==