/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { join } from '../url/join.function';
import { format } from '../formatting/format.function';
import { clean } from '../url/clean.function';
import { isString } from '../type-check/is-string.function';
import { NO_URL_ERROR_MSG } from './resource.constants';
/**
 * @abstract
 * @template T
 */
var /**
 * @abstract
 * @template T
 */
BaseEmptyResourceService = /** @class */ (function () {
    function BaseEmptyResourceService(http, paramsOrUrl) {
        this.http = http;
        this.config = {
            url: null,
            idFieldName: 'id',
            cleanUrl: true,
        };
        if (isString(paramsOrUrl)) {
            this.config.url = (/** @type {?} */ (paramsOrUrl));
        }
        else {
            Object.assign(this.config, paramsOrUrl);
        }
        if (!this.config.url) {
            throw NO_URL_ERROR_MSG;
        }
    }
    /**
     * @protected
     * @param {?} entity
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    BaseEmptyResourceService.prototype.getUrlWithEntity = /**
     * @protected
     * @param {?} entity
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    function (entity, endpoint, tokens) {
        return this.getUrlWithId(entity ? entity[this.config.idFieldName] : null, endpoint, tokens);
    };
    /**
     * @protected
     * @param {?} id
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    BaseEmptyResourceService.prototype.getUrlWithId = /**
     * @protected
     * @param {?} id
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    function (id, endpoint, tokens) {
        /** @type {?} */
        var inferredRouteTokens = {};
        inferredRouteTokens[this.config.idFieldName] = id;
        return this.getUrl(endpoint, Object.assign(inferredRouteTokens, tokens));
    };
    /**
     * @protected
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    BaseEmptyResourceService.prototype.getUrl = /**
     * @protected
     * @param {?} endpoint
     * @param {?} tokens
     * @return {?}
     */
    function (endpoint, tokens) {
        /** @type {?} */
        var url = endpoint
            ? join(this.config.url, endpoint)
            : this.config.url;
        return this.replaceTokens(url, tokens);
    };
    /**
     * @protected
     * @param {?} url
     * @param {?} tokens
     * @return {?}
     */
    BaseEmptyResourceService.prototype.replaceTokens = /**
     * @protected
     * @param {?} url
     * @param {?} tokens
     * @return {?}
     */
    function (url, tokens) {
        tokens = tokens || {};
        if (this.config.defaultRouteTokens) {
            tokens = Object.assign({}, this.config.defaultRouteTokens, tokens);
        }
        url = format(url, tokens, true);
        if (this.config.cleanUrl) {
            url = clean(url);
        }
        return url;
    };
    return BaseEmptyResourceService;
}());
/**
 * @abstract
 * @template T
 */
export { BaseEmptyResourceService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseEmptyResourceService.prototype.config;
    /**
     * @type {?}
     * @protected
     */
    BaseEmptyResourceService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1lbXB0eS1yZXNvdXJjZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY29yZS9yZXNvdXJjZS9iYXNlLWVtcHR5LXJlc291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDNUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7Ozs7O0FBR3hEOzs7OztJQU9FLGtDQUFzQixJQUFnQixFQUFFLFdBQTJDO1FBQTdELFNBQUksR0FBSixJQUFJLENBQVk7UUFONUIsV0FBTSxHQUEwQjtZQUN4QyxHQUFHLEVBQUUsSUFBSTtZQUNULFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQztRQUdBLElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLG1CQUFBLFdBQVcsRUFBVSxDQUFDO1NBQ3pDO2FBQU07WUFDTCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDcEIsTUFBTSxnQkFBZ0IsQ0FBQztTQUN4QjtJQUNILENBQUM7Ozs7Ozs7O0lBRVMsbURBQWdCOzs7Ozs7O0lBQTFCLFVBQTJCLE1BQVMsRUFBRSxRQUFnQixFQUFFLE1BQVc7UUFDakUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUYsQ0FBQzs7Ozs7Ozs7SUFFUywrQ0FBWTs7Ozs7OztJQUF0QixVQUF1QixFQUFtQixFQUFFLFFBQWdCLEVBQUUsTUFBVzs7WUFDakUsbUJBQW1CLEdBQUcsRUFBRTtRQUM5QixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDOzs7Ozs7O0lBRVMseUNBQU07Ozs7OztJQUFoQixVQUFpQixRQUFnQixFQUFFLE1BQVc7O1lBQ3RDLEdBQUcsR0FBRyxRQUFRO1lBQ2xCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7UUFFbkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7Ozs7O0lBRVMsZ0RBQWE7Ozs7OztJQUF2QixVQUF3QixHQUFXLEVBQUUsTUFBVztRQUM5QyxNQUFNLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUU7WUFDbEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEU7UUFFRCxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUN4QixHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBQ0gsK0JBQUM7QUFBRCxDQUFDLEFBbkRELElBbURDOzs7Ozs7Ozs7OztJQWxEQywwQ0FJRTs7Ozs7SUFFVSx3Q0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgam9pbiB9IGZyb20gJy4uL3VybC9qb2luLmZ1bmN0aW9uJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJy4uL2Zvcm1hdHRpbmcvZm9ybWF0LmZ1bmN0aW9uJztcbmltcG9ydCB7IGNsZWFuIH0gZnJvbSAnLi4vdXJsL2NsZWFuLmZ1bmN0aW9uJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vdHlwZS1jaGVjay9pcy1zdHJpbmcuZnVuY3Rpb24nO1xuaW1wb3J0IHsgUmVzb3VyY2VTZXJ2aWNlQ29uZmlnIH0gZnJvbSAnLi9yZXNvdXJjZS1zZXJ2aWNlLWNvbmZpZyc7XG5pbXBvcnQgeyBOT19VUkxfRVJST1JfTVNHIH0gZnJvbSAnLi9yZXNvdXJjZS5jb25zdGFudHMnO1xuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlRW1wdHlSZXNvdXJjZVNlcnZpY2U8VD4ge1xuICBwcm90ZWN0ZWQgY29uZmlnOiBSZXNvdXJjZVNlcnZpY2VDb25maWcgPSB7XG4gICAgdXJsOiBudWxsLFxuICAgIGlkRmllbGROYW1lOiAnaWQnLFxuICAgIGNsZWFuVXJsOiB0cnVlLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50LCBwYXJhbXNPclVybDogc3RyaW5nIHwgUmVzb3VyY2VTZXJ2aWNlQ29uZmlnKSB7XG4gICAgaWYgKGlzU3RyaW5nKHBhcmFtc09yVXJsKSkge1xuICAgICAgdGhpcy5jb25maWcudXJsID0gcGFyYW1zT3JVcmwgYXMgc3RyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnLCBwYXJhbXNPclVybCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy51cmwpIHtcbiAgICAgIHRocm93IE5PX1VSTF9FUlJPUl9NU0c7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGdldFVybFdpdGhFbnRpdHkoZW50aXR5OiBULCBlbmRwb2ludDogc3RyaW5nLCB0b2tlbnM6IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VXJsV2l0aElkKGVudGl0eSA/IGVudGl0eVt0aGlzLmNvbmZpZy5pZEZpZWxkTmFtZV0gOiBudWxsLCBlbmRwb2ludCwgdG9rZW5zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRVcmxXaXRoSWQoaWQ6IHN0cmluZyB8IG51bWJlciwgZW5kcG9pbnQ6IHN0cmluZywgdG9rZW5zOiBhbnkpOiBzdHJpbmcge1xuICAgIGNvbnN0IGluZmVycmVkUm91dGVUb2tlbnMgPSB7fTtcbiAgICBpbmZlcnJlZFJvdXRlVG9rZW5zW3RoaXMuY29uZmlnLmlkRmllbGROYW1lXSA9IGlkO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0VXJsKGVuZHBvaW50LCBPYmplY3QuYXNzaWduKGluZmVycmVkUm91dGVUb2tlbnMsIHRva2VucykpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldFVybChlbmRwb2ludDogc3RyaW5nLCB0b2tlbnM6IGFueSk6IHN0cmluZyB7XG4gICAgY29uc3QgdXJsID0gZW5kcG9pbnRcbiAgICAgID8gam9pbih0aGlzLmNvbmZpZy51cmwsIGVuZHBvaW50KVxuICAgICAgOiB0aGlzLmNvbmZpZy51cmw7XG5cbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlVG9rZW5zKHVybCwgdG9rZW5zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCByZXBsYWNlVG9rZW5zKHVybDogc3RyaW5nLCB0b2tlbnM6IGFueSk6IHN0cmluZyB7XG4gICAgdG9rZW5zID0gdG9rZW5zIHx8IHt9O1xuICAgIGlmICh0aGlzLmNvbmZpZy5kZWZhdWx0Um91dGVUb2tlbnMpIHtcbiAgICAgIHRva2VucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnLmRlZmF1bHRSb3V0ZVRva2VucywgdG9rZW5zKTtcbiAgICB9XG5cbiAgICB1cmwgPSBmb3JtYXQodXJsLCB0b2tlbnMsIHRydWUpO1xuICAgIGlmICh0aGlzLmNvbmZpZy5jbGVhblVybCkge1xuICAgICAgdXJsID0gY2xlYW4odXJsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG4iXX0=