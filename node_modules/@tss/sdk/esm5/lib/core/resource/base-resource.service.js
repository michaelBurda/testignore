/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// TSS.
import { BaseEmptyResourceService } from './base-empty-resource.service';
/**
 * @abstract
 * @template T
 */
var /**
 * @abstract
 * @template T
 */
BaseResourceService = /** @class */ (function (_super) {
    tslib_1.__extends(BaseResourceService, _super);
    function BaseResourceService(http, paramsOrUrl) {
        var _this = _super.call(this, http, paramsOrUrl) || this;
        _this.http = http;
        return _this;
    }
    /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    BaseResourceService.prototype.query = /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (routeTokens, params) {
        /** @type {?} */
        var url = this.getUrl(this.config.queryEndpoint, routeTokens);
        return this.http.get(url, { params: params });
    };
    /**
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    BaseResourceService.prototype.get = /**
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (id, routeTokens, params) {
        /** @type {?} */
        var url = this.getUrlWithId(id, this.config.getEndpoint, routeTokens);
        return this.http.get(url, { params: params });
    };
    /**
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    BaseResourceService.prototype.create = /**
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (entity, routeTokens, params) {
        /** @type {?} */
        var url = this.getUrl(this.config.createEndpoint, routeTokens);
        return this.http.post(url, entity, { params: params });
    };
    /**
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    BaseResourceService.prototype.update = /**
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (entity, routeTokens, params) {
        /** @type {?} */
        var url = this.getUrlWithEntity(entity, this.config.updateEndpoint, routeTokens);
        return this.http.put(url, entity, { params: params });
    };
    /**
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    BaseResourceService.prototype.delete = /**
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (id, routeTokens, params) {
        /** @type {?} */
        var url = this.getUrlWithId(id, this.config.deleteEndpoint, routeTokens);
        return this.http.delete(url, { params: params });
    };
    return BaseResourceService;
}(BaseEmptyResourceService));
/**
 * @abstract
 * @template T
 */
export { BaseResourceService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseResourceService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1yZXNvdXJjZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY29yZS9yZXNvdXJjZS9iYXNlLXJlc291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0EsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7O0FBSXpFOzs7OztJQUFxRCwrQ0FBMkI7SUFDOUUsNkJBQXNCLElBQWdCLEVBQUUsV0FBMkM7UUFBbkYsWUFDRSxrQkFBTSxJQUFJLEVBQUUsV0FBVyxDQUFDLFNBQ3pCO1FBRnFCLFVBQUksR0FBSixJQUFJLENBQVk7O0lBRXRDLENBQUM7Ozs7OztJQUVELG1DQUFLOzs7OztJQUFMLFVBQU0sV0FBaUIsRUFBRSxNQUFtQjs7WUFDcEMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDO1FBQy9ELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQU0sR0FBRyxFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7Ozs7SUFFRCxpQ0FBRzs7Ozs7O0lBQUgsVUFBSSxFQUFtQixFQUFFLFdBQWlCLEVBQUUsTUFBbUI7O1lBQ3ZELEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7UUFDdkUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxHQUFHLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7OztJQUVELG9DQUFNOzs7Ozs7SUFBTixVQUFPLE1BQVMsRUFBRSxXQUFpQixFQUFFLE1BQW1COztZQUNoRCxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxXQUFXLENBQUM7UUFDaEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBSSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7Ozs7SUFFRCxvQ0FBTTs7Ozs7O0lBQU4sVUFBTyxNQUFTLEVBQUUsV0FBaUIsRUFBRSxNQUFtQjs7WUFDaEQsR0FBRyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDO1FBQ2xGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7Ozs7O0lBRUQsb0NBQU07Ozs7OztJQUFOLFVBQU8sRUFBbUIsRUFBRSxXQUFpQixFQUFFLE1BQW1COztZQUMxRCxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDO1FBQzFFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUksR0FBRyxFQUFFLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFDSCwwQkFBQztBQUFELENBQUMsQUE3QkQsQ0FBcUQsd0JBQXdCLEdBNkI1RTs7Ozs7Ozs7Ozs7SUE1QmEsbUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8vIDNyZCBwYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgQmFzZUVtcHR5UmVzb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWVtcHR5LXJlc291cmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVzb3VyY2VTZXJ2aWNlQ29uZmlnIH0gZnJvbSAnLi9yZXNvdXJjZS1zZXJ2aWNlLWNvbmZpZyc7XG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VSZXNvdXJjZVNlcnZpY2U8VD4gZXh0ZW5kcyBCYXNlRW1wdHlSZXNvdXJjZVNlcnZpY2U8VD4gaW1wbGVtZW50cyBCYXNlRW1wdHlSZXNvdXJjZVNlcnZpY2U8VD4ge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCwgcGFyYW1zT3JVcmw6IHN0cmluZyB8IFJlc291cmNlU2VydmljZUNvbmZpZykge1xuICAgIHN1cGVyKGh0dHAsIHBhcmFtc09yVXJsKTtcbiAgfVxuXG4gIHF1ZXJ5KHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxUW10+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmdldFVybCh0aGlzLmNvbmZpZy5xdWVyeUVuZHBvaW50LCByb3V0ZVRva2Vucyk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VFtdPih1cmwsIHsgcGFyYW1zIH0pO1xuICB9XG5cbiAgZ2V0KGlkOiBzdHJpbmcgfCBudW1iZXIsIHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRVcmxXaXRoSWQoaWQsIHRoaXMuY29uZmlnLmdldEVuZHBvaW50LCByb3V0ZVRva2Vucyk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8VD4odXJsLCB7IHBhcmFtcyB9KTtcbiAgfVxuXG4gIGNyZWF0ZShlbnRpdHk6IFQsIHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRVcmwodGhpcy5jb25maWcuY3JlYXRlRW5kcG9pbnQsIHJvdXRlVG9rZW5zKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8VD4odXJsLCBlbnRpdHksIHsgcGFyYW1zIH0pO1xuICB9XG5cbiAgdXBkYXRlKGVudGl0eTogVCwgcm91dGVUb2tlbnM/OiBhbnksIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsV2l0aEVudGl0eShlbnRpdHksIHRoaXMuY29uZmlnLnVwZGF0ZUVuZHBvaW50LCByb3V0ZVRva2Vucyk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodXJsLCBlbnRpdHksIHsgcGFyYW1zIH0pO1xuICB9XG5cbiAgZGVsZXRlKGlkOiBzdHJpbmcgfCBudW1iZXIsIHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5nZXRVcmxXaXRoSWQoaWQsIHRoaXMuY29uZmlnLmRlbGV0ZUVuZHBvaW50LCByb3V0ZVRva2Vucyk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGU8VD4odXJsLCB7IHBhcmFtcyB9KTtcbiAgfVxufVxuIl19