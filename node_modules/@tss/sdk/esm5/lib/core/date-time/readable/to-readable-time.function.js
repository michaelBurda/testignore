/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { millisecondsToSeconds } from '../conversion/milliseconds-to-seconds.function';
import { millisecondsToMinutes } from '../conversion/milliseconds-to-minutes.function';
import { millisecondsToHours } from '../conversion/milliseconds-to-hours.function';
import { millisecondsToDays } from '../conversion/milliseconds-to-days.function';
import { MILLISECONDS_PER_SECOND, MILLISECONDS_PER_MINUTE, MILLISECONDS_PER_HOUR, MILLISECONDS_PER_DAY, READABLE_TIME_SUFFIX_MAP } from '../date-time.constants';
/**
 * @param {?} milliseconds
 * @param {?=} suffixMap
 * @return {?}
 */
export function toReadableTime(milliseconds, suffixMap) {
    if (suffixMap === void 0) { suffixMap = {}; }
    // TODO: Get rid of magic numbers below - RG.
    /** @type {?} */
    var formatAsMilliseconds = milliseconds < MILLISECONDS_PER_SECOND;
    /** @type {?} */
    var formatAsSeconds = milliseconds < (MILLISECONDS_PER_MINUTE - 1);
    /** @type {?} */
    var formatAsMinutes = milliseconds < (MILLISECONDS_PER_HOUR - 299);
    /** @type {?} */
    var formatAsHours = milliseconds < (MILLISECONDS_PER_DAY - 18000);
    /** @type {?} */
    var value = milliseconds;
    /** @type {?} */
    var unit;
    /** @type {?} */
    var decimalPlaces;
    suffixMap = suffixMap
        ? Object.assign({}, READABLE_TIME_SUFFIX_MAP, suffixMap)
        : READABLE_TIME_SUFFIX_MAP;
    // We assume the milliseconds was passed in.
    if (formatAsMilliseconds) {
        // The time should be shown in milliseconds.
        unit = suffixMap.ms;
        value = milliseconds;
        decimalPlaces = suffixMap.msDecimalPlaces;
    }
    else if (formatAsSeconds) {
        // The time should be shown in seconds.
        /** @type {?} */
        var seconds = millisecondsToSeconds(milliseconds);
        unit = suffixMap.sec;
        value = seconds;
        decimalPlaces = suffixMap.secDecimalPlaces;
    }
    else if (formatAsMinutes) {
        // The time should be shown in in minutes.
        /** @type {?} */
        var minutes = millisecondsToMinutes(milliseconds);
        unit = suffixMap.min;
        value = minutes;
        decimalPlaces = suffixMap.minDecimalPlaces;
    }
    else if (formatAsHours) {
        // The time should be shown in hours.
        /** @type {?} */
        var hours = millisecondsToHours(milliseconds);
        unit = suffixMap.hr;
        value = hours;
        decimalPlaces = suffixMap.hrDecimalPlaces;
    }
    else {
        // The time should be shown in days.
        /** @type {?} */
        var days = millisecondsToDays(milliseconds);
        unit = suffixMap.days;
        value = days;
        decimalPlaces = suffixMap.daysDecimalPlaces;
    }
    /** @type {?} */
    var numberWithStrippedZeros = Number(value.toFixed(decimalPlaces));
    return numberWithStrippedZeros + " " + unit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8tcmVhZGFibGUtdGltZS5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvZGF0ZS10aW1lL3JlYWRhYmxlL3RvLXJlYWRhYmxlLXRpbWUuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ2pGLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLHFCQUFxQixFQUNyQixvQkFBb0IsRUFDcEIsd0JBQXdCLEVBQ3pCLE1BQU0sd0JBQXdCLENBQUM7Ozs7OztBQUdoQyxNQUFNLFVBQVUsY0FBYyxDQUFDLFlBQW9CLEVBQUUsU0FBbUI7SUFBbkIsMEJBQUEsRUFBQSxjQUFtQjs7O1FBRWhFLG9CQUFvQixHQUFHLFlBQVksR0FBRyx1QkFBdUI7O1FBQzdELGVBQWUsR0FBRyxZQUFZLEdBQUcsQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLENBQUM7O1FBQzlELGVBQWUsR0FBRyxZQUFZLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUM7O1FBQzlELGFBQWEsR0FBRyxZQUFZLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUM7O1FBQy9ELEtBQUssR0FBVyxZQUFZOztRQUM1QixJQUFZOztRQUNaLGFBQXFCO0lBRXpCLFNBQVMsR0FBRyxTQUFTO1FBQ25CLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSx3QkFBd0IsRUFBRSxTQUFTLENBQUM7UUFDeEQsQ0FBQyxDQUFDLHdCQUF3QixDQUFDO0lBRTdCLDRDQUE0QztJQUM1QyxJQUFJLG9CQUFvQixFQUFFO1FBQ3hCLDRDQUE0QztRQUM1QyxJQUFJLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUNwQixLQUFLLEdBQUcsWUFBWSxDQUFDO1FBQ3JCLGFBQWEsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDO0tBQzNDO1NBQU0sSUFBSSxlQUFlLEVBQUU7OztZQUVwQixPQUFPLEdBQUcscUJBQXFCLENBQUMsWUFBWSxDQUFDO1FBQ25ELElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDO1FBQ3JCLEtBQUssR0FBRyxPQUFPLENBQUM7UUFDaEIsYUFBYSxHQUFHLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztLQUM1QztTQUFNLElBQUksZUFBZSxFQUFFOzs7WUFFcEIsT0FBTyxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQztRQUNuRCxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQztRQUNyQixLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ2hCLGFBQWEsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7S0FDNUM7U0FBTSxJQUFJLGFBQWEsRUFBRTs7O1lBRWxCLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxZQUFZLENBQUM7UUFDL0MsSUFBSSxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUM7UUFDcEIsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNkLGFBQWEsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDO0tBQzNDO1NBQU07OztZQUVDLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDdEIsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNiLGFBQWEsR0FBRyxTQUFTLENBQUMsaUJBQWlCLENBQUM7S0FDN0M7O1FBRUssdUJBQXVCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDcEUsT0FBVSx1QkFBdUIsU0FBSSxJQUFNLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1pbGxpc2Vjb25kc1RvU2Vjb25kcyB9IGZyb20gJy4uL2NvbnZlcnNpb24vbWlsbGlzZWNvbmRzLXRvLXNlY29uZHMuZnVuY3Rpb24nO1xuaW1wb3J0IHsgbWlsbGlzZWNvbmRzVG9NaW51dGVzIH0gZnJvbSAnLi4vY29udmVyc2lvbi9taWxsaXNlY29uZHMtdG8tbWludXRlcy5mdW5jdGlvbic7XG5pbXBvcnQgeyBtaWxsaXNlY29uZHNUb0hvdXJzIH0gZnJvbSAnLi4vY29udmVyc2lvbi9taWxsaXNlY29uZHMtdG8taG91cnMuZnVuY3Rpb24nO1xuaW1wb3J0IHsgbWlsbGlzZWNvbmRzVG9EYXlzIH0gZnJvbSAnLi4vY29udmVyc2lvbi9taWxsaXNlY29uZHMtdG8tZGF5cy5mdW5jdGlvbic7XG5pbXBvcnQge1xuICBNSUxMSVNFQ09ORFNfUEVSX1NFQ09ORCxcbiAgTUlMTElTRUNPTkRTX1BFUl9NSU5VVEUsXG4gIE1JTExJU0VDT05EU19QRVJfSE9VUixcbiAgTUlMTElTRUNPTkRTX1BFUl9EQVksXG4gIFJFQURBQkxFX1RJTUVfU1VGRklYX01BUFxufSBmcm9tICcuLi9kYXRlLXRpbWUuY29uc3RhbnRzJztcblxuXG5leHBvcnQgZnVuY3Rpb24gdG9SZWFkYWJsZVRpbWUobWlsbGlzZWNvbmRzOiBudW1iZXIsIHN1ZmZpeE1hcDogYW55ID0ge30pOiBzdHJpbmcge1xuICAvLyBUT0RPOiBHZXQgcmlkIG9mIG1hZ2ljIG51bWJlcnMgYmVsb3cgLSBSRy5cbiAgY29uc3QgZm9ybWF0QXNNaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgPCBNSUxMSVNFQ09ORFNfUEVSX1NFQ09ORDtcbiAgY29uc3QgZm9ybWF0QXNTZWNvbmRzID0gbWlsbGlzZWNvbmRzIDwgKE1JTExJU0VDT05EU19QRVJfTUlOVVRFIC0gMSk7XG4gIGNvbnN0IGZvcm1hdEFzTWludXRlcyA9IG1pbGxpc2Vjb25kcyA8IChNSUxMSVNFQ09ORFNfUEVSX0hPVVIgLSAyOTkpO1xuICBjb25zdCBmb3JtYXRBc0hvdXJzID0gbWlsbGlzZWNvbmRzIDwgKE1JTExJU0VDT05EU19QRVJfREFZIC0gMTgwMDApO1xuICBsZXQgdmFsdWU6IG51bWJlciA9IG1pbGxpc2Vjb25kcztcbiAgbGV0IHVuaXQ6IHN0cmluZztcbiAgbGV0IGRlY2ltYWxQbGFjZXM6IG51bWJlcjtcblxuICBzdWZmaXhNYXAgPSBzdWZmaXhNYXBcbiAgICA/IE9iamVjdC5hc3NpZ24oe30sIFJFQURBQkxFX1RJTUVfU1VGRklYX01BUCwgc3VmZml4TWFwKVxuICAgIDogUkVBREFCTEVfVElNRV9TVUZGSVhfTUFQO1xuXG4gIC8vIFdlIGFzc3VtZSB0aGUgbWlsbGlzZWNvbmRzIHdhcyBwYXNzZWQgaW4uXG4gIGlmIChmb3JtYXRBc01pbGxpc2Vjb25kcykge1xuICAgIC8vIFRoZSB0aW1lIHNob3VsZCBiZSBzaG93biBpbiBtaWxsaXNlY29uZHMuXG4gICAgdW5pdCA9IHN1ZmZpeE1hcC5tcztcbiAgICB2YWx1ZSA9IG1pbGxpc2Vjb25kcztcbiAgICBkZWNpbWFsUGxhY2VzID0gc3VmZml4TWFwLm1zRGVjaW1hbFBsYWNlcztcbiAgfSBlbHNlIGlmIChmb3JtYXRBc1NlY29uZHMpIHtcbiAgICAvLyBUaGUgdGltZSBzaG91bGQgYmUgc2hvd24gaW4gc2Vjb25kcy5cbiAgICBjb25zdCBzZWNvbmRzID0gbWlsbGlzZWNvbmRzVG9TZWNvbmRzKG1pbGxpc2Vjb25kcyk7XG4gICAgdW5pdCA9IHN1ZmZpeE1hcC5zZWM7XG4gICAgdmFsdWUgPSBzZWNvbmRzO1xuICAgIGRlY2ltYWxQbGFjZXMgPSBzdWZmaXhNYXAuc2VjRGVjaW1hbFBsYWNlcztcbiAgfSBlbHNlIGlmIChmb3JtYXRBc01pbnV0ZXMpIHtcbiAgICAvLyBUaGUgdGltZSBzaG91bGQgYmUgc2hvd24gaW4gaW4gbWludXRlcy5cbiAgICBjb25zdCBtaW51dGVzID0gbWlsbGlzZWNvbmRzVG9NaW51dGVzKG1pbGxpc2Vjb25kcyk7XG4gICAgdW5pdCA9IHN1ZmZpeE1hcC5taW47XG4gICAgdmFsdWUgPSBtaW51dGVzO1xuICAgIGRlY2ltYWxQbGFjZXMgPSBzdWZmaXhNYXAubWluRGVjaW1hbFBsYWNlcztcbiAgfSBlbHNlIGlmIChmb3JtYXRBc0hvdXJzKSB7XG4gICAgLy8gVGhlIHRpbWUgc2hvdWxkIGJlIHNob3duIGluIGhvdXJzLlxuICAgIGNvbnN0IGhvdXJzID0gbWlsbGlzZWNvbmRzVG9Ib3VycyhtaWxsaXNlY29uZHMpO1xuICAgIHVuaXQgPSBzdWZmaXhNYXAuaHI7XG4gICAgdmFsdWUgPSBob3VycztcbiAgICBkZWNpbWFsUGxhY2VzID0gc3VmZml4TWFwLmhyRGVjaW1hbFBsYWNlcztcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgdGltZSBzaG91bGQgYmUgc2hvd24gaW4gZGF5cy5cbiAgICBjb25zdCBkYXlzID0gbWlsbGlzZWNvbmRzVG9EYXlzKG1pbGxpc2Vjb25kcyk7XG4gICAgdW5pdCA9IHN1ZmZpeE1hcC5kYXlzO1xuICAgIHZhbHVlID0gZGF5cztcbiAgICBkZWNpbWFsUGxhY2VzID0gc3VmZml4TWFwLmRheXNEZWNpbWFsUGxhY2VzO1xuICB9XG5cbiAgY29uc3QgbnVtYmVyV2l0aFN0cmlwcGVkWmVyb3MgPSBOdW1iZXIodmFsdWUudG9GaXhlZChkZWNpbWFsUGxhY2VzKSk7XG4gIHJldHVybiBgJHtudW1iZXJXaXRoU3RyaXBwZWRaZXJvc30gJHt1bml0fWA7XG59XG4iXX0=