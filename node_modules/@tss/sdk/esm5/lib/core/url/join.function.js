/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Port from: https://github.com/jfromaniello/url-join
// TODO: Refactor this to be cleaner - RG.
/**
 * @param {...?} parts
 * @return {?}
 */
export function join() {
    var parts = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        parts[_i] = arguments[_i];
    }
    /** @type {?} */
    var resultArray = [];
    /** @type {?} */
    var str;
    if (Array.isArray(parts[0])) {
        parts = parts[0];
    }
    parts[0] = parts[0] || '';
    // If the first part is a plain protocol, we combine it with the next part.
    if (parts[0].match(/^[^/:]+:\/*$/) && parts.length > 1) {
        /** @type {?} */
        var first = parts.shift();
        parts[0] = first + parts[0];
    }
    // There must be two or three slashes in the file protocol, two slashes in anything else.
    if (parts[0].match(/^file:\/\/\//)) {
        parts[0] = parts[0].replace(/^([^/:]+):\/*/, '$1:///');
    }
    else {
        parts[0] = parts[0].replace(/^([^/:]+):\/*/, '$1://');
    }
    for (var i = 0; i < parts.length; i++) {
        /** @type {?} */
        var component = parts[i];
        if (typeof component !== 'string') {
            throw new TypeError('Url must be a string. Received ' + component);
        }
        if (component === '') {
            continue;
        }
        if (i > 0) {
            // Removing the starting slashes for each component but the first.
            component = component.replace(/^[\/]+/, '');
        }
        if (i < parts.length - 1) {
            // Removing the ending slashes for each component but the last.
            component = component.replace(/[\/]+$/, '');
        }
        else {
            // For the last component we will combine multiple slashes to a single one.
            component = component.replace(/[\/]+$/, '/');
        }
        resultArray.push(component);
    }
    str = resultArray.join('/');
    // Each input component is now separated by a single slash except the possible first plain protocol part.
    // Remove trailing slash before parameters or hash.
    str = str.replace(/\/(\?|&|#[^!])/g, '$1');
    // Replace ? in parameters with &.
    /** @type {?} */
    var urlParts = str.split('?');
    str = urlParts.shift() + (urlParts.length > 0 ? '?' : '') + urlParts.join('&');
    return str;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NvcmUvdXJsL2pvaW4uZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVBLE1BQU0sVUFBVSxJQUFJO0lBQUMsZUFBUTtTQUFSLFVBQVEsRUFBUixxQkFBUSxFQUFSLElBQVE7UUFBUiwwQkFBUTs7O1FBQ3JCLFdBQVcsR0FBRyxFQUFFOztRQUNsQixHQUFHO0lBRVAsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzNCLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7SUFFRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQiwyRUFBMkU7SUFDM0UsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztZQUNoRCxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRTtRQUMzQixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM3QjtJQUVELHlGQUF5RjtJQUN6RixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDbEMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3hEO1NBQU07UUFDTCxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDdkQ7SUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7WUFDakMsU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFeEIsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDakMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxpQ0FBaUMsR0FBRyxTQUFTLENBQUMsQ0FBQztTQUNwRTtRQUVELElBQUksU0FBUyxLQUFLLEVBQUUsRUFBRTtZQUFFLFNBQVM7U0FBRTtRQUVuQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDVCxrRUFBa0U7WUFDbEUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzdDO1FBRUQsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDeEIsK0RBQStEO1lBQy9ELFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsMkVBQTJFO1lBQzNFLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM5QztRQUVELFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDN0I7SUFFRCxHQUFHLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1Qix5R0FBeUc7SUFFekcsbURBQW1EO0lBQ25ELEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxDQUFDOzs7UUFHckMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQy9CLEdBQUcsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRS9FLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFBvcnQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2pmcm9tYW5pZWxsby91cmwtam9pblxuLy8gVE9ETzogUmVmYWN0b3IgdGhpcyB0byBiZSBjbGVhbmVyIC0gUkcuXG5leHBvcnQgZnVuY3Rpb24gam9pbiguLi5wYXJ0cyk6IHN0cmluZyB7XG4gIGNvbnN0IHJlc3VsdEFycmF5ID0gW107XG4gIGxldCBzdHI7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocGFydHNbMF0pKSB7XG4gICAgcGFydHMgPSBwYXJ0c1swXTtcbiAgfVxuXG4gIHBhcnRzWzBdID0gcGFydHNbMF0gfHwgJyc7XG4gIC8vIElmIHRoZSBmaXJzdCBwYXJ0IGlzIGEgcGxhaW4gcHJvdG9jb2wsIHdlIGNvbWJpbmUgaXQgd2l0aCB0aGUgbmV4dCBwYXJ0LlxuICBpZiAocGFydHNbMF0ubWF0Y2goL15bXi86XSs6XFwvKiQvKSAmJiBwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgZmlyc3QgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIHBhcnRzWzBdID0gZmlyc3QgKyBwYXJ0c1swXTtcbiAgfVxuXG4gIC8vIFRoZXJlIG11c3QgYmUgdHdvIG9yIHRocmVlIHNsYXNoZXMgaW4gdGhlIGZpbGUgcHJvdG9jb2wsIHR3byBzbGFzaGVzIGluIGFueXRoaW5nIGVsc2UuXG4gIGlmIChwYXJ0c1swXS5tYXRjaCgvXmZpbGU6XFwvXFwvXFwvLykpIHtcbiAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnJlcGxhY2UoL14oW14vOl0rKTpcXC8qLywgJyQxOi8vLycpO1xuICB9IGVsc2Uge1xuICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXihbXi86XSspOlxcLyovLCAnJDE6Ly8nKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY29tcG9uZW50ID0gcGFydHNbaV07XG5cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VybCBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCAnICsgY29tcG9uZW50KTtcbiAgICB9XG5cbiAgICBpZiAoY29tcG9uZW50ID09PSAnJykgeyBjb250aW51ZTsgfVxuXG4gICAgaWYgKGkgPiAwKSB7XG4gICAgICAvLyBSZW1vdmluZyB0aGUgc3RhcnRpbmcgc2xhc2hlcyBmb3IgZWFjaCBjb21wb25lbnQgYnV0IHRoZSBmaXJzdC5cbiAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudC5yZXBsYWNlKC9eW1xcL10rLywgJycpO1xuICAgIH1cblxuICAgIGlmIChpIDwgcGFydHMubGVuZ3RoIC0gMSkge1xuICAgICAgLy8gUmVtb3ZpbmcgdGhlIGVuZGluZyBzbGFzaGVzIGZvciBlYWNoIGNvbXBvbmVudCBidXQgdGhlIGxhc3QuXG4gICAgICBjb21wb25lbnQgPSBjb21wb25lbnQucmVwbGFjZSgvW1xcL10rJC8sICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIHRoZSBsYXN0IGNvbXBvbmVudCB3ZSB3aWxsIGNvbWJpbmUgbXVsdGlwbGUgc2xhc2hlcyB0byBhIHNpbmdsZSBvbmUuXG4gICAgICBjb21wb25lbnQgPSBjb21wb25lbnQucmVwbGFjZSgvW1xcL10rJC8sICcvJyk7XG4gICAgfVxuXG4gICAgcmVzdWx0QXJyYXkucHVzaChjb21wb25lbnQpO1xuICB9XG5cbiAgc3RyID0gcmVzdWx0QXJyYXkuam9pbignLycpO1xuICAvLyBFYWNoIGlucHV0IGNvbXBvbmVudCBpcyBub3cgc2VwYXJhdGVkIGJ5IGEgc2luZ2xlIHNsYXNoIGV4Y2VwdCB0aGUgcG9zc2libGUgZmlyc3QgcGxhaW4gcHJvdG9jb2wgcGFydC5cblxuICAvLyBSZW1vdmUgdHJhaWxpbmcgc2xhc2ggYmVmb3JlIHBhcmFtZXRlcnMgb3IgaGFzaC5cbiAgc3RyID0gc3RyLnJlcGxhY2UoL1xcLyhcXD98JnwjW14hXSkvZywgJyQxJyk7XG5cbiAgLy8gUmVwbGFjZSA/IGluIHBhcmFtZXRlcnMgd2l0aCAmLlxuICBjb25zdCB1cmxQYXJ0cyA9IHN0ci5zcGxpdCgnPycpO1xuICBzdHIgPSB1cmxQYXJ0cy5zaGlmdCgpICsgKHVybFBhcnRzLmxlbmd0aCA+IDAgPyAnPycgOiAnJykgKyB1cmxQYXJ0cy5qb2luKCcmJyk7XG5cbiAgcmV0dXJuIHN0cjtcbn1cbiJdfQ==