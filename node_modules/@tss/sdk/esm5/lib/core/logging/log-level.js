/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var LogLevel = {
    Trace: 0,
    Debug: 1,
    Info: 2,
    Warn: 3,
    Error: 4,
    Fatal: 5,
};
export { LogLevel };
LogLevel[LogLevel.Trace] = 'Trace';
LogLevel[LogLevel.Debug] = 'Debug';
LogLevel[LogLevel.Info] = 'Info';
LogLevel[LogLevel.Warn] = 'Warn';
LogLevel[LogLevel.Error] = 'Error';
LogLevel[LogLevel.Fatal] = 'Fatal';
/**
 * @param {?} type
 * @return {?}
 */
export function typeToLevel(type) {
    if (type === 'trace') {
        return LogLevel.Trace;
    }
    else if (type === 'debug') {
        return LogLevel.Debug;
    }
    else if (type === 'info') {
        return LogLevel.Info;
    }
    else if (type === 'warn') {
        return LogLevel.Warn;
    }
    else if (type === 'error') {
        return LogLevel.Error;
    }
    else if (type === 'fatal') {
        return LogLevel.Fatal;
    }
    else {
        throw new Error("Unknown log type: '" + type + "'");
    }
}
/**
 * @param {?} level
 * @return {?}
 */
export function levelToType(level) {
    if (level === LogLevel.Trace) {
        return 'trace';
    }
    else if (level === LogLevel.Debug) {
        return 'debug';
    }
    else if (level === LogLevel.Info) {
        return 'info';
    }
    else if (level === LogLevel.Warn) {
        return 'warn';
    }
    else if (level === LogLevel.Error) {
        return 'error';
    }
    else if (level === LogLevel.Fatal) {
        return 'fatal';
    }
    else {
        throw new Error("Unknown log level: '" + level + "'");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLWxldmVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY29yZS9sb2dnaW5nL2xvZy1sZXZlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7SUFDRSxRQUFTO0lBQ1QsUUFBUztJQUNULE9BQVE7SUFDUixPQUFRO0lBQ1IsUUFBUztJQUNULFFBQVM7Ozs7Ozs7Ozs7Ozs7QUFPWCxNQUFNLFVBQVUsV0FBVyxDQUFDLElBQWE7SUFDdkMsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ3BCLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQztLQUN2QjtTQUFNLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtRQUMzQixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUM7S0FDdkI7U0FBTSxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUU7UUFDMUIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDO0tBQ3RCO1NBQU0sSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO1FBQzFCLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztLQUN0QjtTQUFNLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtRQUMzQixPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUM7S0FDdkI7U0FBTSxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7UUFDM0IsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQ3ZCO1NBQU07UUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUFzQixJQUFJLE1BQUcsQ0FBQyxDQUFDO0tBQ2hEO0FBQ0gsQ0FBQzs7Ozs7QUFHRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQWU7SUFDekMsSUFBSSxLQUFLLEtBQUssUUFBUSxDQUFDLEtBQUssRUFBRTtRQUM1QixPQUFPLE9BQU8sQ0FBQztLQUNoQjtTQUFNLElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQyxLQUFLLEVBQUU7UUFDbkMsT0FBTyxPQUFPLENBQUM7S0FDaEI7U0FBTSxJQUFJLEtBQUssS0FBSyxRQUFRLENBQUMsSUFBSSxFQUFFO1FBQ2xDLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7U0FBTSxJQUFJLEtBQUssS0FBSyxRQUFRLENBQUMsSUFBSSxFQUFFO1FBQ2xDLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7U0FBTSxJQUFJLEtBQUssS0FBSyxRQUFRLENBQUMsS0FBSyxFQUFFO1FBQ25DLE9BQU8sT0FBTyxDQUFDO0tBQ2hCO1NBQU0sSUFBSSxLQUFLLEtBQUssUUFBUSxDQUFDLEtBQUssRUFBRTtRQUNuQyxPQUFPLE9BQU8sQ0FBQztLQUNoQjtTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBdUIsS0FBSyxNQUFHLENBQUMsQ0FBQztLQUNsRDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIFRyYWNlID0gMCxcbiAgRGVidWcgPSAxLFxuICBJbmZvID0gMixcbiAgV2FybiA9IDMsXG4gIEVycm9yID0gNCxcbiAgRmF0YWwgPSA1XG59XG5cblxuZXhwb3J0IHR5cGUgTG9nVHlwZSA9ICd0cmFjZScgfCAnZGVidWcnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyB8ICdmYXRhbCc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVUb0xldmVsKHR5cGU6IExvZ1R5cGUpOiBMb2dMZXZlbCB7XG4gIGlmICh0eXBlID09PSAndHJhY2UnKSB7XG4gICAgcmV0dXJuIExvZ0xldmVsLlRyYWNlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkZWJ1ZycpIHtcbiAgICByZXR1cm4gTG9nTGV2ZWwuRGVidWc7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2luZm8nKSB7XG4gICAgcmV0dXJuIExvZ0xldmVsLkluZm87XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3dhcm4nKSB7XG4gICAgcmV0dXJuIExvZ0xldmVsLldhcm47XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIHJldHVybiBMb2dMZXZlbC5FcnJvcjtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnZmF0YWwnKSB7XG4gICAgcmV0dXJuIExvZ0xldmVsLkZhdGFsO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsb2cgdHlwZTogJyR7dHlwZX0nYCk7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbGV2ZWxUb1R5cGUobGV2ZWw6IExvZ0xldmVsKTogTG9nVHlwZSB7XG4gIGlmIChsZXZlbCA9PT0gTG9nTGV2ZWwuVHJhY2UpIHtcbiAgICByZXR1cm4gJ3RyYWNlJztcbiAgfSBlbHNlIGlmIChsZXZlbCA9PT0gTG9nTGV2ZWwuRGVidWcpIHtcbiAgICByZXR1cm4gJ2RlYnVnJztcbiAgfSBlbHNlIGlmIChsZXZlbCA9PT0gTG9nTGV2ZWwuSW5mbykge1xuICAgIHJldHVybiAnaW5mbyc7XG4gIH0gZWxzZSBpZiAobGV2ZWwgPT09IExvZ0xldmVsLldhcm4pIHtcbiAgICByZXR1cm4gJ3dhcm4nO1xuICB9IGVsc2UgaWYgKGxldmVsID09PSBMb2dMZXZlbC5FcnJvcikge1xuICAgIHJldHVybiAnZXJyb3InO1xuICB9IGVsc2UgaWYgKGxldmVsID09PSBMb2dMZXZlbC5GYXRhbCkge1xuICAgIHJldHVybiAnZmF0YWwnO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsb2cgbGV2ZWw6ICcke2xldmVsfSdgKTtcbiAgfVxufVxuIl19