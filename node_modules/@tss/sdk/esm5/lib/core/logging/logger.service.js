/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { LogLevel, typeToLevel } from './log-level';
import { CoreConfig } from '../core.config';
import { format } from '../formatting/format.function';
import * as i0 from "@angular/core";
import * as i1 from "../core.config";
/**
 * Console logger.
 */
var Logger = /** @class */ (function () {
    function Logger(config) {
        this.config = config;
        this.logs = [];
    }
    Object.defineProperty(Logger.prototype, "level", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.logLevel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "enabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.logEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "isTrace", {
        get: /**
         * @return {?}
         */
        function () {
            return this.level >= LogLevel.Trace;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "isDebug", {
        get: /**
         * @return {?}
         */
        function () {
            return this.level >= LogLevel.Debug;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "isWarn", {
        get: /**
         * @return {?}
         */
        function () {
            return this.level >= LogLevel.Warn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "isError", {
        get: /**
         * @return {?}
         */
        function () {
            return this.level >= LogLevel.Error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "isFatal", {
        get: /**
         * @return {?}
         */
        function () {
            return this.level >= LogLevel.Fatal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "traceCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.count('trace');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "debugCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.count('debug');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "warnCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.count('warn');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "errorCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.count('error');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "fatalCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.count('fatal');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} logType
     * @return {?}
     */
    Logger.prototype.count = /**
     * @param {?} logType
     * @return {?}
     */
    function (logType) {
        return this.logsByType(logType).length;
    };
    /**
     * @param {?} logType
     * @return {?}
     */
    Logger.prototype.logsByType = /**
     * @param {?} logType
     * @return {?}
     */
    function (logType) {
        return this.logsByLevel(typeToLevel(logType));
    };
    /**
     * @param {?} logLevel
     * @return {?}
     */
    Logger.prototype.logsByLevel = /**
     * @param {?} logLevel
     * @return {?}
     */
    function (logLevel) {
        return this.logs.filter((/**
         * @param {?} l
         * @return {?}
         */
        function (l) { return l.level === logLevel; }));
    };
    /**
     * @param {?} log
     * @return {?}
     */
    Logger.prototype.logEntry = /**
     * @param {?} log
     * @return {?}
     */
    function (log) {
        if (this.config.logEnabled && log.level >= this.config.logLevel) {
            this.logs.push(log);
            if (this.isDebug) {
                console.log(LogLevel[log.level] + ": " + log.msg + " " + (log.error || ''));
            }
        }
        return log;
    };
    /**
     * @param {?} msg
     * @param {?} level
     * @param {?=} error
     * @return {?}
     */
    Logger.prototype.log = /**
     * @param {?} msg
     * @param {?} level
     * @param {?=} error
     * @return {?}
     */
    function (msg, level, error) {
        if (error === void 0) { error = null; }
        return this.logEntry({
            msg: format(msg, { error: error }),
            level: level,
            error: error,
            created: new Date()
        });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    Logger.prototype.trace = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        return this.log(msg, LogLevel.Trace);
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    Logger.prototype.debug = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        return this.log(msg, LogLevel.Debug);
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    Logger.prototype.info = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        return this.log(msg, LogLevel.Info);
    };
    /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    Logger.prototype.warn = /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    function (msg, error) {
        if (error === void 0) { error = null; }
        return this.log(msg, LogLevel.Warn, error);
    };
    /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    Logger.prototype.error = /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    function (msg, error) {
        if (error === void 0) { error = null; }
        return this.log(msg, LogLevel.Error, error);
    };
    /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    Logger.prototype.fatal = /**
     * @param {?} msg
     * @param {?=} error
     * @return {?}
     */
    function (msg, error) {
        if (error === void 0) { error = null; }
        return this.log(msg, LogLevel.Fatal, error);
    };
    /**
     * @return {?}
     */
    Logger.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.logs.length = 0;
    };
    Logger.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    Logger.ctorParameters = function () { return [
        { type: CoreConfig }
    ]; };
    /** @nocollapse */ Logger.ngInjectableDef = i0.defineInjectable({ factory: function Logger_Factory() { return new Logger(i0.inject(i1.CoreConfig)); }, token: Logger, providedIn: "root" });
    return Logger;
}());
export { Logger };
if (false) {
    /** @type {?} */
    Logger.prototype.logs;
    /**
     * @type {?}
     * @private
     */
    Logger.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,