/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { JSON_MIME_TYPE, TEXT_MIME_TYPE } from '../core/media/media.constants';
import { base64MimeType } from '../core/media/base64-mime-type.function';
import { base64toBlob } from '../core/media/base64-to-blob.function';
import { DEFAULT_EXPORT_GEOJSON_FILE_NAME } from './export.constants';
import { format } from '../core/formatting/format.function';
import { isString } from '../core/type-check/is-string.function';
import { formatDate } from '../core/date-time/format/format-date.function';
import * as i0 from "@angular/core";
var ExportService = /** @class */ (function () {
    function ExportService() {
    }
    /**
     * @param {?} fileNameTemplate
     * @param {?=} tokens
     * @param {?=} removeEmptyTokens
     * @return {?}
     */
    ExportService.prototype.replaceTokens = /**
     * @param {?} fileNameTemplate
     * @param {?=} tokens
     * @param {?=} removeEmptyTokens
     * @return {?}
     */
    function (fileNameTemplate, tokens, removeEmptyTokens) {
        if (tokens === void 0) { tokens = {}; }
        return format(fileNameTemplate, Object.assign(this.getReplaceTokens(), tokens), removeEmptyTokens);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} fileNameTemplate
     * @param {...?} features
     * @return {THIS}
     */
    ExportService.prototype.exportFeatureCollection = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} fileNameTemplate
     * @param {...?} features
     * @return {THIS}
     */
    function (fileNameTemplate) {
        if (fileNameTemplate === void 0) { fileNameTemplate = DEFAULT_EXPORT_GEOJSON_FILE_NAME; }
        var features = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            features[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var fileName = (/** @type {?} */ (this)).replaceTokens(fileNameTemplate, {
            featureLength: features.length,
        });
        /** @type {?} */
        var featureCollection = {
            type: 'FeatureCollection',
            features: features
        };
        return (/** @type {?} */ (this)).exportFile((/** @type {?} */ (this)).stringify(featureCollection), fileName, JSON_MIME_TYPE);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} fileNameTemplate
     * @param {?=} feature
     * @return {THIS}
     */
    ExportService.prototype.exportFeature = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} fileNameTemplate
     * @param {?=} feature
     * @return {THIS}
     */
    function (fileNameTemplate, feature) {
        if (fileNameTemplate === void 0) { fileNameTemplate = DEFAULT_EXPORT_GEOJSON_FILE_NAME; }
        return (/** @type {?} */ (this)).exportFile((/** @type {?} */ (this)).stringify(feature), fileNameTemplate, JSON_MIME_TYPE);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ExportService.prototype.stringify = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return JSON.stringify(data, (/**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function (key, value) {
            return key.startsWith('$$') ? undefined : value;
        }), 2);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} data
     * @param {?} fileNameTemplate
     * @return {THIS}
     */
    ExportService.prototype.exportJson = /**
     * @template THIS
     * @this {THIS}
     * @param {?} data
     * @param {?} fileNameTemplate
     * @return {THIS}
     */
    function (data, fileNameTemplate) {
        /** @type {?} */
        var jsonString = isString(data)
            ? (/** @type {?} */ (data))
            : (/** @type {?} */ (this)).stringify(data);
        return (/** @type {?} */ (this)).exportFile(jsonString, fileNameTemplate, JSON_MIME_TYPE);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} base64Data
     * @param {?} fileNameTemplate
     * @param {?=} contentType
     * @return {THIS}
     */
    ExportService.prototype.exportBase64 = /**
     * @template THIS
     * @this {THIS}
     * @param {?} base64Data
     * @param {?} fileNameTemplate
     * @param {?=} contentType
     * @return {THIS}
     */
    function (base64Data, fileNameTemplate, contentType) {
        /** @type {?} */
        var fileName = (/** @type {?} */ (this)).replaceTokens(fileNameTemplate);
        contentType = contentType || base64MimeType(base64Data);
        /** @type {?} */
        var blob = base64toBlob(base64Data, contentType);
        return (/** @type {?} */ (this)).exportFromUrl(URL.createObjectURL(blob), fileName);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} data
     * @param {?} fileNameTemplate
     * @param {?=} contentType
     * @return {THIS}
     */
    ExportService.prototype.exportFile = /**
     * @template THIS
     * @this {THIS}
     * @param {?} data
     * @param {?} fileNameTemplate
     * @param {?=} contentType
     * @return {THIS}
     */
    function (data, fileNameTemplate, contentType) {
        if (contentType === void 0) { contentType = TEXT_MIME_TYPE; }
        /** @type {?} */
        var blob = new Blob([data], { type: contentType });
        /** @type {?} */
        var fileName = (/** @type {?} */ (this)).replaceTokens(fileNameTemplate);
        return (/** @type {?} */ (this)).exportBlob(blob, fileName);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} blob
     * @param {?} fileNameTemplate
     * @return {THIS}
     */
    ExportService.prototype.exportBlob = /**
     * @template THIS
     * @this {THIS}
     * @param {?} blob
     * @param {?} fileNameTemplate
     * @return {THIS}
     */
    function (blob, fileNameTemplate) {
        /** @type {?} */
        var fileName = (/** @type {?} */ (this)).replaceTokens(fileNameTemplate);
        return (/** @type {?} */ (this)).exportFromUrl(window.URL.createObjectURL(blob), fileName);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} url
     * @param {?} fileName
     * @return {THIS}
     */
    ExportService.prototype.exportFromUrl = /**
     * @template THIS
     * @this {THIS}
     * @param {?} url
     * @param {?} fileName
     * @return {THIS}
     */
    function (url, fileName) {
        /** @type {?} */
        var link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        link.click();
        return (/** @type {?} */ (this));
    };
    /**
     * @protected
     * @return {?}
     */
    ExportService.prototype.getReplaceTokens = /**
     * @protected
     * @return {?}
     */
    function () {
        return {
            date: new Date(),
            shortDate: formatDate(new Date(), 'yyyy-MM-dd'),
            year: new Date().getFullYear(),
        };
    };
    ExportService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ExportService.ctorParameters = function () { return []; };
    /** @nocollapse */ ExportService.ngInjectableDef = i0.defineInjectable({ factory: function ExportService_Factory() { return new ExportService(); }, token: ExportService, providedIn: "root" });
    return ExportService;
}());
export { ExportService };
//# sourceMappingURL=data:application/json;base64,