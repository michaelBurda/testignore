/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { AutoConfig } from '../core/auto-config.decorator';
import { ResourceConfig } from '../core/resource.config';
import * as i0 from "@angular/core";
/**
 * Configuration class for storing global ESRI-related settings.
 */
var LrsConfig = /** @class */ (function (_super) {
    tslib_1.__extends(LrsConfig, _super);
    function LrsConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dataSourceLrsMetadataEndpoint = 'api/spatial/data/sources/{dataSourceId}/lrs/meta';
        _this.cacheInSessionLrsMetadata = true;
        return _this;
    }
    LrsConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ LrsConfig.ngInjectableDef = i0.defineInjectable({ factory: function LrsConfig_Factory() { return new LrsConfig(); }, token: LrsConfig, providedIn: "root" });
    /**
     * Configuration class for storing global ESRI-related settings.
     */
    LrsConfig = tslib_1.__decorate([
        AutoConfig('LrsConfig')
    ], LrsConfig);
    return LrsConfig;
}(ResourceConfig));
export { LrsConfig };
if (false) {
    /** @type {?} */
    LrsConfig.prototype.dataSourceLrsMetadataEndpoint;
    /** @type {?} */
    LrsConfig.prototype.cacheInSessionLrsMetadata;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHJzLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2xycy9scnMuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7Ozs7SUFVMUIscUNBQWM7SUFKN0M7UUFBQSxxRUFPQztRQUZDLG1DQUE2QixHQUFHLGtEQUFrRCxDQUFDO1FBQ25GLCtCQUF5QixHQUFHLElBQUksQ0FBQzs7S0FDbEM7O2dCQVBBLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7OztJQUVZLFNBQVM7UUFEckIsVUFBVSxDQUFDLFdBQVcsQ0FBQztPQUNYLFNBQVMsQ0FHckI7b0JBZkQ7Q0FlQyxDQUg4QixjQUFjLEdBRzVDO1NBSFksU0FBUzs7O0lBQ3BCLGtEQUFtRjs7SUFDbkYsOENBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXV0b0NvbmZpZyB9IGZyb20gJy4uL2NvcmUvYXV0by1jb25maWcuZGVjb3JhdG9yJztcbmltcG9ydCB7IFJlc291cmNlQ29uZmlnIH0gZnJvbSAnLi4vY29yZS9yZXNvdXJjZS5jb25maWcnO1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBjbGFzcyBmb3Igc3RvcmluZyBnbG9iYWwgRVNSSS1yZWxhdGVkIHNldHRpbmdzLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbkBBdXRvQ29uZmlnKCdMcnNDb25maWcnKVxuZXhwb3J0IGNsYXNzIExyc0NvbmZpZyBleHRlbmRzIFJlc291cmNlQ29uZmlnIHtcbiAgZGF0YVNvdXJjZUxyc01ldGFkYXRhRW5kcG9pbnQgPSAnYXBpL3NwYXRpYWwvZGF0YS9zb3VyY2VzL3tkYXRhU291cmNlSWR9L2xycy9tZXRhJztcbiAgY2FjaGVJblNlc3Npb25McnNNZXRhZGF0YSA9IHRydWU7XG59XG4iXX0=