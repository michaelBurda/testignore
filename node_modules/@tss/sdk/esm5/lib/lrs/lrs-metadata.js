/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { IntersectionLayer } from './intersections/intersection-layer';
import { EventLayer } from './events/event-layer';
import { NetworkLayer } from './networks/network-layer';
import { RedlineLayer } from './redlines/redline-layer';
import { CenterlineLayer } from './centerlines/centerline-layer';
import { CalibrationPointLayer } from './calibration-points/calibration-point-layer';
import { MapServerMetadata } from '../maps/map-server-metadata';
import { getGeometryField, getIdField } from '../maps/fields/layer-field';
import { findLayer } from './layer-search';
import { mergeMapMetadata, mergeLrsMetadata, deepMergeMapMetadata } from './lrs-metadata-merge';
import { LRS_METADATA_VALIDATIONS } from './lrs-metadata-validations';
import { NonLrsLayer } from './non-lrs/non-lrs-layer';
import { isNotValue } from '../core/type-check/is-not-value.function';
import { clone } from '../core/clone/clone.function';
/**
 * @param {?} layerId
 * @param {...?} layerList
 * @return {?}
 */
function find(layerId) {
    var layerList = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        layerList[_i - 1] = arguments[_i];
    }
    return findLayer.apply(void 0, tslib_1.__spread([layerId], layerList));
}
var LrsMetadata = /** @class */ (function (_super) {
    tslib_1.__extends(LrsMetadata, _super);
    function LrsMetadata(dataSource) {
        var _this = _super.call(this) || this;
        _this.networkLayers = [];
        _this.eventLayers = [];
        _this.redlineLayers = [];
        _this.centerlineLayers = [];
        _this.calibrationPointLayers = [];
        _this.intersectionLayers = [];
        _this.nonLRSLayers = [];
        _this.lrs = [];
        _this.domains = [];
        if (dataSource) {
            _this.dataSource = dataSource;
            _this.dataSourceId = dataSource.id;
        }
        return _this;
    }
    /**
     * Gets a layer by ID - searching across all types (event layers, network layers, etc).
     */
    /**
     * Gets a layer by ID - searching across all types (event layers, network layers, etc).
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.getLayer = /**
     * Gets a layer by ID - searching across all types (event layers, network layers, etc).
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return find(layerId, this.getAllLayers());
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.getLrsLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return (/** @type {?} */ ((find(layerId, this.networkLayers, this.eventLayers, this.redlineLayers))));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.getLayerDetail = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        // TODO: Come up with a better way to check these layer types.
        // NOTE: We are doing all of these boolean checks instead of just simply calling
        // isEventLayer = this.isEventLayer(layerId) because of performance reasons.
        /** @type {?} */
        var isLrsLayer = this.isLrsLayer(layerId);
        /** @type {?} */
        var isEventLayer = this.isEventLayer(layerId);
        /** @type {?} */
        var isNetworkLayer = !isEventLayer && this.isNetworkLayer(layerId);
        /** @type {?} */
        var isCalibrationPointLayer = !isEventLayer && !isNetworkLayer && this.isCalibrationPointLayer(layerId);
        /** @type {?} */
        var isCenterlineLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && this.isCenterlineLayer(layerId);
        /** @type {?} */
        var isIntersectionLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer
            && this.isIntersectionLayer(layerId);
        /** @type {?} */
        var isRedlineLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer && !isIntersectionLayer
            && this.isRedlineLayer(layerId);
        /** @type {?} */
        var isTable = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer && !isIntersectionLayer
            && !isRedlineLayer && this.isTable(layerId);
        /** @type {?} */
        var isNonLRSLayer = !isEventLayer && !isNetworkLayer && !isCalibrationPointLayer && !isCenterlineLayer && !isIntersectionLayer
            && !isRedlineLayer && !isTable && this.isNonLRSLayer(layerId);
        /** @type {?} */
        var layer = this.getLayer(layerId);
        /** @type {?} */
        var shapeField = layer ? getGeometryField(layer.fields) : null;
        /** @type {?} */
        var idField = layer ? getIdField(layer.fields) : null;
        return {
            layer: layer,
            layerId: layerId,
            isEventLayer: isEventLayer,
            isNetworkLayer: isNetworkLayer,
            isCalibrationPointLayer: isCalibrationPointLayer,
            isCenterlineLayer: isCenterlineLayer,
            isIntersectionLayer: isIntersectionLayer,
            isRedlineLayer: isRedlineLayer,
            isTable: isTable,
            isNonLRSLayer: isNonLRSLayer,
            isLrsLayer: isLrsLayer,
            shapeField: shapeField,
            idField: idField,
        };
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isLrsLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(this.getLrsLayer(layerId));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isNetworkLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.networkLayers));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isEventLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.eventLayers));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isIntersectionLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.intersectionLayers));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isRedlineLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.redlineLayers));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isCenterlineLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.centerlineLayers));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isCalibrationPointLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.calibrationPointLayers));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isNonLRSLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.nonLRSLayers));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.isTable = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return Boolean(find(layerId, this.tables));
    };
    /**
     * Merges map server general information into this LRS metadata instance.
     */
    /**
     * Merges map server general information into this LRS metadata instance.
     * @param {?} mapMetadata
     * @return {?}
     */
    LrsMetadata.prototype.mergeMapMetadata = /**
     * Merges map server general information into this LRS metadata instance.
     * @param {?} mapMetadata
     * @return {?}
     */
    function (mapMetadata) {
        mergeMapMetadata(this, mapMetadata);
        return this;
    };
    /**
     * @param {?} mapMetadata
     * @return {?}
     */
    LrsMetadata.prototype.deepMergeMapMetadata = /**
     * @param {?} mapMetadata
     * @return {?}
     */
    function (mapMetadata) {
        deepMergeMapMetadata(this, mapMetadata);
        return this;
    };
    /**
     * Merges other LRS metadata into this LRS metdata instance.
     */
    /**
     * Merges other LRS metadata into this LRS metdata instance.
     * @param {?} lrsMetadata
     * @return {?}
     */
    LrsMetadata.prototype.mergeLrsMetadata = /**
     * Merges other LRS metadata into this LRS metdata instance.
     * @param {?} lrsMetadata
     * @return {?}
     */
    function (lrsMetadata) {
        mergeLrsMetadata(this, lrsMetadata);
        return this;
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.getNetworkLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return (/** @type {?} */ (find(layerId, this.networkLayers)));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.getEventLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return (/** @type {?} */ (find(layerId, this.eventLayers)));
    };
    /**
     * @param {?} layerId
     * @return {?}
     */
    LrsMetadata.prototype.getIntersectionLayer = /**
     * @param {?} layerId
     * @return {?}
     */
    function (layerId) {
        return (/** @type {?} */ (find(layerId, this.intersectionLayers)));
    };
    /**
     * @return {?}
     */
    LrsMetadata.prototype.getLrsLayers = /**
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (this.eventLayers)))
            .concat(this.networkLayers)
            .concat(this.redlineLayers);
    };
    /**
     * @return {?}
     */
    LrsMetadata.prototype.getFeatureClassLayers = /**
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (this.eventLayers)))
            .concat(this.networkLayers)
            .concat(this.redlineLayers)
            .concat(this.calibrationPointLayers)
            .concat(this.centerlineLayers)
            .concat(this.nonLRSLayers);
    };
    /**
     * @return {?}
     */
    LrsMetadata.prototype.getAllLayers = /**
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (this.getFeatureClassLayers())))
            .concat(this.tables)
            .concat(this.layers);
    };
    /**
     * @param {?} layer
     * @return {?}
     */
    LrsMetadata.prototype.getNetworkIdForLayer = /**
     * @param {?} layer
     * @return {?}
     */
    function (layer) {
        /** @type {?} */
        var networkId = null;
        if (this.isEventLayer(layer.id)) {
            /** @type {?} */
            var eventLayer = (/** @type {?} */ (layer));
            networkId = eventLayer.parentNetwork ? eventLayer.parentNetwork.id : null;
        }
        if (isNotValue(networkId)) {
            this.networkLayers.forEach((/**
             * @param {?} network
             * @return {?}
             */
            function (network) {
                if (network.eventLayers.find((/**
                 * @param {?} l
                 * @return {?}
                 */
                function (l) { return l.id === layer.id; }))) {
                    networkId = network.id;
                }
            }));
        }
        return networkId;
    };
    /**
     * @param {?} networkLayerId
     * @return {?}
     */
    LrsMetadata.prototype.getEventLayersByNetwork = /**
     * @param {?} networkLayerId
     * @return {?}
     */
    function (networkLayerId) {
        /** @type {?} */
        var networkLayer = this.getNetworkLayer(networkLayerId);
        return this.eventLayers.filter((/**
         * @param {?} layer
         * @return {?}
         */
        function (layer) {
            return layer.parentNetwork
                && layer.parentNetwork.id === networkLayerId
                || networkLayer.eventLayers
                    && networkLayer.eventLayers.find((/**
                     * @param {?} l
                     * @return {?}
                     */
                    function (l) { return l.id === layer.id; }));
        }));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    LrsMetadata.prototype.rebuildLayers = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        (/** @type {?} */ (this)).eventLayers = (/** @type {?} */ (this)).eventLayers.map((/**
         * @param {?} eventLayer
         * @return {?}
         */
        function (eventLayer) { return new EventLayer(find(eventLayer.id, (/** @type {?} */ (_this)).layers), eventLayer); }));
        (/** @type {?} */ (this)).networkLayers = (/** @type {?} */ (this)).networkLayers.map((/**
         * @param {?} networkLayer
         * @return {?}
         */
        function (networkLayer) { return new NetworkLayer(find(networkLayer.id, (/** @type {?} */ (_this)).layers), networkLayer); }));
        (/** @type {?} */ (this)).redlineLayers = (/** @type {?} */ (this)).redlineLayers.map((/**
         * @param {?} redlineLayer
         * @return {?}
         */
        function (redlineLayer) { return new RedlineLayer(find(redlineLayer.id, (/** @type {?} */ (_this)).layers), redlineLayer); }));
        (/** @type {?} */ (this)).centerlineLayers = (/** @type {?} */ (this)).centerlineLayers.map((/**
         * @param {?} centerlineLayer
         * @return {?}
         */
        function (centerlineLayer) { return new CenterlineLayer(centerlineLayer); }));
        (/** @type {?} */ (this)).calibrationPointLayers = (/** @type {?} */ (this)).calibrationPointLayers.map((/**
         * @param {?} calibrationPointLayer
         * @return {?}
         */
        function (calibrationPointLayer) { return new CalibrationPointLayer(calibrationPointLayer); }));
        (/** @type {?} */ (this)).intersectionLayers = (/** @type {?} */ (this)).intersectionLayers.map((/**
         * @param {?} intersectionLayer
         * @return {?}
         */
        function (intersectionLayer) { return new IntersectionLayer(intersectionLayer); }));
        (/** @type {?} */ (this)).nonLRSLayers = (/** @type {?} */ (this)).nonLRSLayers.map((/**
         * @param {?} nonLrsLayer
         * @return {?}
         */
        function (nonLrsLayer) { return new NonLrsLayer(find(nonLrsLayer.id, (/** @type {?} */ (_this)).layers), nonLrsLayer); }));
        return (/** @type {?} */ (this)).assignCodedValueDomainsToFields();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    LrsMetadata.prototype.assignCodedValueDomainsToFields = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        if ((/** @type {?} */ (this)).domains.length) {
            (/** @type {?} */ (this)).getFeatureClassLayers()
                .forEach((/**
             * @param {?} layer
             * @return {?}
             */
            function (layer) { return layer.applyFieldDomains((/** @type {?} */ (_this)).domains); }));
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} source
     * @return {THIS}
     */
    LrsMetadata.prototype.assign = /**
     * @template THIS
     * @this {THIS}
     * @param {?} source
     * @return {THIS}
     */
    function (source) {
        Object.assign((/** @type {?} */ (this)), source);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    LrsMetadata.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copy = clone(this);
        return new LrsMetadata()
            .assign(copy)
            .rebuildLayers();
    };
    /**
     * @return {?}
     */
    LrsMetadata.prototype.validate = /**
     * @return {?}
     */
    function () {
        return LRS_METADATA_VALIDATIONS
            .check(this);
    };
    return LrsMetadata;
}(MapServerMetadata));
export { LrsMetadata };
if (false) {
    /** @type {?} */
    LrsMetadata.prototype.dataSource;
    /** @type {?} */
    LrsMetadata.prototype.dataSourceId;
    /** @type {?} */
    LrsMetadata.prototype.name;
    /** @type {?} */
    LrsMetadata.prototype.serviceHasLrsMeta;
    /** @type {?} */
    LrsMetadata.prototype.networkLayers;
    /** @type {?} */
    LrsMetadata.prototype.eventLayers;
    /** @type {?} */
    LrsMetadata.prototype.redlineLayers;
    /** @type {?} */
    LrsMetadata.prototype.centerlineLayers;
    /** @type {?} */
    LrsMetadata.prototype.calibrationPointLayers;
    /** @type {?} */
    LrsMetadata.prototype.intersectionLayers;
    /** @type {?} */
    LrsMetadata.prototype.nonLRSLayers;
    /** @type {?} */
    LrsMetadata.prototype.lrs;
    /** @type {?} */
    LrsMetadata.prototype.domains;
}
//# sourceMappingURL=data:application/json;base64,