/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
// 3rd Party.
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
// TSS.
import { DataSourceService } from '../data-source/data-source.service';
import { DataSourceLrsMetadataService } from './data-source-lrs-metadata.service';
import { Logger } from '../core/logging/logger.service';
import { NotifyService } from '../core/notify/notify.service';
import { LrsMetadataRetriever } from './lrs-metadata-retriever';
import { LrsConfig } from './lrs.config';
import { EsriMapServerService } from '../esri/esri-map-server.service';
import { getDataSourceId } from '../data-source/get-data-source-id.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../esri/esri-map-server.service";
import * as i3 from "../data-source/data-source.service";
import * as i4 from "./data-source-lrs-metadata.service";
import * as i5 from "../core/notify/notify.service";
import * as i6 from "./lrs.config";
import * as i7 from "../core/logging/logger.service";
var LrsMetadataService = /** @class */ (function () {
    function LrsMetadataService(http, mapServer, dataSourceService, dataSourceLrsMetadataService, notify, config, log) {
        this.http = http;
        this.mapServer = mapServer;
        this.dataSourceService = dataSourceService;
        this.dataSourceLrsMetadataService = dataSourceLrsMetadataService;
        this.notify = notify;
        this.config = config;
        this.log = log;
        this.lrsCache = [];
    }
    /**
     * @param {?} dataSource
     * @param {?=} lrsMetadata
     * @return {?}
     */
    LrsMetadataService.prototype.get = /**
     * @param {?} dataSource
     * @param {?=} lrsMetadata
     * @return {?}
     */
    function (dataSource, lrsMetadata) {
        var _this = this;
        /** @type {?} */
        var dataSourceId = getDataSourceId(dataSource);
        /** @type {?} */
        var cachedMeta = this.lrsCache.find((/**
         * @param {?} cache
         * @return {?}
         */
        function (cache) { return cache.dataSourceId === dataSourceId; }));
        if (cachedMeta) {
            return of(cachedMeta.metaData);
        }
        return new LrsMetadataRetriever(this.http, this.mapServer, this.dataSourceService, this.dataSourceLrsMetadataService, this.notify, this.log)
            .withDataSource(dataSource)
            .withLrsMetadata(lrsMetadata)
            .retrieve()
            .pipe(tap((/**
         * @param {?} meta
         * @return {?}
         */
        function (meta) { return _this.tryCacheLrsMetadata(meta); })));
    };
    /**
     * @private
     * @param {?} meta
     * @return {?}
     */
    LrsMetadataService.prototype.tryCacheLrsMetadata = /**
     * @private
     * @param {?} meta
     * @return {?}
     */
    function (meta) {
        if (this.config.cacheInSessionLrsMetadata) {
            this.lrsCache.push({
                dataSourceId: meta.dataSourceId,
                metaData: meta
            });
        }
    };
    LrsMetadataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LrsMetadataService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: EsriMapServerService },
        { type: DataSourceService },
        { type: DataSourceLrsMetadataService },
        { type: NotifyService },
        { type: LrsConfig },
        { type: Logger }
    ]; };
    /** @nocollapse */ LrsMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function LrsMetadataService_Factory() { return new LrsMetadataService(i0.inject(i1.HttpClient), i0.inject(i2.EsriMapServerService), i0.inject(i3.DataSourceService), i0.inject(i4.DataSourceLrsMetadataService), i0.inject(i5.NotifyService), i0.inject(i6.LrsConfig), i0.inject(i7.Logger)); }, token: LrsMetadataService, providedIn: "root" });
    return LrsMetadataService;
}());
export { LrsMetadataService };
if (false) {
    /** @type {?} */
    LrsMetadataService.prototype.lrsCache;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataService.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataService.prototype.mapServer;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataService.prototype.dataSourceService;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataService.prototype.dataSourceLrsMetadataService;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataService.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataService.prototype.config;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataService.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHJzLW1ldGFkYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9scnMvbHJzLW1ldGFkYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFHM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBR3JDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNENBQTRDLENBQUM7Ozs7Ozs7OztBQUc3RTtJQU1FLDRCQUNZLElBQWdCLEVBQ2hCLFNBQStCLEVBQy9CLGlCQUFvQyxFQUNwQyw0QkFBMEQsRUFDMUQsTUFBcUIsRUFDckIsTUFBaUIsRUFDakIsR0FBVztRQU5YLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsY0FBUyxHQUFULFNBQVMsQ0FBc0I7UUFDL0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQThCO1FBQzFELFdBQU0sR0FBTixNQUFNLENBQWU7UUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNqQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBVHZCLGFBQVEsR0FBc0QsRUFBRSxDQUFDO0lBVWpFLENBQUM7Ozs7OztJQUVELGdDQUFHOzs7OztJQUFILFVBQUksVUFBK0IsRUFBRSxXQUF5QjtRQUE5RCxpQkFzQkM7O1lBckJPLFlBQVksR0FBRyxlQUFlLENBQUMsVUFBVSxDQUFDOztZQUMxQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLENBQUMsWUFBWSxLQUFLLFlBQVksRUFBbkMsQ0FBbUMsRUFBQztRQUVuRixJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8sSUFBSSxvQkFBb0IsQ0FDN0IsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxDQUFDLDRCQUE0QixFQUNqQyxJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxHQUFHLENBQ1Q7YUFDRSxjQUFjLENBQUMsVUFBVSxDQUFDO2FBQzFCLGVBQWUsQ0FBQyxXQUFXLENBQUM7YUFDNUIsUUFBUSxFQUFFO2FBQ1YsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBOUIsQ0FBOEIsRUFBQyxDQUM1QyxDQUFDO0lBQ04sQ0FBQzs7Ozs7O0lBRU8sZ0RBQW1COzs7OztJQUEzQixVQUE0QixJQUFpQjtRQUMzQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMseUJBQXlCLEVBQUU7WUFDekMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtnQkFDL0IsUUFBUSxFQUFFLElBQUk7YUFDZixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7O2dCQS9DRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQXRCUSxVQUFVO2dCQWdCVixvQkFBb0I7Z0JBUnBCLGlCQUFpQjtnQkFDakIsNEJBQTRCO2dCQUU1QixhQUFhO2dCQUliLFNBQVM7Z0JBTFQsTUFBTTs7OzZCQVhmO0NBcUVDLEFBaERELElBZ0RDO1NBN0NZLGtCQUFrQjs7O0lBQzdCLHNDQUFpRTs7Ozs7SUFHL0Qsa0NBQTBCOzs7OztJQUMxQix1Q0FBeUM7Ozs7O0lBQ3pDLCtDQUE4Qzs7Ozs7SUFDOUMsMERBQW9FOzs7OztJQUNwRSxvQ0FBK0I7Ozs7O0lBQy9CLG9DQUEyQjs7Ozs7SUFDM0IsaUNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIDNyZCBQYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IERhdGFTb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vZGF0YS1zb3VyY2UvZGF0YS1zb3VyY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhU291cmNlTHJzTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhLXNvdXJjZS1scnMtbWV0YWRhdGEuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb3JlL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZ5U2VydmljZSB9IGZyb20gJy4uL2NvcmUvbm90aWZ5L25vdGlmeS5zZXJ2aWNlJztcbmltcG9ydCB7IExyc01ldGFkYXRhIH0gZnJvbSAnLi9scnMtbWV0YWRhdGEnO1xuaW1wb3J0IHsgTHJzTWV0YWRhdGFSZXRyaWV2ZXIgfSBmcm9tICcuL2xycy1tZXRhZGF0YS1yZXRyaWV2ZXInO1xuaW1wb3J0IHsgRGF0YVNvdXJjZSB9IGZyb20gJy4uL2RhdGEtc291cmNlL2RhdGEtc291cmNlJztcbmltcG9ydCB7IExyc0NvbmZpZyB9IGZyb20gJy4vbHJzLmNvbmZpZyc7XG5pbXBvcnQgeyBFc3JpTWFwU2VydmVyU2VydmljZSB9IGZyb20gJy4uL2VzcmkvZXNyaS1tYXAtc2VydmVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgZ2V0RGF0YVNvdXJjZUlkIH0gZnJvbSAnLi4vZGF0YS1zb3VyY2UvZ2V0LWRhdGEtc291cmNlLWlkLmZ1bmN0aW9uJztcblxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMcnNNZXRhZGF0YVNlcnZpY2Uge1xuICBscnNDYWNoZTogeyBkYXRhU291cmNlSWQ6IHN0cmluZywgbWV0YURhdGE6IExyc01ldGFkYXRhIH1bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByb3RlY3RlZCBtYXBTZXJ2ZXI6IEVzcmlNYXBTZXJ2ZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBkYXRhU291cmNlU2VydmljZTogRGF0YVNvdXJjZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGRhdGFTb3VyY2VMcnNNZXRhZGF0YVNlcnZpY2U6IERhdGFTb3VyY2VMcnNNZXRhZGF0YVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIG5vdGlmeTogTm90aWZ5U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBMcnNDb25maWcsXG4gICAgcHJvdGVjdGVkIGxvZzogTG9nZ2VyKSB7XG4gIH1cblxuICBnZXQoZGF0YVNvdXJjZTogc3RyaW5nIHwgRGF0YVNvdXJjZSwgbHJzTWV0YWRhdGE/OiBMcnNNZXRhZGF0YSk6IE9ic2VydmFibGU8THJzTWV0YWRhdGE+IHtcbiAgICBjb25zdCBkYXRhU291cmNlSWQgPSBnZXREYXRhU291cmNlSWQoZGF0YVNvdXJjZSk7XG4gICAgY29uc3QgY2FjaGVkTWV0YSA9IHRoaXMubHJzQ2FjaGUuZmluZChjYWNoZSA9PiBjYWNoZS5kYXRhU291cmNlSWQgPT09IGRhdGFTb3VyY2VJZCk7XG5cbiAgICBpZiAoY2FjaGVkTWV0YSkge1xuICAgICAgcmV0dXJuIG9mKGNhY2hlZE1ldGEubWV0YURhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgTHJzTWV0YWRhdGFSZXRyaWV2ZXIoXG4gICAgICB0aGlzLmh0dHAsXG4gICAgICB0aGlzLm1hcFNlcnZlcixcbiAgICAgIHRoaXMuZGF0YVNvdXJjZVNlcnZpY2UsXG4gICAgICB0aGlzLmRhdGFTb3VyY2VMcnNNZXRhZGF0YVNlcnZpY2UsXG4gICAgICB0aGlzLm5vdGlmeSxcbiAgICAgIHRoaXMubG9nXG4gICAgKVxuICAgICAgLndpdGhEYXRhU291cmNlKGRhdGFTb3VyY2UpXG4gICAgICAud2l0aExyc01ldGFkYXRhKGxyc01ldGFkYXRhKVxuICAgICAgLnJldHJpZXZlKClcbiAgICAgIC5waXBlKFxuICAgICAgICB0YXAobWV0YSA9PiB0aGlzLnRyeUNhY2hlTHJzTWV0YWRhdGEobWV0YSkpXG4gICAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSB0cnlDYWNoZUxyc01ldGFkYXRhKG1ldGE6IExyc01ldGFkYXRhKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmNhY2hlSW5TZXNzaW9uTHJzTWV0YWRhdGEpIHtcbiAgICAgIHRoaXMubHJzQ2FjaGUucHVzaCh7XG4gICAgICAgIGRhdGFTb3VyY2VJZDogbWV0YS5kYXRhU291cmNlSWQsXG4gICAgICAgIG1ldGFEYXRhOiBtZXRhXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==