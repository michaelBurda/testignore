/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FeatureClassLayer } from '../maps/feature-class-layer';
import { stripTableName } from '../data-source/data-table';
import { CapturePosition } from './capture-position';
/**
 * @param {?} layer
 * @param {?=} stripLayerTableName
 * @return {?}
 */
export function getLayerTableName(layer, stripLayerTableName) {
    if (stripLayerTableName === void 0) { stripLayerTableName = false; }
    /** @type {?} */
    var tableName = layer
        ? layer.featureClassName || layer.datasetName
        : null;
    if (stripLayerTableName) {
        tableName = stripTableName(tableName);
    }
    return tableName;
}
/**
 * @record
 */
export function TemporalLayer() { }
if (false) {
    /** @type {?|undefined} */
    TemporalLayer.prototype.fromDateFieldName;
    /** @type {?|undefined} */
    TemporalLayer.prototype.toDateFieldName;
}
/**
 * @record
 */
export function DataLayer() { }
if (false) {
    /** @type {?} */
    DataLayer.prototype.featureClassName;
}
/**
 * @record
 */
export function NetworkLayerMappingInfo() { }
if (false) {
    /** @type {?} */
    NetworkLayerMappingInfo.prototype.id;
    /** @type {?|undefined} */
    NetworkLayerMappingInfo.prototype.name;
    /** @type {?|undefined} */
    NetworkLayerMappingInfo.prototype.type;
}
/**
 * @record
 */
export function LrsReferenceLayer() { }
if (false) {
    /** @type {?} */
    LrsReferenceLayer.prototype.routeIdFieldName;
    /** @type {?} */
    LrsReferenceLayer.prototype.fromMeasureFieldName;
    /** @type {?} */
    LrsReferenceLayer.prototype.toMeasureFieldName;
}
/**
 * @record
 */
export function LrsDataReferenceLayer() { }
/**
 * @record
 */
export function ChildLrsLayer() { }
if (false) {
    /** @type {?} */
    ChildLrsLayer.prototype.parentNetwork;
}
/**
 * @record
 */
export function EditableLayer() { }
if (false) {
    /** @type {?|undefined} */
    EditableLayer.prototype.targetFeatureClassName;
    /** @type {?|undefined} */
    EditableLayer.prototype.modifiedDateFieldName;
    /** @type {?|undefined} */
    EditableLayer.prototype.modifiedByFieldName;
}
var LrsLayer = /** @class */ (function (_super) {
    tslib_1.__extends(LrsLayer, _super);
    function LrsLayer() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        var _this = _super.apply(this, tslib_1.__spread(sources)) || this;
        _this.capturePositions = _this.capturePositions ? _this.capturePositions : [];
        return _this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    LrsLayer.prototype.getPositionByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.capturePositions.find((/**
         * @param {?} positionDef
         * @return {?}
         */
        function (positionDef) { return positionDef.value === value; }));
    };
    /**
     * @param {?} position
     * @return {?}
     */
    LrsLayer.prototype.getPositions = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        return this.capturePositions.filter((/**
         * @param {?} positionDef
         * @return {?}
         */
        function (positionDef) { return positionDef.position === position; }));
    };
    /**
     * @param {?} position
     * @return {?}
     */
    LrsLayer.prototype.hasPosition = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var positions = this.getPositions(position);
        return positions.length > 0;
    };
    Object.defineProperty(LrsLayer.prototype, "hasAnyPositions", {
        get: /**
         * @return {?}
         */
        function () {
            return this.capturePositions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LrsLayer.prototype, "hasLanePosition", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var positions = this.getPositions(CapturePosition.Lane);
            return positions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LrsLayer.prototype, "hasLeftPosition", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var positions = this.getPositions(CapturePosition.Left);
            return positions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LrsLayer.prototype, "hasRightPosition", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var positions = this.getPositions(CapturePosition.Right);
            return positions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LrsLayer.prototype, "hasCenterPosition", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var positions = this.getPositions(CapturePosition.Center);
            return positions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    return LrsLayer;
}(FeatureClassLayer));
export { LrsLayer };
if (false) {
    /** @type {?} */
    LrsLayer.prototype.featureClassName;
    /** @type {?} */
    LrsLayer.prototype.lrsNetworkId;
    /** @type {?} */
    LrsLayer.prototype.datasetName;
    /** @type {?} */
    LrsLayer.prototype.unitsOfMeasure;
    /** @type {?} */
    LrsLayer.prototype.measurePrecision;
    /** @type {?} */
    LrsLayer.prototype.temporalViewDate;
    /** @type {?} */
    LrsLayer.prototype.timeZoneOffset;
    /** @type {?} */
    LrsLayer.prototype.versionName;
    /** @type {?} */
    LrsLayer.prototype.isRouteEventSource;
    /** @type {?} */
    LrsLayer.prototype.isStaged;
    /** @type {?} */
    LrsLayer.prototype.dateFormat;
    /** @type {?} */
    LrsLayer.prototype.spatialReferenceInfo;
    /** @type {?} */
    LrsLayer.prototype.fromDateFieldName;
    /** @type {?} */
    LrsLayer.prototype.toDateFieldName;
    /** @type {?} */
    LrsLayer.prototype.lrs;
    /** @type {?} */
    LrsLayer.prototype.targetFeatureClassName;
    /** @type {?} */
    LrsLayer.prototype.modifiedDateFieldName;
    /** @type {?} */
    LrsLayer.prototype.modifiedByFieldName;
    /** @type {?} */
    LrsLayer.prototype.preventOverlaps;
    /** @type {?} */
    LrsLayer.prototype.autoStopCaptureOnRecordBreak;
    /** @type {?} */
    LrsLayer.prototype.forwardLaneCountFieldName;
    /** @type {?} */
    LrsLayer.prototype.reverseLaneCountFieldName;
    /** @type {?} */
    LrsLayer.prototype.positionIdentifierFieldName;
    /** @type {?} */
    LrsLayer.prototype.capturePositions;
    /** @type {?} */
    LrsLayer.prototype.laneDrawValueOrder;
    /** @type {?} */
    LrsLayer.prototype.laneIdentifierReverseValues;
}
//# sourceMappingURL=data:application/json;base64,