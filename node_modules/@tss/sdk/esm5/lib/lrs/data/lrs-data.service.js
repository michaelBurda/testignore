/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { toFieldName, getGeometryFieldName } from '../../maps/fields/layer-field';
import { EsriMapServerService } from '../../esri/esri-map-server.service';
import { DataSourceService } from '../../data-source/data-source.service';
import { WhereClauseBuilder } from '../../maps/where-clause-builder';
import { DataSourceConfig } from '../../data-source/data-source-config';
import * as i0 from "@angular/core";
import * as i1 from "../../esri/esri-map-server.service";
import * as i2 from "../../data-source/data-source.service";
import * as i3 from "../../data-source/data-source-config";
var LrsDataService = /** @class */ (function () {
    function LrsDataService(mapService, dataSourceService, dataSourceConfig) {
        this.mapService = mapService;
        this.dataSourceService = dataSourceService;
        this.dataSourceConfig = dataSourceConfig;
    }
    /**
     * @template T
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} field
     * @param {?=} whereClause
     * @return {?}
     */
    LrsDataService.prototype.getUniqueValues = /**
     * @template T
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} field
     * @param {?=} whereClause
     * @return {?}
     */
    function (dataSource, layer, field, whereClause) {
        /** @type {?} */
        var mapServiceParams = { gdbVersion: layer.versionName };
        /** @type {?} */
        var httpParams;
        if (whereClause) {
            mapServiceParams.where = whereClause;
            httpParams = new HttpParams().set('where', whereClause);
        }
        return dataSource.serviceUrl
            ? this.mapService.getUniqueValues(dataSource.serviceUrl, layer, field, mapServiceParams)
            : this.dataSourceService.getUniqueColumnValues(dataSource.id, layer.featureClassName, toFieldName(field), httpParams);
    };
    /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} whereClause
     * @return {?}
     */
    LrsDataService.prototype.getQueryCount = /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} whereClause
     * @return {?}
     */
    function (dataSource, layer, whereClause) {
        return dataSource.serviceUrl
            ? this.mapService.getQueryCount(dataSource.serviceUrl, layer, whereClause, { gdbVersion: layer.versionName })
            : this.dataSourceService.getRecordCount(dataSource.id, layer.featureClassName, whereClause, layer.versionName);
    };
    /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} routeIds
     * @return {?}
     */
    LrsDataService.prototype.queryRoutesByIds = /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} routeIds
     * @return {?}
     */
    function (dataSource, layer, routeIds) {
        if (!routeIds || !routeIds.length) {
            throw new Error('Failed to query routes. No route IDs supplied.');
        }
        if (!layer.compositeRouteIdFieldName) {
            throw new Error("Failed to query routes. No 'compositeRouteIdFieldName' property found for layer.");
        }
        /** @type {?} */
        var whereClause = layer.compositeRouteIdFieldName + " IN ('" + routeIds.join("','") + "')";
        return this.queryRoutes(dataSource, layer, whereClause);
    };
    /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?=} whereClause
     * @return {?}
     */
    LrsDataService.prototype.queryRoutes = /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?=} whereClause
     * @return {?}
     */
    function (dataSource, layer, whereClause) {
        /** @type {?} */
        var shapeFieldName = getGeometryFieldName(layer.fields);
        return dataSource.serviceUrl
            ? this.mapService.queryRoutes(dataSource.serviceUrl, layer, whereClause, { gdbVersion: layer.versionName })
            : this.dataSourceService.querySpatialData(dataSource.id, layer.featureClassName, whereClause, layer.versionName, null, null, true, shapeFieldName);
    };
    /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} searchText
     * @return {?}
     */
    LrsDataService.prototype.searchRoutesByText = /**
     * @param {?} dataSource
     * @param {?} layer
     * @param {?} searchText
     * @return {?}
     */
    function (dataSource, layer, searchText) {
        /** @type {?} */
        var useMapService = Boolean(dataSource.serviceUrl);
        /** @type {?} */
        var shapeFieldName = getGeometryFieldName(layer.fields);
        /** @type {?} */
        var whereClause;
        if (!useMapService) {
            whereClause = new WhereClauseBuilder({
                quoteFields: !this.dataSourceConfig.skipColumnQuotes
            })
                .whereLike(layer.displayField, searchText)
                .toWhereClause();
        }
        return useMapService
            ? this.mapService.searchRoutesByText(dataSource.serviceUrl, layer, searchText, { gdbVersion: layer.versionName })
            : this.dataSourceService.querySpatialData(dataSource.id, layer.featureClassName, whereClause, layer.versionName, null, null, true, shapeFieldName);
    };
    LrsDataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LrsDataService.ctorParameters = function () { return [
        { type: EsriMapServerService },
        { type: DataSourceService },
        { type: DataSourceConfig }
    ]; };
    /** @nocollapse */ LrsDataService.ngInjectableDef = i0.defineInjectable({ factory: function LrsDataService_Factory() { return new LrsDataService(i0.inject(i1.EsriMapServerService), i0.inject(i2.DataSourceService), i0.inject(i3.DataSourceConfig)); }, token: LrsDataService, providedIn: "root" });
    return LrsDataService;
}());
export { LrsDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LrsDataService.prototype.mapService;
    /**
     * @type {?}
     * @private
     */
    LrsDataService.prototype.dataSourceService;
    /**
     * @type {?}
     * @private
     */
    LrsDataService.prototype.dataSourceConfig;
}
//# sourceMappingURL=data:application/json;base64,