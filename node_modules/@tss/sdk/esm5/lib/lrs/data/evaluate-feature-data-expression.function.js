/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isDynamicDataExpression, DYNAMIC_DATA_REGEX } from './is-dynamic-data-expression.function';
import { extractFeatureDataByLayer } from './extract-feature-data.function';
import { isNumber } from 'util';
import { sumValues } from '../../core/stats/sum-values.function';
import { average } from '../../core/stats/average.function';
import { isObject } from '../../core/type-check/is-object.function';
import { extractTokenExpressions } from '../../core/tokens/extract-token-expressions.function';
import { replaceToken } from '../../core/tokens/replace-token.function';
import { format } from '../../core/formatting/format.function';
/**
 * @param {?} dataValues
 * @return {?}
 */
function dataValuesToNumbers(dataValues) {
    return dataValues
        .filter((/**
     * @param {?} value
     * @return {?}
     */
    function (value) { return isNumber(value); }))
        .map((/**
     * @param {?} value
     * @return {?}
     */
    function (value) { return Number(value); }));
}
/**
 * @param {?} expression
 * @param {...?} features
 * @return {?}
 */
function evaluateSingleDynamicDataExpression(expression) {
    var features = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        features[_i - 1] = arguments[_i];
    }
    /** @type {?} */
    var parsedValue = expression.match(DYNAMIC_DATA_REGEX);
    /** @type {?} */
    var expressionValue;
    if (parsedValue && parsedValue.length > 2) {
        /** @type {?} */
        var layerId = Number(parsedValue[1]);
        /** @type {?} */
        var field = parsedValue[2];
        /** @type {?} */
        var subsetKeyword = (/** @type {?} */ ((parsedValue[3] || 'first').toLocaleLowerCase()));
        /** @type {?} */
        var dataValues = extractFeatureDataByLayer.apply(void 0, tslib_1.__spread([layerId, field], features));
        if (subsetKeyword === 'first') {
            expressionValue = dataValues[0];
        }
        else if (subsetKeyword === 'last') {
            expressionValue = dataValues[dataValues.length - 1];
        }
        else if (subsetKeyword === 'sum' || subsetKeyword === 'add') {
            /** @type {?} */
            var numberValues = dataValuesToNumbers(dataValues);
            expressionValue = sumValues(numberValues);
        }
        else if (subsetKeyword === 'avg' || subsetKeyword === 'average') {
            /** @type {?} */
            var numberValues = dataValuesToNumbers(dataValues);
            expressionValue = average(numberValues);
        }
        else if (subsetKeyword === 'concat') {
            expressionValue = dataValues.join(', ');
        }
        else if (subsetKeyword === 'min') {
            /** @type {?} */
            var numberValues = dataValuesToNumbers(dataValues);
            expressionValue = Math.min.apply(Math, tslib_1.__spread(numberValues));
        }
        else if (subsetKeyword === 'max') {
            /** @type {?} */
            var numberValues = dataValuesToNumbers(dataValues);
            expressionValue = Math.max.apply(Math, tslib_1.__spread(numberValues));
        }
        else {
            throw new Error("Unsupported dynamic data expression subset keyword '" + subsetKeyword + "'");
        }
        return isObject(expressionValue)
            ? JSON.stringify(expressionValue)
            : String(expressionValue);
    }
}
/**
 * @param {?} expression
 * @param {...?} features
 * @return {?}
 */
function evaluateDynamicDataExpression(expression) {
    var features = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        features[_i - 1] = arguments[_i];
    }
    /** @type {?} */
    var tokenExpressions = extractTokenExpressions(expression);
    /** @type {?} */
    var evaluationResult = expression;
    tokenExpressions
        .filter((/**
     * @param {?} tokenExpression
     * @return {?}
     */
    function (tokenExpression) { return isDynamicDataExpression(tokenExpression); }))
        .forEach((/**
     * @param {?} tokenExpression
     * @return {?}
     */
    function (tokenExpression) {
        /** @type {?} */
        var value = evaluateSingleDynamicDataExpression.apply(void 0, tslib_1.__spread([tokenExpression], features));
        evaluationResult = replaceToken(evaluationResult, tokenExpression, value);
    }));
    return evaluationResult;
}
/**
 * @param {?} expression
 * @param {...?} features
 * @return {?}
 */
export function evaluteFeatureDataExpression(expression) {
    var features = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        features[_i - 1] = arguments[_i];
    }
    /** @type {?} */
    var evaluationResult = evaluateDynamicDataExpression.apply(void 0, tslib_1.__spread([expression], features));
    /** @type {?} */
    var firstFeatureProperties = features && features.length
        ? features[0].properties
        : {};
    /** @type {?} */
    var replaceTokens = Object.assign({}, firstFeatureProperties, {
        RecordCount: features.length,
    });
    return format(evaluationResult, replaceTokens);
}
//# sourceMappingURL=data:application/json;base64,