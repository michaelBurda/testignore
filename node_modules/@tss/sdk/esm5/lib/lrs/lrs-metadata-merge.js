/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LrsMetadata } from './lrs-metadata';
import { findLayer } from './layer-search';
import { LayerDrawingInfo } from '../maps/drawing/layer-drawing-info';
import { mergeDeep } from '../core/merge/merge-deep.function';
import { mergeDeepArray } from '../core/merge/merge-deep-array.function';
import { isNumber } from '../core/type-check/is-number.function';
/**
 * @param {?} layerId
 * @param {...?} layerList
 * @return {?}
 */
function find(layerId) {
    var layerList = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        layerList[_i - 1] = arguments[_i];
    }
    return findLayer.apply(void 0, tslib_1.__spread([layerId], layerList));
}
/**
 * @param {?} layer
 * @return {?}
 */
function setLayerDefaults(layer) {
    layer.fields = layer.fields || [];
}
/**
 * @param {?} layer
 * @return {?}
 */
function setNetworkLayerDefaults(layer) {
    if (layer) {
        layer.hierarchyFilter = layer.hierarchyFilter || [];
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function mergeFieldDomains(target, source) {
    mergeDeep(target, source, { ignoreArrays: true });
    if (target && target.codedValues && source && source.codedValues) {
        mergeDeepArray(target.codedValues, source.codedValues, { identifier: 'code' });
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function mergeFields(target, source) {
    target = target || [];
    source = source || [];
    mergeDeepArray(target, source, {
        identifier: 'name',
        beforeMerge: (/**
         * @param {?} targetField
         * @param {?} sourceField
         * @return {?}
         */
        function (targetField, sourceField) {
            if (targetField.domain && sourceField.domain && sourceField.domain.codedValues) {
                /** @type {?} */
                var doValuesNeedMerged = sourceField.domain.codedValues.filter((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return isNumber(c.order); }));
                if (doValuesNeedMerged && doValuesNeedMerged.length) {
                    mergeFieldDomains(targetField.domain, sourceField.domain);
                    return false;
                }
            }
        })
    });
}
/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
export function mergeLayer(target, source) {
    if (!target || !source) {
        return;
    }
    /** @type {?} */
    var lrsTarget = (/** @type {?} */ (target));
    /** @type {?} */
    var lrsSource = (/** @type {?} */ (source));
    /** @type {?} */
    var targetCapturePositions = lrsTarget.capturePositions || [];
    /** @type {?} */
    var sourceCapturePositions = lrsSource.capturePositions || [];
    /** @type {?} */
    var targetDrawingInfo = (/** @type {?} */ (lrsTarget.drawingInfo));
    /** @type {?} */
    var sourceDrawingInfo = (/** @type {?} */ (lrsSource.drawingInfo));
    /** @type {?} */
    var hasDrawingInfo = Boolean(targetDrawingInfo || sourceDrawingInfo);
    /** @type {?} */
    var drawingInfo = new LayerDrawingInfo((/** @type {?} */ (lrsTarget.drawingInfo)), (/** @type {?} */ (lrsSource.drawingInfo)));
    mergeDeep(target, source, { ignoreArrays: true });
    mergeFields(target.fields, source.fields);
    if (hasDrawingInfo) {
        ((/** @type {?} */ (target))).drawingInfo = drawingInfo;
    }
    if (!targetCapturePositions.length && sourceCapturePositions.length) {
        lrsTarget.capturePositions = sourceCapturePositions;
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @param {?=} sourceMetadata
 * @param {?=} sort
 * @param {?=} onMergeComplete
 * @return {?}
 */
export function mergeLayers(target, source, sourceMetadata, sort, onMergeComplete) {
    if (sort === void 0) { sort = true; }
    if (onMergeComplete === void 0) { onMergeComplete = null; }
    target = target || [];
    source = source || [];
    target.forEach((/**
     * @param {?} targetLayer
     * @return {?}
     */
    function (targetLayer) {
        setLayerDefaults(targetLayer);
        mergeLayer(targetLayer, source.find((/**
         * @param {?} sourceLayer
         * @return {?}
         */
        function (sourceLayer) { return sourceLayer.id === targetLayer.id; })));
    }));
    // There will be occurences where the source has layers that the target doesn't, which
    // means that the merge will not happen above, because the target is the one being looped.
    source
        .filter((/**
     * @param {?} src
     * @return {?}
     */
    function (src) { return !target.find((/**
     * @param {?} x
     * @return {?}
     */
    function (x) { return src.id === x.id; })); }))
        .forEach((/**
     * @param {?} missing
     * @return {?}
     */
    function (missing) {
        /** @type {?} */
        var newLayer = missing;
        if (sourceMetadata) {
            /** @type {?} */
            var merger = find(missing.id, sourceMetadata.tables, sourceMetadata.layers, sourceMetadata.nonLRSLayers);
            // We want to preseve the original table or layer, so we don't overwrite it here.
            newLayer = Object.assign({}, merger);
            mergeLayer(newLayer, missing);
        }
        setLayerDefaults(newLayer);
        target.push(newLayer);
    }));
    if (sort) {
        target.sort((/**
         * @param {?} layer1
         * @param {?} layer2
         * @return {?}
         */
        function (layer1, layer2) { return layer1.order - layer2.order; }));
    }
    if (onMergeComplete) {
        target.forEach((/**
         * @param {?} targetLayer
         * @return {?}
         */
        function (targetLayer) {
            onMergeComplete(targetLayer, source.find((/**
             * @param {?} sourceLayer
             * @return {?}
             */
            function (sourceLayer) { return sourceLayer.id === targetLayer.id; })));
        }));
    }
}
/**
 * @param {?} target
 * @param {?} source
 * @param {?=} sourceMetadata
 * @return {?}
 */
export function mergeNetworkLayers(target, source, sourceMetadata) {
    /** @type {?} */
    var isSorted = true;
    mergeLayers(target, source, sourceMetadata, isSorted, onMergeNetworkLayerComplete);
}
/**
 * @param {?} targetLayer
 * @param {?} sourceLayer
 * @return {?}
 */
export function onMergeNetworkLayerComplete(targetLayer, sourceLayer) {
    setNetworkLayerDefaults(targetLayer);
    setNetworkLayerDefaults(sourceLayer);
    if (targetLayer && sourceLayer) {
        mergeDeepArray(targetLayer.hierarchyFilter, sourceLayer.hierarchyFilter, { identifier: 'name' });
    }
}
/**
 * @param {?} target
 * @param {...?} source
 * @return {?}
 */
export function mergeLrsMetadata(target) {
    var source = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        source[_i - 1] = arguments[_i];
    }
    source.forEach((/**
     * @param {?} srcMeta
     * @return {?}
     */
    function (srcMeta) {
        /** @type {?} */
        var dataSource = srcMeta.dataSource || target.dataSource;
        mergeDeep(target, srcMeta, { ignoreArrays: true });
        if (dataSource) {
            target.dataSource = dataSource;
        }
        mergeNetworkLayers(target.networkLayers, srcMeta.networkLayers, target);
        mergeLayers(target.eventLayers, srcMeta.eventLayers, target);
        mergeLayers(target.calibrationPointLayers, srcMeta.calibrationPointLayers, target);
        mergeLayers(target.intersectionLayers, srcMeta.intersectionLayers, target);
        mergeLayers(target.centerlineLayers, srcMeta.centerlineLayers, target);
        mergeLayers(target.redlineLayers, srcMeta.redlineLayers, target);
        mergeLayers(target.nonLRSLayers, srcMeta.nonLRSLayers, target);
        mergeLayers(target.layers, srcMeta.layers);
        mergeLayers(target.tables, srcMeta.tables);
    }));
}
/**
 * @param {?} target
 * @param {...?} source
 * @return {?}
 */
export function mergeMapMetadata(target) {
    var source = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        source[_i - 1] = arguments[_i];
    }
    source.forEach((/**
     * @param {?} meta
     * @return {?}
     */
    function (meta) {
        Object.assign(target, meta);
    }));
}
/**
 * @param {?} target
 * @param {...?} source
 * @return {?}
 */
export function deepMergeMapMetadata(target) {
    var source = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        source[_i - 1] = arguments[_i];
    }
    source.forEach((/**
     * @param {?} meta
     * @return {?}
     */
    function (meta) {
        meta.layers.forEach((/**
         * @param {?} nonLrsLayerInfo
         * @return {?}
         */
        function (nonLrsLayerInfo) {
            /** @type {?} */
            var targetLayer = target.getLrsLayer(nonLrsLayerInfo.id);
            if (targetLayer) {
                /** @type {?} */
                var baseFields = tslib_1.__spread(nonLrsLayerInfo.fields);
                mergeFields(baseFields, targetLayer.fields);
                targetLayer.fields = baseFields;
                if (nonLrsLayerInfo.geometryType) {
                    targetLayer.geometryType = nonLrsLayerInfo.geometryType;
                }
                targetLayer.drawingInfo = new LayerDrawingInfo(nonLrsLayerInfo.drawingInfo, targetLayer.drawingInfo);
            }
        }));
    }));
}
/**
 * @param {?} dataSource
 * @param {?} dataSourceLrsMetadata
 * @param {?} mapServerLrsMetadata
 * @param {?} mapServerMetadata
 * @return {?}
 */
export function mergeLrsMetadataSources(dataSource, dataSourceLrsMetadata, mapServerLrsMetadata, mapServerMetadata) {
    /** @type {?} */
    var hasMapServerLrsMetadata = Boolean(mapServerLrsMetadata);
    /** @type {?} */
    var fullLrsMeta = mapServerLrsMetadata
        || dataSourceLrsMetadata
        || new LrsMetadata(dataSource);
    fullLrsMeta.mergeMapMetadata(mapServerMetadata);
    fullLrsMeta.dataSource = fullLrsMeta.dataSource || dataSource;
    fullLrsMeta.dataSourceId = fullLrsMeta.dataSourceId || dataSource.id;
    if (hasMapServerLrsMetadata) {
        // If the map service has LRS metadata then we need to merge the
        // data source LRS metadata into the map service lrs metadata
        // because we want the data source metadata to be priority.
        fullLrsMeta.mergeLrsMetadata(dataSourceLrsMetadata);
    }
    else {
        // We only need to do a dep merge when there is no LRS metadata available in the map service because
        // the map service LRS metadata provides all of the same information as the map server metadata (like fields).
        fullLrsMeta.deepMergeMapMetadata(mapServerMetadata);
    }
    fullLrsMeta.rebuildLayers();
    return fullLrsMeta;
}
//# sourceMappingURL=data:application/json;base64,