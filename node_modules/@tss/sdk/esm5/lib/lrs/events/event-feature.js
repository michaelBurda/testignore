/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// TSS.
import { LrsFeature } from '../lrs-feature';
import { toFeature } from '../feature';
import { WGS_84_SRID } from '../../geometry/geometry.constants';
import { clone } from '../../core/clone/clone.function';
var EventFeature = /** @class */ (function (_super) {
    tslib_1.__extends(EventFeature, _super);
    function EventFeature(feature, layer, spatialReferenceId) {
        if (spatialReferenceId === void 0) { spatialReferenceId = WGS_84_SRID; }
        var _this = _super.call(this, feature, layer, spatialReferenceId) || this;
        _this.routeId = _this.getValue(layer.routeIdFieldName);
        _this.fromMeasure = _this.getValue(layer.fromMeasureFieldName);
        _this.toMeasure = _this.getValue(layer.toMeasureFieldName);
        return _this;
    }
    /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    EventFeature.create = /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    function (layer, properties, geometry) {
        if (properties === void 0) { properties = {}; }
        if (geometry === void 0) { geometry = null; }
        /** @type {?} */
        var feature = toFeature(properties, (/** @type {?} */ (geometry)));
        return new EventFeature(feature, layer);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} routeId
     * @return {THIS}
     */
    EventFeature.prototype.setRouteId = /**
     * @template THIS
     * @this {THIS}
     * @param {?} routeId
     * @return {THIS}
     */
    function (routeId) {
        (/** @type {?} */ (this)).routeId = routeId;
        return (/** @type {?} */ (this)).setValue(routeId, (/** @type {?} */ (this)).layer.routeIdFieldName);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    EventFeature.prototype.setFromMeasure = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    function (measure) {
        (/** @type {?} */ (this)).fromMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.fromMeasureFieldName, measure);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    EventFeature.prototype.setToMeasure = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    function (measure) {
        if (!(/** @type {?} */ (this)).isLinear) {
            throw new Error('Cannot set to measure for a point-based feature');
        }
        (/** @type {?} */ (this)).toMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.toMeasureFieldName, measure);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @return {THIS}
     */
    EventFeature.prototype.setMeasureExtent = /**
     * @template THIS
     * @this {THIS}
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @return {THIS}
     */
    function (fromMeasure, toMeasure) {
        return (/** @type {?} */ (this)).setFromMeasure(fromMeasure)
            .setToMeasure(toMeasure);
    };
    /**
     * @return {?}
     */
    EventFeature.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copyFeature = clone(this.toFeature());
        return new EventFeature(copyFeature, this.layer);
    };
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    EventFeature.prototype.setGeometryTypeProperties = /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).isLinear = Boolean((/** @type {?} */ (this)).layer.toMeasureFieldName);
        (/** @type {?} */ (this)).isPoint = !(/** @type {?} */ (this)).isLinear;
        (/** @type {?} */ (this)).isPolygon = false;
        return (/** @type {?} */ (this));
    };
    return EventFeature;
}(LrsFeature));
export { EventFeature };
if (false) {
    /** @type {?} */
    EventFeature.prototype.layer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtZmVhdHVyZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2xycy9ldmVudHMvZXZlbnQtZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFaEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBR3hEO0lBQWtDLHdDQUFVO0lBRzFDLHNCQUFZLE9BQWdCLEVBQUUsS0FBaUIsRUFBRSxrQkFBZ0M7UUFBaEMsbUNBQUEsRUFBQSxnQ0FBZ0M7UUFBakYsWUFDRSxrQkFBTSxPQUFPLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixDQUFDLFNBSzFDO1FBSEMsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JELEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM3RCxLQUFJLENBQUMsU0FBUyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7O0lBQzNELENBQUM7Ozs7Ozs7SUFFTSxtQkFBTTs7Ozs7O0lBQWIsVUFDRSxLQUFpQixFQUNqQixVQUF5QyxFQUN6QyxRQUFxRDtRQURyRCwyQkFBQSxFQUFBLGVBQXlDO1FBQ3pDLHlCQUFBLEVBQUEsZUFBcUQ7O1lBRS9DLE9BQU8sR0FBWSxTQUFTLENBQUMsVUFBVSxFQUFFLG1CQUFBLFFBQVEsRUFBWSxDQUFDO1FBQ3BFLE9BQU8sSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7Ozs7SUFFRCxpQ0FBVTs7Ozs7O0lBQVYsVUFBVyxPQUFlO1FBQ3hCLG1CQUFBLElBQUksRUFBQSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLG1CQUFBLElBQUksRUFBQSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7Ozs7SUFFRCxxQ0FBYzs7Ozs7O0lBQWQsVUFBZSxPQUFlO1FBQzVCLG1CQUFBLElBQUksRUFBQSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDM0IsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7Ozs7SUFFRCxtQ0FBWTs7Ozs7O0lBQVosVUFBYSxPQUFlO1FBQzFCLElBQUksQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsbUJBQUEsSUFBSSxFQUFBLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUN6QixPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDLFFBQVEsQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7Ozs7SUFFRCx1Q0FBZ0I7Ozs7Ozs7SUFBaEIsVUFBaUIsV0FBbUIsRUFBRSxTQUFpQjtRQUNyRCxPQUFPLG1CQUFBLElBQUksRUFBQSxDQUNSLGNBQWMsQ0FBQyxXQUFXLENBQUM7YUFDM0IsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCw0QkFBSzs7O0lBQUw7O1lBQ1EsV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7Ozs7SUFFUyxnREFBeUI7Ozs7OztJQUFuQztRQUNFLG1CQUFBLElBQUksRUFBQSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDdkQsbUJBQUEsSUFBSSxFQUFBLENBQUMsT0FBTyxHQUFHLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsUUFBUSxDQUFDO1FBQzlCLG1CQUFBLElBQUksRUFBQSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNkLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF4REQsQ0FBa0MsVUFBVSxHQXdEM0M7Ozs7SUF2REMsNkJBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgRmVhdHVyZSwgR2VvbWV0cnksIExpbmVTdHJpbmcsIFBvaW50LCBNdWx0aUxpbmVTdHJpbmcgfSBmcm9tICdnZW9qc29uJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgTHJzRmVhdHVyZSB9IGZyb20gJy4uL2xycy1mZWF0dXJlJztcbmltcG9ydCB7IEV2ZW50TGF5ZXIgfSBmcm9tICcuL2V2ZW50LWxheWVyJztcbmltcG9ydCB7IExyc1JlZmVyZW5jZUZlYXR1cmUgfSBmcm9tICcuLi9scnMtcmVmZXJlbmNlLWZlYXR1cmUnO1xuaW1wb3J0IHsgdG9GZWF0dXJlIH0gZnJvbSAnLi4vZmVhdHVyZSc7XG5pbXBvcnQgeyBXR1NfODRfU1JJRCB9IGZyb20gJy4uLy4uL2dlb21ldHJ5L2dlb21ldHJ5LmNvbnN0YW50cyc7XG5pbXBvcnQgeyBDbG9uZWFibGUgfSBmcm9tICcuLi8uLi9jb3JlL2Nsb25lL2Nsb25lYWJsZSc7XG5pbXBvcnQgeyBjbG9uZSB9IGZyb20gJy4uLy4uL2NvcmUvY2xvbmUvY2xvbmUuZnVuY3Rpb24nO1xuXG5cbmV4cG9ydCBjbGFzcyBFdmVudEZlYXR1cmUgZXh0ZW5kcyBMcnNGZWF0dXJlIGltcGxlbWVudHMgTHJzUmVmZXJlbmNlRmVhdHVyZSwgQ2xvbmVhYmxlPEV2ZW50RmVhdHVyZT4ge1xuICBsYXllcjogRXZlbnRMYXllcjtcblxuICBjb25zdHJ1Y3RvcihmZWF0dXJlOiBGZWF0dXJlLCBsYXllcjogRXZlbnRMYXllciwgc3BhdGlhbFJlZmVyZW5jZUlkID0gV0dTXzg0X1NSSUQpIHtcbiAgICBzdXBlcihmZWF0dXJlLCBsYXllciwgc3BhdGlhbFJlZmVyZW5jZUlkKTtcblxuICAgIHRoaXMucm91dGVJZCA9IHRoaXMuZ2V0VmFsdWUobGF5ZXIucm91dGVJZEZpZWxkTmFtZSk7XG4gICAgdGhpcy5mcm9tTWVhc3VyZSA9IHRoaXMuZ2V0VmFsdWUobGF5ZXIuZnJvbU1lYXN1cmVGaWVsZE5hbWUpO1xuICAgIHRoaXMudG9NZWFzdXJlID0gdGhpcy5nZXRWYWx1ZShsYXllci50b01lYXN1cmVGaWVsZE5hbWUpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShcbiAgICBsYXllcjogRXZlbnRMYXllcixcbiAgICBwcm9wZXJ0aWVzOiB7IFtuYW1lOiBzdHJpbmddOiBhbnk7IH0gPSB7fSxcbiAgICBnZW9tZXRyeTogUG9pbnQgfCBMaW5lU3RyaW5nIHwgTXVsdGlMaW5lU3RyaW5nID0gbnVsbFxuICApOiBFdmVudEZlYXR1cmUge1xuICAgIGNvbnN0IGZlYXR1cmU6IEZlYXR1cmUgPSB0b0ZlYXR1cmUocHJvcGVydGllcywgZ2VvbWV0cnkgYXMgR2VvbWV0cnkpO1xuICAgIHJldHVybiBuZXcgRXZlbnRGZWF0dXJlKGZlYXR1cmUsIGxheWVyKTtcbiAgfVxuXG4gIHNldFJvdXRlSWQocm91dGVJZDogc3RyaW5nKTogdGhpcyB7XG4gICAgdGhpcy5yb3V0ZUlkID0gcm91dGVJZDtcbiAgICByZXR1cm4gdGhpcy5zZXRWYWx1ZShyb3V0ZUlkLCB0aGlzLmxheWVyLnJvdXRlSWRGaWVsZE5hbWUpO1xuICB9XG5cbiAgc2V0RnJvbU1lYXN1cmUobWVhc3VyZTogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy5mcm9tTWVhc3VyZSA9IG1lYXN1cmU7XG4gICAgcmV0dXJuIHRoaXMuc2V0VmFsdWUodGhpcy5sYXllci5mcm9tTWVhc3VyZUZpZWxkTmFtZSwgbWVhc3VyZSk7XG4gIH1cblxuICBzZXRUb01lYXN1cmUobWVhc3VyZTogbnVtYmVyKTogdGhpcyB7XG4gICAgaWYgKCF0aGlzLmlzTGluZWFyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgdG8gbWVhc3VyZSBmb3IgYSBwb2ludC1iYXNlZCBmZWF0dXJlJyk7XG4gICAgfVxuXG4gICAgdGhpcy50b01lYXN1cmUgPSBtZWFzdXJlO1xuICAgIHJldHVybiB0aGlzLnNldFZhbHVlKHRoaXMubGF5ZXIudG9NZWFzdXJlRmllbGROYW1lLCBtZWFzdXJlKTtcbiAgfVxuXG4gIHNldE1lYXN1cmVFeHRlbnQoZnJvbU1lYXN1cmU6IG51bWJlciwgdG9NZWFzdXJlOiBudW1iZXIpOiB0aGlzIHtcbiAgICByZXR1cm4gdGhpc1xuICAgICAgLnNldEZyb21NZWFzdXJlKGZyb21NZWFzdXJlKVxuICAgICAgLnNldFRvTWVhc3VyZSh0b01lYXN1cmUpO1xuICB9XG5cbiAgY2xvbmUoKTogRXZlbnRGZWF0dXJlIHtcbiAgICBjb25zdCBjb3B5RmVhdHVyZSA9IGNsb25lKHRoaXMudG9GZWF0dXJlKCkpO1xuICAgIHJldHVybiBuZXcgRXZlbnRGZWF0dXJlKGNvcHlGZWF0dXJlLCB0aGlzLmxheWVyKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRHZW9tZXRyeVR5cGVQcm9wZXJ0aWVzKCk6IHRoaXMge1xuICAgIHRoaXMuaXNMaW5lYXIgPSBCb29sZWFuKHRoaXMubGF5ZXIudG9NZWFzdXJlRmllbGROYW1lKTtcbiAgICB0aGlzLmlzUG9pbnQgPSAhdGhpcy5pc0xpbmVhcjtcbiAgICB0aGlzLmlzUG9seWdvbiA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iXX0=