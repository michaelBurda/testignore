/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// TSS.
import { LrsFeature } from '../lrs-feature';
import { toFeature } from '../feature';
import { isPolygon } from '../../geometry/geometry/is-polygon.function';
import { clone } from '../../core/clone/clone.function';
var RedlineFeature = /** @class */ (function (_super) {
    tslib_1.__extends(RedlineFeature, _super);
    function RedlineFeature(feature, layer) {
        var _this = _super.call(this, feature, layer) || this;
        _this.routeId = _this.getValue(layer.routeIdFieldName);
        _this.fromMeasure = _this.getValue(layer.fromMeasureFieldName);
        _this.toMeasure = _this.getValue(layer.toMeasureFieldName);
        _this.isLinear = Boolean(layer.toMeasureFieldName);
        return _this;
    }
    /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    RedlineFeature.create = /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    function (layer, properties, geometry) {
        if (properties === void 0) { properties = {}; }
        if (geometry === void 0) { geometry = null; }
        /** @type {?} */
        var feature = toFeature(properties, (/** @type {?} */ (geometry)));
        return new RedlineFeature(feature, layer);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    RedlineFeature.prototype.setFromMeasure = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    function (measure) {
        (/** @type {?} */ (this)).fromMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.fromMeasureFieldName, measure);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    RedlineFeature.prototype.setToMeasure = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    function (measure) {
        if (!(/** @type {?} */ (this)).isLinear) {
            throw new Error('Cannot set to measure for a point-based feature');
        }
        (/** @type {?} */ (this)).toMeasure = measure;
        return (/** @type {?} */ (this)).setValue((/** @type {?} */ (this)).layer.toMeasureFieldName, measure);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @return {THIS}
     */
    RedlineFeature.prototype.setMeasureExtent = /**
     * @template THIS
     * @this {THIS}
     * @param {?} fromMeasure
     * @param {?} toMeasure
     * @return {THIS}
     */
    function (fromMeasure, toMeasure) {
        return (/** @type {?} */ (this)).setFromMeasure(fromMeasure)
            .setToMeasure(toMeasure);
    };
    /**
     * @return {?}
     */
    RedlineFeature.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copyFeature = clone(this.toFeature());
        return new RedlineFeature(copyFeature, this.layer);
    };
    /**
     * @protected
     * @return {?}
     */
    RedlineFeature.prototype.isGeometryTypeValid = /**
     * @protected
     * @return {?}
     */
    function () {
        return isPolygon(this.geometry) || _super.prototype.isGeometryTypeValid.call(this);
    };
    return RedlineFeature;
}(LrsFeature));
export { RedlineFeature };
if (false) {
    /** @type {?} */
    RedlineFeature.prototype.layer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkbGluZS1mZWF0dXJlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbHJzL3JlZGxpbmVzL3JlZGxpbmUtZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV2QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFFeEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBR3hEO0lBQW9DLDBDQUFVO0lBRzVDLHdCQUFZLE9BQWdCLEVBQUUsS0FBbUI7UUFBakQsWUFDRSxrQkFBTSxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBTXRCO1FBSkMsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3JELEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM3RCxLQUFJLENBQUMsU0FBUyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDekQsS0FBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7O0lBQ3BELENBQUM7Ozs7Ozs7SUFFTSxxQkFBTTs7Ozs7O0lBQWIsVUFDRSxLQUFtQixFQUNuQixVQUF5QyxFQUN6QyxRQUFxRDtRQURyRCwyQkFBQSxFQUFBLGVBQXlDO1FBQ3pDLHlCQUFBLEVBQUEsZUFBcUQ7O1lBRS9DLE9BQU8sR0FBWSxTQUFTLENBQUMsVUFBVSxFQUFFLG1CQUFBLFFBQVEsRUFBWSxDQUFDO1FBQ3BFLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7Ozs7SUFFRCx1Q0FBYzs7Ozs7O0lBQWQsVUFBZSxPQUFlO1FBQzVCLG1CQUFBLElBQUksRUFBQSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7UUFDM0IsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7Ozs7SUFFRCxxQ0FBWTs7Ozs7O0lBQVosVUFBYSxPQUFlO1FBQzFCLElBQUksQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxRQUFRLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsbUJBQUEsSUFBSSxFQUFBLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUN6QixPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDLFFBQVEsQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7Ozs7Ozs7SUFFRCx5Q0FBZ0I7Ozs7Ozs7SUFBaEIsVUFBaUIsV0FBbUIsRUFBRSxTQUFpQjtRQUNyRCxPQUFPLG1CQUFBLElBQUksRUFBQSxDQUNSLGNBQWMsQ0FBQyxXQUFXLENBQUM7YUFDM0IsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCw4QkFBSzs7O0lBQUw7O1lBQ1EsV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLGNBQWMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7Ozs7O0lBRVMsNENBQW1COzs7O0lBQTdCO1FBQ0UsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7SUFDakUsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQWpERCxDQUFvQyxVQUFVLEdBaUQ3Qzs7OztJQWhEQywrQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAzcmQgUGFydHkuXG5pbXBvcnQgeyBGZWF0dXJlLCBHZW9tZXRyeSwgTGluZVN0cmluZywgUG9pbnQsIE11bHRpTGluZVN0cmluZyB9IGZyb20gJ2dlb2pzb24nO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBMcnNGZWF0dXJlIH0gZnJvbSAnLi4vbHJzLWZlYXR1cmUnO1xuaW1wb3J0IHsgTHJzUmVmZXJlbmNlRmVhdHVyZSB9IGZyb20gJy4uL2xycy1yZWZlcmVuY2UtZmVhdHVyZSc7XG5pbXBvcnQgeyB0b0ZlYXR1cmUgfSBmcm9tICcuLi9mZWF0dXJlJztcbmltcG9ydCB7IFJlZGxpbmVMYXllciB9IGZyb20gJy4vcmVkbGluZS1sYXllcic7XG5pbXBvcnQgeyBpc1BvbHlnb24gfSBmcm9tICcuLi8uLi9nZW9tZXRyeS9nZW9tZXRyeS9pcy1wb2x5Z29uLmZ1bmN0aW9uJztcbmltcG9ydCB7IENsb25lYWJsZSB9IGZyb20gJy4uLy4uL2NvcmUvY2xvbmUvY2xvbmVhYmxlJztcbmltcG9ydCB7IGNsb25lIH0gZnJvbSAnLi4vLi4vY29yZS9jbG9uZS9jbG9uZS5mdW5jdGlvbic7XG5cblxuZXhwb3J0IGNsYXNzIFJlZGxpbmVGZWF0dXJlIGV4dGVuZHMgTHJzRmVhdHVyZSBpbXBsZW1lbnRzIExyc1JlZmVyZW5jZUZlYXR1cmUsIENsb25lYWJsZTxSZWRsaW5lRmVhdHVyZT4ge1xuICBsYXllcjogUmVkbGluZUxheWVyO1xuXG4gIGNvbnN0cnVjdG9yKGZlYXR1cmU6IEZlYXR1cmUsIGxheWVyOiBSZWRsaW5lTGF5ZXIpIHtcbiAgICBzdXBlcihmZWF0dXJlLCBsYXllcik7XG5cbiAgICB0aGlzLnJvdXRlSWQgPSB0aGlzLmdldFZhbHVlKGxheWVyLnJvdXRlSWRGaWVsZE5hbWUpO1xuICAgIHRoaXMuZnJvbU1lYXN1cmUgPSB0aGlzLmdldFZhbHVlKGxheWVyLmZyb21NZWFzdXJlRmllbGROYW1lKTtcbiAgICB0aGlzLnRvTWVhc3VyZSA9IHRoaXMuZ2V0VmFsdWUobGF5ZXIudG9NZWFzdXJlRmllbGROYW1lKTtcbiAgICB0aGlzLmlzTGluZWFyID0gQm9vbGVhbihsYXllci50b01lYXN1cmVGaWVsZE5hbWUpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShcbiAgICBsYXllcjogUmVkbGluZUxheWVyLFxuICAgIHByb3BlcnRpZXM6IHsgW25hbWU6IHN0cmluZ106IGFueTsgfSA9IHt9LFxuICAgIGdlb21ldHJ5OiBQb2ludCB8IExpbmVTdHJpbmcgfCBNdWx0aUxpbmVTdHJpbmcgPSBudWxsXG4gICk6IFJlZGxpbmVGZWF0dXJlIHtcbiAgICBjb25zdCBmZWF0dXJlOiBGZWF0dXJlID0gdG9GZWF0dXJlKHByb3BlcnRpZXMsIGdlb21ldHJ5IGFzIEdlb21ldHJ5KTtcbiAgICByZXR1cm4gbmV3IFJlZGxpbmVGZWF0dXJlKGZlYXR1cmUsIGxheWVyKTtcbiAgfVxuXG4gIHNldEZyb21NZWFzdXJlKG1lYXN1cmU6IG51bWJlcik6IHRoaXMge1xuICAgIHRoaXMuZnJvbU1lYXN1cmUgPSBtZWFzdXJlO1xuICAgIHJldHVybiB0aGlzLnNldFZhbHVlKHRoaXMubGF5ZXIuZnJvbU1lYXN1cmVGaWVsZE5hbWUsIG1lYXN1cmUpO1xuICB9XG5cbiAgc2V0VG9NZWFzdXJlKG1lYXN1cmU6IG51bWJlcik6IHRoaXMge1xuICAgIGlmICghdGhpcy5pc0xpbmVhcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2V0IHRvIG1lYXN1cmUgZm9yIGEgcG9pbnQtYmFzZWQgZmVhdHVyZScpO1xuICAgIH1cblxuICAgIHRoaXMudG9NZWFzdXJlID0gbWVhc3VyZTtcbiAgICByZXR1cm4gdGhpcy5zZXRWYWx1ZSh0aGlzLmxheWVyLnRvTWVhc3VyZUZpZWxkTmFtZSwgbWVhc3VyZSk7XG4gIH1cblxuICBzZXRNZWFzdXJlRXh0ZW50KGZyb21NZWFzdXJlOiBudW1iZXIsIHRvTWVhc3VyZTogbnVtYmVyKTogdGhpcyB7XG4gICAgcmV0dXJuIHRoaXNcbiAgICAgIC5zZXRGcm9tTWVhc3VyZShmcm9tTWVhc3VyZSlcbiAgICAgIC5zZXRUb01lYXN1cmUodG9NZWFzdXJlKTtcbiAgfVxuXG4gIGNsb25lKCk6IFJlZGxpbmVGZWF0dXJlIHtcbiAgICBjb25zdCBjb3B5RmVhdHVyZSA9IGNsb25lKHRoaXMudG9GZWF0dXJlKCkpO1xuICAgIHJldHVybiBuZXcgUmVkbGluZUZlYXR1cmUoY29weUZlYXR1cmUsIHRoaXMubGF5ZXIpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGlzR2VvbWV0cnlUeXBlVmFsaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzUG9seWdvbih0aGlzLmdlb21ldHJ5KSB8fCBzdXBlci5pc0dlb21ldHJ5VHlwZVZhbGlkKCk7XG4gIH1cbn1cbiJdfQ==