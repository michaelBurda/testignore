/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { forkJoin, of } from 'rxjs';
import { map, tap, mergeMap } from 'rxjs/operators';
import { LrsMetadata } from './lrs-metadata';
import { MapServerMetadata } from '../maps/map-server-metadata';
import { mergeLrsMetadataSources } from './lrs-metadata-merge';
import { isString } from '../core/type-check/is-string.function';
var LrsMetadataRetriever = /** @class */ (function () {
    function LrsMetadataRetriever(http, mapServer, dataSourceService, dataSourceLrsMetadataService, notify, log) {
        this.http = http;
        this.mapServer = mapServer;
        this.dataSourceService = dataSourceService;
        this.dataSourceLrsMetadataService = dataSourceLrsMetadataService;
        this.notify = notify;
        this.log = log;
    }
    /**
     * @param {?} dataSource
     * @return {?}
     */
    LrsMetadataRetriever.prototype.withDataSource = /**
     * @param {?} dataSource
     * @return {?}
     */
    function (dataSource) {
        if (isString(dataSource)) {
            this.dataSourceId = (/** @type {?} */ (dataSource));
        }
        else {
            this.dataSource = (/** @type {?} */ (dataSource));
            this.dataSourceId = this.dataSource.id;
        }
        return this;
    };
    /**
     * @param {?} lrsMeta
     * @return {?}
     */
    LrsMetadataRetriever.prototype.withLrsMetadata = /**
     * @param {?} lrsMeta
     * @return {?}
     */
    function (lrsMeta) {
        this.dataSourceLrsMetadata = lrsMeta;
        return this;
    };
    /**
     * @return {?}
     */
    LrsMetadataRetriever.prototype.retrieve = /**
     * @return {?}
     */
    function () {
        if (!this.dataSourceId) {
            throw new Error('A data source ID must be supplied');
        }
        return of(null)
            .pipe(mergeMap(this.getDataSource.bind(this)), mergeMap(this.getDataSourceLrsMetadata.bind(this)), mergeMap(this.getMapServiceLayers.bind(this)), mergeMap(this.getMapServiceLrsMetadata.bind(this)), mergeMap(this.mergeAll.bind(this)));
    };
    /**
     * @private
     * @return {?}
     */
    LrsMetadataRetriever.prototype.getDataSource = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observable = this.dataSource
            ? of(this.dataSource)
            : this.dataSourceService
                .get(this.dataSourceId)
                .pipe(tap((/**
             * @param {?} dataSource
             * @return {?}
             */
            function (dataSource) { return _this.dataSource = dataSource; })));
        return this.notify
            .with(observable)
            .error("Failed to retrieve data source by ID: " + this.dataSourceId + ": {error}")
            .source;
    };
    /**
     * @private
     * @return {?}
     */
    LrsMetadataRetriever.prototype.getDataSourceLrsMetadata = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observable = this.dataSourceLrsMetadata
            ? of(this.dataSourceLrsMetadata)
            : this.dataSourceLrsMetadataService
                .get(this.dataSourceId)
                .pipe(tap((/**
             * @param {?} meta
             * @return {?}
             */
            function (meta) {
                _this.dataSourceLrsMetadata = new LrsMetadata(_this.dataSource)
                    .assign(meta);
                // NOTE: If we don't recieve any data source LRS metadata back then we assume that
                // the map service has LRS capabiliities - otherwise we have no LRS server data available.
                if (!meta) {
                    _this.dataSourceLrsMetadata.serviceHasLrsMeta = true;
                }
            })));
        return this.notify
            .with(observable)
            .error("Failed to retrieve data source LRS metadata by data source ID: " + this.dataSourceId + ": {error}")
            .source;
    };
    /**
     * @private
     * @return {?}
     */
    LrsMetadataRetriever.prototype.getMapServiceLayers = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observable = this.mapServerMetadata || !this.dataSource.serviceUrl
            ? of(this.mapServerMetadata)
            : this.mapServer
                .getMapLayers(this.dataSource.serviceUrl)
                .pipe(tap((/**
             * @param {?} meta
             * @return {?}
             */
            function (meta) { return _this.mapServerMetadata = new MapServerMetadata().assign(meta); })));
        return this.notify
            .with(observable)
            .error("Failed to retrieve map service metadata from URL: " + this.dataSource.serviceUrl + ": {error}")
            .source;
    };
    /**
     * @private
     * @return {?}
     */
    LrsMetadataRetriever.prototype.getMapServiceLrsMetadata = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observable = !this.dataSource.serviceUrl || !this.dataSourceLrsMetadata.serviceHasLrsMeta
            ? of(this.mapServerLrsMetadata)
            : forkJoin([
                this.mapServer.getLrsServer(this.dataSource.serviceUrl),
                this.mapServer.getLrsLayers(this.dataSource.serviceUrl)
            ])
                .pipe(map((/**
             * @param {?} meta
             * @return {?}
             */
            function (meta) {
                var _a = tslib_1.__read(meta, 2), lrsServerMeta = _a[0], lrsLayersMeta = _a[1];
                /** @type {?} */
                var lrsMetadata = Object.assign({}, lrsServerMeta, lrsLayersMeta);
                /** @type {?} */
                var mapServerLrsMetadata = new LrsMetadata().assign(lrsMetadata);
                return mapServerLrsMetadata;
            })), tap((/**
             * @param {?} meta
             * @return {?}
             */
            function (meta) { return _this.mapServerLrsMetadata = new LrsMetadata().assign(meta); })));
        return this.notify
            .with(observable)
            .error("Failed to retrieve map service LRS metadata from URL: " + this.dataSource.serviceUrl + ": {error}")
            .source;
    };
    /**
     * @private
     * @return {?}
     */
    LrsMetadataRetriever.prototype.mergeAll = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fullLrsMeta = mergeLrsMetadataSources(this.dataSource, this.dataSourceLrsMetadata, this.mapServerLrsMetadata, this.mapServerMetadata);
        return of(fullLrsMeta);
    };
    return LrsMetadataRetriever;
}());
export { LrsMetadataRetriever };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.dataSourceId;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.dataSourceLrsMetadata;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.mapServerMetadata;
    /**
     * @type {?}
     * @private
     */
    LrsMetadataRetriever.prototype.mapServerLrsMetadata;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.mapServer;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.dataSourceService;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.dataSourceLrsMetadataService;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    LrsMetadataRetriever.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,