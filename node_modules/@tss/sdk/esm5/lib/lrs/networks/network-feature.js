/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// TSS.
import { LrsFeature } from '../lrs-feature';
import { toFeature } from '../feature';
import { getPoint } from '../../geometry/line/get-point.function';
import { getMeasure } from '../../geometry/line/get-measure.function';
import { WGS_84_SRID } from '../../geometry/geometry.constants';
import { clone } from '../../core/clone/clone.function';
var NetworkFeature = /** @class */ (function (_super) {
    tslib_1.__extends(NetworkFeature, _super);
    function NetworkFeature(feature, layer, spatialReferenceId) {
        if (spatialReferenceId === void 0) { spatialReferenceId = WGS_84_SRID; }
        var _this = _super.call(this, feature, layer, spatialReferenceId) || this;
        _this.routeId = _this.getValue(layer.compositeRouteIdFieldName);
        _this.displayValue = _this.displayValue || _this.routeId;
        _this.setMeasureFromGeometry();
        return _this;
    }
    /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    NetworkFeature.create = /**
     * @param {?} layer
     * @param {?=} properties
     * @param {?=} geometry
     * @return {?}
     */
    function (layer, properties, geometry) {
        if (properties === void 0) { properties = {}; }
        if (geometry === void 0) { geometry = null; }
        /** @type {?} */
        var feature = toFeature(properties, (/** @type {?} */ (geometry)));
        return new NetworkFeature(feature, layer);
    };
    /**
     * @param {?} point
     * @return {?}
     */
    NetworkFeature.prototype.getMeasure = /**
     * @param {?} point
     * @return {?}
     */
    function (point) {
        return getMeasure((/** @type {?} */ (this.geometry)), point);
    };
    /**
     * @param {?} measure
     * @return {?}
     */
    NetworkFeature.prototype.getPoint = /**
     * @param {?} measure
     * @return {?}
     */
    function (measure) {
        return getPoint((/** @type {?} */ (this.geometry)), measure);
    };
    /**
     * @return {?}
     */
    NetworkFeature.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copyFeature = clone(this.toFeature());
        return new NetworkFeature(copyFeature, this.layer);
    };
    return NetworkFeature;
}(LrsFeature));
export { NetworkFeature };
if (false) {
    /** @type {?} */
    NetworkFeature.prototype.layer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay1mZWF0dXJlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbHJzL25ldHdvcmtzL25ldHdvcmstZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUd2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDbEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUVoRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFHeEQ7SUFBb0MsMENBQVU7SUFHNUMsd0JBQVksT0FBZ0IsRUFBRSxLQUFtQixFQUFFLGtCQUFnQztRQUFoQyxtQ0FBQSxFQUFBLGdDQUFnQztRQUFuRixZQUNFLGtCQUFNLE9BQU8sRUFBRSxLQUFLLEVBQUUsa0JBQWtCLENBQUMsU0FLMUM7UUFIQyxLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDOUQsS0FBSSxDQUFDLFlBQVksR0FBRyxLQUFJLENBQUMsWUFBWSxJQUFJLEtBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEQsS0FBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7O0lBQ2hDLENBQUM7Ozs7Ozs7SUFFTSxxQkFBTTs7Ozs7O0lBQWIsVUFDRSxLQUFtQixFQUNuQixVQUF5QyxFQUN6QyxRQUE2QztRQUQ3QywyQkFBQSxFQUFBLGVBQXlDO1FBQ3pDLHlCQUFBLEVBQUEsZUFBNkM7O1lBRXZDLE9BQU8sR0FBWSxTQUFTLENBQUMsVUFBVSxFQUFFLG1CQUFBLFFBQVEsRUFBWSxDQUFDO1FBQ3BFLE9BQU8sSUFBSSxjQUFjLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBRUQsbUNBQVU7Ozs7SUFBVixVQUFXLEtBQWtCO1FBQzNCLE9BQU8sVUFBVSxDQUFDLG1CQUFBLElBQUksQ0FBQyxRQUFRLEVBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7SUFFRCxpQ0FBUTs7OztJQUFSLFVBQVMsT0FBZTtRQUN0QixPQUFPLFFBQVEsQ0FBQyxtQkFBQSxJQUFJLENBQUMsUUFBUSxFQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFELENBQUM7Ozs7SUFFRCw4QkFBSzs7O0lBQUw7O1lBQ1EsV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsT0FBTyxJQUFJLGNBQWMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUFoQ0QsQ0FBb0MsVUFBVSxHQWdDN0M7Ozs7SUEvQkMsK0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgRmVhdHVyZSwgTGluZVN0cmluZywgTXVsdGlMaW5lU3RyaW5nLCBHZW9tZXRyeSB9IGZyb20gJ2dlb2pzb24nO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBMcnNGZWF0dXJlIH0gZnJvbSAnLi4vbHJzLWZlYXR1cmUnO1xuaW1wb3J0IHsgTmV0d29ya0xheWVyIH0gZnJvbSAnLi9uZXR3b3JrLWxheWVyJztcbmltcG9ydCB7IHRvRmVhdHVyZSB9IGZyb20gJy4uL2ZlYXR1cmUnO1xuaW1wb3J0IHsgU2luZ2xlUG9pbnQgfSBmcm9tICcuLi8uLi9nZW9tZXRyeS9wb2ludC9zaW5nbGUtcG9pbnQnO1xuaW1wb3J0IHsgTGluZUdlb21ldHJ5IH0gZnJvbSAnLi4vLi4vZ2VvbWV0cnkvbGluZS9saW5lLWdlb21ldHJ5JztcbmltcG9ydCB7IGdldFBvaW50IH0gZnJvbSAnLi4vLi4vZ2VvbWV0cnkvbGluZS9nZXQtcG9pbnQuZnVuY3Rpb24nO1xuaW1wb3J0IHsgZ2V0TWVhc3VyZSB9IGZyb20gJy4uLy4uL2dlb21ldHJ5L2xpbmUvZ2V0LW1lYXN1cmUuZnVuY3Rpb24nO1xuaW1wb3J0IHsgV0dTXzg0X1NSSUQgfSBmcm9tICcuLi8uLi9nZW9tZXRyeS9nZW9tZXRyeS5jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2xvbmVhYmxlIH0gZnJvbSAnLi4vLi4vY29yZS9jbG9uZS9jbG9uZWFibGUnO1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tICcuLi8uLi9jb3JlL2Nsb25lL2Nsb25lLmZ1bmN0aW9uJztcblxuXG5leHBvcnQgY2xhc3MgTmV0d29ya0ZlYXR1cmUgZXh0ZW5kcyBMcnNGZWF0dXJlIGltcGxlbWVudHMgQ2xvbmVhYmxlPE5ldHdvcmtGZWF0dXJlPiB7XG4gIGxheWVyOiBOZXR3b3JrTGF5ZXI7XG5cbiAgY29uc3RydWN0b3IoZmVhdHVyZTogRmVhdHVyZSwgbGF5ZXI6IE5ldHdvcmtMYXllciwgc3BhdGlhbFJlZmVyZW5jZUlkID0gV0dTXzg0X1NSSUQpIHtcbiAgICBzdXBlcihmZWF0dXJlLCBsYXllciwgc3BhdGlhbFJlZmVyZW5jZUlkKTtcblxuICAgIHRoaXMucm91dGVJZCA9IHRoaXMuZ2V0VmFsdWUobGF5ZXIuY29tcG9zaXRlUm91dGVJZEZpZWxkTmFtZSk7XG4gICAgdGhpcy5kaXNwbGF5VmFsdWUgPSB0aGlzLmRpc3BsYXlWYWx1ZSB8fCB0aGlzLnJvdXRlSWQ7XG4gICAgdGhpcy5zZXRNZWFzdXJlRnJvbUdlb21ldHJ5KCk7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKFxuICAgIGxheWVyOiBOZXR3b3JrTGF5ZXIsXG4gICAgcHJvcGVydGllczogeyBbbmFtZTogc3RyaW5nXTogYW55OyB9ID0ge30sXG4gICAgZ2VvbWV0cnk6IExpbmVTdHJpbmcgfCBNdWx0aUxpbmVTdHJpbmcgPSBudWxsXG4gICk6IE5ldHdvcmtGZWF0dXJlIHtcbiAgICBjb25zdCBmZWF0dXJlOiBGZWF0dXJlID0gdG9GZWF0dXJlKHByb3BlcnRpZXMsIGdlb21ldHJ5IGFzIEdlb21ldHJ5KTtcbiAgICByZXR1cm4gbmV3IE5ldHdvcmtGZWF0dXJlKGZlYXR1cmUsIGxheWVyKTtcbiAgfVxuXG4gIGdldE1lYXN1cmUocG9pbnQ6IFNpbmdsZVBvaW50KTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0TWVhc3VyZSh0aGlzLmdlb21ldHJ5IGFzIExpbmVHZW9tZXRyeSwgcG9pbnQpO1xuICB9XG5cbiAgZ2V0UG9pbnQobWVhc3VyZTogbnVtYmVyKTogU2luZ2xlUG9pbnQge1xuICAgIHJldHVybiBnZXRQb2ludCh0aGlzLmdlb21ldHJ5IGFzIExpbmVHZW9tZXRyeSwgbWVhc3VyZSk7XG4gIH1cblxuICBjbG9uZSgpOiBOZXR3b3JrRmVhdHVyZSB7XG4gICAgY29uc3QgY29weUZlYXR1cmUgPSBjbG9uZSh0aGlzLnRvRmVhdHVyZSgpKTtcbiAgICByZXR1cm4gbmV3IE5ldHdvcmtGZWF0dXJlKGNvcHlGZWF0dXJlLCB0aGlzLmxheWVyKTtcbiAgfVxufVxuIl19