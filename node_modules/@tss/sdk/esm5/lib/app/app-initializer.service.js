/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Router } from '@angular/router';
import { Injector, Injectable } from '@angular/core';
import { CoreConfig } from '../core/core.config';
import { Logger } from '../core/logging/logger.service';
import { PersistentStorage } from '../core/storage/persistent-storage.service';
import { getQueryParams } from '../core/url/get-query-params.function';
import { getFirstHashRoutePath } from '../core/url/get-first-hash-route-path.function';
import { getFullUrl } from '../core/url/get-full-url.function';
import { isDate } from '../core/type-check/is-date.function';
import { toPrimitiveType } from '../core/type-conversion/to-primitive-type.function';
import { lowerCaseFirst } from '../core/formatting/lower-case-first.function';
import { isValue } from '../core/type-check/is-value.function';
import { setValue } from '../core/object/set-value.function';
import { AuthService } from '../security/auth.service';
import { SecurityConfig } from '../security/security-config';
import { RoleManagerService } from '../security/role-manager.service';
import { AppProfileService } from './app-profile.service';
import { AppConfig } from './app.config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../security/auth.service";
import * as i3 from "./app-profile.service";
import * as i4 from "../core/logging/logger.service";
import * as i5 from "./app.config";
import * as i6 from "../core/storage/persistent-storage.service";
import * as i7 from "../security/security-config";
import * as i8 from "../security/role-manager.service";
/**
 * @record
 */
function ModuleConfigInstanceMap() { }
if (false) {
    /** @type {?} */
    ModuleConfigInstanceMap.prototype.instance;
    /** @type {?} */
    ModuleConfigInstanceMap.prototype.config;
}
/**
 * Application initialization service that is responsible for bootstrapping
 * the application.
 */
var AppInitializerService = /** @class */ (function () {
    function AppInitializerService(router, auth, appProfiles, log, config, storage, securityConfig, roleMgr, injector) {
        var _this = this;
        this.router = router;
        this.auth = auth;
        this.appProfiles = appProfiles;
        this.log = log;
        this.config = config;
        this.storage = storage;
        this.securityConfig = securityConfig;
        this.roleMgr = roleMgr;
        this.injector = injector;
        this.ready = false;
        this.loading = false;
        this.moduleConfigInstances = new Map();
        this.queryParameters = getQueryParams();
        this.onReady = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.resolveFn = resolve;
            _this.rejectFn = reject;
        }));
    }
    /**
     * Initializes/bootstraps a standard TSS application.
     */
    /**
     * Initializes/bootstraps a standard TSS application.
     * @return {?}
     */
    AppInitializerService.prototype.initialize = /**
     * Initializes/bootstraps a standard TSS application.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var appId = this.config.appId;
        var _a = tslib_1.__read(this.router.url.split('/'), 1), firstRoutePath = _a[0];
        /** @type {?} */
        var profileId = this.queryParameters.profileId
            || firstRoutePath
            || getFirstHashRoutePath(getFullUrl())
            || this.config.defaultProfileId;
        // We override module configurations here because the user may be trying to debug the session. The
        // override has to happen again at the end of the process to override any settings that may have
        // been set through the app initialization process.
        this.overrideModuleConfigurationsFromQueryParams();
        this.log.debug("Initializing application with profile ID: " + profileId);
        // We need to try and read any stored security token before we make
        // a request to get profile info, so that the request is authenticated.
        this.auth.loadStoredToken();
        this.populateModuleConfigInstances();
        if (!this.config.queryProfile || !this.config.hasServiceUrl) {
            this.config.profile = {
                name: '',
                appId: appId,
                id: profileId,
            };
            this.log.debug(this.config.hasServiceUrl
                ? "Profile query skipped due to configuration option"
                : "No service URL configured, can't retrieve profile details - skipping profile retrieval");
            this.overrideModuleConfigurationsFromQueryParams();
            this.ready = true;
            this.resolveFn(this.config.profile);
        }
        else {
            this.loading = true;
            // We need to try and read any stored security token before we make
            // a request to get profile info, so that the request is authenticated.
            this.queryProfile(profileId)
                .then((/**
             * @param {?} profile
             * @return {?}
             */
            function (profile) { return _this.resolveFn(profile); }))
                .catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                if (_this.config.continueOnAppBootstrapError) {
                    _this.resolveFn(_this.config.profile);
                }
                else {
                    _this.rejectFn(err);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} profileId
     * @return {?}
     */
    AppInitializerService.prototype.queryProfile = /**
     * @private
     * @param {?} profileId
     * @return {?}
     */
    function (profileId) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.appProfiles.get(profileId)
                .subscribe((/**
             * @param {?} profile
             * @return {?}
             */
            function (profile) {
                if (!profile) {
                    return reject("No profile found with ID '" + profileId + "'");
                }
                _this.config.profileId = profile.id;
                _this.config.profile = profile;
                _this.checkTokenInvalidationDate();
                _this.applyModuleConfigurations();
                _this.overrideModuleConfigurationsFromQueryParams();
                _this.retrieveUserAccount()
                    .then((/**
                 * @return {?}
                 */
                function () {
                    _this.configureRoleManager();
                    _this.ready = true;
                    _this.loading = false;
                    resolve(profile);
                }))
                    .catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    _this.loading = false;
                    reject(err);
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.loading = false;
                _this.log.error("Failed to retrieve application profile with app ID '" + _this.config.appId + "' and ID '" + profileId + "'");
                reject(err);
            }));
        }));
    };
    /**
     * Gets the date of the cached "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     */
    /**
     * Gets the date of the cached "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     * @private
     * @return {?}
     */
    AppInitializerService.prototype.getCachedTokenInvalidationDate = /**
     * Gets the date of the cached "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     * @private
     * @return {?}
     */
    function () {
        return new Date(this.storage.get(this.securityConfig.tokenInvalidationDateLookup));
    };
    /**
     * Caches the "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     */
    /**
     * Caches the "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     * @private
     * @param {?=} setDate
     * @return {?}
     */
    AppInitializerService.prototype.setCachedTokenExpireDate = /**
     * Caches the "invalidation" date.
     * The invalidation date is used to let the server force users to re-authenticate.
     * @private
     * @param {?=} setDate
     * @return {?}
     */
    function (setDate) {
        this.log.debug("Setting cached token invalidation date: " + setDate);
        if (setDate) {
            this.log.debug("Setting token invalidation date to: " + setDate);
            this.storage.set(this.securityConfig.tokenInvalidationDateLookup, setDate);
        }
        else {
            this.storage.remove(this.securityConfig.tokenInvalidationDateLookup);
        }
    };
    /**
     * Compares the cached token validation data with the invalidation date from the server.
     * If the invalidation date from the server is new than the cached date, then the user
     * must be forcibly signed out.
     */
    /**
     * Compares the cached token validation data with the invalidation date from the server.
     * If the invalidation date from the server is new than the cached date, then the user
     * must be forcibly signed out.
     * @private
     * @return {?}
     */
    AppInitializerService.prototype.checkTokenInvalidationDate = /**
     * Compares the cached token validation data with the invalidation date from the server.
     * If the invalidation date from the server is new than the cached date, then the user
     * must be forcibly signed out.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tokenExpireDate;
        /** @type {?} */
        var siteInfo = this.config.profile && this.config.profile.app && this.config.profile.app.siteInfo
            ? this.config.profile.app.siteInfo
            : null;
        if (siteInfo && siteInfo[AppInitializerService.tokenExpireDateKey]) {
            /** @type {?} */
            var lastTokenInvalidateDate = this.getCachedTokenInvalidationDate();
            tokenExpireDate = new Date(siteInfo[AppInitializerService.tokenExpireDateKey]);
            // Note, we are setting milliseconds to 0 because we don't care about that level of accuracy.
            // Also, the "setMilliseconds" method returns the "timestamp" so we can just compare those two results.
            /** @type {?} */
            var lastTokenValidationDatesMatch = isDate(lastTokenInvalidateDate) && isDate(tokenExpireDate)
                ? lastTokenInvalidateDate.setMilliseconds(0) === tokenExpireDate.setMilliseconds(0)
                : lastTokenInvalidateDate === tokenExpireDate;
            if (this.auth.account && this.auth.account.lastSignIn < tokenExpireDate && !lastTokenValidationDatesMatch) {
                this.log.info('Signing out user due to token invalidation date from security configuration');
                this.auth.onSignedOut();
            }
            else if (this.auth.account) {
                this.log.debug('User has been authenticated after the token invalidation date');
            }
            if (tokenExpireDate) {
                this.setCachedTokenExpireDate(tokenExpireDate);
            }
        }
    };
    /**
     * Retrieves the user account if the user is already signed in, logs the user out if
     * the token is expired, or refreshes the user account information - depending on
     * the configured authentication provider.
     */
    /**
     * Retrieves the user account if the user is already signed in, logs the user out if
     * the token is expired, or refreshes the user account information - depending on
     * the configured authentication provider.
     * @private
     * @return {?}
     */
    AppInitializerService.prototype.retrieveUserAccount = /**
     * Retrieves the user account if the user is already signed in, logs the user out if
     * the token is expired, or refreshes the user account information - depending on
     * the configured authentication provider.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            try {
                /** @type {?} */
                var queryingInfo = false;
                /** @type {?} */
                var app_1 = _this.config.profile && _this.config.profile.app
                    ? _this.config.profile.app : null;
                // If the local auth status says that no one is logged in, but the service is recognizing that someone is
                // logged in, then this means that authentication is happening through windows via Active Directory or some
                // other means. We need to get the user info so we can set the app "state" as "logged in".
                if (app_1 && app_1.security && !_this.auth.isAuthenticated && app_1.security.isAuthenticated) {
                    _this.log.debug('Retrieving additional user info do to authentication state');
                    queryingInfo = true;
                    _this.auth.getUserInfo().subscribe((/**
                     * @param {?} info
                     * @return {?}
                     */
                    function (info) {
                        /** @type {?} */
                        var expiresDate = new Date();
                        expiresDate.setDate(expiresDate.getDate() + app_1.security.accessTokenExpireDays);
                        _this.auth.onSignedIn(Object.assign({ '.expires': expiresDate }, info));
                        resolve(info);
                    }), (/**
                     * @param {?} err
                     * @return {?}
                     */
                    function (err) {
                        reject(err);
                    }));
                }
                else if (_this.auth.isAuthenticated && app_1.security && !app_1.security.isAuthenticated) {
                    _this.log.debug("Signing out user do to out of sync authentication state");
                    // Sign out/clear the auth cache because the server says they don't know who this is, but
                    // the client side code thinks it knows who it is.
                    _this.auth.onSignedOut();
                }
                if (!queryingInfo) {
                    _this.log.debug("No request made for additional user account info");
                    resolve(_this.auth.account);
                }
            }
            catch (e) {
                _this.log.error('Failed to do pre-verification of user on app load. {0}', e);
                reject(e);
            }
        }));
    };
    /**
     * Set module configuration properties based on overrides from an object.
     * This object can come from multiple places - such as the server or query params.
     * See: the "applyModuleConfigurations" and "overrideModuleConfigurations" methods.
     */
    /**
     * Set module configuration properties based on overrides from an object.
     * This object can come from multiple places - such as the server or query params.
     * See: the "applyModuleConfigurations" and "overrideModuleConfigurations" methods.
     * @private
     * @param {?} sourceMapping
     * @return {?}
     */
    AppInitializerService.prototype.applyModuleConfigurationsFromObject = /**
     * Set module configuration properties based on overrides from an object.
     * This object can come from multiple places - such as the server or query params.
     * See: the "applyModuleConfigurations" and "overrideModuleConfigurations" methods.
     * @private
     * @param {?} sourceMapping
     * @return {?}
     */
    function (sourceMapping) {
        var _this = this;
        sourceMapping = sourceMapping || {};
        this.moduleConfigInstances
            .forEach((/**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            /** @type {?} */
            var moduleConfigName = config.config.className;
            /** @type {?} */
            var configInstance = config.instance;
            Object.keys(sourceMapping)
                .forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                /** @type {?} */
                var value = toPrimitiveType(sourceMapping[key]);
                /** @type {?} */
                var modulePrefix = lowerCaseFirst(moduleConfigName + '.');
                /** @type {?} */
                var rootKey = key.replace(modulePrefix, '');
                if (isValue(value) && key.toLowerCase().startsWith(modulePrefix.toLowerCase())) {
                    // A config object has properties in our siteInfo object.
                    _this.log.debug("Setting " + moduleConfigName + " property '" + rootKey + "' to " + value);
                    setValue(configInstance, rootKey, value);
                }
            }));
        }));
    };
    /**
     * Set module configuration properties based on overrides from the server.
     * This functionality lets us dynamically override client side configuration
     * through the use of "App Settings" from the server.
     */
    /**
     * Set module configuration properties based on overrides from the server.
     * This functionality lets us dynamically override client side configuration
     * through the use of "App Settings" from the server.
     * @private
     * @return {?}
     */
    AppInitializerService.prototype.applyModuleConfigurations = /**
     * Set module configuration properties based on overrides from the server.
     * This functionality lets us dynamically override client side configuration
     * through the use of "App Settings" from the server.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var profile = this.config.profile;
        if (!profile || !profile.app || !profile.app.siteInfo) {
            return;
        }
        this.applyModuleConfigurationsFromObject(profile.app.siteInfo);
    };
    /**
     * Set module configuration properties based on overrides from the URL query parameters.
     * This functionality lets us dynamically override client side and server side configurations
     * by passing explicit settings through query parameters. A good use case for this is to pass
     * "coreConfig.logLevel=1" as a query parameter in production to debug an issue in a production
     * environment.
     */
    /**
     * Set module configuration properties based on overrides from the URL query parameters.
     * This functionality lets us dynamically override client side and server side configurations
     * by passing explicit settings through query parameters. A good use case for this is to pass
     * "coreConfig.logLevel=1" as a query parameter in production to debug an issue in a production
     * environment.
     * @private
     * @return {?}
     */
    AppInitializerService.prototype.overrideModuleConfigurationsFromQueryParams = /**
     * Set module configuration properties based on overrides from the URL query parameters.
     * This functionality lets us dynamically override client side and server side configurations
     * by passing explicit settings through query parameters. A good use case for this is to pass
     * "coreConfig.logLevel=1" as a query parameter in production to debug an issue in a production
     * environment.
     * @private
     * @return {?}
     */
    function () {
        if (this.config.allowQueryParamInjections) {
            this.applyModuleConfigurationsFromObject(this.queryParameters);
        }
    };
    /**
     * Instantiates instances of each configured module configuration object. Properties of
     * these module config instances will later be set based on server-side overides.
     */
    /**
     * Instantiates instances of each configured module configuration object. Properties of
     * these module config instances will later be set based on server-side overides.
     * @private
     * @return {?}
     */
    AppInitializerService.prototype.populateModuleConfigInstances = /**
     * Instantiates instances of each configured module configuration object. Properties of
     * these module config instances will later be set based on server-side overides.
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        CoreConfig.moduleConfigs
            .forEach((/**
         * @param {?} moduleAutoConfig
         * @return {?}
         */
        function (moduleAutoConfig) {
            try {
                // Reason: https://github.com/angular/angular/issues/22063
                // tslint:disable-next-line
                /** @type {?} */
                var configInstance = _this.injector.get(moduleAutoConfig.injectorToken);
                _this.moduleConfigInstances.set(moduleAutoConfig.injectorToken, {
                    instance: configInstance,
                    config: moduleAutoConfig
                });
                _this.log.debug("Created module configuration instance for: " + moduleAutoConfig.className);
                if ('serviceUrl' in configInstance || 'hasServiceUrl' in configInstance) {
                    configInstance.serviceUrl = _this.config.serviceUrl;
                }
            }
            catch (err) {
                _this.log.error("Failed to get module config: " + moduleAutoConfig.className, err);
            }
        }));
    };
    /**
     * Updates security options based on information retrieved form the application profile.
     * For example, security may be enabled or disabled, guest roles will be set, etc.
     */
    /**
     * Updates security options based on information retrieved form the application profile.
     * For example, security may be enabled or disabled, guest roles will be set, etc.
     * @private
     * @return {?}
     */
    AppInitializerService.prototype.configureRoleManager = /**
     * Updates security options based on information retrieved form the application profile.
     * For example, security may be enabled or disabled, guest roles will be set, etc.
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var security = this.config.profile && this.config.profile.app && this.config.profile.app.security
            ? this.config.profile.app.security : null;
        if (!security) {
            return;
        }
        // We want to explicitly
        if (security.hasOwnProperty('enabled')) {
            this.securityConfig.rolesEnabled = !!security.enabled;
        }
        if (!this.roleMgr.enabled) {
            this.log.warn('Security is disabled');
        }
        security.guestPrivileges = security.guestPrivileges || [];
        this.roleMgr.addRoles(security.guestPrivileges);
        this.log.info("Configured default roles (guest roles) - total of " + security.guestPrivileges.length);
        this.log.info("User has a total of " + this.roleMgr.roleCount + " roles assigned to them");
    };
    AppInitializerService.tokenExpireDateKey = 'token-expire-date';
    AppInitializerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AppInitializerService.ctorParameters = function () { return [
        { type: Router },
        { type: AuthService },
        { type: AppProfileService },
        { type: Logger },
        { type: AppConfig },
        { type: PersistentStorage },
        { type: SecurityConfig },
        { type: RoleManagerService },
        { type: Injector }
    ]; };
    /** @nocollapse */ AppInitializerService.ngInjectableDef = i0.defineInjectable({ factory: function AppInitializerService_Factory() { return new AppInitializerService(i0.inject(i1.Router), i0.inject(i2.AuthService), i0.inject(i3.AppProfileService), i0.inject(i4.Logger), i0.inject(i5.AppConfig), i0.inject(i6.PersistentStorage), i0.inject(i7.SecurityConfig), i0.inject(i8.RoleManagerService), i0.inject(i0.INJECTOR)); }, token: AppInitializerService, providedIn: "root" });
    return AppInitializerService;
}());
export { AppInitializerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.tokenExpireDateKey;
    /** @type {?} */
    AppInitializerService.prototype.ready;
    /** @type {?} */
    AppInitializerService.prototype.loading;
    /** @type {?} */
    AppInitializerService.prototype.onReady;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.moduleConfigInstances;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.queryParameters;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.resolveFn;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.rejectFn;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.auth;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.appProfiles;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.log;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.securityConfig;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.roleMgr;
    /**
     * @type {?}
     * @private
     */
    AppInitializerService.prototype.injector;
}
/**
 * Application initialization factory that provides a hook into
 * the Angular bootstrapping process.
 * @param {?} injector
 * @return {?}
 */
export function AppInitializerFactory(injector) {
    return (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var initializer = injector.get(AppInitializerService);
        initializer.initialize();
        return initializer.onReady;
    });
}
//# sourceMappingURL=data:application/json;base64,