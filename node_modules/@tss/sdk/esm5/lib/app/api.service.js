/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
// TSS.
import { AppConfig } from './app.config';
import { BaseEmptyResourceService } from '../core/resource/base-empty-resource.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./app.config";
/**
 * @record
 */
export function ApiStatus() { }
if (false) {
    /** @type {?} */
    ApiStatus.prototype.up;
    /** @type {?} */
    ApiStatus.prototype.down;
    /** @type {?} */
    ApiStatus.prototype.configStoreUp;
    /** @type {?} */
    ApiStatus.prototype.configStoreDown;
    /** @type {?} */
    ApiStatus.prototype.upSince;
    /** @type {?} */
    ApiStatus.prototype.daysUp;
    /** @type {?} */
    ApiStatus.prototype.appCount;
}
var ApiService = /** @class */ (function (_super) {
    tslib_1.__extends(ApiService, _super);
    function ApiService(http, appConfig) {
        var _this = _super.call(this, http, appConfig.serviceUrl) || this;
        _this.appConfig = appConfig;
        return _this;
    }
    /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    ApiService.prototype.ping = /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (routeTokens, params) {
        /** @type {?} */
        var url = this.getUrl(this.appConfig.pingEndpoint, routeTokens);
        return this.http.get(url, { params: params });
    };
    /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    ApiService.prototype.status = /**
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (routeTokens, params) {
        /** @type {?} */
        var url = this.getUrl(this.appConfig.pingEndpoint, routeTokens);
        return this.http.get(url, { params: params });
    };
    ApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ApiService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: AppConfig }
    ]; };
    /** @nocollapse */ ApiService.ngInjectableDef = i0.defineInjectable({ factory: function ApiService_Factory() { return new ApiService(i0.inject(i1.HttpClient), i0.inject(i2.AppConfig)); }, token: ApiService, providedIn: "root" });
    return ApiService;
}(BaseEmptyResourceService));
export { ApiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApiService.prototype.appConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9hcHAvYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBYyxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOENBQThDLENBQUM7Ozs7Ozs7QUFHeEYsK0JBUUM7OztJQVBDLHVCQUFZOztJQUNaLHlCQUFjOztJQUNkLGtDQUF1Qjs7SUFDdkIsb0NBQXlCOztJQUN6Qiw0QkFBYzs7SUFDZCwyQkFBZTs7SUFDZiw2QkFBaUI7O0FBSW5CO0lBR2dDLHNDQUFtQztJQUNqRSxvQkFBWSxJQUFnQixFQUFVLFNBQW9CO1FBQTFELFlBQ0Usa0JBQU0sSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsU0FDbEM7UUFGcUMsZUFBUyxHQUFULFNBQVMsQ0FBVzs7SUFFMUQsQ0FBQzs7Ozs7O0lBRUQseUJBQUk7Ozs7O0lBQUosVUFBSyxXQUFpQixFQUFFLE1BQW1COztZQUNuQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7UUFDakUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBTyxHQUFHLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7O0lBRUQsMkJBQU07Ozs7O0lBQU4sVUFBTyxXQUFpQixFQUFFLE1BQW1COztZQUNyQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7UUFDakUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBWSxHQUFHLEVBQUUsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Z0JBaEJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBeEJRLFVBQVU7Z0JBT1YsU0FBUzs7O3FCQVJsQjtDQXdDQyxBQWpCRCxDQUdnQyx3QkFBd0IsR0FjdkQ7U0FkWSxVQUFVOzs7Ozs7SUFDUywrQkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gM3JkIHBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBBcHBDb25maWcgfSBmcm9tICcuL2FwcC5jb25maWcnO1xuaW1wb3J0IHsgQmFzZUVtcHR5UmVzb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi4vY29yZS9yZXNvdXJjZS9iYXNlLWVtcHR5LXJlc291cmNlLnNlcnZpY2UnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBpU3RhdHVzIHtcbiAgdXA6IGJvb2xlYW47XG4gIGRvd246IGJvb2xlYW47XG4gIGNvbmZpZ1N0b3JlVXA6IGJvb2xlYW47XG4gIGNvbmZpZ1N0b3JlRG93bjogYm9vbGVhbjtcbiAgdXBTaW5jZTogRGF0ZTtcbiAgZGF5c1VwOiBudW1iZXI7XG4gIGFwcENvdW50OiBudW1iZXI7XG59XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSBleHRlbmRzIEJhc2VFbXB0eVJlc291cmNlU2VydmljZTxBcGlTdGF0dXM+IHtcbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBhcHBDb25maWc6IEFwcENvbmZpZykge1xuICAgIHN1cGVyKGh0dHAsIGFwcENvbmZpZy5zZXJ2aWNlVXJsKTtcbiAgfVxuXG4gIHBpbmcocm91dGVUb2tlbnM/OiBhbnksIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmdldFVybCh0aGlzLmFwcENvbmZpZy5waW5nRW5kcG9pbnQsIHJvdXRlVG9rZW5zKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDx2b2lkPih1cmwsIHsgcGFyYW1zIH0pO1xuICB9XG5cbiAgc3RhdHVzKHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxBcGlTdGF0dXM+IHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmdldFVybCh0aGlzLmFwcENvbmZpZy5waW5nRW5kcG9pbnQsIHJvdXRlVG9rZW5zKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxBcGlTdGF0dXM+KHVybCwgeyBwYXJhbXMgfSk7XG4gIH1cbn1cbiJdfQ==