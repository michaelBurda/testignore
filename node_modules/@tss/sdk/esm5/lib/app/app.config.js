/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ResourceConfig } from '../core/resource.config';
import { AutoConfig } from '../core/auto-config.decorator';
import * as i0 from "@angular/core";
/** @type {?} */
export var DEFAULT_APP_ID = 'all';
/** @type {?} */
export var DEFAULT_PROFILE_ID = 'default';
/**
 * Application related configuration options. These settings are used to
 * drive all general "global" application related behaviour. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
var AppConfig = /** @class */ (function (_super) {
    tslib_1.__extends(AppConfig, _super);
    function AppConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.appId = DEFAULT_APP_ID;
        _this.queryProfile = true;
        _this.profileId = null;
        _this.profile = null;
        _this.defaultProfileId = DEFAULT_PROFILE_ID;
        _this.allowQueryParamInjections = true;
        _this.continueOnAppBootstrapError = false;
        _this.appSettingsEndpoint = 'api/apps/{appId}/settings/{id}';
        _this.appProfileEndpoint = 'api/apps/{appId}/profiles/{id}';
        _this.pingEndpoint = 'api/ping';
        _this.statusEndpoint = 'api/status';
        return _this;
    }
    AppConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ AppConfig.ngInjectableDef = i0.defineInjectable({ factory: function AppConfig_Factory() { return new AppConfig(); }, token: AppConfig, providedIn: "root" });
    /**
     * Application related configuration options. These settings are used to
     * drive all general "global" application related behaviour. The settings can be
     * overridden directly in the code, application module, or from the TDS server.
     */
    AppConfig = tslib_1.__decorate([
        AutoConfig('AppConfig')
    ], AppConfig);
    return AppConfig;
}(ResourceConfig));
export { AppConfig };
if (false) {
    /** @type {?} */
    AppConfig.prototype.appId;
    /** @type {?} */
    AppConfig.prototype.queryProfile;
    /** @type {?} */
    AppConfig.prototype.profileId;
    /** @type {?} */
    AppConfig.prototype.profile;
    /** @type {?} */
    AppConfig.prototype.defaultProfileId;
    /** @type {?} */
    AppConfig.prototype.allowQueryParamInjections;
    /** @type {?} */
    AppConfig.prototype.continueOnAppBootstrapError;
    /** @type {?} */
    AppConfig.prototype.appSettingsEndpoint;
    /** @type {?} */
    AppConfig.prototype.appProfileEndpoint;
    /** @type {?} */
    AppConfig.prototype.pingEndpoint;
    /** @type {?} */
    AppConfig.prototype.statusEndpoint;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHAuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7QUFJM0QsTUFBTSxLQUFPLGNBQWMsR0FBRyxLQUFLOztBQUNuQyxNQUFNLEtBQU8sa0JBQWtCLEdBQUcsU0FBUzs7Ozs7OztJQVlaLHFDQUFjO0lBSjdDO1FBQUEscUVBZ0JDO1FBWEMsV0FBSyxHQUFHLGNBQWMsQ0FBQztRQUN2QixrQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixlQUFTLEdBQVcsSUFBSSxDQUFDO1FBQ3pCLGFBQU8sR0FBZSxJQUFJLENBQUM7UUFDM0Isc0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7UUFDdEMsK0JBQXlCLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLGlDQUEyQixHQUFHLEtBQUssQ0FBQztRQUNwQyx5QkFBbUIsR0FBRyxnQ0FBZ0MsQ0FBQztRQUN2RCx3QkFBa0IsR0FBRyxnQ0FBZ0MsQ0FBQztRQUN0RCxrQkFBWSxHQUFHLFVBQVUsQ0FBQztRQUMxQixvQkFBYyxHQUFHLFlBQVksQ0FBQzs7S0FDL0I7O2dCQWhCQSxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs7OztJQUVZLFNBQVM7UUFEckIsVUFBVSxDQUFDLFdBQVcsQ0FBQztPQUNYLFNBQVMsQ0FZckI7b0JBL0JEO0NBK0JDLENBWjhCLGNBQWMsR0FZNUM7U0FaWSxTQUFTOzs7SUFDcEIsMEJBQXVCOztJQUN2QixpQ0FBb0I7O0lBQ3BCLDhCQUF5Qjs7SUFDekIsNEJBQTJCOztJQUMzQixxQ0FBc0M7O0lBQ3RDLDhDQUFpQzs7SUFDakMsZ0RBQW9DOztJQUNwQyx3Q0FBdUQ7O0lBQ3ZELHVDQUFzRDs7SUFDdEQsaUNBQTBCOztJQUMxQixtQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNvdXJjZUNvbmZpZyB9IGZyb20gJy4uL2NvcmUvcmVzb3VyY2UuY29uZmlnJztcbmltcG9ydCB7IEF1dG9Db25maWcgfSBmcm9tICcuLi9jb3JlL2F1dG8tY29uZmlnLmRlY29yYXRvcic7XG5pbXBvcnQgeyBBcHBQcm9maWxlIH0gZnJvbSAnLi9hcHAtcHJvZmlsZSc7XG5cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQVBQX0lEID0gJ2FsbCc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9QUk9GSUxFX0lEID0gJ2RlZmF1bHQnO1xuXG5cbi8qKlxuICogQXBwbGljYXRpb24gcmVsYXRlZCBjb25maWd1cmF0aW9uIG9wdGlvbnMuIFRoZXNlIHNldHRpbmdzIGFyZSB1c2VkIHRvXG4gKiBkcml2ZSBhbGwgZ2VuZXJhbCBcImdsb2JhbFwiIGFwcGxpY2F0aW9uIHJlbGF0ZWQgYmVoYXZpb3VyLiBUaGUgc2V0dGluZ3MgY2FuIGJlXG4gKiBvdmVycmlkZGVuIGRpcmVjdGx5IGluIHRoZSBjb2RlLCBhcHBsaWNhdGlvbiBtb2R1bGUsIG9yIGZyb20gdGhlIFREUyBzZXJ2ZXIuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuQEF1dG9Db25maWcoJ0FwcENvbmZpZycpXG5leHBvcnQgY2xhc3MgQXBwQ29uZmlnIGV4dGVuZHMgUmVzb3VyY2VDb25maWcge1xuICBhcHBJZCA9IERFRkFVTFRfQVBQX0lEO1xuICBxdWVyeVByb2ZpbGUgPSB0cnVlO1xuICBwcm9maWxlSWQ6IHN0cmluZyA9IG51bGw7XG4gIHByb2ZpbGU6IEFwcFByb2ZpbGUgPSBudWxsO1xuICBkZWZhdWx0UHJvZmlsZUlkID0gREVGQVVMVF9QUk9GSUxFX0lEO1xuICBhbGxvd1F1ZXJ5UGFyYW1JbmplY3Rpb25zID0gdHJ1ZTtcbiAgY29udGludWVPbkFwcEJvb3RzdHJhcEVycm9yID0gZmFsc2U7XG4gIGFwcFNldHRpbmdzRW5kcG9pbnQgPSAnYXBpL2FwcHMve2FwcElkfS9zZXR0aW5ncy97aWR9JztcbiAgYXBwUHJvZmlsZUVuZHBvaW50ID0gJ2FwaS9hcHBzL3thcHBJZH0vcHJvZmlsZXMve2lkfSc7XG4gIHBpbmdFbmRwb2ludCA9ICdhcGkvcGluZyc7XG4gIHN0YXR1c0VuZHBvaW50ID0gJ2FwaS9zdGF0dXMnO1xufVxuIl19