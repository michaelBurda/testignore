/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
// TSS.
import { BaseResourceService } from '../../core/resource/base-resource.service';
import { ALL_APP_SETTINGS_QUERY_ID } from './app-setting';
import { AppConfig } from '../app.config';
import { join } from '../../core/url/join.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../app.config";
var AppSettingService = /** @class */ (function (_super) {
    tslib_1.__extends(AppSettingService, _super);
    function AppSettingService(http, config) {
        var _this = _super.call(this, http, {
            url: join(config.serviceUrl, config.appSettingsEndpoint),
            defaultRouteTokens: {
                appId: config.appId
            }
        }) || this;
        _this.http = http;
        return _this;
    }
    /**
     * Retrieves a list of application settings.
     */
    /**
     * Retrieves a list of application settings.
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    AppSettingService.prototype.queryAllApps = /**
     * Retrieves a list of application settings.
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (routeTokens, params) {
        routeTokens = routeTokens || {};
        routeTokens.appId = ALL_APP_SETTINGS_QUERY_ID;
        return _super.prototype.query.call(this, routeTokens, params);
    };
    AppSettingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AppSettingService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: AppConfig }
    ]; };
    /** @nocollapse */ AppSettingService.ngInjectableDef = i0.defineInjectable({ factory: function AppSettingService_Factory() { return new AppSettingService(i0.inject(i1.HttpClient), i0.inject(i2.AppConfig)); }, token: AppSettingService, providedIn: "root" });
    return AppSettingService;
}(BaseResourceService));
export { AppSettingService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AppSettingService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXNldHRpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2FwcC9zZXR0aW5ncy9hcHAtc2V0dGluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBYyxNQUFNLHNCQUFzQixDQUFDOztBQU05RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNoRixPQUFPLEVBQWMseUJBQXlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFHcEQ7SUFHdUMsNkNBQStCO0lBQ3BFLDJCQUFzQixJQUFnQixFQUFFLE1BQWlCO1FBQXpELFlBQ0Usa0JBQU0sSUFBSSxFQUFFO1lBQ1YsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztZQUN4RCxrQkFBa0IsRUFBRTtnQkFDbEIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO2FBQ3BCO1NBQ0YsQ0FBQyxTQUNIO1FBUHFCLFVBQUksR0FBSixJQUFJLENBQVk7O0lBT3RDLENBQUM7SUFFRDs7T0FFRzs7Ozs7OztJQUNILHdDQUFZOzs7Ozs7SUFBWixVQUFhLFdBQWlCLEVBQUUsTUFBbUI7UUFDakQsV0FBVyxHQUFHLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFDaEMsV0FBVyxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQztRQUM5QyxPQUFPLGlCQUFNLEtBQUssWUFBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7Z0JBcEJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBZFEsVUFBVTtnQkFRVixTQUFTOzs7NEJBVmxCO0NBbUNDLEFBckJELENBR3VDLG1CQUFtQixHQWtCekQ7U0FsQlksaUJBQWlCOzs7Ozs7SUFDaEIsaUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8vIDNyZCBwYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgQmFzZVJlc291cmNlU2VydmljZSB9IGZyb20gJy4uLy4uL2NvcmUvcmVzb3VyY2UvYmFzZS1yZXNvdXJjZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcFNldHRpbmcsIEFMTF9BUFBfU0VUVElOR1NfUVVFUllfSUQgfSBmcm9tICcuL2FwcC1zZXR0aW5nJztcbmltcG9ydCB7IEFwcENvbmZpZyB9IGZyb20gJy4uL2FwcC5jb25maWcnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJy4uLy4uL2NvcmUvdXJsL2pvaW4uZnVuY3Rpb24nO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFwcFNldHRpbmdTZXJ2aWNlIGV4dGVuZHMgQmFzZVJlc291cmNlU2VydmljZTxBcHBTZXR0aW5nPiB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50LCBjb25maWc6IEFwcENvbmZpZykge1xuICAgIHN1cGVyKGh0dHAsIHtcbiAgICAgIHVybDogam9pbihjb25maWcuc2VydmljZVVybCwgY29uZmlnLmFwcFNldHRpbmdzRW5kcG9pbnQpLFxuICAgICAgZGVmYXVsdFJvdXRlVG9rZW5zOiB7XG4gICAgICAgIGFwcElkOiBjb25maWcuYXBwSWRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIGFwcGxpY2F0aW9uIHNldHRpbmdzLlxuICAgKi9cbiAgcXVlcnlBbGxBcHBzKHJvdXRlVG9rZW5zPzogYW55LCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxBcHBTZXR0aW5nW10+IHtcbiAgICByb3V0ZVRva2VucyA9IHJvdXRlVG9rZW5zIHx8IHt9O1xuICAgIHJvdXRlVG9rZW5zLmFwcElkID0gQUxMX0FQUF9TRVRUSU5HU19RVUVSWV9JRDtcbiAgICByZXR1cm4gc3VwZXIucXVlcnkocm91dGVUb2tlbnMsIHBhcmFtcyk7XG4gIH1cbn1cbiJdfQ==