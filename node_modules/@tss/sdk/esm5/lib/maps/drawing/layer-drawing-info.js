/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LayerDrawingInfoRenderer } from './layer-drawing-info-renderer';
import { transparencyToOpacity } from '../../core/color/transparency-to-opacity.function';
/**
 * @record
 */
export function DrawingInfoProperties() { }
if (false) {
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.renderer;
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.transparency;
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.positionRenderer;
    /** @type {?|undefined} */
    DrawingInfoProperties.prototype.labelingInfo;
}
var LayerDrawingInfo = /** @class */ (function () {
    function LayerDrawingInfo() {
        var baseDrawingInfos = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            baseDrawingInfos[_i] = arguments[_i];
        }
        this.merge.apply(this, tslib_1.__spread(baseDrawingInfos));
        this.transparency = this.transparency || 0;
        this.zIndex = this.zIndex || null;
        this.renderer = new LayerDrawingInfoRenderer(this.renderer);
        this.positionRenderer = new LayerDrawingInfoRenderer(this.positionRenderer);
        this.labelingInfo = this.labelingInfo || null;
    }
    Object.defineProperty(LayerDrawingInfo.prototype, "isEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.transparency
                && !this.zIndex
                && this.renderer.isEmpty
                && this.positionRenderer.isEmpty
                && !Object.keys(this.labelingInfo || {}).length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayerDrawingInfo.prototype, "opacity", {
        get: /**
         * @return {?}
         */
        function () {
            return transparencyToOpacity(this.transparency);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {...?} targetDrawingInfos
     * @return {THIS}
     */
    LayerDrawingInfo.prototype.merge = /**
     * @template THIS
     * @this {THIS}
     * @param {...?} targetDrawingInfos
     * @return {THIS}
     */
    function () {
        var targetDrawingInfos = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            targetDrawingInfos[_i] = arguments[_i];
        }
        /** @type {?} */
        var properties = targetDrawingInfos.map((/**
         * @param {?} info
         * @return {?}
         */
        function (info) {
            return info && ((/** @type {?} */ (info))).toProperties
                ? ((/** @type {?} */ (info))).toProperties()
                : info;
        }));
        Object.assign.apply(Object, tslib_1.__spread([(/** @type {?} */ (this))], properties));
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    LayerDrawingInfo.prototype.getRendererSymbol = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        return this.renderer.getSymbol(value);
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    LayerDrawingInfo.prototype.getPositionRendererSymbol = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        return this.positionRenderer.getSymbol(value);
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    LayerDrawingInfo.prototype.getBestRepresentativeColor = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        return this.renderer.getBestRepresentativeColor(value);
    };
    /**
     * @return {?}
     */
    LayerDrawingInfo.prototype.toProperties = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var infoProperties = {};
        if (this.labelingInfo) {
            infoProperties.labelingInfo = this.labelingInfo;
        }
        if (this.positionRenderer && !this.positionRenderer.isEmpty) {
            infoProperties.positionRenderer = this.positionRenderer;
        }
        if (this.renderer && !this.renderer.isEmpty) {
            infoProperties.renderer = this.renderer;
        }
        if (this.transparency) {
            infoProperties.transparency = this.transparency;
        }
        return infoProperties;
    };
    return LayerDrawingInfo;
}());
export { LayerDrawingInfo };
if (false) {
    /** @type {?} */
    LayerDrawingInfo.prototype.renderer;
    /** @type {?} */
    LayerDrawingInfo.prototype.transparency;
    /** @type {?} */
    LayerDrawingInfo.prototype.zIndex;
    /** @type {?} */
    LayerDrawingInfo.prototype.positionRenderer;
    /** @type {?} */
    LayerDrawingInfo.prototype.labelingInfo;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXItZHJhd2luZy1pbmZvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbWFwcy9kcmF3aW5nL2xheWVyLWRyYXdpbmctaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXpFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDOzs7O0FBRTFGLDJDQUtDOzs7SUFKQyx5Q0FBb0M7O0lBQ3BDLDZDQUFzQjs7SUFDdEIsaURBQTRDOztJQUM1Qyw2Q0FBbUI7O0FBR3JCO0lBbUJFO1FBQVksMEJBQWlFO2FBQWpFLFVBQWlFLEVBQWpFLHFCQUFpRSxFQUFqRSxJQUFpRTtZQUFqRSxxQ0FBaUU7O1FBQzNFLElBQUksQ0FBQyxLQUFLLE9BQVYsSUFBSSxtQkFBVSxnQkFBZ0IsR0FBRTtRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDO0lBQ2hELENBQUM7SUFuQkQsc0JBQUkscUNBQU87Ozs7UUFBWDtZQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWTttQkFDcEIsQ0FBQyxJQUFJLENBQUMsTUFBTTttQkFDWixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU87bUJBQ3JCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPO21CQUM3QixDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDcEQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxxQ0FBTzs7OztRQUFYO1lBQ0UsT0FBTyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEQsQ0FBQzs7O09BQUE7Ozs7Ozs7SUFXRCxnQ0FBSzs7Ozs7O0lBQUw7UUFBTSw0QkFBbUU7YUFBbkUsVUFBbUUsRUFBbkUscUJBQW1FLEVBQW5FLElBQW1FO1lBQW5FLHVDQUFtRTs7O1lBQ2pFLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxJQUFJO1lBQzVDLE9BQUEsSUFBSSxJQUFJLENBQUMsbUJBQUEsSUFBSSxFQUFvQixDQUFDLENBQUMsWUFBWTtnQkFDN0MsQ0FBQyxDQUFDLENBQUMsbUJBQUEsSUFBSSxFQUFvQixDQUFDLENBQUMsWUFBWSxFQUFFO2dCQUMzQyxDQUFDLENBQUMsSUFBSTtRQUZSLENBRVEsRUFDVDtRQUVELE1BQU0sQ0FBQyxNQUFNLE9BQWIsTUFBTSxvQkFBUSxtQkFBQSxJQUFJLEVBQUEsR0FBSyxVQUFVLEdBQUU7UUFDbkMsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsNENBQWlCOzs7O0lBQWpCLFVBQWtCLEtBQXVCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFFRCxvREFBeUI7Ozs7SUFBekIsVUFBMEIsS0FBdUI7UUFDL0MsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBRUQscURBQTBCOzs7O0lBQTFCLFVBQTJCLEtBQXVCO1FBQ2hELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7O0lBRUQsdUNBQVk7OztJQUFaOztZQUNRLGNBQWMsR0FBMEIsRUFBRTtRQUNoRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQ2pEO1FBRUQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQzNELGNBQWMsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDekQ7UUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUMzQyxjQUFjLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7U0FDekM7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsY0FBYyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQ2pEO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQXZFRCxJQXVFQzs7OztJQXRFQyxvQ0FBbUM7O0lBQ25DLHdDQUFxQjs7SUFDckIsa0NBQXNCOztJQUN0Qiw0Q0FBMkM7O0lBQzNDLHdDQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExheWVyRHJhd2luZ0luZm9SZW5kZXJlciB9IGZyb20gJy4vbGF5ZXItZHJhd2luZy1pbmZvLXJlbmRlcmVyJztcbmltcG9ydCB7IExheWVyUmVuZGVyZXJTeW1ib2wgfSBmcm9tICcuL2xheWVyLXJlbmRlcmVyLXN5bWJvbCc7XG5pbXBvcnQgeyB0cmFuc3BhcmVuY3lUb09wYWNpdHkgfSBmcm9tICcuLi8uLi9jb3JlL2NvbG9yL3RyYW5zcGFyZW5jeS10by1vcGFjaXR5LmZ1bmN0aW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBEcmF3aW5nSW5mb1Byb3BlcnRpZXMge1xuICByZW5kZXJlcj86IExheWVyRHJhd2luZ0luZm9SZW5kZXJlcjtcbiAgdHJhbnNwYXJlbmN5PzogbnVtYmVyO1xuICBwb3NpdGlvblJlbmRlcmVyPzogTGF5ZXJEcmF3aW5nSW5mb1JlbmRlcmVyO1xuICBsYWJlbGluZ0luZm8/OiBhbnk7IC8vIFRPRE86IEFkZCB0eXBlIGZvciBsYWJlbGluZyBpbmZvIC0gUkcuXG59XG5cbmV4cG9ydCBjbGFzcyBMYXllckRyYXdpbmdJbmZvIGltcGxlbWVudHMgRHJhd2luZ0luZm9Qcm9wZXJ0aWVzIHtcbiAgcmVuZGVyZXI6IExheWVyRHJhd2luZ0luZm9SZW5kZXJlcjtcbiAgdHJhbnNwYXJlbmN5OiBudW1iZXI7XG4gIHpJbmRleDogbnVtYmVyIHwgbnVsbDtcbiAgcG9zaXRpb25SZW5kZXJlcjogTGF5ZXJEcmF3aW5nSW5mb1JlbmRlcmVyO1xuICBsYWJlbGluZ0luZm86IGFueTtcblxuICBnZXQgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMudHJhbnNwYXJlbmN5XG4gICAgICAmJiAhdGhpcy56SW5kZXhcbiAgICAgICYmIHRoaXMucmVuZGVyZXIuaXNFbXB0eVxuICAgICAgJiYgdGhpcy5wb3NpdGlvblJlbmRlcmVyLmlzRW1wdHlcbiAgICAgICYmICFPYmplY3Qua2V5cyh0aGlzLmxhYmVsaW5nSW5mbyB8fCB7fSkubGVuZ3RoO1xuICB9XG5cbiAgZ2V0IG9wYWNpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdHJhbnNwYXJlbmN5VG9PcGFjaXR5KHRoaXMudHJhbnNwYXJlbmN5KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKC4uLmJhc2VEcmF3aW5nSW5mb3M6IChMYXllckRyYXdpbmdJbmZvIHwgRHJhd2luZ0luZm9Qcm9wZXJ0aWVzKVtdKSB7XG4gICAgdGhpcy5tZXJnZSguLi5iYXNlRHJhd2luZ0luZm9zKTtcbiAgICB0aGlzLnRyYW5zcGFyZW5jeSA9IHRoaXMudHJhbnNwYXJlbmN5IHx8IDA7XG4gICAgdGhpcy56SW5kZXggPSB0aGlzLnpJbmRleCB8fCBudWxsO1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgTGF5ZXJEcmF3aW5nSW5mb1JlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xuICAgIHRoaXMucG9zaXRpb25SZW5kZXJlciA9IG5ldyBMYXllckRyYXdpbmdJbmZvUmVuZGVyZXIodGhpcy5wb3NpdGlvblJlbmRlcmVyKTtcbiAgICB0aGlzLmxhYmVsaW5nSW5mbyA9IHRoaXMubGFiZWxpbmdJbmZvIHx8IG51bGw7XG4gIH1cblxuICBtZXJnZSguLi50YXJnZXREcmF3aW5nSW5mb3M6IChMYXllckRyYXdpbmdJbmZvIHwgRHJhd2luZ0luZm9Qcm9wZXJ0aWVzKVtdKTogdGhpcyB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRhcmdldERyYXdpbmdJbmZvcy5tYXAoaW5mbyA9PlxuICAgICAgaW5mbyAmJiAoaW5mbyBhcyBMYXllckRyYXdpbmdJbmZvKS50b1Byb3BlcnRpZXNcbiAgICAgICAgPyAoaW5mbyBhcyBMYXllckRyYXdpbmdJbmZvKS50b1Byb3BlcnRpZXMoKVxuICAgICAgICA6IGluZm9cbiAgICApO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCAuLi5wcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldFJlbmRlcmVyU3ltYm9sKHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyKTogTGF5ZXJSZW5kZXJlclN5bWJvbCB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0U3ltYm9sKHZhbHVlKTtcbiAgfVxuXG4gIGdldFBvc2l0aW9uUmVuZGVyZXJTeW1ib2wodmFsdWU/OiBzdHJpbmcgfCBudW1iZXIpOiBMYXllclJlbmRlcmVyU3ltYm9sIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGlvblJlbmRlcmVyLmdldFN5bWJvbCh2YWx1ZSk7XG4gIH1cblxuICBnZXRCZXN0UmVwcmVzZW50YXRpdmVDb2xvcih2YWx1ZT86IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuZ2V0QmVzdFJlcHJlc2VudGF0aXZlQ29sb3IodmFsdWUpO1xuICB9XG5cbiAgdG9Qcm9wZXJ0aWVzKCk6IERyYXdpbmdJbmZvUHJvcGVydGllcyB7XG4gICAgY29uc3QgaW5mb1Byb3BlcnRpZXM6IERyYXdpbmdJbmZvUHJvcGVydGllcyA9IHt9O1xuICAgIGlmICh0aGlzLmxhYmVsaW5nSW5mbykge1xuICAgICAgaW5mb1Byb3BlcnRpZXMubGFiZWxpbmdJbmZvID0gdGhpcy5sYWJlbGluZ0luZm87XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucG9zaXRpb25SZW5kZXJlciAmJiAhdGhpcy5wb3NpdGlvblJlbmRlcmVyLmlzRW1wdHkpIHtcbiAgICAgIGluZm9Qcm9wZXJ0aWVzLnBvc2l0aW9uUmVuZGVyZXIgPSB0aGlzLnBvc2l0aW9uUmVuZGVyZXI7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyZXIgJiYgIXRoaXMucmVuZGVyZXIuaXNFbXB0eSkge1xuICAgICAgaW5mb1Byb3BlcnRpZXMucmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnRyYW5zcGFyZW5jeSkge1xuICAgICAgaW5mb1Byb3BlcnRpZXMudHJhbnNwYXJlbmN5ID0gdGhpcy50cmFuc3BhcmVuY3k7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm9Qcm9wZXJ0aWVzO1xuICB9XG59XG4iXX0=