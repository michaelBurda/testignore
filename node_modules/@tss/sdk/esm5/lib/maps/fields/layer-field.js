/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { hasTokens } from '../../core/tokens/has-tokens.function';
import { isString } from '../../core/type-check/is-string.function';
import { canNotBeNumber } from '../../core/type-check/can-not-be-number.function';
/** @type {?} */
export var FIELD_TYPE_OID = 'id';
/** @type {?} */
export var FIELD_TYPE_OID_STRING = 'id-string';
/** @type {?} */
export var FIELD_TYPE_STRING = 'string';
/** @type {?} */
export var FIELD_TYPE_NUMBER = 'number';
/** @type {?} */
export var FIELD_TYPE_XML = 'xml';
/** @type {?} */
export var FIELD_TYPE_BLOB = 'blob';
/** @type {?} */
export var FIELD_TYPE_DATE = 'date';
/** @type {?} */
export var FIELD_TYPE_DOUBLE = 'double';
/** @type {?} */
export var FIELD_TYPE_GUID = 'guid';
/** @type {?} */
export var FIELD_TYPE_GEOMETRY = 'geometry';
/** @type {?} */
export var FIELD_TYPE_GLOBALID = 'globalId';
/** @type {?} */
export var FIELD_TYPE_INTEGER = 'integer';
/** @type {?} */
export var FIELD_TYPE_RASTER = 'raster';
/** @type {?} */
export var FIELD_TYPE_SINGLE = 'single';
/** @type {?} */
export var FIELD_TYPE_SMALL_INTEGER = 'int';
/** @type {?} */
export var ESRI_FIELD_TYPE_OID = 'esriFieldTypeOID';
/** @type {?} */
export var ESRI_FIELD_TYPE_STRING = 'esriFieldTypeString';
/** @type {?} */
export var ESRI_FIELD_TYPE_NUMBER = 'esriFieldTypeNumber';
/** @type {?} */
export var ESRI_FIELD_TYPE_XML = 'esriFieldTypeXML';
/** @type {?} */
export var ESRI_FIELD_TYPE_BLOB = 'esriFieldTypeBlob';
/** @type {?} */
export var ESRI_FIELD_TYPE_DATE = 'esriFieldTypeDate';
/** @type {?} */
export var ESRI_FIELD_TYPE_DOUBLE = 'esriFieldTypeDouble';
/** @type {?} */
export var ESRI_FIELD_TYPE_GUID = 'esriFieldTypeGUID';
/** @type {?} */
export var ESRI_FIELD_TYPE_GEOMETRY = 'esriFieldTypeGeometry';
/** @type {?} */
export var ESRI_FIELD_TYPE_GLOBALID = 'esriFieldTypeGlobalID';
/** @type {?} */
export var ESRI_FIELD_TYPE_INTEGER = 'esriFieldTypeInteger';
/** @type {?} */
export var ESRI_FIELD_TYPE_RASTER = 'esriFieldTypeRaster';
/** @type {?} */
export var ESRI_FIELD_TYPE_SINGLE = 'esriFieldTypeSingle';
/** @type {?} */
export var ESRI_FIELD_TYPE_SMALL_INTEGER = 'esriFieldTypeSmallInteger';
/** @type {?} */
export var FIELD_METADATA = [
    { alias: 'ID', isNumeric: true, types: [FIELD_TYPE_OID, ESRI_FIELD_TYPE_OID] },
    { alias: 'ID', isNumeric: false, types: [FIELD_TYPE_OID_STRING] },
    { alias: 'string', isNumeric: false, types: [FIELD_TYPE_STRING, ESRI_FIELD_TYPE_STRING] },
    { alias: 'number', isNumeric: true, types: [FIELD_TYPE_NUMBER, ESRI_FIELD_TYPE_NUMBER] },
    { alias: 'double', isNumeric: true, types: [FIELD_TYPE_DOUBLE, ESRI_FIELD_TYPE_DOUBLE] },
    { alias: 'int', isNumeric: true, types: [FIELD_TYPE_INTEGER, ESRI_FIELD_TYPE_INTEGER, ESRI_FIELD_TYPE_SMALL_INTEGER] },
    { alias: 'date', isNumeric: false, types: [FIELD_TYPE_DATE, ESRI_FIELD_TYPE_DATE] },
    { alias: 'geometry', isNumeric: false, types: [FIELD_TYPE_GEOMETRY, ESRI_FIELD_TYPE_GEOMETRY] },
    { alias: 'xml', isNumeric: false, types: [FIELD_TYPE_XML, ESRI_FIELD_TYPE_XML] },
    { alias: 'blob', isNumeric: false, types: [FIELD_TYPE_BLOB, ESRI_FIELD_TYPE_BLOB] },
    { alias: 'guid', isNumeric: false, types: [FIELD_TYPE_GUID, ESRI_FIELD_TYPE_GUID] },
    { alias: 'globalId', isNumeric: false, types: [FIELD_TYPE_GLOBALID, ESRI_FIELD_TYPE_GLOBALID] },
    { alias: 'integer', isNumeric: true, types: [FIELD_TYPE_INTEGER, ESRI_FIELD_TYPE_INTEGER] },
    { alias: 'raster', isNumeric: false, types: [FIELD_TYPE_RASTER, ESRI_FIELD_TYPE_RASTER] },
    { alias: 'single', isNumeric: false, types: [FIELD_TYPE_SINGLE, ESRI_FIELD_TYPE_SINGLE] },
];
/**
 * @record
 */
export function FieldMetadata() { }
if (false) {
    /** @type {?} */
    FieldMetadata.prototype.alias;
    /** @type {?} */
    FieldMetadata.prototype.isNumeric;
    /** @type {?} */
    FieldMetadata.prototype.types;
}
/**
 * @param {?} fieldType
 * @return {?}
 */
export function isFieldGeometryType(fieldType) {
    return fieldType === 'esriFieldTypeGeometry' || fieldType === 'geometry';
}
/**
 * @param {?} fieldType
 * @return {?}
 */
export function isObjectIdType(fieldType) {
    return fieldType === 'esriFieldTypeOID' || fieldType === 'id';
}
/**
 * @param {?} fields
 * @return {?}
 */
export function getGeometryField(fields) {
    return (fields || []).find((/**
     * @param {?} f
     * @return {?}
     */
    function (f) { return isFieldGeometryType(f.type); }));
}
/**
 * @param {?} fields
 * @return {?}
 */
export function getGeometryFieldName(fields) {
    /** @type {?} */
    var field = getGeometryField(fields);
    return field ? field.name : null;
}
/**
 * @param {?} fields
 * @return {?}
 */
export function getIdField(fields) {
    return (fields || []).find((/**
     * @param {?} f
     * @return {?}
     */
    function (f) { return isObjectIdType(f.type); }));
}
/**
 * @param {?} fields
 * @return {?}
 */
export function getIdFieldFieldName(fields) {
    /** @type {?} */
    var field = getIdField(fields);
    return field ? field.name : null;
}
/**
 * @param {?} fieldNameOrExpression
 * @return {?}
 */
export function isFieldExpression(fieldNameOrExpression) {
    return hasTokens(fieldNameOrExpression);
}
/**
 * @param {?} field
 * @return {?}
 */
export function toFieldType(field) {
    return isString(field)
        ? (/** @type {?} */ (field))
        : ((/** @type {?} */ (field))).type;
}
/**
 * @param {?} field
 * @return {?}
 */
export function toFieldName(field) {
    return isString(field) ? (/** @type {?} */ (field)) : ((/** @type {?} */ (field))).name;
}
/**
 * @param {?} fieldName
 * @param {?} fields
 * @return {?}
 */
export function getField(fieldName, fields) {
    return fields.find((/**
     * @param {?} f
     * @return {?}
     */
    function (f) { return f.name === fieldName; })) || null;
}
/**
 * @param {?} fieldName
 * @param {?} fields
 * @return {?}
 */
export function getFieldAlias(fieldName, fields) {
    /** @type {?} */
    var fieldAlias = null;
    /** @type {?} */
    var field = getField(fieldName, fields);
    if (field && field.alias) {
        fieldAlias = field.alias;
    }
    return fieldAlias;
}
/**
 * @param {?} field
 * @return {?}
 */
export function isFieldNumeric(field) {
    /** @type {?} */
    var fieldType = toFieldType(field);
    /** @type {?} */
    var match = FIELD_METADATA
        .filter((/**
     * @param {?} f
     * @return {?}
     */
    function (f) { return f.isNumeric; }))
        .find((/**
     * @param {?} f
     * @return {?}
     */
    function (f) { return f.types.indexOf(fieldType) > -1; }));
    return Boolean(match);
}
/**
 * @param {?} field
 * @param {?} value
 * @return {?}
 */
export function isFieldValueNumeric(field, value) {
    /** @type {?} */
    var fieldType = toFieldType(field);
    if (isObjectIdType(fieldType) && canNotBeNumber(value)) {
        return false;
    }
    return isFieldNumeric(field);
}
/**
 * @record
 */
export function LayerFieldCodedValue() { }
if (false) {
    /** @type {?} */
    LayerFieldCodedValue.prototype.name;
    /** @type {?} */
    LayerFieldCodedValue.prototype.code;
    /** @type {?|undefined} */
    LayerFieldCodedValue.prototype.order;
}
/**
 * @record
 */
export function LayerFieldDomain() { }
if (false) {
    /** @type {?} */
    LayerFieldDomain.prototype.type;
    /** @type {?} */
    LayerFieldDomain.prototype.name;
    /** @type {?} */
    LayerFieldDomain.prototype.codedValues;
    /** @type {?} */
    LayerFieldDomain.prototype.mergePolicy;
    /** @type {?} */
    LayerFieldDomain.prototype.splitPolicy;
}
/**
 * @record
 */
export function LayerField() { }
if (false) {
    /** @type {?} */
    LayerField.prototype.name;
    /** @type {?} */
    LayerField.prototype.type;
    /** @type {?|undefined} */
    LayerField.prototype.alias;
    /** @type {?|undefined} */
    LayerField.prototype.length;
    /** @type {?|undefined} */
    LayerField.prototype.editable;
    /** @type {?|undefined} */
    LayerField.prototype.nullable;
    /** @type {?|undefined} */
    LayerField.prototype.defaultValue;
    /** @type {?|undefined} */
    LayerField.prototype.domain;
    /** @type {?|undefined} */
    LayerField.prototype.domainName;
    /** @type {?|undefined} */
    LayerField.prototype.hidden;
    /** @type {?|undefined} */
    LayerField.prototype.order;
    /** @type {?|undefined} */
    LayerField.prototype.role;
    /** @type {?|undefined} */
    LayerField.prototype.placeholder;
    /** @type {?|undefined} */
    LayerField.prototype.min;
    /** @type {?|undefined} */
    LayerField.prototype.max;
}
//# sourceMappingURL=data:application/json;base64,