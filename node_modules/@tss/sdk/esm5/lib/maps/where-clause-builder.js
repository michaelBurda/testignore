/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isFieldValueNumeric } from './fields/layer-field';
/** @type {?} */
export var FIELD_QUOTE = '"';
/** @enum {string} */
var CriteriaOperator = {
    Equals: '=',
    DoesNotEqual: '<>',
    // In = 'IN',
    // OneOf, NotOneOf, Between, NotBetween, Contains...
    GreaterThan: '>',
    LessThan: '<',
    GreaterOrEqualTo: '>=',
    LessThanOrEqualTo: '<=',
};
export { CriteriaOperator };
/** @enum {string} */
var TargetOperator = {
    Is: 'IS',
    Not: 'NOT',
    In: 'IN',
    Like: 'LIKE',
    Between: 'BETWEEN',
};
export { TargetOperator };
/** @enum {string} */
var ValueOperator = {
    Wildcard: '%',
    Null: 'NULL',
};
export { ValueOperator };
/** @enum {string} */
var GroupingOperator = {
    OpenParenthesis: '(',
    ClosedParenthesis: ')',
    Parenthesis: '()',
};
export { GroupingOperator };
/** @enum {string} */
var CombiningOperator = {
    And: 'AND',
    Or: 'OR',
};
export { CombiningOperator };
/**
 * @record
 */
export function WhereClauseBuilderOptions() { }
if (false) {
    /** @type {?|undefined} */
    WhereClauseBuilderOptions.prototype.quoteFields;
}
/** @type {?} */
export var DefaultWhereClauseBuilderOptions = {
    quoteFields: true
};
var WhereClauseBuilder = /** @class */ (function () {
    function WhereClauseBuilder(options) {
        this.statements = [];
        this.options = Object.assign({}, DefaultWhereClauseBuilderOptions, options);
    }
    Object.defineProperty(WhereClauseBuilder.prototype, "criteriaCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.statements.length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} statement
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.add = /**
     * @template THIS
     * @this {THIS}
     * @param {?} statement
     * @return {THIS}
     */
    function (statement) {
        (/** @type {?} */ (this)).statements.push(statement);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereEqual = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    function (field, value) {
        return value === null
            ? (/** @type {?} */ (this)).whereIsNull(field.name)
            : (/** @type {?} */ (this)).where(field.name, CriteriaOperator.Equals, value, isFieldValueNumeric(field, value));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereLike = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    function (field, value) {
        return (/** @type {?} */ (this)).add((/** @type {?} */ (this)).formatField(field) + " " + TargetOperator.Like + " '%" + value + "%'");
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereStartsWith = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    function (field, value) {
        return (/** @type {?} */ (this)).add((/** @type {?} */ (this)).formatField(field) + " " + TargetOperator.Like + " '" + value + "%'");
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereEndsWith = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    function (field, value) {
        return (/** @type {?} */ (this)).add((/** @type {?} */ (this)).formatField(field) + " " + TargetOperator.Like + " '%" + value + "'");
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereNotEqual = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    function (field, value) {
        return value === null
            ? (/** @type {?} */ (this)).whereIsNotNull(field.name)
            : (/** @type {?} */ (this)).where(field.name, CriteriaOperator.DoesNotEqual, value, isFieldValueNumeric(field, value));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereIsNull = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @return {THIS}
     */
    function (field) {
        return (/** @type {?} */ (this)).add((/** @type {?} */ (this)).formatField(field) + " " + TargetOperator.Is + " " + ValueOperator.Null);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereIsNotNull = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @return {THIS}
     */
    function (field) {
        return (/** @type {?} */ (this)).add((/** @type {?} */ (this)).formatField(field) + " " + TargetOperator.Is + " " + TargetOperator.Not + " " + ValueOperator.Null);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} operator
     * @param {?} value
     * @param {?=} isNumeric
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.where = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} operator
     * @param {?} value
     * @param {?=} isNumeric
     * @return {THIS}
     */
    function (field, operator, value, isNumeric) {
        if (isNumeric === void 0) { isNumeric = false; }
        value = isNumeric ? value : "'" + value + "'";
        (/** @type {?} */ (this)).add("" + (/** @type {?} */ (this)).formatField(field) + operator + value);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    WhereClauseBuilder.prototype.whereNumeric = /**
     * @template THIS
     * @this {THIS}
     * @param {?} field
     * @param {?} value
     * @return {THIS}
     */
    function (field, value) {
        (/** @type {?} */ (this)).where(field, value, true);
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    WhereClauseBuilder.prototype.toWhereClause = /**
     * @return {?}
     */
    function () {
        return this.statements.join(" " + CombiningOperator.And + " ");
    };
    /**
     * @return {?}
     */
    WhereClauseBuilder.prototype.toString = /**
     * @return {?}
     */
    function () {
        return this.toWhereClause();
    };
    /**
     * @return {?}
     */
    WhereClauseBuilder.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.statements.length = 0;
    };
    /**
     * @protected
     * @param {?} field
     * @return {?}
     */
    WhereClauseBuilder.prototype.formatField = /**
     * @protected
     * @param {?} field
     * @return {?}
     */
    function (field) {
        field = field || '';
        /** @type {?} */
        var addQuotes = this.options.quoteFields;
        if (addQuotes) {
            if (!field.startsWith(FIELD_QUOTE)) {
                field = "" + FIELD_QUOTE + field;
            }
            if (!field.endsWith(FIELD_QUOTE)) {
                field = "" + field + FIELD_QUOTE;
            }
        }
        else {
            /** @type {?} */
            var quoteRegex = new RegExp(FIELD_QUOTE, 'i');
            return field.replace(quoteRegex, '');
        }
        return field;
    };
    return WhereClauseBuilder;
}());
export { WhereClauseBuilder };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WhereClauseBuilder.prototype.statements;
    /**
     * @type {?}
     * @private
     */
    WhereClauseBuilder.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,