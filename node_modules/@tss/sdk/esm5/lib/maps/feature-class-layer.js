/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { getFieldAlias, getField } from './fields/layer-field';
import { LayerDrawingInfo } from './drawing/layer-drawing-info';
import { clone } from '../core/clone/clone.function';
/** @type {?} */
export var POINT_GEOMETRY_TYPES = ['point', 'esriGeometryPoint'];
/** @type {?} */
export var LINEAR_GEOMETRY_TYPES = ['line', 'esriGeometryPolyline'];
/** @type {?} */
export var POLYGON_GEOMETRY_TYPES = ['polygon', 'esriGeometryPolygon'];
/**
 * @param {?} geometryType
 * @return {?}
 */
export function isPointGeometryType(geometryType) {
    return POINT_GEOMETRY_TYPES.indexOf(geometryType) > -1;
}
/**
 * @param {?} geometryType
 * @return {?}
 */
export function isLinearGeometryType(geometryType) {
    return LINEAR_GEOMETRY_TYPES.indexOf(geometryType) > -1;
}
/**
 * @param {?} geometryType
 * @return {?}
 */
export function isPolygonGeometryType(geometryType) {
    return POLYGON_GEOMETRY_TYPES.indexOf(geometryType) > -1;
}
var FeatureClassLayer = /** @class */ (function () {
    function FeatureClassLayer() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        Object.assign.apply(Object, tslib_1.__spread([this], sources));
        this.subLayers = this.subLayers || [];
        this.fields = this.fields || [];
        this.indexes = this.indexes || [];
        this.relationships = this.relationships || [];
        this.supportedQueryFormats = this.supportedQueryFormats || [];
        this.drawingInfo = new LayerDrawingInfo(this.drawingInfo);
    }
    Object.defineProperty(FeatureClassLayer.prototype, "isPoint", {
        get: /**
         * @return {?}
         */
        function () {
            return isPointGeometryType(this.geometryType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FeatureClassLayer.prototype, "isLinear", {
        get: /**
         * @return {?}
         */
        function () {
            return isLinearGeometryType(this.geometryType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FeatureClassLayer.prototype, "isPolygon", {
        get: /**
         * @return {?}
         */
        function () {
            return isPolygonGeometryType(this.geometryType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FeatureClassLayer.prototype, "displayFieldAlias", {
        get: /**
         * @return {?}
         */
        function () {
            return this.getFieldAlias(this.displayField);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fieldName
     * @return {?}
     */
    FeatureClassLayer.prototype.getField = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return getField(fieldName, this.fields);
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    FeatureClassLayer.prototype.getFieldAlias = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        return getFieldAlias(fieldName, this.fields);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} domains
     * @return {THIS}
     */
    FeatureClassLayer.prototype.applyFieldDomains = /**
     * @template THIS
     * @this {THIS}
     * @param {?} domains
     * @return {THIS}
     */
    function (domains) {
        if (domains.length) {
            (/** @type {?} */ (this)).fields
                .filter((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.domainName; }))
                .forEach((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return field.domain = domains.find((/**
                 * @param {?} domain
                 * @return {?}
                 */
                function (domain) { return domain.name === field.domainName; })) || field.domain;
            }));
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    FeatureClassLayer.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copy = clone(this);
        return new FeatureClassLayer(copy);
    };
    return FeatureClassLayer;
}());
export { FeatureClassLayer };
if (false) {
    /** @type {?} */
    FeatureClassLayer.prototype.id;
    /** @type {?} */
    FeatureClassLayer.prototype.name;
    /** @type {?} */
    FeatureClassLayer.prototype.type;
    /** @type {?} */
    FeatureClassLayer.prototype.parentLayer;
    /** @type {?} */
    FeatureClassLayer.prototype.subLayers;
    /** @type {?} */
    FeatureClassLayer.prototype.description;
    /** @type {?} */
    FeatureClassLayer.prototype.hasAttachments;
    /** @type {?} */
    FeatureClassLayer.prototype.currentVersion;
    /** @type {?} */
    FeatureClassLayer.prototype.geometryType;
    /** @type {?} */
    FeatureClassLayer.prototype.sourceSpatialReference;
    /** @type {?} */
    FeatureClassLayer.prototype.minScale;
    /** @type {?} */
    FeatureClassLayer.prototype.maxScale;
    /** @type {?} */
    FeatureClassLayer.prototype.extent;
    /** @type {?} */
    FeatureClassLayer.prototype.displayField;
    /** @type {?} */
    FeatureClassLayer.prototype.typeIdField;
    /** @type {?} */
    FeatureClassLayer.prototype.fields;
    /** @type {?} */
    FeatureClassLayer.prototype.indexes;
    /** @type {?} */
    FeatureClassLayer.prototype.relationships;
    /** @type {?} */
    FeatureClassLayer.prototype.maxRecordCount;
    /** @type {?} */
    FeatureClassLayer.prototype.supportsStatistics;
    /** @type {?} */
    FeatureClassLayer.prototype.supportsAdvancedQueries;
    /** @type {?} */
    FeatureClassLayer.prototype.hasZ;
    /** @type {?} */
    FeatureClassLayer.prototype.hasM;
    /** @type {?} */
    FeatureClassLayer.prototype.supportedQueryFormats;
    /** @type {?} */
    FeatureClassLayer.prototype.supportsDatumTransformation;
    /** @type {?} */
    FeatureClassLayer.prototype.isDataVersioned;
    /** @type {?} */
    FeatureClassLayer.prototype.drawingInfo;
    /** @type {?} */
    FeatureClassLayer.prototype.order;
}
//# sourceMappingURL=data:application/json;base64,