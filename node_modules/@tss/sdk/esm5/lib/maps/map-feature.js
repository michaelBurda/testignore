/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TSS.
import { getMeasureExtent } from '../geometry/geometry/get-measure-extent.function';
import { isLine } from '../geometry/geometry/is-line.function';
import { getIdFieldFieldName, isFieldExpression } from './fields/layer-field';
import { getCodedValueNameOrDefault } from './fields/get-coded-value-name-or-default.function';
import { evaluteFeatureDataExpression } from '../lrs/data/evaluate-feature-data-expression.function';
import { isPoint } from '../geometry/geometry/is-point.function';
import { isPolygon } from '../geometry/geometry/is-polygon.function';
import { WGS_84_SRID } from '../geometry/geometry.constants';
import { clone } from '../core/clone/clone.function';
var MapFeature = /** @class */ (function () {
    function MapFeature(feature, layer, spatialReferenceId) {
        if (spatialReferenceId === void 0) { spatialReferenceId = WGS_84_SRID; }
        this.id = feature.id;
        this.properties = feature.properties;
        this.type = feature.type;
        this.bbox = feature.bbox;
        this.layer = layer;
        this.spatialReferenceId = spatialReferenceId;
        /** @type {?} */
        var idFieldName = this.getIdFieldName();
        this.id = this.id || this.getValue(idFieldName);
        this.displayValue = this.getValue(layer.displayField);
        this.setGeometry(feature.geometry);
    }
    Object.defineProperty(MapFeature.prototype, "layerId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layer ? this.layer.id : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapFeature.prototype, "hasZ", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layer.hasZ;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapFeature.prototype, "hasM", {
        get: /**
         * @return {?}
         */
        function () {
            return this.layer.hasM;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MapFeature.prototype.getIdFieldName = /**
     * @return {?}
     */
    function () {
        return getIdFieldFieldName(this.layer.fields);
    };
    /**
     * @param {?} fieldNameOrExpression
     * @return {?}
     */
    MapFeature.prototype.getValue = /**
     * @param {?} fieldNameOrExpression
     * @return {?}
     */
    function (fieldNameOrExpression) {
        return isFieldExpression(fieldNameOrExpression)
            ? evaluteFeatureDataExpression(fieldNameOrExpression, this)
            : this.properties && this.properties[fieldNameOrExpression];
    };
    /**
     * @param {?} fieldName
     * @return {?}
     */
    MapFeature.prototype.getCodedValueNameOrDefault = /**
     * @param {?} fieldName
     * @return {?}
     */
    function (fieldName) {
        /** @type {?} */
        var value = this.getValue(fieldName);
        /** @type {?} */
        var field = this.layer.getField(fieldName);
        return getCodedValueNameOrDefault(field, value);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} fieldName
     * @param {?} value
     * @return {THIS}
     */
    MapFeature.prototype.setValue = /**
     * @template THIS
     * @this {THIS}
     * @param {?} fieldName
     * @param {?} value
     * @return {THIS}
     */
    function (fieldName, value) {
        (/** @type {?} */ (this)).properties[fieldName] = value;
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} id
     * @return {THIS}
     */
    MapFeature.prototype.setId = /**
     * @template THIS
     * @this {THIS}
     * @param {?} id
     * @return {THIS}
     */
    function (id) {
        (/** @type {?} */ (this)).id = id;
        (/** @type {?} */ (this)).setValue(getIdFieldFieldName((/** @type {?} */ (this)).layer.fields), id);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} geometry
     * @return {THIS}
     */
    MapFeature.prototype.setGeometry = /**
     * @template THIS
     * @this {THIS}
     * @param {?} geometry
     * @return {THIS}
     */
    function (geometry) {
        (/** @type {?} */ (this)).geometry = geometry;
        return (/** @type {?} */ (this)).setGeometryTypeProperties();
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    MapFeature.prototype.setMeasureFromGeometry = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        if ((/** @type {?} */ (this)).geometry) {
            /** @type {?} */
            var extent = getMeasureExtent((/** @type {?} */ (this)).geometry);
            (/** @type {?} */ (this)).fromMeasure = extent.min;
            (/** @type {?} */ (this)).toMeasure = extent.max;
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    MapFeature.prototype.isSpatialReferenceWgs84 = /**
     * @return {?}
     */
    function () {
        return this.spatialReferenceId === WGS_84_SRID;
    };
    /**
     * @return {?}
     */
    MapFeature.prototype.clone = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copyFeature = clone(this.toFeature());
        return new MapFeature(copyFeature, this.layer);
    };
    /**
     * @return {?}
     */
    MapFeature.prototype.toFeature = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var feature = {
            type: 'Feature',
            geometry: this.geometry,
            properties: this.properties,
            id: this.id,
            bbox: this.bbox,
        };
        return feature;
    };
    /**
     * @return {?}
     */
    MapFeature.prototype.toGeoJson = /**
     * @return {?}
     */
    function () {
        return this.toFeature();
    };
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    MapFeature.prototype.setGeometryTypeProperties = /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).isLinear = isLine((/** @type {?} */ (this)).geometry);
        (/** @type {?} */ (this)).isPoint = isPoint((/** @type {?} */ (this)).geometry);
        (/** @type {?} */ (this)).isPolygon = isPolygon((/** @type {?} */ (this)).geometry);
        return (/** @type {?} */ (this));
    };
    return MapFeature;
}());
export { MapFeature };
if (false) {
    /** @type {?} */
    MapFeature.prototype.id;
    /** @type {?} */
    MapFeature.prototype.geometry;
    /** @type {?} */
    MapFeature.prototype.properties;
    /** @type {?} */
    MapFeature.prototype.bbox;
    /** @type {?} */
    MapFeature.prototype.type;
    /** @type {?} */
    MapFeature.prototype.routeId;
    /** @type {?} */
    MapFeature.prototype.fromMeasure;
    /** @type {?} */
    MapFeature.prototype.toMeasure;
    /** @type {?} */
    MapFeature.prototype.layer;
    /** @type {?} */
    MapFeature.prototype.displayValue;
    /** @type {?} */
    MapFeature.prototype.styleValue;
    /** @type {?} */
    MapFeature.prototype.isLinear;
    /** @type {?} */
    MapFeature.prototype.isPoint;
    /** @type {?} */
    MapFeature.prototype.isPolygon;
    /** @type {?} */
    MapFeature.prototype.viewDate;
    /** @type {?} */
    MapFeature.prototype.gdbVersion;
    /** @type {?} */
    MapFeature.prototype.spatialReferenceId;
}
//# sourceMappingURL=data:application/json;base64,