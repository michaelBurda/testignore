/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// 3rd Party.
import { Subject, fromEvent } from 'rxjs';
import { MotionConfig } from './motion.config';
import * as i0 from "@angular/core";
import * as i1 from "./motion.config";
/**
 * Geolocator service. Provides a single point of motion API.
 */
var DeviceMotionService = /** @class */ (function () {
    function DeviceMotionService(config) {
        var _this = this;
        this.config = config;
        this.motionChangeSource = new Subject();
        this.motionChange = this.motionChangeSource.asObservable();
        fromEvent(window, 'ondevicemotion').subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.emitMotionChange(event); }));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} motion
     * @return {THIS}
     */
    DeviceMotionService.prototype.mockMotion = /**
     * @template THIS
     * @this {THIS}
     * @param {?} motion
     * @return {THIS}
     */
    function (motion) {
        if (!(/** @type {?} */ (this)).config.allowMotionMocking) {
            throw new Error('Permission denied to mock device motion');
        }
        (/** @type {?} */ (this)).motionChangeSource.next(motion);
        return (/** @type {?} */ (this));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    DeviceMotionService.prototype.emitMotionChange = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.motionChangeSource.next({
            x: event.acceleration.x,
            y: event.acceleration.y,
            z: event.acceleration.z,
            withGravityX: event.accelerationIncludingGravity.x,
            withGravityY: event.accelerationIncludingGravity.y,
            withGravityZ: event.accelerationIncludingGravity.z,
            rotationRateAlpha: event.rotationRate.alpha,
            rotationRateBeta: event.rotationRate.beta,
            rotationRateGamma: event.rotationRate.gamma,
        });
    };
    DeviceMotionService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DeviceMotionService.ctorParameters = function () { return [
        { type: MotionConfig }
    ]; };
    /** @nocollapse */ DeviceMotionService.ngInjectableDef = i0.defineInjectable({ factory: function DeviceMotionService_Factory() { return new DeviceMotionService(i0.inject(i1.MotionConfig)); }, token: DeviceMotionService, providedIn: "root" });
    return DeviceMotionService;
}());
export { DeviceMotionService };
if (false) {
    /** @type {?} */
    DeviceMotionService.prototype.motionChange;
    /** @type {?} */
    DeviceMotionService.prototype.motionChangeSource;
    /**
     * @type {?}
     * @private
     */
    DeviceMotionService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLW1vdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvbW90aW9uL2RldmljZS1tb3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSXRELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7O0FBTS9DO0lBT0UsNkJBQTZCLE1BQW9CO1FBQWpELGlCQUtDO1FBTDRCLFdBQU0sR0FBTixNQUFNLENBQWM7UUFDL0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFM0QsU0FBUyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFDLEtBQXdCLElBQUssT0FBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEVBQTVCLENBQTRCLEVBQUMsQ0FBQztJQUM1RyxDQUFDOzs7Ozs7O0lBRUQsd0NBQVU7Ozs7OztJQUFWLFVBQVcsTUFBYztRQUN2QixJQUFJLENBQUMsbUJBQUEsSUFBSSxFQUFBLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztTQUM1RDtRQUVELG1CQUFBLElBQUksRUFBQSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7O0lBRU8sOENBQWdCOzs7OztJQUF4QixVQUF5QixLQUF3QjtRQUMvQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDO1lBQzNCLENBQUMsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZCLFlBQVksRUFBRSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUNsRCxZQUFZLEVBQUUsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7WUFDbEQsWUFBWSxFQUFFLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBQ2xELGlCQUFpQixFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSztZQUMzQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUk7WUFDekMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLO1NBQzVDLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQW5DRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQVJRLFlBQVk7Ozs4QkFSckI7Q0FrREMsQUFwQ0QsSUFvQ0M7U0FqQ1ksbUJBQW1COzs7SUFDOUIsMkNBQTBDOztJQUMxQyxpREFBNkM7Ozs7O0lBRWpDLHFDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIDNyZCBQYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIGZyb21FdmVudCB9IGZyb20gJ3J4anMnO1xuXG4vLyBBcHAuXG5pbXBvcnQgeyBNb3Rpb24gfSBmcm9tICcuL21vdGlvbic7XG5pbXBvcnQgeyBNb3Rpb25Db25maWcgfSBmcm9tICcuL21vdGlvbi5jb25maWcnO1xuXG5cbi8qKlxuICogR2VvbG9jYXRvciBzZXJ2aWNlLiBQcm92aWRlcyBhIHNpbmdsZSBwb2ludCBvZiBtb3Rpb24gQVBJLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBEZXZpY2VNb3Rpb25TZXJ2aWNlIHtcbiAgcmVhZG9ubHkgbW90aW9uQ2hhbmdlOiBPYnNlcnZhYmxlPE1vdGlvbj47XG4gIHJlYWRvbmx5IG1vdGlvbkNoYW5nZVNvdXJjZTogU3ViamVjdDxNb3Rpb24+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29uZmlnOiBNb3Rpb25Db25maWcpIHtcbiAgICB0aGlzLm1vdGlvbkNoYW5nZVNvdXJjZSA9IG5ldyBTdWJqZWN0KCk7XG4gICAgdGhpcy5tb3Rpb25DaGFuZ2UgPSB0aGlzLm1vdGlvbkNoYW5nZVNvdXJjZS5hc09ic2VydmFibGUoKTtcblxuICAgIGZyb21FdmVudCh3aW5kb3csICdvbmRldmljZW1vdGlvbicpLnN1YnNjcmliZSgoZXZlbnQ6IERldmljZU1vdGlvbkV2ZW50KSA9PiB0aGlzLmVtaXRNb3Rpb25DaGFuZ2UoZXZlbnQpKTtcbiAgfVxuXG4gIG1vY2tNb3Rpb24obW90aW9uOiBNb3Rpb24pOiB0aGlzIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmFsbG93TW90aW9uTW9ja2luZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQZXJtaXNzaW9uIGRlbmllZCB0byBtb2NrIGRldmljZSBtb3Rpb24nKTtcbiAgICB9XG5cbiAgICB0aGlzLm1vdGlvbkNoYW5nZVNvdXJjZS5uZXh0KG1vdGlvbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwcml2YXRlIGVtaXRNb3Rpb25DaGFuZ2UoZXZlbnQ6IERldmljZU1vdGlvbkV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5tb3Rpb25DaGFuZ2VTb3VyY2UubmV4dCh7XG4gICAgICB4OiBldmVudC5hY2NlbGVyYXRpb24ueCxcbiAgICAgIHk6IGV2ZW50LmFjY2VsZXJhdGlvbi55LFxuICAgICAgejogZXZlbnQuYWNjZWxlcmF0aW9uLnosXG4gICAgICB3aXRoR3Jhdml0eVg6IGV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueCxcbiAgICAgIHdpdGhHcmF2aXR5WTogZXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS55LFxuICAgICAgd2l0aEdyYXZpdHlaOiBldmVudC5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LnosXG4gICAgICByb3RhdGlvblJhdGVBbHBoYTogZXZlbnQucm90YXRpb25SYXRlLmFscGhhLFxuICAgICAgcm90YXRpb25SYXRlQmV0YTogZXZlbnQucm90YXRpb25SYXRlLmJldGEsXG4gICAgICByb3RhdGlvblJhdGVHYW1tYTogZXZlbnQucm90YXRpb25SYXRlLmdhbW1hLFxuICAgIH0pO1xuICB9XG59XG4iXX0=