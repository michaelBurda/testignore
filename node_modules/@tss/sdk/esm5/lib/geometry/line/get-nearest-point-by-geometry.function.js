/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { toMultiPartPaths } from './to-multi-part-paths.function';
import { getDistanceBetweenPoints, getMetersBetweenLatLng } from '../point/get-distance-between-points.function';
import { toSinglePartPointArray } from '../point/to-single-part-point.function';
import { getDistanceToLine } from './get-distance-to-line.function';
import { addRange } from '../../core/array/add-range.function';
/**
 * @record
 */
export function LineVerticeeSummary() { }
if (false) {
    /** @type {?} */
    LineVerticeeSummary.prototype.nearestPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.furthestPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.minPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.maxPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.nextPoint;
    /** @type {?} */
    LineVerticeeSummary.prototype.previousPoint;
}
/**
 * @param {?} line
 * @param {?} point
 * @param {?=} isPointDegrees
 * @return {?}
 */
export function getVerticeeInfos(line, point, isPointDegrees) {
    if (isPointDegrees === void 0) { isPointDegrees = true; }
    /** @type {?} */
    var pointComparisonDetails = [];
    /** @type {?} */
    var paths = toMultiPartPaths(line);
    paths.forEach((/**
     * @param {?} coordinates
     * @return {?}
     */
    function (coordinates) {
        /** @type {?} */
        var details = comparePathWithPoint(coordinates, point, isPointDegrees);
        addRange(pointComparisonDetails, details);
    }));
    /** @type {?} */
    var nearestPoint;
    /** @type {?} */
    var furthestPoint;
    /** @type {?} */
    var minPoint;
    /** @type {?} */
    var maxPoint;
    pointComparisonDetails.forEach((/**
     * @param {?} pointCandidate
     * @return {?}
     */
    function (pointCandidate) {
        if (!nearestPoint || pointCandidate.distance < nearestPoint.distance) {
            nearestPoint = pointCandidate;
        }
        if (!furthestPoint || pointCandidate.distance > furthestPoint.distance) {
            furthestPoint = pointCandidate;
        }
        if (!minPoint || pointCandidate.pointMeasure < minPoint.pointMeasure) {
            minPoint = pointCandidate;
        }
        if (!maxPoint || pointCandidate.pointMeasure > maxPoint.pointMeasure) {
            maxPoint = pointCandidate;
        }
    }));
    // const nearestPoint = pointComparisionDetails
    //   .reduce((accumulator, value) => accumulator.distance > value.distance ? value : accumulator);
    /** @type {?} */
    var pointBefore = pointComparisonDetails[nearestPoint.index - 1];
    /** @type {?} */
    var pointAfter = pointComparisonDetails[nearestPoint.index + 1];
    /** @type {?} */
    var nextPoint = pointAfter;
    /** @type {?} */
    var previousPoint = pointBefore;
    // NOTE: this logic handles the rare case where the distance of the test point matches both the next
    // and previous verticee.
    // 0-----4--------------------------100
    //          5
    if (pointBefore && pointAfter) {
        /** @type {?} */
        var beforDistance = getDistanceToLine(point, nearestPoint.pointCoordinate, pointBefore.pointCoordinate);
        /** @type {?} */
        var afterDistance = getDistanceToLine(point, nearestPoint.pointCoordinate, pointAfter.pointCoordinate);
        if (beforDistance < afterDistance) {
            nextPoint = pointBefore;
            previousPoint = pointComparisonDetails[nextPoint.index - 2];
        }
    }
    return {
        nearestPoint: nearestPoint,
        furthestPoint: furthestPoint,
        nextPoint: nextPoint,
        previousPoint: previousPoint,
        minPoint: minPoint,
        maxPoint: maxPoint
    };
}
/**
 * @param {?} line
 * @param {?} point
 * @param {?=} isPointDegrees
 * @return {?}
 */
export function getClosestVerticees(line, point, isPointDegrees) {
    if (isPointDegrees === void 0) { isPointDegrees = true; }
    /** @type {?} */
    var info = getVerticeeInfos(line, point, isPointDegrees);
    return [
        info.nearestPoint ? info.nearestPoint.pointCoordinate : null,
        info.nextPoint ? info.nextPoint.pointCoordinate : null
    ];
}
/**
 * @param {?} line
 * @param {?} point
 * @param {?=} isPointDegrees
 * @return {?}
 */
export function getClosestVerticee(line, point, isPointDegrees) {
    if (isPointDegrees === void 0) { isPointDegrees = true; }
    var _a = tslib_1.__read(getClosestVerticees(line, point, isPointDegrees), 1), firstClosest = _a[0];
    return firstClosest;
}
/**
 * @param {?} coordinates
 * @param {?} pointToCompare
 * @param {?} isPointDegrees
 * @return {?}
 */
function comparePathWithPoint(coordinates, pointToCompare, isPointDegrees) {
    /** @type {?} */
    var pointComparisionDetailsFromPath = coordinates
        .map((/**
     * @param {?} coordinate
     * @param {?} index
     * @return {?}
     */
    function (coordinate, index) { return compareCoordinateWithPoint(coordinate, pointToCompare, isPointDegrees, index); }));
    return pointComparisionDetailsFromPath;
}
/**
 * @param {?} coordinate
 * @param {?} pointToCompare
 * @return {?}
 */
function getDegreeDistance(coordinate, pointToCompare) {
    /** @type {?} */
    var coordinate2 = toSinglePartPointArray(pointToCompare);
    return getMetersBetweenLatLng(coordinate[1], coordinate[0], coordinate2[1], coordinate2[0]);
}
/**
 * @param {?} coordinate
 * @param {?} pointToCompare
 * @param {?} isPointDegrees
 * @param {?} index
 * @return {?}
 */
function compareCoordinateWithPoint(coordinate, pointToCompare, isPointDegrees, index) {
    /** @type {?} */
    var distance = isPointDegrees
        ? getDegreeDistance(coordinate, pointToCompare)
        : getDistanceBetweenPoints(coordinate, pointToCompare);
    /** @type {?} */
    var pointDetails = {
        pointCoordinate: coordinate,
        distance: distance,
        index: index
    };
    return pointDetails;
}
//# sourceMappingURL=data:application/json;base64,