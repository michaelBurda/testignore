/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { toMultiPartPaths } from './to-multi-part-paths.function';
import { addRange } from '../../core/array/add-range.function';
import { getMeasureFromPoint } from '../point/get-measure-from-point.function';
/**
 * @param {?} line
 * @param {?} measure
 * @return {?}
 */
export function getPoint(line, measure) {
    /** @type {?} */
    var pointComparisionDetails = [];
    /** @type {?} */
    var paths = toMultiPartPaths(line);
    paths.forEach((/**
     * @param {?} coordinates
     * @return {?}
     */
    function (coordinates) {
        /** @type {?} */
        var details = comparePathWithMeasure(coordinates, measure);
        addRange(pointComparisionDetails, details);
    }));
    /** @type {?} */
    var minPoint = pointComparisionDetails.reduce((/**
     * @param {?} accumulator
     * @param {?} value
     * @return {?}
     */
    function (accumulator, value) { return minPointCloserToMeasure(accumulator, value, measure); }));
    /** @type {?} */
    var maxPoint = pointComparisionDetails.reduce((/**
     * @param {?} accumulator
     * @param {?} value
     * @return {?}
     */
    function (accumulator, value) { return maxPointCloserToMeasure(accumulator, value, measure); }));
    /** @type {?} */
    var measureDeltaPercent = calculateMeasureDelta(minPoint.pointMeasure, maxPoint.pointMeasure, measure);
    /** @type {?} */
    var x = interpolateX(minPoint.pointCoordinate, maxPoint.pointCoordinate, measureDeltaPercent);
    /** @type {?} */
    var y = interpolateY(minPoint.pointCoordinate, maxPoint.pointCoordinate, measureDeltaPercent);
    return [x, y, 0, measure];
}
/**
 * @param {?} __0
 * @param {?} __1
 * @param {?} delta
 * @return {?}
 */
function interpolateX(_a, _b, delta) {
    var _c = tslib_1.__read(_a, 1), minX = _c[0];
    var _d = tslib_1.__read(_b, 1), maxX = _d[0];
    return minX + delta * (maxX - minX);
}
/**
 * @param {?} __0
 * @param {?} __1
 * @param {?} delta
 * @return {?}
 */
function interpolateY(_a, _b, delta) {
    var _c = tslib_1.__read(_a, 2), minY = _c[1];
    var _d = tslib_1.__read(_b, 2), maxY = _d[1];
    return minY + delta * (maxY - minY);
}
/**
 * @param {?} minMeasure
 * @param {?} maxMeasure
 * @param {?} measure
 * @return {?}
 */
function calculateMeasureDelta(minMeasure, maxMeasure, measure) {
    if (maxMeasure === minMeasure) {
        return 0;
    }
    return (measure - minMeasure) / (maxMeasure - minMeasure);
}
/**
 * @param {?} coordinates
 * @param {?} measureToCompare
 * @return {?}
 */
function comparePathWithMeasure(coordinates, measureToCompare) {
    /** @type {?} */
    var pointComparisionDetailsFromPath = coordinates
        .map((/**
     * @param {?} coordinate
     * @param {?} index
     * @return {?}
     */
    function (coordinate, index) { return compareCoordinateWithMeasure(coordinate, measureToCompare, index); }));
    return pointComparisionDetailsFromPath;
}
/**
 * @param {?} coordinate
 * @param {?} measureToCompare
 * @param {?} index
 * @return {?}
 */
function compareCoordinateWithMeasure(coordinate, measureToCompare, index) {
    /** @type {?} */
    var measureFromCoordinate = getMeasureFromPoint(coordinate);
    /** @type {?} */
    var pointDetails = {
        pointCoordinate: coordinate,
        distance: Math.abs(measureFromCoordinate - measureToCompare),
        pointMeasure: measureFromCoordinate,
        index: index
    };
    return pointDetails;
}
/**
 * @param {?} accumulator
 * @param {?} value
 * @param {?} measureToCompare
 * @return {?}
 */
function minPointCloserToMeasure(accumulator, value, measureToCompare) {
    /** @type {?} */
    var isPointCloserToMeasure = value.distance <= accumulator.distance;
    /** @type {?} */
    var isPointLessThanMeasure = value.pointMeasure <= measureToCompare;
    return isPointCloserToMeasure && isPointLessThanMeasure
        ? value
        : accumulator;
}
/**
 * @param {?} point1
 * @param {?} point2
 * @param {?} measureToCompare
 * @return {?}
 */
function maxPointCloserToMeasure(point1, point2, measureToCompare) {
    /** @type {?} */
    var isPointCloserToMeasure = point1.distance <= point2.distance;
    /** @type {?} */
    var isPointGreaterThanMeasure = point1.pointMeasure >= measureToCompare;
    return isPointCloserToMeasure && isPointGreaterThanMeasure
        ? point1
        : point2;
}
//# sourceMappingURL=data:application/json;base64,