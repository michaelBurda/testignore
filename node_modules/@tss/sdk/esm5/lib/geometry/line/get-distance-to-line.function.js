/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { toSinglePartPointArray } from '../point/to-single-part-point.function';
/**
 * @record
 */
function Point() { }
if (false) {
    /** @type {?} */
    Point.prototype.x;
    /** @type {?} */
    Point.prototype.y;
}
/**
 * @param {?} x
 * @return {?}
 */
function squareRoot(x) {
    return x * x;
}
/**
 * @param {?} v
 * @param {?} w
 * @return {?}
 */
function squareRootDistance(v, w) {
    return squareRoot(v.x - w.x) + squareRoot(v.y - w.y);
}
/**
 * @param {?} testPoint
 * @param {?} lineStartPoint
 * @param {?} lineEndPoint
 * @return {?}
 */
function distanceToSegmentSquared(testPoint, lineStartPoint, lineEndPoint) {
    /** @type {?} */
    var lengthSquared = squareRootDistance(lineStartPoint, lineEndPoint);
    if (lengthSquared === 0) {
        return squareRootDistance(testPoint, lineStartPoint);
    }
    /** @type {?} */
    var part1 = (testPoint.x - lineStartPoint.x) * (lineEndPoint.x - lineStartPoint.x);
    /** @type {?} */
    var part2 = (testPoint.y - lineStartPoint.y) * (lineEndPoint.y - lineStartPoint.y);
    /** @type {?} */
    var formulaPart1 = part1 + part2;
    /** @type {?} */
    var delta = formulaPart1 / lengthSquared;
    if (delta < 0) {
        return squareRootDistance(testPoint, lineStartPoint);
    }
    if (delta > 1) {
        return squareRootDistance(testPoint, lineEndPoint);
    }
    /** @type {?} */
    var xValue = lineStartPoint.x + delta * (lineEndPoint.x - lineStartPoint.x);
    /** @type {?} */
    var yValue = lineStartPoint.y + delta * (lineEndPoint.y - lineStartPoint.y);
    return squareRootDistance(testPoint, { x: xValue, y: yValue });
}
/**
 * @param {?} testPoint
 * @param {?} lineStartPoint
 * @param {?} lineEndPoint
 * @return {?}
 */
function distToSegment(testPoint, lineStartPoint, lineEndPoint) {
    return Math.sqrt(distanceToSegmentSquared(testPoint, lineStartPoint, lineEndPoint));
}
/**
 * @param {?} testPoint
 * @param {?} lineStartPoint
 * @param {?} lineEndPoint
 * @return {?}
 */
export function getDistanceToLine(testPoint, lineStartPoint, lineEndPoint) {
    /** @type {?} */
    var testPointArray = toSinglePartPointArray(testPoint);
    /** @type {?} */
    var lineStartPointArray = toSinglePartPointArray(lineStartPoint);
    /** @type {?} */
    var lineEndPointArray = toSinglePartPointArray(lineEndPoint);
    var _a = tslib_1.__read(testPointArray, 2), testPointX = _a[0], testPointY = _a[1];
    var _b = tslib_1.__read(lineStartPointArray, 2), lineStartX = _b[0], lineStartY = _b[1];
    var _c = tslib_1.__read(lineEndPointArray, 2), lineEndX = _c[0], lineEndY = _c[1];
    return distToSegment({ x: testPointX, y: testPointY }, { x: lineStartX, y: lineStartY }, { x: lineEndX, y: lineEndY });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWRpc3RhbmNlLXRvLWxpbmUuZnVuY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9nZW9tZXRyeS9saW5lL2dldC1kaXN0YW5jZS10by1saW5lLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7Ozs7QUFHaEYsb0JBR0M7OztJQUZDLGtCQUFVOztJQUNWLGtCQUFVOzs7Ozs7QUFHWixTQUFTLFVBQVUsQ0FBQyxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLENBQUM7Ozs7OztBQUVELFNBQVMsa0JBQWtCLENBQUMsQ0FBUSxFQUFFLENBQVE7SUFDNUMsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7Ozs7Ozs7QUFFRCxTQUFTLHdCQUF3QixDQUFDLFNBQWdCLEVBQUUsY0FBcUIsRUFBRSxZQUFtQjs7UUFDdEYsYUFBYSxHQUFHLGtCQUFrQixDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUM7SUFFdEUsSUFBSSxhQUFhLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sa0JBQWtCLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0tBQ3REOztRQUVLLEtBQUssR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDOztRQUM5RSxLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQzs7UUFDOUUsWUFBWSxHQUFHLEtBQUssR0FBRyxLQUFLOztRQUM1QixLQUFLLEdBQUcsWUFBWSxHQUFHLGFBQWE7SUFFMUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1FBQ2IsT0FBTyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7S0FDdEQ7SUFFRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDYixPQUFPLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztLQUNwRDs7UUFFSyxNQUFNLEdBQUcsY0FBYyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUM7O1FBQ3ZFLE1BQU0sR0FBRyxjQUFjLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUU3RSxPQUFPLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDakUsQ0FBQzs7Ozs7OztBQUVELFNBQVMsYUFBYSxDQUFDLFNBQWdCLEVBQUUsY0FBcUIsRUFBRSxZQUFtQjtJQUNqRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3RGLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsU0FBc0IsRUFBRSxjQUEyQixFQUFFLFlBQXlCOztRQUN4RyxjQUFjLEdBQWEsc0JBQXNCLENBQUMsU0FBUyxDQUFDOztRQUM1RCxtQkFBbUIsR0FBYSxzQkFBc0IsQ0FBQyxjQUFjLENBQUM7O1FBQ3RFLGlCQUFpQixHQUFhLHNCQUFzQixDQUFDLFlBQVksQ0FBQztJQUNsRSxJQUFBLHNDQUF5QyxFQUF4QyxrQkFBVSxFQUFFLGtCQUE0QjtJQUN6QyxJQUFBLDJDQUE4QyxFQUE3QyxrQkFBVSxFQUFFLGtCQUFpQztJQUM5QyxJQUFBLHlDQUF3QyxFQUF2QyxnQkFBUSxFQUFFLGdCQUE2QjtJQUU5QyxPQUFPLGFBQWEsQ0FDbEIsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFDaEMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsRUFDaEMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FDN0IsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW5nbGVQb2ludCB9IGZyb20gJy4uL3BvaW50L3NpbmdsZS1wb2ludCc7XG5pbXBvcnQgeyB0b1NpbmdsZVBhcnRQb2ludEFycmF5IH0gZnJvbSAnLi4vcG9pbnQvdG8tc2luZ2xlLXBhcnQtcG9pbnQuZnVuY3Rpb24nO1xuXG5cbmludGVyZmFjZSBQb2ludCB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBzcXVhcmVSb290KHgpIHtcbiAgcmV0dXJuIHggKiB4O1xufVxuXG5mdW5jdGlvbiBzcXVhcmVSb290RGlzdGFuY2UodjogUG9pbnQsIHc6IFBvaW50KSB7XG4gIHJldHVybiBzcXVhcmVSb290KHYueCAtIHcueCkgKyBzcXVhcmVSb290KHYueSAtIHcueSk7XG59XG5cbmZ1bmN0aW9uIGRpc3RhbmNlVG9TZWdtZW50U3F1YXJlZCh0ZXN0UG9pbnQ6IFBvaW50LCBsaW5lU3RhcnRQb2ludDogUG9pbnQsIGxpbmVFbmRQb2ludDogUG9pbnQpIHtcbiAgY29uc3QgbGVuZ3RoU3F1YXJlZCA9IHNxdWFyZVJvb3REaXN0YW5jZShsaW5lU3RhcnRQb2ludCwgbGluZUVuZFBvaW50KTtcblxuICBpZiAobGVuZ3RoU3F1YXJlZCA9PT0gMCkge1xuICAgIHJldHVybiBzcXVhcmVSb290RGlzdGFuY2UodGVzdFBvaW50LCBsaW5lU3RhcnRQb2ludCk7XG4gIH1cblxuICBjb25zdCBwYXJ0MSA9ICh0ZXN0UG9pbnQueCAtIGxpbmVTdGFydFBvaW50LngpICogKGxpbmVFbmRQb2ludC54IC0gbGluZVN0YXJ0UG9pbnQueCk7XG4gIGNvbnN0IHBhcnQyID0gKHRlc3RQb2ludC55IC0gbGluZVN0YXJ0UG9pbnQueSkgKiAobGluZUVuZFBvaW50LnkgLSBsaW5lU3RhcnRQb2ludC55KTtcbiAgY29uc3QgZm9ybXVsYVBhcnQxID0gcGFydDEgKyBwYXJ0MjtcbiAgY29uc3QgZGVsdGEgPSBmb3JtdWxhUGFydDEgLyBsZW5ndGhTcXVhcmVkO1xuXG4gIGlmIChkZWx0YSA8IDApIHtcbiAgICByZXR1cm4gc3F1YXJlUm9vdERpc3RhbmNlKHRlc3RQb2ludCwgbGluZVN0YXJ0UG9pbnQpO1xuICB9XG5cbiAgaWYgKGRlbHRhID4gMSkge1xuICAgIHJldHVybiBzcXVhcmVSb290RGlzdGFuY2UodGVzdFBvaW50LCBsaW5lRW5kUG9pbnQpO1xuICB9XG5cbiAgY29uc3QgeFZhbHVlID0gbGluZVN0YXJ0UG9pbnQueCArIGRlbHRhICogKGxpbmVFbmRQb2ludC54IC0gbGluZVN0YXJ0UG9pbnQueCk7XG4gIGNvbnN0IHlWYWx1ZSA9IGxpbmVTdGFydFBvaW50LnkgKyBkZWx0YSAqIChsaW5lRW5kUG9pbnQueSAtIGxpbmVTdGFydFBvaW50LnkpO1xuXG4gIHJldHVybiBzcXVhcmVSb290RGlzdGFuY2UodGVzdFBvaW50LCB7IHg6IHhWYWx1ZSwgeTogeVZhbHVlIH0pO1xufVxuXG5mdW5jdGlvbiBkaXN0VG9TZWdtZW50KHRlc3RQb2ludDogUG9pbnQsIGxpbmVTdGFydFBvaW50OiBQb2ludCwgbGluZUVuZFBvaW50OiBQb2ludCkge1xuICByZXR1cm4gTWF0aC5zcXJ0KGRpc3RhbmNlVG9TZWdtZW50U3F1YXJlZCh0ZXN0UG9pbnQsIGxpbmVTdGFydFBvaW50LCBsaW5lRW5kUG9pbnQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3RhbmNlVG9MaW5lKHRlc3RQb2ludDogU2luZ2xlUG9pbnQsIGxpbmVTdGFydFBvaW50OiBTaW5nbGVQb2ludCwgbGluZUVuZFBvaW50OiBTaW5nbGVQb2ludCk6IG51bWJlciB7XG4gIGNvbnN0IHRlc3RQb2ludEFycmF5OiBudW1iZXJbXSA9IHRvU2luZ2xlUGFydFBvaW50QXJyYXkodGVzdFBvaW50KTtcbiAgY29uc3QgbGluZVN0YXJ0UG9pbnRBcnJheTogbnVtYmVyW10gPSB0b1NpbmdsZVBhcnRQb2ludEFycmF5KGxpbmVTdGFydFBvaW50KTtcbiAgY29uc3QgbGluZUVuZFBvaW50QXJyYXk6IG51bWJlcltdID0gdG9TaW5nbGVQYXJ0UG9pbnRBcnJheShsaW5lRW5kUG9pbnQpO1xuICBjb25zdCBbdGVzdFBvaW50WCwgdGVzdFBvaW50WV0gPSB0ZXN0UG9pbnRBcnJheTtcbiAgY29uc3QgW2xpbmVTdGFydFgsIGxpbmVTdGFydFldID0gbGluZVN0YXJ0UG9pbnRBcnJheTtcbiAgY29uc3QgW2xpbmVFbmRYLCBsaW5lRW5kWV0gPSBsaW5lRW5kUG9pbnRBcnJheTtcblxuICByZXR1cm4gZGlzdFRvU2VnbWVudChcbiAgICB7IHg6IHRlc3RQb2ludFgsIHk6IHRlc3RQb2ludFkgfSxcbiAgICB7IHg6IGxpbmVTdGFydFgsIHk6IGxpbmVTdGFydFkgfSxcbiAgICB7IHg6IGxpbmVFbmRYLCB5OiBsaW5lRW5kWSB9LFxuICApO1xufVxuIl19