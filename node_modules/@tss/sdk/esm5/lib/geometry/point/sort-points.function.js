/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { toSinglePartPointArray } from './to-single-part-point.function';
import { getLastItem } from '../../core/array/get-last-item.function';
import { SORTED_BY_MEASURE_PROPERTY_FLAG } from '../geometry.constants';
import { toMultiPartPoint } from './to-multi-part-point.function';
/**
 * @param {?} firstPoint
 * @param {?} secondPoint
 * @return {?}
 */
export function getSortResultForPoints(firstPoint, secondPoint) {
    /** @type {?} */
    var first = toSinglePartPointArray(firstPoint);
    /** @type {?} */
    var second = toSinglePartPointArray(secondPoint);
    /** @type {?} */
    var firstCoordinateMeasure = getLastItem(first);
    /** @type {?} */
    var secondCoordinateMeasure = getLastItem(second);
    return firstCoordinateMeasure - secondCoordinateMeasure;
}
/**
 * @param {?} points
 * @param {?=} cacheSort
 * @return {?}
 */
export function sortPointsByMeasure(points, cacheSort) {
    if (cacheSort === void 0) { cacheSort = false; }
    if (points[SORTED_BY_MEASURE_PROPERTY_FLAG]) {
        return;
    }
    /** @type {?} */
    var coordinates = toMultiPartPoint(points);
    /** @type {?} */
    var coordinatesHaveMeasureValue = Boolean(coordinates.length
        && coordinates[0].length > 2);
    if (coordinatesHaveMeasureValue) {
        coordinates.sort(getSortResultForPoints);
        if (cacheSort) {
            points[SORTED_BY_MEASURE_PROPERTY_FLAG] = true;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1wb2ludHMuZnVuY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9nZW9tZXRyeS9wb2ludC9zb3J0LXBvaW50cy5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFekUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRXRFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7QUFHbEUsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFVBQXVCLEVBQUUsV0FBd0I7O1FBQ2hGLEtBQUssR0FBYSxzQkFBc0IsQ0FBQyxVQUFVLENBQUM7O1FBQ3BELE1BQU0sR0FBYSxzQkFBc0IsQ0FBQyxXQUFXLENBQUM7O1FBQ3RELHNCQUFzQixHQUFXLFdBQVcsQ0FBQyxLQUFLLENBQUM7O1FBQ25ELHVCQUF1QixHQUFXLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFFM0QsT0FBTyxzQkFBc0IsR0FBRyx1QkFBdUIsQ0FBQztBQUMxRCxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsTUFBZ0IsRUFBRSxTQUFpQjtJQUFqQiwwQkFBQSxFQUFBLGlCQUFpQjtJQUNyRSxJQUFJLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQyxFQUFFO1FBQzNDLE9BQU87S0FDUjs7UUFFSyxXQUFXLEdBQWUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDOztRQUNsRCwyQkFBMkIsR0FBRyxPQUFPLENBQ3pDLFdBQVcsQ0FBQyxNQUFNO1dBQ2YsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQzdCO0lBRUQsSUFBSSwyQkFBMkIsRUFBRTtRQUMvQixXQUFXLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDekMsSUFBSSxTQUFTLEVBQUU7WUFDYixNQUFNLENBQUMsK0JBQStCLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDaEQ7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b1NpbmdsZVBhcnRQb2ludEFycmF5IH0gZnJvbSAnLi90by1zaW5nbGUtcGFydC1wb2ludC5mdW5jdGlvbic7XG5pbXBvcnQgeyBTaW5nbGVQb2ludCB9IGZyb20gJy4vc2luZ2xlLXBvaW50JztcbmltcG9ydCB7IGdldExhc3RJdGVtIH0gZnJvbSAnLi4vLi4vY29yZS9hcnJheS9nZXQtbGFzdC1pdGVtLmZ1bmN0aW9uJztcbmltcG9ydCB7IEFueVBvaW50IH0gZnJvbSAnLi9hbnktcG9pbnQnO1xuaW1wb3J0IHsgU09SVEVEX0JZX01FQVNVUkVfUFJPUEVSVFlfRkxBRyB9IGZyb20gJy4uL2dlb21ldHJ5LmNvbnN0YW50cyc7XG5pbXBvcnQgeyB0b011bHRpUGFydFBvaW50IH0gZnJvbSAnLi90by1tdWx0aS1wYXJ0LXBvaW50LmZ1bmN0aW9uJztcblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29ydFJlc3VsdEZvclBvaW50cyhmaXJzdFBvaW50OiBTaW5nbGVQb2ludCwgc2Vjb25kUG9pbnQ6IFNpbmdsZVBvaW50KTogbnVtYmVyIHtcbiAgY29uc3QgZmlyc3Q6IG51bWJlcltdID0gdG9TaW5nbGVQYXJ0UG9pbnRBcnJheShmaXJzdFBvaW50KTtcbiAgY29uc3Qgc2Vjb25kOiBudW1iZXJbXSA9IHRvU2luZ2xlUGFydFBvaW50QXJyYXkoc2Vjb25kUG9pbnQpO1xuICBjb25zdCBmaXJzdENvb3JkaW5hdGVNZWFzdXJlOiBudW1iZXIgPSBnZXRMYXN0SXRlbShmaXJzdCk7XG4gIGNvbnN0IHNlY29uZENvb3JkaW5hdGVNZWFzdXJlOiBudW1iZXIgPSBnZXRMYXN0SXRlbShzZWNvbmQpO1xuXG4gIHJldHVybiBmaXJzdENvb3JkaW5hdGVNZWFzdXJlIC0gc2Vjb25kQ29vcmRpbmF0ZU1lYXN1cmU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0UG9pbnRzQnlNZWFzdXJlKHBvaW50czogQW55UG9pbnQsIGNhY2hlU29ydCA9IGZhbHNlKTogdm9pZCB7XG4gIGlmIChwb2ludHNbU09SVEVEX0JZX01FQVNVUkVfUFJPUEVSVFlfRkxBR10pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjb29yZGluYXRlczogbnVtYmVyW11bXSA9IHRvTXVsdGlQYXJ0UG9pbnQocG9pbnRzKTtcbiAgY29uc3QgY29vcmRpbmF0ZXNIYXZlTWVhc3VyZVZhbHVlID0gQm9vbGVhbihcbiAgICBjb29yZGluYXRlcy5sZW5ndGhcbiAgICAmJiBjb29yZGluYXRlc1swXS5sZW5ndGggPiAyXG4gICk7XG5cbiAgaWYgKGNvb3JkaW5hdGVzSGF2ZU1lYXN1cmVWYWx1ZSkge1xuICAgIGNvb3JkaW5hdGVzLnNvcnQoZ2V0U29ydFJlc3VsdEZvclBvaW50cyk7XG4gICAgaWYgKGNhY2hlU29ydCkge1xuICAgICAgcG9pbnRzW1NPUlRFRF9CWV9NRUFTVVJFX1BST1BFUlRZX0ZMQUddID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==