/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Determines if a point (value) is within a given bounds (line).
 * @param {?} boundStart The start of the restrcting bounds.
 * @param {?} boundEnd The end of the restricting bounds.
 * @param {?} testValue The value to check against the restricting bounds.
 * @return {?}
 */
export function isPointWithinBounds(boundStart, boundEnd, testValue) {
    return testValue >= boundStart && testValue <= boundEnd;
}
/**
 * Determines if a point (value) is within a given bounds (line), but will not match the start and end values.
 * @param {?} boundStart The start of the restrcting bounds.
 * @param {?} boundEnd The end of the restricting bounds.
 * @param {?} testValue The value to check against the restricting bounds.
 * @return {?}
 */
export function isPointWithinButNotIncludingBounds(boundStart, boundEnd, testValue) {
    return testValue > boundStart && testValue < boundEnd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZ2VvbWV0cnkvcG9pbnQvYm91bmRzLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBTUEsTUFBTSxVQUFVLG1CQUFtQixDQUFDLFVBQWtCLEVBQUUsUUFBZ0IsRUFBRSxTQUFpQjtJQUN6RixPQUFPLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLFFBQVEsQ0FBQztBQUMxRCxDQUFDOzs7Ozs7OztBQVFELE1BQU0sVUFBVSxrQ0FBa0MsQ0FBQyxVQUFrQixFQUFFLFFBQWdCLEVBQUUsU0FBaUI7SUFDeEcsT0FBTyxTQUFTLEdBQUcsVUFBVSxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUM7QUFDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHBvaW50ICh2YWx1ZSkgaXMgd2l0aGluIGEgZ2l2ZW4gYm91bmRzIChsaW5lKS5cbiAqIEBwYXJhbSBib3VuZFN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmVzdHJjdGluZyBib3VuZHMuXG4gKiBAcGFyYW0gYm91bmRFbmQgVGhlIGVuZCBvZiB0aGUgcmVzdHJpY3RpbmcgYm91bmRzLlxuICogQHBhcmFtIHRlc3RWYWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgYWdhaW5zdCB0aGUgcmVzdHJpY3RpbmcgYm91bmRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQb2ludFdpdGhpbkJvdW5kcyhib3VuZFN0YXJ0OiBudW1iZXIsIGJvdW5kRW5kOiBudW1iZXIsIHRlc3RWYWx1ZTogbnVtYmVyKSB7XG4gIHJldHVybiB0ZXN0VmFsdWUgPj0gYm91bmRTdGFydCAmJiB0ZXN0VmFsdWUgPD0gYm91bmRFbmQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHBvaW50ICh2YWx1ZSkgaXMgd2l0aGluIGEgZ2l2ZW4gYm91bmRzIChsaW5lKSwgYnV0IHdpbGwgbm90IG1hdGNoIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcy5cbiAqIEBwYXJhbSBib3VuZFN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmVzdHJjdGluZyBib3VuZHMuXG4gKiBAcGFyYW0gYm91bmRFbmQgVGhlIGVuZCBvZiB0aGUgcmVzdHJpY3RpbmcgYm91bmRzLlxuICogQHBhcmFtIHRlc3RWYWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2sgYWdhaW5zdCB0aGUgcmVzdHJpY3RpbmcgYm91bmRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQb2ludFdpdGhpbkJ1dE5vdEluY2x1ZGluZ0JvdW5kcyhib3VuZFN0YXJ0OiBudW1iZXIsIGJvdW5kRW5kOiBudW1iZXIsIHRlc3RWYWx1ZTogbnVtYmVyKSB7XG4gIHJldHVybiB0ZXN0VmFsdWUgPiBib3VuZFN0YXJ0ICYmIHRlc3RWYWx1ZSA8IGJvdW5kRW5kO1xufVxuIl19