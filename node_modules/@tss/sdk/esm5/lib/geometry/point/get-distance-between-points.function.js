/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { toSinglePartPointArray } from './to-single-part-point.function';
import { EARTH_RADIUS_IN_KILOMETERS } from '../geometry.constants';
import { degreesToRadians } from '../geometry/degrees-to-radians.function';
import { convertLengthUnits } from '../../core/units/convert-length-units.function';
import { LengthUnit } from '../../core/units/length-unit';
/**
 * @param {?} point1
 * @param {?} point2
 * @return {?}
 */
export function getDistanceBetweenPoints(point1, point2) {
    /** @type {?} */
    var coordinate1 = toSinglePartPointArray(point1);
    /** @type {?} */
    var coordinate2 = toSinglePartPointArray(point2);
    /** @type {?} */
    var x1 = coordinate1[0];
    /** @type {?} */
    var y1 = coordinate1[1];
    /** @type {?} */
    var x2 = coordinate2[0];
    /** @type {?} */
    var y2 = coordinate2[1];
    return getDistanceBetweenPointValues(x1, y1, x2, y2);
}
/**
 * @param {?} x1
 * @param {?} y1
 * @param {?} x2
 * @param {?} y2
 * @return {?}
 */
export function getDistanceBetweenPointValues(x1, y1, x2, y2) {
    // NOTE: This is using the pythagorean theorem (a^2 + b^2 = c^2).
    /** @type {?} */
    var xLength = Math.pow(x2 - x1, 2);
    /** @type {?} */
    var yLength = Math.pow(y2 - y1, 2);
    /** @type {?} */
    var distance = Math.sqrt(xLength + yLength);
    if (isNaN(distance)) {
        throw new Error("Unable to calculate distance between points (" + x1 + "," + x2 + " and " + y1 + "," + y2 + "). Invalid or missing data was provided");
    }
    return distance;
}
/**
 * @param {?} lat1
 * @param {?} lng1
 * @param {?} lat2
 * @param {?} lng2
 * @return {?}
 */
export function getKilometersBetweenLatLng(lat1, lng1, lat2, lng2) {
    // Modified from: https://stackoverflow.com/questions/365826/calculate-distance-between-2-gps-coordinates - RG.
    /** @type {?} */
    var dLat = degreesToRadians(lat2 - lat1);
    /** @type {?} */
    var dLon = degreesToRadians(lng2 - lng1);
    lat1 = degreesToRadians(lat1);
    lat2 = degreesToRadians(lat2);
    /** @type {?} */
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
    /** @type {?} */
    var circumference = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return EARTH_RADIUS_IN_KILOMETERS * circumference;
}
/**
 * @param {?} lat1
 * @param {?} lng1
 * @param {?} lat2
 * @param {?} lng2
 * @return {?}
 */
export function getMetersBetweenLatLng(lat1, lng1, lat2, lng2) {
    return getDistanceBetweenLatLng(lat1, lng1, lat2, lng2, LengthUnit.Meter);
}
/**
 * @param {?} lat1
 * @param {?} lng1
 * @param {?} lat2
 * @param {?} lng2
 * @return {?}
 */
export function getFeetBetweenLatLng(lat1, lng1, lat2, lng2) {
    return getDistanceBetweenLatLng(lat1, lng1, lat2, lng2, LengthUnit.Foot);
}
/**
 * @param {?} lat1
 * @param {?} lng1
 * @param {?} lat2
 * @param {?} lng2
 * @return {?}
 */
export function getMilesBetweenLatLng(lat1, lng1, lat2, lng2) {
    return getDistanceBetweenLatLng(lat1, lng1, lat2, lng2, LengthUnit.Mile);
}
/**
 * @param {?} lat1
 * @param {?} lon1
 * @param {?} lat2
 * @param {?} lon2
 * @param {?} outputUnit
 * @return {?}
 */
export function getDistanceBetweenLatLng(lat1, lon1, lat2, lon2, outputUnit) {
    /** @type {?} */
    var distanceInKilometers = getKilometersBetweenLatLng(lat1, lon1, lat2, lon2);
    return convertLengthUnits(distanceInKilometers, LengthUnit.Kilometer, outputUnit);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWRpc3RhbmNlLWJldHdlZW4tcG9pbnRzLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZ2VvbWV0cnkvcG9pbnQvZ2V0LWRpc3RhbmNlLWJldHdlZW4tcG9pbnRzLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUV6RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7OztBQUcxRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsTUFBbUIsRUFBRSxNQUFtQjs7UUFDekUsV0FBVyxHQUFhLHNCQUFzQixDQUFDLE1BQU0sQ0FBQzs7UUFDdEQsV0FBVyxHQUFhLHNCQUFzQixDQUFDLE1BQU0sQ0FBQzs7UUFFdEQsRUFBRSxHQUFXLFdBQVcsQ0FBQyxDQUFDLENBQUM7O1FBQzNCLEVBQUUsR0FBVyxXQUFXLENBQUMsQ0FBQyxDQUFDOztRQUMzQixFQUFFLEdBQVcsV0FBVyxDQUFDLENBQUMsQ0FBQzs7UUFDM0IsRUFBRSxHQUFXLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFakMsT0FBTyw2QkFBNkIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN2RCxDQUFDOzs7Ozs7OztBQUVELE1BQU0sVUFBVSw2QkFBNkIsQ0FBQyxFQUFVLEVBQUUsRUFBVSxFQUFFLEVBQVUsRUFBRSxFQUFVOzs7UUFFcEYsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7O1FBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDOztRQUM5QixRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBRTdDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWdELEVBQUUsU0FBSSxFQUFFLGFBQVEsRUFBRSxTQUFJLEVBQUUsNENBQXlDLENBQUMsQ0FBQztLQUNwSTtJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLElBQVksRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVk7OztRQUV6RixJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQzs7UUFDcEMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFMUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7UUFFeEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDOztRQUVyRSxhQUFhLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVwRSxPQUFPLDBCQUEwQixHQUFHLGFBQWEsQ0FBQztBQUNwRCxDQUFDOzs7Ozs7OztBQUVELE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZO0lBQzNGLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1RSxDQUFDOzs7Ozs7OztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZO0lBQ3pGLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzRSxDQUFDOzs7Ozs7OztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxJQUFZLEVBQUUsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZO0lBQzFGLE9BQU8sd0JBQXdCLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMzRSxDQUFDOzs7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLFVBQXNCOztRQUMvRyxvQkFBb0IsR0FBRywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDL0UsT0FBTyxrQkFBa0IsQ0FBQyxvQkFBb0IsRUFBRSxVQUFVLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3BGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b1NpbmdsZVBhcnRQb2ludEFycmF5IH0gZnJvbSAnLi90by1zaW5nbGUtcGFydC1wb2ludC5mdW5jdGlvbic7XG5pbXBvcnQgeyBTaW5nbGVQb2ludCB9IGZyb20gJy4vc2luZ2xlLXBvaW50JztcbmltcG9ydCB7IEVBUlRIX1JBRElVU19JTl9LSUxPTUVURVJTIH0gZnJvbSAnLi4vZ2VvbWV0cnkuY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZ3JlZXNUb1JhZGlhbnMgfSBmcm9tICcuLi9nZW9tZXRyeS9kZWdyZWVzLXRvLXJhZGlhbnMuZnVuY3Rpb24nO1xuaW1wb3J0IHsgY29udmVydExlbmd0aFVuaXRzIH0gZnJvbSAnLi4vLi4vY29yZS91bml0cy9jb252ZXJ0LWxlbmd0aC11bml0cy5mdW5jdGlvbic7XG5pbXBvcnQgeyBMZW5ndGhVbml0IH0gZnJvbSAnLi4vLi4vY29yZS91bml0cy9sZW5ndGgtdW5pdCc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3RhbmNlQmV0d2VlblBvaW50cyhwb2ludDE6IFNpbmdsZVBvaW50LCBwb2ludDI6IFNpbmdsZVBvaW50KTogbnVtYmVyIHtcbiAgY29uc3QgY29vcmRpbmF0ZTE6IG51bWJlcltdID0gdG9TaW5nbGVQYXJ0UG9pbnRBcnJheShwb2ludDEpO1xuICBjb25zdCBjb29yZGluYXRlMjogbnVtYmVyW10gPSB0b1NpbmdsZVBhcnRQb2ludEFycmF5KHBvaW50Mik7XG5cbiAgY29uc3QgeDE6IG51bWJlciA9IGNvb3JkaW5hdGUxWzBdO1xuICBjb25zdCB5MTogbnVtYmVyID0gY29vcmRpbmF0ZTFbMV07XG4gIGNvbnN0IHgyOiBudW1iZXIgPSBjb29yZGluYXRlMlswXTtcbiAgY29uc3QgeTI6IG51bWJlciA9IGNvb3JkaW5hdGUyWzFdO1xuXG4gIHJldHVybiBnZXREaXN0YW5jZUJldHdlZW5Qb2ludFZhbHVlcyh4MSwgeTEsIHgyLCB5Mik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREaXN0YW5jZUJldHdlZW5Qb2ludFZhbHVlcyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgLy8gTk9URTogVGhpcyBpcyB1c2luZyB0aGUgcHl0aGFnb3JlYW4gdGhlb3JlbSAoYV4yICsgYl4yID0gY14yKS5cbiAgY29uc3QgeExlbmd0aCA9IE1hdGgucG93KHgyIC0geDEsIDIpO1xuICBjb25zdCB5TGVuZ3RoID0gTWF0aC5wb3coeTIgLSB5MSwgMik7XG4gIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KHhMZW5ndGggKyB5TGVuZ3RoKTtcblxuICBpZiAoaXNOYU4oZGlzdGFuY2UpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gY2FsY3VsYXRlIGRpc3RhbmNlIGJldHdlZW4gcG9pbnRzICgke3gxfSwke3gyfSBhbmQgJHt5MX0sJHt5Mn0pLiBJbnZhbGlkIG9yIG1pc3NpbmcgZGF0YSB3YXMgcHJvdmlkZWRgKTtcbiAgfVxuXG4gIHJldHVybiBkaXN0YW5jZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtpbG9tZXRlcnNCZXR3ZWVuTGF0TG5nKGxhdDE6IG51bWJlciwgbG5nMTogbnVtYmVyLCBsYXQyOiBudW1iZXIsIGxuZzI6IG51bWJlcik6IG51bWJlciB7XG4gIC8vIE1vZGlmaWVkIGZyb206IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM2NTgyNi9jYWxjdWxhdGUtZGlzdGFuY2UtYmV0d2Vlbi0yLWdwcy1jb29yZGluYXRlcyAtIFJHLlxuICBjb25zdCBkTGF0ID0gZGVncmVlc1RvUmFkaWFucyhsYXQyIC0gbGF0MSk7XG4gIGNvbnN0IGRMb24gPSBkZWdyZWVzVG9SYWRpYW5zKGxuZzIgLSBsbmcxKTtcblxuICBsYXQxID0gZGVncmVlc1RvUmFkaWFucyhsYXQxKTtcbiAgbGF0MiA9IGRlZ3JlZXNUb1JhZGlhbnMobGF0Mik7XG5cbiAgY29uc3QgYSA9IE1hdGguc2luKGRMYXQgLyAyKSAqIE1hdGguc2luKGRMYXQgLyAyKSArXG4gICAgTWF0aC5zaW4oZExvbiAvIDIpICogTWF0aC5zaW4oZExvbiAvIDIpICogTWF0aC5jb3MobGF0MSkgKiBNYXRoLmNvcyhsYXQyKTtcblxuICBjb25zdCBjaXJjdW1mZXJlbmNlID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMSAtIGEpKTtcblxuICByZXR1cm4gRUFSVEhfUkFESVVTX0lOX0tJTE9NRVRFUlMgKiBjaXJjdW1mZXJlbmNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWV0ZXJzQmV0d2VlbkxhdExuZyhsYXQxOiBudW1iZXIsIGxuZzE6IG51bWJlciwgbGF0MjogbnVtYmVyLCBsbmcyOiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gZ2V0RGlzdGFuY2VCZXR3ZWVuTGF0TG5nKGxhdDEsIGxuZzEsIGxhdDIsIGxuZzIsIExlbmd0aFVuaXQuTWV0ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmVldEJldHdlZW5MYXRMbmcobGF0MTogbnVtYmVyLCBsbmcxOiBudW1iZXIsIGxhdDI6IG51bWJlciwgbG5nMjogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIGdldERpc3RhbmNlQmV0d2VlbkxhdExuZyhsYXQxLCBsbmcxLCBsYXQyLCBsbmcyLCBMZW5ndGhVbml0LkZvb3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWlsZXNCZXR3ZWVuTGF0TG5nKGxhdDE6IG51bWJlciwgbG5nMTogbnVtYmVyLCBsYXQyOiBudW1iZXIsIGxuZzI6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBnZXREaXN0YW5jZUJldHdlZW5MYXRMbmcobGF0MSwgbG5nMSwgbGF0MiwgbG5nMiwgTGVuZ3RoVW5pdC5NaWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3RhbmNlQmV0d2VlbkxhdExuZyhsYXQxOiBudW1iZXIsIGxvbjE6IG51bWJlciwgbGF0MjogbnVtYmVyLCBsb24yOiBudW1iZXIsIG91dHB1dFVuaXQ6IExlbmd0aFVuaXQpOiBudW1iZXIge1xuICBjb25zdCBkaXN0YW5jZUluS2lsb21ldGVycyA9IGdldEtpbG9tZXRlcnNCZXR3ZWVuTGF0TG5nKGxhdDEsIGxvbjEsIGxhdDIsIGxvbjIpO1xuICByZXR1cm4gY29udmVydExlbmd0aFVuaXRzKGRpc3RhbmNlSW5LaWxvbWV0ZXJzLCBMZW5ndGhVbml0LktpbG9tZXRlciwgb3V0cHV0VW5pdCk7XG59XG4iXX0=