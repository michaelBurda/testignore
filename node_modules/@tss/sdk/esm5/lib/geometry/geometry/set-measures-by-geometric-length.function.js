/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 3rd party.
import distance from '@turf/distance';
import { toMultiPartPaths } from '../line/to-multi-part-paths.function';
import { getMeasureFromPoint } from '../point/get-measure-from-point.function';
import { sortAscending } from '../../core/sort/sort.function';
import { isNotNumber } from '../../core/type-check/is-not-number.function';
/** @type {?} */
var DEFAULT_EMPTY_Z_VALUE = 0;
/** @type {?} */
var DEFAULT_OPTIONS = {
    units: 'miles',
    hasZValues: true,
    calibrationPositions: []
};
/**
 * @param {?} line
 * @param {?=} options
 * @return {?}
 */
export function setMeasuresByGeometricLength(line, options) {
    /** @type {?} */
    var martiPart = toMultiPartPaths(line);
    options = Object.assign({}, DEFAULT_OPTIONS, options);
    /** @type {?} */
    var lastMeasure = 0;
    martiPart.forEach((/**
     * @param {?} linePart
     * @param {?} partIndex
     * @return {?}
     */
    function (linePart, partIndex) {
        setMeasureForLine(linePart, lastMeasure, partIndex, options);
        /** @type {?} */
        var lastCoordinateIndex = linePart.length - 1;
        /** @type {?} */
        var lastCoordinate = linePart[lastCoordinateIndex];
        lastMeasure += getMeasureFromPoint(lastCoordinate);
    }));
}
/**
 * @param {?} line
 * @param {?} startMeasure
 * @param {?} partIndex
 * @param {?} options
 * @return {?}
 */
function setMeasureForLine(line, startMeasure, partIndex, options) {
    /** @type {?} */
    var hasCalibrationPoints = options.calibrationPositions.some((/**
     * @param {?} calibrationPosition
     * @return {?}
     */
    function (calibrationPosition) {
        return calibrationPosition.partIndex === partIndex;
    }));
    if (hasCalibrationPoints) {
        calibrateLinePart(line, startMeasure, partIndex, options);
    }
    else {
        setLinePartMeasuresByGeometricLength(line, startMeasure, options);
    }
}
/**
 * @param {?} line
 * @param {?} startMeasure
 * @param {?} partIndex
 * @param {?} options
 * @return {?}
 */
function calibrateLinePart(line, startMeasure, partIndex, options) {
    /** @type {?} */
    var calibrationPositions = options.calibrationPositions.filter((/**
     * @param {?} position
     * @return {?}
     */
    function (position) { return position.partIndex === partIndex; }));
    /** @type {?} */
    var fromVertexIndex = 0;
    sortAscending(calibrationPositions, (/**
     * @param {?} calibration
     * @return {?}
     */
    function (calibration) { return calibration.measure; }));
    calibrationPositions.forEach((/**
     * @param {?} calibration
     * @return {?}
     */
    function (calibration) {
        /** @type {?} */
        var fromVertex = line[fromVertexIndex];
        /** @type {?} */
        var toVertex = line[calibration.vertexIndex];
        /** @type {?} */
        var numberOfVerticesInBetween = calibration.vertexIndex - fromVertexIndex;
        /** @type {?} */
        var distanceForSection = Math.abs(calibration.measure - startMeasure);
        /** @type {?} */
        var measureDistributionIncrement = distanceForSection / numberOfVerticesInBetween;
        setMeasure(fromVertex, startMeasure, options.hasZValues);
        setMeasure(toVertex, calibration.measure, options.hasZValues);
        /** @type {?} */
        var inBetweenVertices = getVerticesBetween(line, fromVertexIndex, calibration.vertexIndex);
        inBetweenVertices.forEach((/**
         * @param {?} vertice
         * @param {?} index
         * @return {?}
         */
        function (vertice, index) {
            /** @type {?} */
            var partNumber = index + 1;
            /** @type {?} */
            var verticeIncrement = partNumber * measureDistributionIncrement;
            /** @type {?} */
            var measure = startMeasure + verticeIncrement;
            setMeasure(vertice, measure, options.hasZValues);
        }));
        fromVertexIndex = calibration.vertexIndex;
        startMeasure = calibration.measure;
    }));
    /** @type {?} */
    var areMoreVertices = fromVertexIndex < line.length - 1;
    if (areMoreVertices) {
        /** @type {?} */
        var remainingPoints = getVerticesBetween(line, fromVertexIndex - 1, line.length);
        setLinePartMeasuresByGeometricLength(remainingPoints, startMeasure, options);
    }
}
/**
 * @param {?} line
 * @param {?} startRangeIndex
 * @param {?} endRangeIndex
 * @return {?}
 */
function getVerticesBetween(line, startRangeIndex, endRangeIndex) {
    /** @type {?} */
    var index = startRangeIndex + 1;
    /** @type {?} */
    var vertices = [];
    for (; index < endRangeIndex; index++) {
        /** @type {?} */
        var vertice = line[index];
        vertices.push(vertice);
    }
    return vertices;
}
/**
 * @param {?} line
 * @param {?} startMeasure
 * @param {?} options
 * @return {?}
 */
function setLinePartMeasuresByGeometricLength(line, startMeasure, options) {
    /** @type {?} */
    var previousVertex;
    /** @type {?} */
    var vertexMeasure = startMeasure;
    line.forEach((/**
     * @param {?} vertex
     * @param {?} index
     * @return {?}
     */
    function (vertex, index) {
        if (index !== 0) {
            /** @type {?} */
            var distanceBetweenVerticees = distance(previousVertex, vertex, options);
            vertexMeasure += distanceBetweenVerticees;
        }
        setMeasure(vertex, vertexMeasure, options.hasZValues);
        previousVertex = vertex;
    }));
}
/**
 * @param {?} coordinate
 * @param {?} measure
 * @param {?} hasZValues
 * @return {?}
 */
function setMeasure(coordinate, measure, hasZValues) {
    /** @type {?} */
    var accountForZValue = hasZValues || coordinate.length > 3;
    /** @type {?} */
    var measureIndex = accountForZValue ? 3 : 2;
    coordinate[measureIndex] = measure;
    if (accountForZValue) {
        ensureZValue(coordinate);
    }
}
/**
 * @param {?} coordinate
 * @return {?}
 */
function ensureZValue(coordinate) {
    if (isNotNumber(coordinate[2])) {
        coordinate[2] = DEFAULT_EMPTY_Z_VALUE;
    }
}
//# sourceMappingURL=data:application/json;base64,