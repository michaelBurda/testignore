/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Guid } from '../core/uuid/guid';
import { getElapsedSeconds } from '../core/date-time/get-elapsed-seconds.function';
import { calculateRemainingSeconds } from '../core/stats/calculate-remaining-seconds.function';
/**
 * Unique token created for each queue worker
 */
var /**
 * Unique token created for each queue worker
 */
QueueWorkerToken = /** @class */ (function () {
    function QueueWorkerToken() {
        this.isWorking = false;
        this.isCanceled = false;
        this.id = Guid.newGuid().value;
    }
    Object.defineProperty(QueueWorkerToken.prototype, "isComplete", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isWorking;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueueWorkerToken.prototype, "ellapsedSeconds", {
        get: /**
         * @return {?}
         */
        function () {
            return getElapsedSeconds(new Date(), this.startTime);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueueWorkerToken.prototype, "totalProcessed", {
        get: /**
         * @return {?}
         */
        function () {
            return this.totalComplete + this.totalFailed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueueWorkerToken.prototype, "recordsProcessedPerSecond", {
        get: /**
         * @return {?}
         */
        function () {
            return this.totalComplete / this.ellapsedSeconds;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueueWorkerToken.prototype, "recordsProcessedPerMinute", {
        get: /**
         * @return {?}
         */
        function () {
            return this.recordsProcessedPerSecond * 60;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    QueueWorkerToken.prototype.start = /**
     * @return {?}
     */
    function () {
        this.reset();
        this.startTime = new Date();
        this.isWorking = true;
        return this;
    };
    /**
     * @return {?}
     */
    QueueWorkerToken.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.isWorking = false;
        this.isCanceled = false;
        this.totalComplete = 0;
        this.totalFailed = 0;
        this.startTime = null;
        this.endTime = null;
        return this;
    };
    /**
     * @param {?} remainingCount
     * @return {?}
     */
    QueueWorkerToken.prototype.calculateRemainingSeconds = /**
     * @param {?} remainingCount
     * @return {?}
     */
    function (remainingCount) {
        return this.isComplete
            ? 0
            : calculateRemainingSeconds(this.totalProcessed, this.ellapsedSeconds, remainingCount);
    };
    /**
     * @return {?}
     */
    QueueWorkerToken.prototype.complete = /**
     * @return {?}
     */
    function () {
        this.endTime = new Date();
        this.isWorking = false;
        return this;
    };
    /**
     * @return {?}
     */
    QueueWorkerToken.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.isCanceled = true;
        this.isWorking = false;
        return this;
    };
    return QueueWorkerToken;
}());
/**
 * Unique token created for each queue worker
 */
export { QueueWorkerToken };
if (false) {
    /** @type {?} */
    QueueWorkerToken.prototype.id;
    /** @type {?} */
    QueueWorkerToken.prototype.isWorking;
    /** @type {?} */
    QueueWorkerToken.prototype.isCanceled;
    /** @type {?} */
    QueueWorkerToken.prototype.totalComplete;
    /** @type {?} */
    QueueWorkerToken.prototype.totalFailed;
    /** @type {?} */
    QueueWorkerToken.prototype.startTime;
    /** @type {?} */
    QueueWorkerToken.prototype.endTime;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUtd29ya2VyLXRva2VuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvcXVldWluZy9xdWV1ZS13b3JrZXItdG9rZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQzs7OztBQU0vRjs7OztJQTZCRTtRQTNCQSxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLGVBQVUsR0FBRyxLQUFLLENBQUM7UUEyQmpCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBdEJELHNCQUFJLHdDQUFVOzs7O1FBQWQ7WUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN6QixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDZDQUFlOzs7O1FBQW5CO1lBQ0UsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDRDQUFjOzs7O1FBQWxCO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDL0MsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSx1REFBeUI7Ozs7UUFBN0I7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNuRCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHVEQUF5Qjs7OztRQUE3QjtZQUNFLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixHQUFHLEVBQUUsQ0FBQztRQUM3QyxDQUFDOzs7T0FBQTs7OztJQU1ELGdDQUFLOzs7SUFBTDtRQUNFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUV0QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7SUFFRCxnQ0FBSzs7O0lBQUw7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVwQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7O0lBRUQsb0RBQXlCOzs7O0lBQXpCLFVBQTBCLGNBQXNCO1FBQzlDLE9BQU8sSUFBSSxDQUFDLFVBQVU7WUFDcEIsQ0FBQyxDQUFDLENBQUM7WUFDSCxDQUFDLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7Ozs7SUFFRCxtQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFdkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7O0lBRUQsaUNBQU07OztJQUFOO1FBQ0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFdkIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBdkVELElBdUVDOzs7Ozs7O0lBdEVDLDhCQUFvQjs7SUFDcEIscUNBQWtCOztJQUNsQixzQ0FBbUI7O0lBQ25CLHlDQUFzQjs7SUFDdEIsdUNBQW9COztJQUNwQixxQ0FBZ0I7O0lBQ2hCLG1DQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3VpZCB9IGZyb20gJy4uL2NvcmUvdXVpZC9ndWlkJztcbmltcG9ydCB7IGdldEVsYXBzZWRTZWNvbmRzIH0gZnJvbSAnLi4vY29yZS9kYXRlLXRpbWUvZ2V0LWVsYXBzZWQtc2Vjb25kcy5mdW5jdGlvbic7XG5pbXBvcnQgeyBjYWxjdWxhdGVSZW1haW5pbmdTZWNvbmRzIH0gZnJvbSAnLi4vY29yZS9zdGF0cy9jYWxjdWxhdGUtcmVtYWluaW5nLXNlY29uZHMuZnVuY3Rpb24nO1xuXG5cbi8qKlxuICogVW5pcXVlIHRva2VuIGNyZWF0ZWQgZm9yIGVhY2ggcXVldWUgd29ya2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBRdWV1ZVdvcmtlclRva2VuIHtcbiAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgaXNXb3JraW5nID0gZmFsc2U7XG4gIGlzQ2FuY2VsZWQgPSBmYWxzZTtcbiAgdG90YWxDb21wbGV0ZTogbnVtYmVyO1xuICB0b3RhbEZhaWxlZDogbnVtYmVyO1xuICBzdGFydFRpbWU6IERhdGU7XG4gIGVuZFRpbWU6IERhdGU7XG5cbiAgZ2V0IGlzQ29tcGxldGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmlzV29ya2luZztcbiAgfVxuXG4gIGdldCBlbGxhcHNlZFNlY29uZHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0RWxhcHNlZFNlY29uZHMobmV3IERhdGUoKSwgdGhpcy5zdGFydFRpbWUpO1xuICB9XG5cbiAgZ2V0IHRvdGFsUHJvY2Vzc2VkKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudG90YWxDb21wbGV0ZSArIHRoaXMudG90YWxGYWlsZWQ7XG4gIH1cblxuICBnZXQgcmVjb3Jkc1Byb2Nlc3NlZFBlclNlY29uZCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRvdGFsQ29tcGxldGUgLyB0aGlzLmVsbGFwc2VkU2Vjb25kcztcbiAgfVxuXG4gIGdldCByZWNvcmRzUHJvY2Vzc2VkUGVyTWludXRlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucmVjb3Jkc1Byb2Nlc3NlZFBlclNlY29uZCAqIDYwO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5pZCA9IEd1aWQubmV3R3VpZCgpLnZhbHVlO1xuICB9XG5cbiAgc3RhcnQoKTogUXVldWVXb3JrZXJUb2tlbiB7XG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbiAgICB0aGlzLmlzV29ya2luZyA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJlc2V0KCk6IFF1ZXVlV29ya2VyVG9rZW4ge1xuICAgIHRoaXMuaXNXb3JraW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc0NhbmNlbGVkID0gZmFsc2U7XG4gICAgdGhpcy50b3RhbENvbXBsZXRlID0gMDtcbiAgICB0aGlzLnRvdGFsRmFpbGVkID0gMDtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IG51bGw7XG4gICAgdGhpcy5lbmRUaW1lID0gbnVsbDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2FsY3VsYXRlUmVtYWluaW5nU2Vjb25kcyhyZW1haW5pbmdDb3VudDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlXG4gICAgICA/IDBcbiAgICAgIDogY2FsY3VsYXRlUmVtYWluaW5nU2Vjb25kcyh0aGlzLnRvdGFsUHJvY2Vzc2VkLCB0aGlzLmVsbGFwc2VkU2Vjb25kcywgcmVtYWluaW5nQ291bnQpO1xuICB9XG5cbiAgY29tcGxldGUoKTogUXVldWVXb3JrZXJUb2tlbiB7XG4gICAgdGhpcy5lbmRUaW1lID0gbmV3IERhdGUoKTtcbiAgICB0aGlzLmlzV29ya2luZyA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjYW5jZWwoKTogUXVldWVXb3JrZXJUb2tlbiB7XG4gICAgdGhpcy5pc0NhbmNlbGVkID0gdHJ1ZTtcbiAgICB0aGlzLmlzV29ya2luZyA9IGZhbHNlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==