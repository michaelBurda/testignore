/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 3rd Party.
import { Subject, of, iif } from 'rxjs';
import { takeWhile, tap, filter, mergeMap, map } from 'rxjs/operators';
import { QueueWorkerToken } from './queue-worker-token';
import { WorkQueueStatusEventType } from './work-queue-status-event-type';
import { WorkQueueStatusTracker } from './work-queue-status-tracker';
import { isValue } from '../core/type-check/is-value.function';
import { isNotValue } from '../core/type-check/is-not-value.function';
/** @type {?} */
export var DEFAULT_WORK_QUEUE_OPTIONS = {
    autoStartWorkers: true,
    workerCount: 1,
};
/**
 * Provides the core queueing workflow for basic unit of work queues.
 * High Priority Todos:
 * * Implement worker cancelation into the worker token - RG.
 *
 * Low Priority Todos:
 * * Add queue prioritization - a queue priority flag to pull those items first from the queue - RG.
 * * Change overriding of methods to use metho attributes instead. Example: \@OnWorkComplete.
 * @abstract
 * @template TInput, TOutput
 */
var /**
 * Provides the core queueing workflow for basic unit of work queues.
 * High Priority Todos:
 * * Implement worker cancelation into the worker token - RG.
 *
 * Low Priority Todos:
 * * Add queue prioritization - a queue priority flag to pull those items first from the queue - RG.
 * * Change overriding of methods to use metho attributes instead. Example: \@OnWorkComplete.
 * @abstract
 * @template TInput, TOutput
 */
WorkQueueManager = /** @class */ (function () {
    function WorkQueueManager(log, options) {
        var _this = this;
        this.log = log;
        this.workerTokens = [];
        this.tracker = new WorkQueueStatusTracker();
        this.options = Object.assign({}, DEFAULT_WORK_QUEUE_OPTIONS);
        this.setOptions(options);
        this.queueChangeObserver = new Subject();
        this.queueChange = this.queueChangeObserver.pipe();
        this.queueStarted = this.queueChangeObserver.pipe(filter((/**
         * @param {?} change
         * @return {?}
         */
        function (change) { return change.event === WorkQueueStatusEventType.QueueStarted; })));
        this.queueComplete = this.queueChangeObserver.pipe(filter((/**
         * @param {?} change
         * @return {?}
         */
        function (change) { return change.event === WorkQueueStatusEventType.QueueComplete; })));
        if (this.options.autoStartWorkers) {
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.startWork(); }));
        }
    }
    Object.defineProperty(WorkQueueManager.prototype, "isWorking", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tracker.isWorking;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorkQueueManager.prototype, "status", {
        get: /**
         * @return {?}
         */
        function () {
            return this.tracker.getStatus();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Overrides default options.
     * @param options Options to override the defaults.
     */
    /**
     * Overrides default options.
     * @param {?} options Options to override the defaults.
     * @return {?}
     */
    WorkQueueManager.prototype.setOptions = /**
     * Overrides default options.
     * @param {?} options Options to override the defaults.
     * @return {?}
     */
    function (options) {
        Object.assign(this.options, options);
        return this;
    };
    /**
     * Kicks off the queue workflow with the specified number of workers. If
     * the maximum number of workers are currently running, no additional workers
     * will be created (only the delta of allowed and running will be started).
     */
    /**
     * Kicks off the queue workflow with the specified number of workers. If
     * the maximum number of workers are currently running, no additional workers
     * will be created (only the delta of allowed and running will be started).
     * @return {?}
     */
    WorkQueueManager.prototype.startWork = /**
     * Kicks off the queue workflow with the specified number of workers. If
     * the maximum number of workers are currently running, no additional workers
     * will be created (only the delta of allowed and running will be started).
     * @return {?}
     */
    function () {
        var _this = this;
        // We dont' want to change the queue size if the queue is already working
        // because it will mess up the statistics (percent copmlete, etc).
        /** @type {?} */
        var starterSource = iif((/**
         * @return {?}
         */
        function () { return !_this.isWorking; }), this.getRemainingQueueCount()
            .pipe(tap((/**
         * @param {?} queueCount
         * @return {?}
         */
        function (queueCount) { return _this.tracker.setQueueSize(queueCount); }))));
        this.onReady()
            .pipe(mergeMap((/**
         * @return {?}
         */
        function () { return starterSource; })))
            .subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var workersToStart = _this.options.workerCount - _this.workerTokens.length;
            if (workersToStart > 0) {
                _this.emitQueueChange(null, WorkQueueStatusEventType.QueueStarted);
            }
            for (var i = 0; i < workersToStart; i++) {
                /** @type {?} */
                var token = new QueueWorkerToken().start();
                _this.tracker.addWorker(token);
                _this.workerTokens.push(token);
                _this.emitQueueChange(token, WorkQueueStatusEventType.QueueWorkerStarted);
                _this.getNextAndDoWork(token);
            }
        }));
    };
    /**
     * Stops all workers from processing the queue.
     */
    /**
     * Stops all workers from processing the queue.
     * @return {?}
     */
    WorkQueueManager.prototype.stopWork = /**
     * Stops all workers from processing the queue.
     * @return {?}
     */
    function () {
        this.workerTokens.forEach((/**
         * @param {?} token
         * @return {?}
         */
        function (token) { return token.cancel(); }));
    };
    /**
     * Method that determines that the workers are ready to be started. Note, in this implementation it
     * makes use of an empty promise. The main reason for this is to provide a hook for other implementers
     * to setup/initialize the queue before starting the workers. Additionaly, this practices provides a
     * way to run the workers asynchronously.
     */
    /**
     * Method that determines that the workers are ready to be started. Note, in this implementation it
     * makes use of an empty promise. The main reason for this is to provide a hook for other implementers
     * to setup/initialize the queue before starting the workers. Additionaly, this practices provides a
     * way to run the workers asynchronously.
     * @protected
     * @return {?}
     */
    WorkQueueManager.prototype.onReady = /**
     * Method that determines that the workers are ready to be started. Note, in this implementation it
     * makes use of an empty promise. The main reason for this is to provide a hook for other implementers
     * to setup/initialize the queue before starting the workers. Additionaly, this practices provides a
     * way to run the workers asynchronously.
     * @protected
     * @return {?}
     */
    function () {
        return of(null);
    };
    /**
     * @protected
     * @param {?} input
     * @return {?}
     */
    WorkQueueManager.prototype.onBeforeWorkStarted = /**
     * @protected
     * @param {?} input
     * @return {?}
     */
    function (input) {
        return of(input);
    };
    /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    WorkQueueManager.prototype.onWorkComplete = /**
     * @protected
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return of(data);
    };
    /**
     * @protected
     * @param {?} data
     * @param {?} error
     * @return {?}
     */
    WorkQueueManager.prototype.onWorkFailed = /**
     * @protected
     * @param {?} data
     * @param {?} error
     * @return {?}
     */
    function (data, error) {
        return of(data, error);
    };
    /**
     * @protected
     * @return {?}
     */
    WorkQueueManager.prototype.getRemainingQueueCount = /**
     * @protected
     * @return {?}
     */
    function () {
        return of(-1);
    };
    /**
     * @protected
     * @param {?} token
     * @param {?} event
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    WorkQueueManager.prototype.emitQueueChange = /**
     * @protected
     * @param {?} token
     * @param {?} event
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    function (token, event, input, output) {
        this.queueChangeObserver.next({
            event: event,
            input: input,
            output: output,
            status: this.tracker.getStatus(),
            tokenId: token ? token.id : null,
        });
    };
    /**
     * @private
     * @param {?} token
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    WorkQueueManager.prototype.emitWorkStarted = /**
     * @private
     * @param {?} token
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    function (token, input, output) {
        this.emitQueueChange(token, WorkQueueStatusEventType.UnitOfWorkStarted, input, output);
    };
    /**
     * @private
     * @param {?} token
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    WorkQueueManager.prototype.emitWorkComplete = /**
     * @private
     * @param {?} token
     * @param {?=} input
     * @param {?=} output
     * @return {?}
     */
    function (token, input, output) {
        this.emitQueueChange(token, WorkQueueStatusEventType.UnitOfWorkComplete, input, output);
    };
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    WorkQueueManager.prototype.onWorkerCompleted = /**
     * @private
     * @param {?} token
     * @return {?}
     */
    function (token) {
        if (token.isComplete) {
            return;
        }
        /** @type {?} */
        var index = this.workerTokens.indexOf(token);
        token.complete();
        if (index !== -1) {
            this.workerTokens.splice(index, 1);
        }
        this.emitQueueChange(token, WorkQueueStatusEventType.QueueWorkerComplete);
        if (this.workerTokens.length === 0) {
            this.emitQueueChange(token, WorkQueueStatusEventType.QueueComplete);
            this.tracker.complete();
        }
    };
    /**
     * @private
     * @param {?} token
     * @param {?} next
     * @return {?}
     */
    WorkQueueManager.prototype.checkIfWorkerComplete = /**
     * @private
     * @param {?} token
     * @param {?} next
     * @return {?}
     */
    function (token, next) {
        if (isNotValue(next)) {
            this.onWorkerCompleted(token);
        }
    };
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    WorkQueueManager.prototype.getNextAndDoWork = /**
     * @private
     * @param {?} token
     * @return {?}
     */
    function (token) {
        var _this = this;
        if (token.isCanceled) {
            this.log.debug("Canceling worker due to canceled toke: " + token.id);
            this.onWorkerCompleted(token);
        }
        this.log.trace('Retrieving next queue item to start processing');
        /** @type {?} */
        var processingData = { input: null, output: null };
        this.getNext()
            .pipe(tap((/**
         * @param {?} input
         * @return {?}
         */
        function (input) { return processingData.input = input; })), tap((/**
         * @param {?} input
         * @return {?}
         */
        function (input) { return _this.checkIfWorkerComplete(token, input); })), takeWhile((/**
         * @param {?} input
         * @return {?}
         */
        function (input) { return isValue(input) && !token.isCanceled; })), tap((/**
         * @param {?} input
         * @return {?}
         */
        function (input) { return _this.emitWorkStarted(token, input); })), mergeMap((/**
         * @param {?} input
         * @return {?}
         */
        function (input) { return _this.onBeforeWorkStarted(input); })), mergeMap((/**
         * @param {?} input
         * @return {?}
         */
        function (input) { return _this.doWork(input); })), tap((/**
         * @param {?} output
         * @return {?}
         */
        function (output) { return processingData.output = output; })), map((/**
         * @return {?}
         */
        function () { return processingData; })), mergeMap((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return _this.onWorkComplete(data); })))
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.log.trace('Completed work for item');
            token.totalComplete++;
            _this.emitWorkComplete(token, data.input, data.output);
            _this.getNextAndDoWork(token);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.log.error("Failed to process item. {error}", error);
            token.totalFailed++;
            _this.onWorkFailed(processingData, error)
                .toPromise()
                .then((/**
             * @return {?}
             */
            function () { return _this.getNextAndDoWork(token); }));
        }));
    };
    return WorkQueueManager;
}());
/**
 * Provides the core queueing workflow for basic unit of work queues.
 * High Priority Todos:
 * * Implement worker cancelation into the worker token - RG.
 *
 * Low Priority Todos:
 * * Add queue prioritization - a queue priority flag to pull those items first from the queue - RG.
 * * Change overriding of methods to use metho attributes instead. Example: \@OnWorkComplete.
 * @abstract
 * @template TInput, TOutput
 */
export { WorkQueueManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WorkQueueManager.prototype.queueChangeObserver;
    /**
     * @type {?}
     * @protected
     */
    WorkQueueManager.prototype.workerTokens;
    /**
     * @type {?}
     * @protected
     */
    WorkQueueManager.prototype.tracker;
    /** @type {?} */
    WorkQueueManager.prototype.queueChange;
    /** @type {?} */
    WorkQueueManager.prototype.queueStarted;
    /** @type {?} */
    WorkQueueManager.prototype.queueComplete;
    /** @type {?} */
    WorkQueueManager.prototype.options;
    /**
     * @type {?}
     * @protected
     */
    WorkQueueManager.prototype.log;
    /**
     * Implementation method to do the actual unit of work.
     * @abstract
     * @protected
     * @param {?} item The input paramater needed to process the unit of work and return an output result.
     * @return {?}
     */
    WorkQueueManager.prototype.doWork = function (item) { };
    /**
     * Implementation method to retrieve the next value in the queue. Note, there are no further checks
     * to verify duplicate items are not processed - it is the responsibility of the implementer of this
     * base class to never return the same item from this method. Typically the item in the queue is either
     * dequeued or marked as "processing" to prevent this potential issue.
     * @abstract
     * @protected
     * @return {?}
     */
    WorkQueueManager.prototype.getNext = function () { };
}
//# sourceMappingURL=data:application/json;base64,