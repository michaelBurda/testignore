/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { RoleManagerService } from './role-manager.service';
import { Logger } from '../core/logging/logger.service';
var HasRolesDirective = /** @class */ (function () {
    function HasRolesDirective(templateRef, viewContainer, roleMgr, log) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.roleMgr = roleMgr;
        this.log = log;
    }
    Object.defineProperty(HasRolesDirective.prototype, "hasRoles", {
        set: /**
         * @param {?} roles
         * @return {?}
         */
        function (roles) {
            if (this.roleMgr.hasRoles(roles)) {
                // If condition is true add template to DOM
                this.viewContainer.createEmbeddedView(this.templateRef);
                this.log.trace("Granted access: " + roles);
            }
            else {
                // Else remove template from DOM
                this.viewContainer.clear();
                this.log.trace("Denied access: " + roles);
            }
        },
        enumerable: true,
        configurable: true
    });
    HasRolesDirective.decorators = [
        { type: Directive, args: [{
                    // TODO: remove this once this is moved to it's own package - RG.
                    // tslint:disable-next-line
                    selector: '[hasRoles]'
                },] }
    ];
    /** @nocollapse */
    HasRolesDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: RoleManagerService },
        { type: Logger }
    ]; };
    HasRolesDirective.propDecorators = {
        hasRoles: [{ type: Input }]
    };
    return HasRolesDirective;
}());
export { HasRolesDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.roleMgr;
    /**
     * @type {?}
     * @private
     */
    HasRolesDirective.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL3NlY3VyaXR5L2hhcy1yb2xlcy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFHeEQ7SUFPRSwyQkFDVSxXQUE2QixFQUM3QixhQUErQixFQUMvQixPQUEyQixFQUMzQixHQUFXO1FBSFgsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUMzQixRQUFHLEdBQUgsR0FBRyxDQUFRO0lBQ3JCLENBQUM7SUFFRCxzQkFBYSx1Q0FBUTs7Ozs7UUFBckIsVUFBc0IsS0FBc0I7WUFDMUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDaEMsMkNBQTJDO2dCQUMzQyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMscUJBQW1CLEtBQU8sQ0FBQyxDQUFDO2FBQzVDO2lCQUFNO2dCQUNMLGdDQUFnQztnQkFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsb0JBQWtCLEtBQU8sQ0FBQyxDQUFDO2FBQzNDO1FBQ0gsQ0FBQzs7O09BQUE7O2dCQXhCRixTQUFTLFNBQUM7OztvQkFHVCxRQUFRLEVBQUUsWUFBWTtpQkFDdkI7Ozs7Z0JBVDBCLFdBQVc7Z0JBQUUsZ0JBQWdCO2dCQUMvQyxrQkFBa0I7Z0JBQ2xCLE1BQU07OzsyQkFpQlosS0FBSzs7SUFXUix3QkFBQztDQUFBLEFBekJELElBeUJDO1NBcEJZLGlCQUFpQjs7Ozs7O0lBRzFCLHdDQUFxQzs7Ozs7SUFDckMsMENBQXVDOzs7OztJQUN2QyxvQ0FBbUM7Ozs7O0lBQ25DLGdDQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb2xlTWFuYWdlclNlcnZpY2UgfSBmcm9tICcuL3JvbGUtbWFuYWdlci5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvcmUvbG9nZ2luZy9sb2dnZXIuc2VydmljZSc7XG5cblxuQERpcmVjdGl2ZSh7XG4gIC8vIFRPRE86IHJlbW92ZSB0aGlzIG9uY2UgdGhpcyBpcyBtb3ZlZCB0byBpdCdzIG93biBwYWNrYWdlIC0gUkcuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICBzZWxlY3RvcjogJ1toYXNSb2xlc10nXG59KVxuZXhwb3J0IGNsYXNzIEhhc1JvbGVzRGlyZWN0aXZlIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHJvbGVNZ3I6IFJvbGVNYW5hZ2VyU2VydmljZSxcbiAgICBwcml2YXRlIGxvZzogTG9nZ2VyKSB7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgaGFzUm9sZXMocm9sZXM6IHN0cmluZyB8IG51bWJlcikge1xuICAgIGlmICh0aGlzLnJvbGVNZ3IuaGFzUm9sZXMocm9sZXMpKSB7XG4gICAgICAvLyBJZiBjb25kaXRpb24gaXMgdHJ1ZSBhZGQgdGVtcGxhdGUgdG8gRE9NXG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgdGhpcy5sb2cudHJhY2UoYEdyYW50ZWQgYWNjZXNzOiAke3JvbGVzfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFbHNlIHJlbW92ZSB0ZW1wbGF0ZSBmcm9tIERPTVxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICB0aGlzLmxvZy50cmFjZShgRGVuaWVkIGFjY2VzczogJHtyb2xlc31gKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==