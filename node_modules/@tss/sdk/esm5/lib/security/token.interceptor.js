/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { SecurityConfig } from './security-config';
import * as i0 from "@angular/core";
import * as i1 from "./security-config";
var TokenInterceptor = /** @class */ (function () {
    function TokenInterceptor(config) {
        this.config = config;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    TokenInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        /** @type {?} */
        var withCredsExpr = new RegExp(this.config.withCredentialsInclusionExpression);
        if (this.config.accessToken && new RegExp(this.config.tdsTokenInclusionExpression).test(request.url)) {
            request = request.clone({
                withCredentials: this.config.setWithCredentials && withCredsExpr.test(request.url),
                setHeaders: {
                    Authorization: this.config.authorizationType + " " + this.config.accessToken
                }
            });
        }
        else if (this.config.setWithCredentials && withCredsExpr.test(request.url)) {
            request = request.clone({
                withCredentials: true
            });
        }
        return next.handle(request);
    };
    TokenInterceptor.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TokenInterceptor.ctorParameters = function () { return [
        { type: SecurityConfig }
    ]; };
    /** @nocollapse */ TokenInterceptor.ngInjectableDef = i0.defineInjectable({ factory: function TokenInterceptor_Factory() { return new TokenInterceptor(i0.inject(i1.SecurityConfig)); }, token: TokenInterceptor, providedIn: "root" });
    return TokenInterceptor;
}());
export { TokenInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TokenInterceptor.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4uaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9zZWN1cml0eS90b2tlbi5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7O0FBR25EO0lBSUUsMEJBQW9CLE1BQXNCO1FBQXRCLFdBQU0sR0FBTixNQUFNLENBQWdCO0lBRTFDLENBQUM7Ozs7OztJQUVELG9DQUFTOzs7OztJQUFULFVBQVUsT0FBeUIsRUFBRSxJQUFpQjs7WUFDOUMsYUFBYSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsa0NBQWtDLENBQUM7UUFDaEYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNwRyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDdEIsZUFBZSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO2dCQUNsRixVQUFVLEVBQUU7b0JBQ1YsYUFBYSxFQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLFNBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFhO2lCQUM3RTthQUNGLENBQUMsQ0FBQztTQUNKO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzVFLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUN0QixlQUFlLEVBQUUsSUFBSTthQUN0QixDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDOztnQkF4QkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFMUSxjQUFjOzs7MkJBUnZCO0NBb0NDLEFBekJELElBeUJDO1NBdEJZLGdCQUFnQjs7Ozs7O0lBQ2Ysa0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwSGFuZGxlciwgSHR0cEV2ZW50LCBIdHRwSW50ZXJjZXB0b3IgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbi8vIDNyZCBwYXJ0eS5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgU2VjdXJpdHlDb25maWcgfSBmcm9tICcuL3NlY3VyaXR5LWNvbmZpZyc7XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVG9rZW5JbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBTZWN1cml0eUNvbmZpZykge1xuXG4gIH1cblxuICBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgY29uc3Qgd2l0aENyZWRzRXhwciA9IG5ldyBSZWdFeHAodGhpcy5jb25maWcud2l0aENyZWRlbnRpYWxzSW5jbHVzaW9uRXhwcmVzc2lvbik7XG4gICAgaWYgKHRoaXMuY29uZmlnLmFjY2Vzc1Rva2VuICYmIG5ldyBSZWdFeHAodGhpcy5jb25maWcudGRzVG9rZW5JbmNsdXNpb25FeHByZXNzaW9uKS50ZXN0KHJlcXVlc3QudXJsKSkge1xuICAgICAgcmVxdWVzdCA9IHJlcXVlc3QuY2xvbmUoe1xuICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMuY29uZmlnLnNldFdpdGhDcmVkZW50aWFscyAmJiB3aXRoQ3JlZHNFeHByLnRlc3QocmVxdWVzdC51cmwpLFxuICAgICAgICBzZXRIZWFkZXJzOiB7XG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYCR7dGhpcy5jb25maWcuYXV0aG9yaXphdGlvblR5cGV9ICR7dGhpcy5jb25maWcuYWNjZXNzVG9rZW59YFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29uZmlnLnNldFdpdGhDcmVkZW50aWFscyAmJiB3aXRoQ3JlZHNFeHByLnRlc3QocmVxdWVzdC51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSh7XG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICB9XG59XG4iXX0=