/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { MISSING_ROLE_PARAM_EXCEPTION_MSG } from './role';
import { SecurityConfig } from '../security-config';
import { BaseResourceService } from '../../core/resource/base-resource.service';
import { join } from '../../core/url/join.function';
import { UNSUPPORTED_GET_EXCEPTION_MSG, UNSUPPORTED_CREATE_EXCEPTION_MSG } from '../../core/resource/resource.constants';
import { MISSING_USER_PARAM_EXCEPTION_MSG } from '../security.constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../security-config";
/**
 * Service to provide all CRUD operations for user/role assignment.
 *
 * \@example
 * ## Gets roles for a given user:
 * service.rolesByUser('879e27e1-b139-4348-86ca-ec4d5651475f')
 *
 * // Which is just a shortcut for:
 * service.query({ userId: '879e27e1-b139-4348-86ca-ec4d5651475f' });
 *
 */
var UserRoleService = /** @class */ (function (_super) {
    tslib_1.__extends(UserRoleService, _super);
    function UserRoleService(http, config) {
        var _this = _super.call(this, http, {
            url: join(config.serviceUrl, config.userRolesEndpoint),
            idFieldName: 'userId'
        }) || this;
        _this.http = http;
        return _this;
    }
    /**
     * Retrieves a list of roles for a given user ID.
     */
    /**
     * Retrieves a list of roles for a given user ID.
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.query = /**
     * Retrieves a list of roles for a given user ID.
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (routeTokens, params) {
        if (!routeTokens || !routeTokens.userId) {
            throw new Error(MISSING_USER_PARAM_EXCEPTION_MSG);
        }
        return _super.prototype.query.call(this, routeTokens, params);
    };
    /**
     * This method is not supported for this resource. Please use "rolesByUser".
     */
    /**
     * This method is not supported for this resource. Please use "rolesByUser".
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.get = /**
     * This method is not supported for this resource. Please use "rolesByUser".
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (id, routeTokens, params) {
        throw new Error(UNSUPPORTED_GET_EXCEPTION_MSG);
    };
    /**
     * This method is not supported for this resource. Please use "addUserToRole".
     */
    /**
     * This method is not supported for this resource. Please use "addUserToRole".
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.create = /**
     * This method is not supported for this resource. Please use "addUserToRole".
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (entity, routeTokens, params) {
        throw new Error(UNSUPPORTED_CREATE_EXCEPTION_MSG);
    };
    /**
     * Updates a users role assignment (adds a role to a user).
     */
    /**
     * Updates a users role assignment (adds a role to a user).
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.update = /**
     * Updates a users role assignment (adds a role to a user).
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (entity, routeTokens, params) {
        if (!routeTokens || !routeTokens.userId) {
            throw new Error(MISSING_USER_PARAM_EXCEPTION_MSG);
        }
        else if (!routeTokens.roleName) {
            throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);
        }
        return _super.prototype.update.call(this, null, routeTokens, params);
    };
    /**
     * Removes a user from a role assignment.
     */
    /**
     * Removes a user from a role assignment.
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.delete = /**
     * Removes a user from a role assignment.
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (id, routeTokens, params) {
        if (!routeTokens || !routeTokens.userId) {
            throw new Error(MISSING_USER_PARAM_EXCEPTION_MSG);
        }
        else if (!routeTokens.roleName) {
            throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);
        }
        return _super.prototype.delete.call(this, id, routeTokens, params);
    };
    /**
     * Retrieves all roles assigned to the given user ID.
     */
    /**
     * Retrieves all roles assigned to the given user ID.
     * @param {?} userId
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.rolesByUser = /**
     * Retrieves all roles assigned to the given user ID.
     * @param {?} userId
     * @param {?=} params
     * @return {?}
     */
    function (userId, params) {
        return this.query({ userId: userId }, params);
    };
    /**
     * Adds a user to role.
     */
    /**
     * Adds a user to role.
     * @param {?} userId
     * @param {?} role
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.addUserToRole = /**
     * Adds a user to role.
     * @param {?} userId
     * @param {?} role
     * @param {?=} params
     * @return {?}
     */
    function (userId, role, params) {
        // NOTE: We pass an arbitrary "_" role name because the route requires a role name,
        // however the role's name is going to be pulled from the role entity on the server.
        // The reason we don't pass "role.name" here is because of issues with IIS not
        // handling decoded backslashes (ex: TSS\TSS Users).
        return _super.prototype.update.call(this, role, { userId: userId, roleName: '_' }, params);
    };
    /**
     * Adds a user to role.
     */
    /**
     * Adds a user to role.
     * @param {?} userId
     * @param {?} roleName
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.addUserToRoleByName = /**
     * Adds a user to role.
     * @param {?} userId
     * @param {?} roleName
     * @param {?=} params
     * @return {?}
     */
    function (userId, roleName, params) {
        roleName = decodeURIComponent(roleName);
        return this.update(null, { userId: userId, roleName: roleName }, params);
    };
    /**
     * Removes a user from the given role.
     */
    /**
     * Removes a user from the given role.
     * @param {?} userId
     * @param {?} role
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.removeUserFromRole = /**
     * Removes a user from the given role.
     * @param {?} userId
     * @param {?} role
     * @param {?=} params
     * @return {?}
     */
    function (userId, role, params) {
        return this.removeUserFromRoleByName(userId, role.name, params);
    };
    /**
     * Removes a user from the given role.
     */
    /**
     * Removes a user from the given role.
     * @param {?} userId
     * @param {?} roleName
     * @param {?=} params
     * @return {?}
     */
    UserRoleService.prototype.removeUserFromRoleByName = /**
     * Removes a user from the given role.
     * @param {?} userId
     * @param {?} roleName
     * @param {?=} params
     * @return {?}
     */
    function (userId, roleName, params) {
        roleName = decodeURIComponent(roleName);
        return this.delete(userId, { userId: userId, roleName: roleName }, params);
    };
    UserRoleService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserRoleService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SecurityConfig }
    ]; };
    /** @nocollapse */ UserRoleService.ngInjectableDef = i0.defineInjectable({ factory: function UserRoleService_Factory() { return new UserRoleService(i0.inject(i1.HttpClient), i0.inject(i2.SecurityConfig)); }, token: UserRoleService, providedIn: "root" });
    return UserRoleService;
}(BaseResourceService));
export { UserRoleService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    UserRoleService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,