/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
// TSS.
import { SecurityConfig } from '../security-config';
import { MISSING_ROLE_PARAM_EXCEPTION_MSG } from './role';
import { BaseResourceService } from '../../core/resource/base-resource.service';
import { join } from '../../core/url/join.function';
import { UNSUPPORTED_GET_EXCEPTION_MSG, UNSUPPORTED_CREATE_EXCEPTION_MSG } from '../../core/resource/resource.constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../security-config";
/** @type {?} */
export var MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG = 'Missing privilege identifier parameter';
/**
 * Service to provide all CRUD operations for privilege/role assignment.
 *
 * \@example
 * ## Gets privileges for a given role:
 * service.privilegesByRole('879e27e1-b139-4348-86ca-ec4d5651475f')
 *
 * // Which is just a shortcut for:
 * service.query({ roleId: 'admin' });
 *
 */
var RolePrivilegeService = /** @class */ (function (_super) {
    tslib_1.__extends(RolePrivilegeService, _super);
    function RolePrivilegeService(http, config) {
        var _this = _super.call(this, http, {
            url: join(config.serviceUrl, config.rolesPrivilegesEndpoint),
            idFieldName: 'roleId'
        }) || this;
        _this.http = http;
        return _this;
    }
    /**
     * Retrieves a list of privileges for a given role ID.
     */
    /**
     * Retrieves a list of privileges for a given role ID.
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    RolePrivilegeService.prototype.query = /**
     * Retrieves a list of privileges for a given role ID.
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (routeTokens, params) {
        if (!routeTokens || !routeTokens.roleId) {
            throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);
        }
        return _super.prototype.query.call(this, routeTokens, params);
    };
    /**
     * This method is not supported for this resource. Please use "privilegesByRole".
     */
    /**
     * This method is not supported for this resource. Please use "privilegesByRole".
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    RolePrivilegeService.prototype.get = /**
     * This method is not supported for this resource. Please use "privilegesByRole".
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (id, routeTokens, params) {
        throw new Error(UNSUPPORTED_GET_EXCEPTION_MSG);
    };
    /**
     * This method is not supported for this resource. Please use "addPrivilegeToRole".
     */
    /**
     * This method is not supported for this resource. Please use "addPrivilegeToRole".
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    RolePrivilegeService.prototype.create = /**
     * This method is not supported for this resource. Please use "addPrivilegeToRole".
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (entity, routeTokens, params) {
        throw new Error(UNSUPPORTED_CREATE_EXCEPTION_MSG);
    };
    /**
     * Updates a privilege assignment (adds a privilege to a role).
     */
    /**
     * Updates a privilege assignment (adds a privilege to a role).
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    RolePrivilegeService.prototype.update = /**
     * Updates a privilege assignment (adds a privilege to a role).
     * @param {?} entity
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (entity, routeTokens, params) {
        if (!routeTokens || !routeTokens.roleId) {
            throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);
        }
        else if (!routeTokens.privilegeId) {
            throw new Error(MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG);
        }
        return _super.prototype.update.call(this, null, routeTokens, params);
    };
    /**
     * Removes a privilege from a role assignment.
     */
    /**
     * Removes a privilege from a role assignment.
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    RolePrivilegeService.prototype.delete = /**
     * Removes a privilege from a role assignment.
     * @param {?} id
     * @param {?=} routeTokens
     * @param {?=} params
     * @return {?}
     */
    function (id, routeTokens, params) {
        if (!routeTokens || !routeTokens.roleId) {
            throw new Error(MISSING_ROLE_PARAM_EXCEPTION_MSG);
        }
        else if (!routeTokens.privilegeId) {
            throw new Error(MISSING_PRIVILEGE_PARAM_EXCEPTION_MSG);
        }
        return _super.prototype.delete.call(this, id, routeTokens, params);
    };
    /**
     * Retrieves all privileges assigned to the given role ID.
     */
    /**
     * Retrieves all privileges assigned to the given role ID.
     * @param {?} roleId
     * @param {?=} params
     * @return {?}
     */
    RolePrivilegeService.prototype.privilegesByRole = /**
     * Retrieves all privileges assigned to the given role ID.
     * @param {?} roleId
     * @param {?=} params
     * @return {?}
     */
    function (roleId, params) {
        return this.query({ roleId: roleId }, params);
    };
    /**
     * Adds a privilege to role.
     */
    /**
     * Adds a privilege to role.
     * @param {?} roleId
     * @param {?} privilegeId
     * @return {?}
     */
    RolePrivilegeService.prototype.addPrivilegeToRole = /**
     * Adds a privilege to role.
     * @param {?} roleId
     * @param {?} privilegeId
     * @return {?}
     */
    function (roleId, privilegeId) {
        return this.update(null, { roleId: roleId, privilegeId: privilegeId });
    };
    /**
     * Removes a privilege from the given role.
     */
    /**
     * Removes a privilege from the given role.
     * @param {?} roleId
     * @param {?} privilegeId
     * @return {?}
     */
    RolePrivilegeService.prototype.removePrivilegeFromRole = /**
     * Removes a privilege from the given role.
     * @param {?} roleId
     * @param {?} privilegeId
     * @return {?}
     */
    function (roleId, privilegeId) {
        return this.delete(roleId, { roleId: roleId, privilegeId: privilegeId });
    };
    RolePrivilegeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RolePrivilegeService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SecurityConfig }
    ]; };
    /** @nocollapse */ RolePrivilegeService.ngInjectableDef = i0.defineInjectable({ factory: function RolePrivilegeService_Factory() { return new RolePrivilegeService(i0.inject(i1.HttpClient), i0.inject(i2.SecurityConfig)); }, token: RolePrivilegeService, providedIn: "root" });
    return RolePrivilegeService;
}(BaseResourceService));
export { RolePrivilegeService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    RolePrivilegeService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,