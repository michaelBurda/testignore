/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SecurityConfig } from './security-config';
import { isString } from '../core/type-check/is-string.function';
import { isArray } from '../core/type-check/is-array.function';
import { isValue } from '../core/type-check/is-value.function';
import { isNumber } from '../core/type-check/is-number.function';
import * as i0 from "@angular/core";
import * as i1 from "./security-config";
var RoleManagerService = /** @class */ (function () {
    function RoleManagerService(config) {
        this.config = config;
        this.roles = new Set();
        this.roleSplitterExpr = new RegExp(this.config.roleSplitterExp);
    }
    Object.defineProperty(RoleManagerService.prototype, "enabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.rolesEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoleManagerService.prototype, "roleCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.roles.size;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RoleManagerService.prototype.getRoles = /**
     * @return {?}
     */
    function () {
        return Array.from(this.roles);
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    RoleManagerService.prototype.setRoles = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        this.clearRoles();
        this.addRoles(roles);
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    RoleManagerService.prototype.addRoles = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        if (isString(roles) && ((/** @type {?} */ (roles))).includes(',')) {
            roles = this.toArray(((/** @type {?} */ (roles))));
        }
        if (isArray(roles)) {
            ((/** @type {?} */ (roles))).forEach(this.addRole, this);
        }
        else {
            this.addRole((/** @type {?} */ (roles)));
        }
    };
    /**
     * @param {?} role
     * @return {?}
     */
    RoleManagerService.prototype.addRole = /**
     * @param {?} role
     * @return {?}
     */
    function (role) {
        this.roles.add(String(role).trim());
    };
    /**
     * @return {?}
     */
    RoleManagerService.prototype.clearRoles = /**
     * @return {?}
     */
    function () {
        this.roles.clear();
    };
    /**
     * @param {?} role
     * @return {?}
     */
    RoleManagerService.prototype.hasRole = /**
     * @param {?} role
     * @return {?}
     */
    function (role) {
        if (!this.enabled) {
            return true;
        }
        if (!isValue(role)) {
            return false;
        }
        return this.hasRoles(String(role));
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    RoleManagerService.prototype.hasRoles = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var splitRoles;
        if (!this.enabled) {
            return true;
        }
        if (!isValue(roles)) {
            return false;
        }
        splitRoles = this.toArray(roles);
        return String(roles).includes(',')
            ? this.hasAllRoles(splitRoles)
            : this.hasAnyRoles(splitRoles);
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    RoleManagerService.prototype.hasAllRoles = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        if (!this.enabled) {
            return true;
        }
        if (!isValue(roles)) {
            return false;
        }
        /** @type {?} */
        var roleList = this.toStringArray(roles);
        return roleList.every(this.forRealHasRole.bind(this));
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    RoleManagerService.prototype.hasAnyRoles = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        if (!this.enabled) {
            return true;
        }
        if (!isValue(roles)) {
            return false;
        }
        /** @type {?} */
        var roleList = this.toStringArray(roles);
        return roleList.some(this.forRealHasRole.bind(this));
    };
    /**
     * @private
     * @param {?} role
     * @return {?}
     */
    RoleManagerService.prototype.forRealHasRole = /**
     * @private
     * @param {?} role
     * @return {?}
     */
    function (role) {
        return this.roles.has(String(role).trim());
    };
    /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    RoleManagerService.prototype.toStringArray = /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var rolesList = [];
        if (isString(roles)) {
            rolesList = this.toArray((/** @type {?} */ (roles)));
        }
        else if (isNumber(roles)) {
            rolesList.push(String(roles));
        }
        else {
            rolesList = (/** @type {?} */ (roles));
        }
        return rolesList;
    };
    /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    RoleManagerService.prototype.toArray = /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        return String(roles).split(this.roleSplitterExpr);
    };
    RoleManagerService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RoleManagerService.ctorParameters = function () { return [
        { type: SecurityConfig }
    ]; };
    /** @nocollapse */ RoleManagerService.ngInjectableDef = i0.defineInjectable({ factory: function RoleManagerService_Factory() { return new RoleManagerService(i0.inject(i1.SecurityConfig)); }, token: RoleManagerService, providedIn: "root" });
    return RoleManagerService;
}());
export { RoleManagerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RoleManagerService.prototype.roles;
    /**
     * @type {?}
     * @private
     */
    RoleManagerService.prototype.roleSplitterExpr;
    /**
     * @type {?}
     * @private
     */
    RoleManagerService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,