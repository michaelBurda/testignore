/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ResourceConfig } from '../core/resource.config';
import { AutoConfig } from '../core/auto-config.decorator';
import * as i0 from "@angular/core";
/**
 * Security related configuration options. These settings are used to drive all
 * security related behaviour throughout the application. The settings can be
 * overridden directly in the code, application module, or from the TDS server.
 */
var SecurityConfig = /** @class */ (function (_super) {
    tslib_1.__extends(SecurityConfig, _super);
    function SecurityConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rolesEnabled = true;
        _this.storeToken = true;
        _this.autoSignIn = true;
        _this.authorizationType = 'Bearer';
        _this.tokenEndpoint = 'token';
        _this.signOutEndpoint = 'api/account/signout';
        _this.userInfoEndpoint = 'api/account/userinfo';
        _this.usersEndpoint = 'api/users/{id}';
        _this.rolesEndpoint = 'api/roles/{id}';
        _this.privilegesEndpoint = 'api/privileges/{id}';
        _this.userRolesEndpoint = 'api/users/{userId}/roles/{roleName}';
        _this.rolesPrivilegesEndpoint = 'api/roles/{roleId}/privileges/{privilegeId}';
        _this.tokenStorageKey = '__tss_token';
        _this.tokenInvalidationDateLookup = '__tss_token_invalidate_date';
        _this.tdsTokenInclusionExpression = '/api/';
        _this.withCredentialsInclusionExpression = '(.*?)';
        _this.setWithCredentials = false;
        _this.accessToken = null;
        _this.defaultUserName = null;
        _this.defaultPassword = null;
        _this.roleSplitterExp = '[,|]+';
        _this.tokenBody = (/**
         * @param {?} userName
         * @param {?} password
         * @return {?}
         */
        function (userName, password) { return "grant_type=password&username=" + userName + "&password=" + password; });
        return _this;
    }
    SecurityConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ SecurityConfig.ngInjectableDef = i0.defineInjectable({ factory: function SecurityConfig_Factory() { return new SecurityConfig(); }, token: SecurityConfig, providedIn: "root" });
    /**
     * Security related configuration options. These settings are used to drive all
     * security related behaviour throughout the application. The settings can be
     * overridden directly in the code, application module, or from the TDS server.
     */
    SecurityConfig = tslib_1.__decorate([
        AutoConfig('SecurityConfig')
    ], SecurityConfig);
    return SecurityConfig;
}(ResourceConfig));
export { SecurityConfig };
if (false) {
    /** @type {?} */
    SecurityConfig.prototype.rolesEnabled;
    /** @type {?} */
    SecurityConfig.prototype.storeToken;
    /** @type {?} */
    SecurityConfig.prototype.autoSignIn;
    /** @type {?} */
    SecurityConfig.prototype.authorizationType;
    /** @type {?} */
    SecurityConfig.prototype.tokenEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.signOutEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.userInfoEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.usersEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.rolesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.privilegesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.userRolesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.rolesPrivilegesEndpoint;
    /** @type {?} */
    SecurityConfig.prototype.tokenStorageKey;
    /** @type {?} */
    SecurityConfig.prototype.tokenInvalidationDateLookup;
    /** @type {?} */
    SecurityConfig.prototype.tdsTokenInclusionExpression;
    /** @type {?} */
    SecurityConfig.prototype.withCredentialsInclusionExpression;
    /** @type {?} */
    SecurityConfig.prototype.setWithCredentials;
    /** @type {?} */
    SecurityConfig.prototype.accessToken;
    /** @type {?} */
    SecurityConfig.prototype.defaultUserName;
    /** @type {?} */
    SecurityConfig.prototype.defaultPassword;
    /** @type {?} */
    SecurityConfig.prototype.roleSplitterExp;
    /** @type {?} */
    SecurityConfig.prototype.tokenBody;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHktY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvc2VjdXJpdHkvc2VjdXJpdHktY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7Ozs7OztJQWN2QiwwQ0FBYztJQUpsRDtRQUFBLHFFQTJCQztRQXRCQyxrQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixnQkFBVSxHQUFHLElBQUksQ0FBQztRQUNsQixnQkFBVSxHQUFHLElBQUksQ0FBQztRQUNsQix1QkFBaUIsR0FBdUIsUUFBUSxDQUFDO1FBQ2pELG1CQUFhLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLHFCQUFlLEdBQUcscUJBQXFCLENBQUM7UUFDeEMsc0JBQWdCLEdBQUcsc0JBQXNCLENBQUM7UUFDMUMsbUJBQWEsR0FBRyxnQkFBZ0IsQ0FBQztRQUNqQyxtQkFBYSxHQUFHLGdCQUFnQixDQUFDO1FBQ2pDLHdCQUFrQixHQUFHLHFCQUFxQixDQUFDO1FBQzNDLHVCQUFpQixHQUFHLHFDQUFxQyxDQUFDO1FBQzFELDZCQUF1QixHQUFHLDZDQUE2QyxDQUFDO1FBQ3hFLHFCQUFlLEdBQUcsYUFBYSxDQUFDO1FBQ2hDLGlDQUEyQixHQUFHLDZCQUE2QixDQUFDO1FBQzVELGlDQUEyQixHQUFHLE9BQU8sQ0FBQztRQUN0Qyx3Q0FBa0MsR0FBRyxPQUFPLENBQUM7UUFDN0Msd0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQzNCLGlCQUFXLEdBQVcsSUFBSSxDQUFDO1FBQzNCLHFCQUFlLEdBQVcsSUFBSSxDQUFDO1FBQy9CLHFCQUFlLEdBQVcsSUFBSSxDQUFDO1FBQy9CLHFCQUFlLEdBQUcsT0FBTyxDQUFDO1FBQzFCLGVBQVM7Ozs7O1FBQUcsVUFBQyxRQUFRLEVBQUUsUUFBUSxJQUFLLE9BQUEsa0NBQWdDLFFBQVEsa0JBQWEsUUFBVSxFQUEvRCxDQUErRCxFQUFDOztLQUNyRzs7Z0JBM0JBLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Ozs7O0lBRVksY0FBYztRQUQxQixVQUFVLENBQUMsZ0JBQWdCLENBQUM7T0FDaEIsY0FBYyxDQXVCMUI7eUJBdkNEO0NBdUNDLENBdkJtQyxjQUFjLEdBdUJqRDtTQXZCWSxjQUFjOzs7SUFDekIsc0NBQW9COztJQUNwQixvQ0FBa0I7O0lBQ2xCLG9DQUFrQjs7SUFDbEIsMkNBQWlEOztJQUNqRCx1Q0FBd0I7O0lBQ3hCLHlDQUF3Qzs7SUFDeEMsMENBQTBDOztJQUMxQyx1Q0FBaUM7O0lBQ2pDLHVDQUFpQzs7SUFDakMsNENBQTJDOztJQUMzQywyQ0FBMEQ7O0lBQzFELGlEQUF3RTs7SUFDeEUseUNBQWdDOztJQUNoQyxxREFBNEQ7O0lBQzVELHFEQUFzQzs7SUFDdEMsNERBQTZDOztJQUM3Qyw0Q0FBMkI7O0lBQzNCLHFDQUEyQjs7SUFDM0IseUNBQStCOztJQUMvQix5Q0FBK0I7O0lBQy9CLHlDQUEwQjs7SUFDMUIsbUNBQW9HIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVzb3VyY2VDb25maWcgfSBmcm9tICcuLi9jb3JlL3Jlc291cmNlLmNvbmZpZyc7XG5pbXBvcnQgeyBBdXRvQ29uZmlnIH0gZnJvbSAnLi4vY29yZS9hdXRvLWNvbmZpZy5kZWNvcmF0b3InO1xuXG5cbmV4cG9ydCB0eXBlIEF1dGhvcml6YXRpb25UeXBlcyA9ICdCZWFyZXInO1xuXG4vKipcbiAqIFNlY3VyaXR5IHJlbGF0ZWQgY29uZmlndXJhdGlvbiBvcHRpb25zLiBUaGVzZSBzZXR0aW5ncyBhcmUgdXNlZCB0byBkcml2ZSBhbGxcbiAqIHNlY3VyaXR5IHJlbGF0ZWQgYmVoYXZpb3VyIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uLiBUaGUgc2V0dGluZ3MgY2FuIGJlXG4gKiBvdmVycmlkZGVuIGRpcmVjdGx5IGluIHRoZSBjb2RlLCBhcHBsaWNhdGlvbiBtb2R1bGUsIG9yIGZyb20gdGhlIFREUyBzZXJ2ZXIuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuQEF1dG9Db25maWcoJ1NlY3VyaXR5Q29uZmlnJylcbmV4cG9ydCBjbGFzcyBTZWN1cml0eUNvbmZpZyBleHRlbmRzIFJlc291cmNlQ29uZmlnIHtcbiAgcm9sZXNFbmFibGVkID0gdHJ1ZTtcbiAgc3RvcmVUb2tlbiA9IHRydWU7XG4gIGF1dG9TaWduSW4gPSB0cnVlO1xuICBhdXRob3JpemF0aW9uVHlwZTogQXV0aG9yaXphdGlvblR5cGVzID0gJ0JlYXJlcic7XG4gIHRva2VuRW5kcG9pbnQgPSAndG9rZW4nO1xuICBzaWduT3V0RW5kcG9pbnQgPSAnYXBpL2FjY291bnQvc2lnbm91dCc7XG4gIHVzZXJJbmZvRW5kcG9pbnQgPSAnYXBpL2FjY291bnQvdXNlcmluZm8nO1xuICB1c2Vyc0VuZHBvaW50ID0gJ2FwaS91c2Vycy97aWR9JztcbiAgcm9sZXNFbmRwb2ludCA9ICdhcGkvcm9sZXMve2lkfSc7XG4gIHByaXZpbGVnZXNFbmRwb2ludCA9ICdhcGkvcHJpdmlsZWdlcy97aWR9JztcbiAgdXNlclJvbGVzRW5kcG9pbnQgPSAnYXBpL3VzZXJzL3t1c2VySWR9L3JvbGVzL3tyb2xlTmFtZX0nO1xuICByb2xlc1ByaXZpbGVnZXNFbmRwb2ludCA9ICdhcGkvcm9sZXMve3JvbGVJZH0vcHJpdmlsZWdlcy97cHJpdmlsZWdlSWR9JztcbiAgdG9rZW5TdG9yYWdlS2V5ID0gJ19fdHNzX3Rva2VuJztcbiAgdG9rZW5JbnZhbGlkYXRpb25EYXRlTG9va3VwID0gJ19fdHNzX3Rva2VuX2ludmFsaWRhdGVfZGF0ZSc7XG4gIHRkc1Rva2VuSW5jbHVzaW9uRXhwcmVzc2lvbiA9ICcvYXBpLyc7XG4gIHdpdGhDcmVkZW50aWFsc0luY2x1c2lvbkV4cHJlc3Npb24gPSAnKC4qPyknO1xuICBzZXRXaXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcbiAgYWNjZXNzVG9rZW46IHN0cmluZyA9IG51bGw7XG4gIGRlZmF1bHRVc2VyTmFtZTogc3RyaW5nID0gbnVsbDtcbiAgZGVmYXVsdFBhc3N3b3JkOiBzdHJpbmcgPSBudWxsO1xuICByb2xlU3BsaXR0ZXJFeHAgPSAnWyx8XSsnO1xuICB0b2tlbkJvZHkgPSAodXNlck5hbWUsIHBhc3N3b3JkKSA9PiBgZ3JhbnRfdHlwZT1wYXNzd29yZCZ1c2VybmFtZT0ke3VzZXJOYW1lfSZwYXNzd29yZD0ke3Bhc3N3b3JkfWA7XG59XG4iXX0=