/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { AutoConfig } from '../core/auto-config.decorator';
import { DEFAULT_POINT_EQUALITY_PRECISION } from '../core/equality/equality.constants';
import * as i0 from "@angular/core";
/**
 * Configuration class for storing geolocation-related settings.
 */
var GeolocationConfig = /** @class */ (function () {
    function GeolocationConfig() {
        this.gpsDisplayDecimalPlaces = 3;
        this.gpsWarnableAccuracyMeters = 5;
        this.gpsRequiredAccuracyMeters = 10;
        this.gpsWarnableDilutionOfPrecision = 2;
        this.gpsRequiredDilutionOfPrecision = 5;
        this.gpsEnableHighAccuracy = true;
        this.gpsNoAccuracyReading = '--';
        this.allowGpsMocking = true;
        this.emitDuplicateGpsPositions = false;
        this.gpsPositionDuplicatePrecision = DEFAULT_POINT_EQUALITY_PRECISION;
        this.gpsAntennaHeight = 0;
        this.adjustForGpsAntennaHeight = true;
        this.calculateMissingPositionValues = true;
        this.geolocationGeolocatorName = 'Built-in (default)';
        this.geolocationGeolocatorDescription = "Uses the device's built-in GPS sensor within the hardware. " +
            "Devices without a GPS sensor will defer the location retrieval to the Inernet Service Provider (ISP).";
    }
    GeolocationConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ GeolocationConfig.ngInjectableDef = i0.defineInjectable({ factory: function GeolocationConfig_Factory() { return new GeolocationConfig(); }, token: GeolocationConfig, providedIn: "root" });
    /**
     * Configuration class for storing geolocation-related settings.
     */
    GeolocationConfig = tslib_1.__decorate([
        AutoConfig('GeolocationConfig')
    ], GeolocationConfig);
    return GeolocationConfig;
}());
export { GeolocationConfig };
if (false) {
    /** @type {?} */
    GeolocationConfig.prototype.gpsDisplayDecimalPlaces;
    /** @type {?} */
    GeolocationConfig.prototype.gpsWarnableAccuracyMeters;
    /** @type {?} */
    GeolocationConfig.prototype.gpsRequiredAccuracyMeters;
    /** @type {?} */
    GeolocationConfig.prototype.gpsWarnableDilutionOfPrecision;
    /** @type {?} */
    GeolocationConfig.prototype.gpsRequiredDilutionOfPrecision;
    /** @type {?} */
    GeolocationConfig.prototype.gpsEnableHighAccuracy;
    /** @type {?} */
    GeolocationConfig.prototype.gpsNoAccuracyReading;
    /** @type {?} */
    GeolocationConfig.prototype.allowGpsMocking;
    /** @type {?} */
    GeolocationConfig.prototype.emitDuplicateGpsPositions;
    /** @type {?} */
    GeolocationConfig.prototype.gpsPositionDuplicatePrecision;
    /** @type {?} */
    GeolocationConfig.prototype.gpsAntennaHeight;
    /** @type {?} */
    GeolocationConfig.prototype.adjustForGpsAntennaHeight;
    /** @type {?} */
    GeolocationConfig.prototype.calculateMissingPositionValues;
    /** @type {?} */
    GeolocationConfig.prototype.geolocationGeolocatorName;
    /** @type {?} */
    GeolocationConfig.prototype.geolocationGeolocatorDescription;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24uY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZ2VvbG9jYXRpb24vZ2VvbG9jYXRpb24uY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQzs7Ozs7O0lBTXZGO1FBS0UsNEJBQXVCLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLDhCQUF5QixHQUFHLENBQUMsQ0FBQztRQUM5Qiw4QkFBeUIsR0FBRyxFQUFFLENBQUM7UUFDL0IsbUNBQThCLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLG1DQUE4QixHQUFHLENBQUMsQ0FBQztRQUNuQywwQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDN0IseUJBQW9CLEdBQUcsSUFBSSxDQUFDO1FBQzVCLG9CQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLDhCQUF5QixHQUFHLEtBQUssQ0FBQztRQUNsQyxrQ0FBNkIsR0FBRyxnQ0FBZ0MsQ0FBQztRQUNqRSxxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIsOEJBQXlCLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLG1DQUE4QixHQUFHLElBQUksQ0FBQztRQUN0Qyw4QkFBeUIsR0FBRyxvQkFBb0IsQ0FBQztRQUNqRCxxQ0FBZ0MsR0FBRyw2REFBNkQ7WUFDOUYsdUdBQXVHLENBQUM7S0FDM0c7O2dCQXJCQSxVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs7SUFFWSxpQkFBaUI7UUFEN0IsVUFBVSxDQUFDLG1CQUFtQixDQUFDO09BQ25CLGlCQUFpQixDQWlCN0I7NEJBaENEO0NBZ0NDLElBQUE7U0FqQlksaUJBQWlCOzs7SUFDNUIsb0RBQTRCOztJQUM1QixzREFBOEI7O0lBQzlCLHNEQUErQjs7SUFDL0IsMkRBQW1DOztJQUNuQywyREFBbUM7O0lBQ25DLGtEQUE2Qjs7SUFDN0IsaURBQTRCOztJQUM1Qiw0Q0FBdUI7O0lBQ3ZCLHNEQUFrQzs7SUFDbEMsMERBQWlFOztJQUNqRSw2Q0FBcUI7O0lBQ3JCLHNEQUFpQzs7SUFDakMsMkRBQXNDOztJQUN0QyxzREFBaUQ7O0lBQ2pELDZEQUMwRyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IEF1dG9Db25maWcgfSBmcm9tICcuLi9jb3JlL2F1dG8tY29uZmlnLmRlY29yYXRvcic7XG5pbXBvcnQgeyBERUZBVUxUX1BPSU5UX0VRVUFMSVRZX1BSRUNJU0lPTiB9IGZyb20gJy4uL2NvcmUvZXF1YWxpdHkvZXF1YWxpdHkuY29uc3RhbnRzJztcblxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gY2xhc3MgZm9yIHN0b3JpbmcgZ2VvbG9jYXRpb24tcmVsYXRlZCBzZXR0aW5ncy5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5AQXV0b0NvbmZpZygnR2VvbG9jYXRpb25Db25maWcnKVxuZXhwb3J0IGNsYXNzIEdlb2xvY2F0aW9uQ29uZmlnIHtcbiAgZ3BzRGlzcGxheURlY2ltYWxQbGFjZXMgPSAzO1xuICBncHNXYXJuYWJsZUFjY3VyYWN5TWV0ZXJzID0gNTtcbiAgZ3BzUmVxdWlyZWRBY2N1cmFjeU1ldGVycyA9IDEwO1xuICBncHNXYXJuYWJsZURpbHV0aW9uT2ZQcmVjaXNpb24gPSAyO1xuICBncHNSZXF1aXJlZERpbHV0aW9uT2ZQcmVjaXNpb24gPSA1O1xuICBncHNFbmFibGVIaWdoQWNjdXJhY3kgPSB0cnVlO1xuICBncHNOb0FjY3VyYWN5UmVhZGluZyA9ICctLSc7XG4gIGFsbG93R3BzTW9ja2luZyA9IHRydWU7XG4gIGVtaXREdXBsaWNhdGVHcHNQb3NpdGlvbnMgPSBmYWxzZTtcbiAgZ3BzUG9zaXRpb25EdXBsaWNhdGVQcmVjaXNpb24gPSBERUZBVUxUX1BPSU5UX0VRVUFMSVRZX1BSRUNJU0lPTjtcbiAgZ3BzQW50ZW5uYUhlaWdodCA9IDA7XG4gIGFkanVzdEZvckdwc0FudGVubmFIZWlnaHQgPSB0cnVlO1xuICBjYWxjdWxhdGVNaXNzaW5nUG9zaXRpb25WYWx1ZXMgPSB0cnVlO1xuICBnZW9sb2NhdGlvbkdlb2xvY2F0b3JOYW1lID0gJ0J1aWx0LWluIChkZWZhdWx0KSc7XG4gIGdlb2xvY2F0aW9uR2VvbG9jYXRvckRlc2NyaXB0aW9uID0gYFVzZXMgdGhlIGRldmljZSdzIGJ1aWx0LWluIEdQUyBzZW5zb3Igd2l0aGluIHRoZSBoYXJkd2FyZS4gYCArXG4gICAgYERldmljZXMgd2l0aG91dCBhIEdQUyBzZW5zb3Igd2lsbCBkZWZlciB0aGUgbG9jYXRpb24gcmV0cmlldmFsIHRvIHRoZSBJbmVybmV0IFNlcnZpY2UgUHJvdmlkZXIgKElTUCkuYDtcbn1cbiJdfQ==