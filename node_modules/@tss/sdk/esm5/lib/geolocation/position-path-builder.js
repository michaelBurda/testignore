/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import destination from '@turf/destination';
import bearing from '@turf/bearing';
import { isPositionAcceptable } from './is-position-acceptable.function';
import { setMeasuresByGeometricLength } from '../geometry/geometry/set-measures-by-geometric-length.function';
import { isMultiPartLine } from '../geometry/line/is-multi-part.function';
import { getMeasureFromPoint } from '../geometry/point/get-measure-from-point.function';
import { PATH_BUILDER_EMPTY_CALIBRATION_MEASURE_VALUE, PATH_BUILDER_CALCULATED_M_DEVICE_SOURCE } from './geolocation.constants';
import { getDistanceBetweenLatLng } from '../geometry/point/get-distance-between-points.function';
import { convertLengthUnits } from '../core/units/convert-length-units.function';
import { LengthUnit } from '../core/units/length-unit';
import { sumValues } from '../core/stats/sum-values.function';
import { getLastItem } from '../core/array/get-last-item.function';
import { isNumber } from '../core/type-check/is-number.function';
import { pointsAlmostEqual } from '../core/equality/points-almost-equal.function';
/** @type {?} */
var UNPLACED_CALIBRATION_MEASURE_KEY = 'pending';
/** @type {?} */
var DEFAULT_OPTIONS = {
    gpsRequiredAccuracyMeters: 10,
    requireAccuracy: true,
    pointEquivalencyPrecision: 8,
    returnZValues: true,
    returnMValues: true,
    mValueUnit: 'miles',
    storeUnfilteredPath: false,
    calibrationMeasureSnappingDistanceDelta: 2,
    calibrationMeasureSnappingDistanceDeltaUnit: LengthUnit.Foot
};
var PositionPathBuilder = /** @class */ (function () {
    function PositionPathBuilder(options) {
        this.parts = [[]];
        this.unfilteredPath = [];
        this.calibratedMeasures = new Map();
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
    }
    Object.defineProperty(PositionPathBuilder.prototype, "positionCount", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var counts = this.parts.map((/**
             * @param {?} part
             * @return {?}
             */
            function (part) { return part.length; }));
            return sumValues(counts);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositionPathBuilder.prototype, "currentPartIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parts.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositionPathBuilder.prototype, "currentPart", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parts[this.currentPartIndex];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositionPathBuilder.prototype, "lastPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return getLastItem(this.currentPart);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositionPathBuilder.prototype, "hasPosition", {
        get: /**
         * @return {?}
         */
        function () {
            return Boolean(this.lastPosition);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositionPathBuilder.prototype, "isEmpty", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentPart.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositionPathBuilder.prototype, "isValidPath", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currentPart.length > 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PositionPathBuilder.prototype, "isSinglePoint", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parts.length === 1 && this.currentPart.length === 1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} positionStream
     * @return {THIS}
     */
    PositionPathBuilder.prototype.trackPosition = /**
     * @template THIS
     * @this {THIS}
     * @param {?} positionStream
     * @return {THIS}
     */
    function (positionStream) {
        var _this = this;
        (/** @type {?} */ (this)).trackSubscription = positionStream.subscribe((/**
         * @template THIS
         * @this {THIS}
         * @param {?} position
         * @return {THIS}
         */
        function (position) { return (/** @type {?} */ (_this)).addPosition(position); }));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @param {?=} calibrationMeasure
     * @return {THIS}
     */
    PositionPathBuilder.prototype.addPosition = /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @param {?=} calibrationMeasure
     * @return {THIS}
     */
    function (position, calibrationMeasure) {
        /** @type {?} */
        var accuracyCriteriaMet = !(/** @type {?} */ (this)).options.requireAccuracy
            || isPositionAcceptable(position, (/** @type {?} */ (this)).options.gpsRequiredAccuracyMeters);
        /** @type {?} */
        var positionNotAcceptable = !position || !accuracyCriteriaMet;
        if (positionNotAcceptable) {
            return (/** @type {?} */ (this)).tryStoreUnfilteredPath(position);
        }
        if ((/** @type {?} */ (this)).isEmpty) {
            return (/** @type {?} */ (this)).forceAddPosition(position);
        }
        /** @type {?} */
        var pointsAtSameLocation = (/** @type {?} */ (this)).arePositionsEquivalent((/** @type {?} */ (this)).lastPosition, position);
        /** @type {?} */
        var bothPointsAtStandStill = (/** @type {?} */ (this)).lastPosition.speed === 0 && position.speed === 0 || pointsAtSameLocation;
        if (bothPointsAtStandStill) {
            (/** @type {?} */ (this)).tryStoreUnfilteredPath(position)
                .replaceLastPositionIfBetter(position);
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).forceAddPosition(position);
        if (isNumber(calibrationMeasure)) {
            (/** @type {?} */ (this)).addCalibrationMeasureToLastPosition(calibrationMeasure);
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    PositionPathBuilder.prototype.startNewPart = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).parts.push([]);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} vertexIndex
     * @param {?=} partIndex
     * @return {THIS}
     */
    PositionPathBuilder.prototype.removePositionByIndex = /**
     * @template THIS
     * @this {THIS}
     * @param {?} vertexIndex
     * @param {?=} partIndex
     * @return {THIS}
     */
    function (vertexIndex, partIndex) {
        if (partIndex === void 0) { partIndex = 0; }
        /** @type {?} */
        var part = (/** @type {?} */ (this)).parts[partIndex];
        if (!part) {
            throw new Error("Invalid part index\" " + partIndex);
        }
        part.splice(vertexIndex, 1);
        /** @type {?} */
        var key = (/** @type {?} */ (this)).getCalibrationMeasureLookupKey(partIndex, vertexIndex);
        if ((/** @type {?} */ (this)).calibratedMeasures.has(key)) {
            (/** @type {?} */ (this)).calibratedMeasures.delete(key);
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    PositionPathBuilder.prototype.removePosition = /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    function (position) {
        /** @type {?} */
        var partIndex = -1;
        /** @type {?} */
        var vertexIndex = -1;
        (/** @type {?} */ (this)).parts.forEach((/**
         * @param {?} part
         * @param {?} index
         * @return {?}
         */
        function (part, index) {
            /** @type {?} */
            var foundPositionIndex = part.indexOf(position);
            if (foundPositionIndex > -1) {
                partIndex = index;
                vertexIndex = foundPositionIndex;
            }
        }));
        if (partIndex > -1 && vertexIndex > -1) {
            return (/** @type {?} */ (this)).removePositionByIndex(vertexIndex, partIndex);
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    PositionPathBuilder.prototype.removeCalibrationMeasure = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    function (measure) {
        var _this = this;
        Array.from((/** @type {?} */ (this)).calibratedMeasures.values())
            .filter((/**
         * @param {?} calibration
         * @return {?}
         */
        function (calibration) { return calibration.measure === measure; }))
            .forEach((/**
         * @template THIS
         * @this {THIS}
         * @param {?} calibration
         * @return {THIS}
         */
        function (calibration) {
            return (/** @type {?} */ (_this)).removeCalibrationMeasureByIndex(calibration.vertexIndex, calibration.partIndex);
        }));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} vertexIndex
     * @param {?=} partIndex
     * @return {THIS}
     */
    PositionPathBuilder.prototype.removeCalibrationMeasureByIndex = /**
     * @template THIS
     * @this {THIS}
     * @param {?} vertexIndex
     * @param {?=} partIndex
     * @return {THIS}
     */
    function (vertexIndex, partIndex) {
        if (partIndex === void 0) { partIndex = 0; }
        /** @type {?} */
        var key = (/** @type {?} */ (this)).getCalibrationMeasureLookupKey(partIndex, vertexIndex);
        if ((/** @type {?} */ (this)).calibratedMeasures.has(key)) {
            (/** @type {?} */ (this)).calibratedMeasures.delete(key);
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    PositionPathBuilder.prototype.addCalibrationMeasure = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    function (measure) {
        /** @type {?} */
        var timestamp = new Date().getTime();
        var _a = tslib_1.__read((/** @type {?} */ (this)).currentPart.slice(-1), 1), lastVertex = _a[0];
        if (lastVertex && lastVertex.timestamp && lastVertex.timestamp === timestamp) {
            return (/** @type {?} */ (this)).addCalibrationMeasureToLastPosition(measure);
        }
        /** @type {?} */
        var partIndex = (/** @type {?} */ (this)).currentPartIndex;
        /** @type {?} */
        var key = UNPLACED_CALIBRATION_MEASURE_KEY;
        (/** @type {?} */ (this)).calibratedMeasures.set(key, {
            measure: measure,
            partIndex: partIndex,
            vertexIndex: null,
            timestamp: timestamp
        });
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    PositionPathBuilder.prototype.addCalibrationMeasureToLastPosition = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @return {THIS}
     */
    function (measure) {
        /** @type {?} */
        var partIndex = (/** @type {?} */ (this)).currentPartIndex;
        /** @type {?} */
        var lastVertexIndex = (/** @type {?} */ (this)).currentPart.length - 1;
        return (/** @type {?} */ (this)).addCalibrationMeasureAtIndex(measure, lastVertexIndex, partIndex);
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @param {?} vertexIndex
     * @param {?=} partIndex
     * @return {THIS}
     */
    PositionPathBuilder.prototype.addCalibrationMeasureAtIndex = /**
     * @template THIS
     * @this {THIS}
     * @param {?} measure
     * @param {?} vertexIndex
     * @param {?=} partIndex
     * @return {THIS}
     */
    function (measure, vertexIndex, partIndex) {
        if (partIndex === void 0) { partIndex = 0; }
        /** @type {?} */
        var key = (/** @type {?} */ (this)).getCalibrationMeasureLookupKey(partIndex, vertexIndex);
        (/** @type {?} */ (this)).calibratedMeasures.set(key, {
            measure: measure,
            partIndex: partIndex,
            vertexIndex: vertexIndex,
            timestamp: new Date().getTime()
        });
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    PositionPathBuilder.prototype.forceAddPosition = /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    function (position) {
        (/** @type {?} */ (this)).tryStoreUnfilteredPath(position);
        (/** @type {?} */ (this)).addPositionToPath(position);
        return (/** @type {?} */ (this));
    };
    /**
     * @param {?=} properties
     * @return {?}
     */
    PositionPathBuilder.prototype.toPointFeature = /**
     * @param {?=} properties
     * @return {?}
     */
    function (properties) {
        if (properties === void 0) { properties = {}; }
        return {
            type: 'Feature',
            geometry: this.toPointGeometry(),
            properties: properties
        };
    };
    /**
     * @param {?=} properties
     * @return {?}
     */
    PositionPathBuilder.prototype.toLineFeature = /**
     * @param {?=} properties
     * @return {?}
     */
    function (properties) {
        if (properties === void 0) { properties = {}; }
        return {
            type: 'Feature',
            geometry: this.toLineGeometry(),
            properties: properties
        };
    };
    /**
     * @param {?=} properties
     * @return {?}
     */
    PositionPathBuilder.prototype.toSingleLineFeature = /**
     * @param {?=} properties
     * @return {?}
     */
    function (properties) {
        if (properties === void 0) { properties = {}; }
        return {
            type: 'Feature',
            geometry: this.toSingleLineGeometry(),
            properties: properties
        };
    };
    /**
     * @param {?=} properties
     * @return {?}
     */
    PositionPathBuilder.prototype.toMultiLineFeature = /**
     * @param {?=} properties
     * @return {?}
     */
    function (properties) {
        if (properties === void 0) { properties = {}; }
        return {
            type: 'Feature',
            geometry: this.toMultiLineGeometry(),
            properties: properties
        };
    };
    /**
     * @param {?=} properties
     * @return {?}
     */
    PositionPathBuilder.prototype.toPolygonFeature = /**
     * @param {?=} properties
     * @return {?}
     */
    function (properties) {
        if (properties === void 0) { properties = {}; }
        return {
            type: 'Feature',
            geometry: this.toPolygonGeometry(),
            properties: properties
        };
    };
    /**
     * @param {?=} properties
     * @return {?}
     */
    PositionPathBuilder.prototype.toMultiPolygonFeature = /**
     * @param {?=} properties
     * @return {?}
     */
    function (properties) {
        if (properties === void 0) { properties = {}; }
        return {
            type: 'Feature',
            geometry: this.toMultiPolygonGeometry(),
            properties: properties
        };
    };
    /**
     * @param {?=} properties
     * @return {?}
     */
    PositionPathBuilder.prototype.toSinglePolygonFeature = /**
     * @param {?=} properties
     * @return {?}
     */
    function (properties) {
        if (properties === void 0) { properties = {}; }
        return {
            type: 'Feature',
            geometry: this.toSinglePolygonGeometry(),
            properties: properties
        };
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.toFeature = /**
     * @return {?}
     */
    function () {
        return this.isSinglePoint
            ? (/** @type {?} */ (this.toPointFeature()))
            : this.toLineFeature();
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.toGeometry = /**
     * @return {?}
     */
    function () {
        return this.isSinglePoint
            ? (/** @type {?} */ (this.toPointGeometry()))
            : this.toLineGeometry();
    };
    /**
     * @param {?=} calibrateMeasures
     * @return {?}
     */
    PositionPathBuilder.prototype.toSingleLineGeometry = /**
     * @param {?=} calibrateMeasures
     * @return {?}
     */
    function (calibrateMeasures) {
        if (calibrateMeasures === void 0) { calibrateMeasures = true; }
        /** @type {?} */
        var line = this.toLineGeometry(calibrateMeasures);
        if (isMultiPartLine(line.coordinates)) {
            throw new Error('Cannot convert MultiLineString to LineString. Data would be lost');
        }
        return (/** @type {?} */ (line));
    };
    /**
     * @param {?=} calibrateMeasures
     * @return {?}
     */
    PositionPathBuilder.prototype.toMultiLineGeometry = /**
     * @param {?=} calibrateMeasures
     * @return {?}
     */
    function (calibrateMeasures) {
        if (calibrateMeasures === void 0) { calibrateMeasures = true; }
        /** @type {?} */
        var line = this.toLineGeometry(calibrateMeasures);
        /** @type {?} */
        var isSinglePartLine = !isMultiPartLine(line.coordinates);
        if (isSinglePartLine) {
            line = {
                type: 'MultiLineString',
                bbox: line.bbox,
                coordinates: [(/** @type {?} */ (line.coordinates))]
            };
        }
        return (/** @type {?} */ (line));
    };
    /**
     * @param {?=} calibrateMeasures
     * @return {?}
     */
    PositionPathBuilder.prototype.toLineGeometry = /**
     * @param {?=} calibrateMeasures
     * @return {?}
     */
    function (calibrateMeasures) {
        if (calibrateMeasures === void 0) { calibrateMeasures = true; }
        /** @type {?} */
        var parts = this.toMultiPartArray();
        /** @type {?} */
        var line = parts.length > 1
            ? {
                type: 'MultiLineString',
                coordinates: parts
            }
            : {
                type: 'LineString',
                coordinates: parts[0]
            };
        if (this.options.returnMValues) {
            /** @type {?} */
            var calibrationPositions = calibrateMeasures
                ? Array.from(this.calibratedMeasures.values())
                : [];
            setMeasuresByGeometricLength(line, {
                units: this.options.mValueUnit,
                hasZValues: this.options.returnZValues,
                calibrationPositions: calibrationPositions
            });
        }
        return line;
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.toMultiPolygonGeometry = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var poly = this.toPolygonGeometry();
        /** @type {?} */
        var isSinglePolygon = poly.type === 'Polygon';
        if (isSinglePolygon) {
            poly = {
                type: 'MultiPolygon',
                bbox: poly.bbox,
                coordinates: [(/** @type {?} */ (poly.coordinates))]
            };
        }
        return (/** @type {?} */ (poly));
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.toSinglePolygonGeometry = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var poly = this.toPolygonGeometry();
        /** @type {?} */
        var isMultiPart = poly.type === 'MultiPolygon';
        if (isMultiPart) {
            throw new Error('Cannot convert MultiPolygon to Polygon. Data would be lost');
        }
        return (/** @type {?} */ (poly));
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.toPolygonGeometry = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var parts = this.toMultiPartArray();
        parts.forEach((/**
         * @param {?} part
         * @return {?}
         */
        function (part) { return _this.ensurePolygonIsClosed(part); }));
        return parts.length > 1
            ? {
                type: 'MultiPolygon',
                coordinates: [parts]
            }
            : {
                type: 'Polygon',
                coordinates: parts
            };
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.toPointGeometry = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var parts = this.toMultiPartArray();
        return parts.length > 1
            ? { type: 'MultiPoint', coordinates: parts.map((/**
                 * @param {?} part
                 * @return {?}
                 */
                function (part) { return part[0]; })) }
            : { type: 'Point', coordinates: parts[0][0] };
    };
    /**
     * @param {?} position
     * @return {?}
     */
    PositionPathBuilder.prototype.replaceLastPositionIfBetter = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var wasPositionAdded = true;
        if (this.isEmpty) {
            this.addPositionToPath(position);
            return wasPositionAdded;
        }
        /** @type {?} */
        var newPositionHasBetterAccuracy = this.lastPosition.accuracy > position.accuracy;
        if (newPositionHasBetterAccuracy) {
            this.replaceLastPosition(position);
        }
        else {
            wasPositionAdded = false;
        }
        return wasPositionAdded;
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    PositionPathBuilder.prototype.replaceLastPosition = /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    function (position) {
        (/** @type {?} */ (this)).currentPart[(/** @type {?} */ (this)).currentPart.length - 1] = position;
        return (/** @type {?} */ (this));
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.getBestPosition = /**
     * @return {?}
     */
    function () {
        throw new Error('Not implemented yet');
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.getUnfilteredPath = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.unfilteredPath.map((/**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            /** @type {?} */
            var unfilteredGpsPosition = Object.assign({
                included: _this.pathContains(position)
            }, position);
            return unfilteredGpsPosition;
        }));
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.getGeometryPathSummary = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var line = this.toMultiLineGeometry(false);
        return line.coordinates.map((/**
         * @param {?} part
         * @param {?} partIndex
         * @return {?}
         */
        function (part, partIndex) { return _this.getGeometryLinePartSummary(part, partIndex); }));
    };
    /**
     * @param {?} position
     * @return {?}
     */
    PositionPathBuilder.prototype.pathContains = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var found = this.parts.find((/**
         * @param {?} part
         * @return {?}
         */
        function (part) {
            return part.indexOf(position) > -1;
        }));
        return Boolean(found);
    };
    /**
     * @param {?} partIndex
     * @param {?} vertexIndex
     * @return {?}
     */
    PositionPathBuilder.prototype.getPositionByIndex = /**
     * @param {?} partIndex
     * @param {?} vertexIndex
     * @return {?}
     */
    function (partIndex, vertexIndex) {
        return this.parts[partIndex][vertexIndex];
    };
    /**
     * @return {?}
     */
    PositionPathBuilder.prototype.dispose = /**
     * @return {?}
     */
    function () {
        if (this.trackSubscription) {
            this.trackSubscription.unsubscribe();
        }
        this.parts.length = 0;
    };
    /**
     * @private
     * @param {?} linePart
     * @param {?} partIndex
     * @return {?}
     */
    PositionPathBuilder.prototype.getGeometryLinePartSummary = /**
     * @private
     * @param {?} linePart
     * @param {?} partIndex
     * @return {?}
     */
    function (linePart, partIndex) {
        var _this = this;
        return linePart.map((/**
         * @param {?} vertex
         * @param {?} vertexIndex
         * @return {?}
         */
        function (vertex, vertexIndex) {
            /** @type {?} */
            var position = _this.getPositionByIndex(partIndex, vertexIndex);
            /** @type {?} */
            var calibrationKey = _this.getCalibrationMeasureLookupKey(partIndex, vertexIndex);
            /** @type {?} */
            var calibrationPointMeasureValue = _this.calibratedMeasures.has(calibrationKey)
                ? _this.calibratedMeasures.get(calibrationKey).measure
                : PATH_BUILDER_EMPTY_CALIBRATION_MEASURE_VALUE;
            return Object.assign({
                geometricMeasure: getMeasureFromPoint(vertex),
                partIndex: partIndex,
                vertexIndex: vertexIndex,
                calibrationPointMeasureValue: calibrationPointMeasureValue
            }, position);
        }));
    };
    /**
     * @private
     * @param {?} partIndex
     * @param {?} vertexIndex
     * @return {?}
     */
    PositionPathBuilder.prototype.getCalibrationMeasureLookupKey = /**
     * @private
     * @param {?} partIndex
     * @param {?} vertexIndex
     * @return {?}
     */
    function (partIndex, vertexIndex) {
        return partIndex + "_" + vertexIndex;
    };
    /**
     * @private
     * @return {?}
     */
    PositionPathBuilder.prototype.toMultiPartArray = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var parts = [];
        this.parts.forEach((/**
         * @param {?} part
         * @return {?}
         */
        function (part) {
            /** @type {?} */
            var coordinates = part.map((/**
             * @param {?} position
             * @return {?}
             */
            function (position) { return _this.options.returnZValues
                ? [position.longitude, position.latitude, position.altitude || 0]
                : [position.longitude, position.latitude]; }));
            parts.push(coordinates);
        }));
        return parts;
    };
    /**
     * @private
     * @param {?} polygonPoints
     * @return {?}
     */
    PositionPathBuilder.prototype.ensurePolygonIsClosed = /**
     * @private
     * @param {?} polygonPoints
     * @return {?}
     */
    function (polygonPoints) {
        if (polygonPoints.length > 1) {
            var _a = tslib_1.__read(polygonPoints, 1), first = _a[0];
            /** @type {?} */
            var last = getLastItem(polygonPoints);
            var _b = tslib_1.__read(first, 3), firstLng = _b[0], firstLat = _b[1], firstZ = _b[2];
            var _c = tslib_1.__read(last, 2), lastLng = _c[0], lastLat = _c[1];
            /** @type {?} */
            var doesPolygonNotClose = !this.arePointsEquivalent(firstLng, firstLat, lastLng, lastLat);
            if (doesPolygonNotClose) {
                /** @type {?} */
                var closingPoint = [firstLng, firstLat, firstZ || 0];
                polygonPoints.push(closingPoint);
            }
        }
    };
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    PositionPathBuilder.prototype.addPositionToPath = /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.currentPart.push(position);
        if (this.calibratedMeasures.has(UNPLACED_CALIBRATION_MEASURE_KEY)) {
            this.addPendingCalibrationPoint();
        }
    };
    /**
     * @private
     * @return {?}
     */
    PositionPathBuilder.prototype.addPendingCalibrationPoint = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var calibratonPosition = this.calibratedMeasures.get(UNPLACED_CALIBRATION_MEASURE_KEY);
        /** @type {?} */
        var calibrationTimestamp = calibratonPosition.timestamp;
        var _a = tslib_1.__read(this.currentPart.slice(-2), 2), secondToLastPosition = _a[0], lastPosition = _a[1];
        /** @type {?} */
        var isTimestampBetweenVertices = calibrationTimestamp > secondToLastPosition.timestamp
            && calibrationTimestamp < lastPosition.timestamp;
        if (isTimestampBetweenVertices) {
            /** @type {?} */
            var totalTimeDelta = Math.abs(lastPosition.timestamp - secondToLastPosition.timestamp);
            /** @type {?} */
            var offsetTimeDelta = Math.abs(calibrationTimestamp - secondToLastPosition.timestamp);
            /** @type {?} */
            var percentOfDistance = offsetTimeDelta / totalTimeDelta;
            /** @type {?} */
            var distanceBetweenVerticesKilometers = getDistanceBetweenLatLng(secondToLastPosition.latitude, secondToLastPosition.longitude, lastPosition.latitude, lastPosition.longitude, LengthUnit.Mile);
            /** @type {?} */
            var distanceToPreviousVertexKilometers = percentOfDistance * distanceBetweenVerticesKilometers;
            /** @type {?} */
            var didSnapCalibrationMeasureToVertes = this.trySnapCalibrationMeasureToVertex(calibratonPosition.measure, distanceBetweenVerticesKilometers, distanceToPreviousVertexKilometers);
            if (didSnapCalibrationMeasureToVertes) {
                return;
            }
            /** @type {?} */
            var heading = bearing([secondToLastPosition.longitude, secondToLastPosition.latitude], [lastPosition.longitude, lastPosition.latitude]);
            /** @type {?} */
            var newPoint = destination([secondToLastPosition.longitude, secondToLastPosition.latitude], distanceToPreviousVertexKilometers, heading, { units: 'kilometers' });
            /** @type {?} */
            var spliceIndexForSecondToLastPosition = this.currentPart.length - 1;
            /** @type {?} */
            var newPosition = Object.assign({}, lastPosition, {
                longitude: newPoint.geometry.coordinates[0],
                latitude: newPoint.geometry.coordinates[1],
                deviceSource: PATH_BUILDER_CALCULATED_M_DEVICE_SOURCE
            });
            this.calibratedMeasures.delete(UNPLACED_CALIBRATION_MEASURE_KEY);
            this.addCalibrationMeasureAtIndex(calibratonPosition.measure, spliceIndexForSecondToLastPosition, this.currentPartIndex);
            this.currentPart.splice(spliceIndexForSecondToLastPosition, 0, newPosition);
        }
        else if (calibrationTimestamp >= lastPosition.timestamp) {
            this.addCalibrationMeasureToLastPosition(calibratonPosition.measure);
        }
        else {
            throw new Error("Calibration measure timestamp '" + calibratonPosition.timestamp + "' can not be located between"
                + (" '" + secondToLastPosition.timestamp + "' and '" + lastPosition.timestamp + "'"));
        }
    };
    /**
     * @private
     * @param {?} calibrationMeasure
     * @param {?} totalVerticeDistanceKilometers
     * @param {?} distanceToPreviousVertexKilometers
     * @return {?}
     */
    PositionPathBuilder.prototype.trySnapCalibrationMeasureToVertex = /**
     * @private
     * @param {?} calibrationMeasure
     * @param {?} totalVerticeDistanceKilometers
     * @param {?} distanceToPreviousVertexKilometers
     * @return {?}
     */
    function (calibrationMeasure, totalVerticeDistanceKilometers, distanceToPreviousVertexKilometers) {
        /** @type {?} */
        var distanceToNextVertexKilometers = totalVerticeDistanceKilometers - distanceToPreviousVertexKilometers;
        /** @type {?} */
        var distanceThresholdKilometers = convertLengthUnits(this.options.calibrationMeasureSnappingDistanceDelta, this.options.calibrationMeasureSnappingDistanceDeltaUnit, LengthUnit.Kilometer);
        /** @type {?} */
        var isPointCloseEnoughToPrevious = distanceToPreviousVertexKilometers < distanceThresholdKilometers;
        /** @type {?} */
        var isPointCloseEnoughToNext = distanceToNextVertexKilometers < distanceThresholdKilometers;
        if (isPointCloseEnoughToPrevious || isPointCloseEnoughToNext) {
            /** @type {?} */
            var previousVertexIndex = this.currentPart.length - 2;
            /** @type {?} */
            var nextVertexIndex = this.currentPart.length - 1;
            /** @type {?} */
            var vertexIndex = distanceToPreviousVertexKilometers < distanceToNextVertexKilometers
                ? previousVertexIndex
                : nextVertexIndex;
            this.addCalibrationMeasureAtIndex(calibrationMeasure, vertexIndex, this.currentPartIndex);
            this.calibratedMeasures.delete(UNPLACED_CALIBRATION_MEASURE_KEY);
            return true;
        }
        return false;
    };
    /**
     * @private
     * @param {?} position1
     * @param {?} position2
     * @return {?}
     */
    PositionPathBuilder.prototype.arePositionsEquivalent = /**
     * @private
     * @param {?} position1
     * @param {?} position2
     * @return {?}
     */
    function (position1, position2) {
        return this.arePointsEquivalent(position1.longitude, position1.latitude, position2.longitude, position2.latitude);
    };
    /**
     * @private
     * @param {?} longitude1
     * @param {?} latitude1
     * @param {?} longitude2
     * @param {?} latitude2
     * @return {?}
     */
    PositionPathBuilder.prototype.arePointsEquivalent = /**
     * @private
     * @param {?} longitude1
     * @param {?} latitude1
     * @param {?} longitude2
     * @param {?} latitude2
     * @return {?}
     */
    function (longitude1, latitude1, longitude2, latitude2) {
        return pointsAlmostEqual(longitude1, latitude1, longitude2, latitude2, this.options.pointEquivalencyPrecision);
    };
    /**
     * @private
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    PositionPathBuilder.prototype.tryStoreUnfilteredPath = /**
     * @private
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    function (position) {
        if ((/** @type {?} */ (this)).options.storeUnfilteredPath) {
            (/** @type {?} */ (this)).unfilteredPath.push(position);
        }
        return (/** @type {?} */ (this));
    };
    return PositionPathBuilder;
}());
export { PositionPathBuilder };
if (false) {
    /** @type {?} */
    PositionPathBuilder.prototype.parts;
    /** @type {?} */
    PositionPathBuilder.prototype.unfilteredPath;
    /** @type {?} */
    PositionPathBuilder.prototype.pathBreaks;
    /** @type {?} */
    PositionPathBuilder.prototype.calibratedMeasures;
    /**
     * @type {?}
     * @private
     */
    PositionPathBuilder.prototype.options;
    /**
     * @type {?}
     * @private
     */
    PositionPathBuilder.prototype.trackSubscription;
}
//# sourceMappingURL=data:application/json;base64,