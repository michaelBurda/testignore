/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// 3rd Party.
import { ReplaySubject, Subject } from 'rxjs';
import distance from '@turf/distance';
import bearing from '@turf/bearing';
// App.
import { isPositionAcceptable } from './is-position-acceptable.function';
import { Logger } from '../core/logging/logger.service';
import { NotifyService } from '../core/notify/notify.service';
import { GeolocationConfig } from './geolocation.config';
import { GeolocatorAccuracyUnit } from './geolocator/geolocator-accuracy-unit';
import { GeolocatorCapability } from './geolocator/geolocator-capability';
import { isPositionError } from './gps-position/is-position-error.function';
import { toReadableTime } from '../core/date-time/readable/to-readable-time.function';
import { isNumber } from '../core/type-check/is-number.function';
import { isNotNumber } from '../core/type-check/is-not-number.function';
import { formatNumber } from '../core/formatting/format-number.function';
import { errorMsg } from '../core/error/error-msg.function';
import { isNotValue } from '../core/type-check/is-not-value.function';
import { gpsPositionToPoint } from './gps-position/gps-position-to-point';
import { millisecondsToSeconds } from '../core/date-time/conversion/milliseconds-to-seconds.function';
import { convertLengthUnits } from '../core/units/convert-length-units.function';
import { LengthUnit } from '../core/units/length-unit';
import { BaseGeolocator } from './geolocator/base-geolocator.service';
import { isNotValidLocation } from './gps-position/is-not-valid-location.function';
import { gpsPositionsAlmostEqual } from './gps-position/gps-positions-almost-equal';
import * as i0 from "@angular/core";
import * as i1 from "./geolocator/base-geolocator.service";
import * as i2 from "../core/logging/logger.service";
import * as i3 from "../core/notify/notify.service";
import * as i4 from "./geolocation.config";
/**
 * Geolocator service. Provides a single point of GPS interaction.
 */
var GeolocationService = /** @class */ (function () {
    function GeolocationService(geolocator, log, notify, config) {
        this.log = log;
        this.notify = notify;
        this.config = config;
        this.isTrackingPosition = false;
        this.geolocator = geolocator;
        this.positionChangeSubject = new ReplaySubject(1);
        this.positionRecievedSubject = new Subject();
        this.positionChange = this.positionChangeSubject.asObservable();
        this.positionRecieved = this.positionRecievedSubject.asObservable();
    }
    Object.defineProperty(GeolocationService.prototype, "positionText", {
        get: /**
         * @return {?}
         */
        function () {
            return this.position
                ? this.position.longitude.toFixed(this.config.gpsDisplayDecimalPlaces) + "\n       , " + this.position.latitude.toFixed(this.config.gpsDisplayDecimalPlaces)
                : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "positionReceivedEllapsedTime", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.positionRecievedTime) {
                return '';
            }
            /** @type {?} */
            var differenceMilliseconds = Date.now() - this.positionRecievedTime.getTime();
            return toReadableTime(differenceMilliseconds) + " ago";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "isPositionAcceptable", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var accuracyThreshold = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter
                ? this.config.gpsRequiredAccuracyMeters
                : this.config.gpsRequiredDilutionOfPrecision;
            return isPositionAcceptable(this.position, accuracyThreshold);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "isPositionUnacceptable", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isPositionAcceptable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "isPositionWarnable", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var accuracyThreshold = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter
                ? this.config.gpsWarnableAccuracyMeters
                : this.config.gpsWarnableDilutionOfPrecision;
            return !isPositionAcceptable(this.position, accuracyThreshold);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "hasAccuracyCapability", {
        get: /**
         * @return {?}
         */
        function () {
            return this.geolocator.capabilities.indexOf(GeolocatorCapability.Accuracy) > -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "isPositionAccuracyKnown", {
        get: /**
         * @return {?}
         */
        function () {
            return this.position && isNumber(this.position.accuracy);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "isPositionAccuracyUnknown", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.isPositionAccuracyKnown;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "isPositionAccuracyInMeters", {
        get: /**
         * @return {?}
         */
        function () {
            return this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "isPositionAccuracyInDilutionOfPrecision", {
        get: /**
         * @return {?}
         */
        function () {
            return this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Pdop
                || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Hdop
                || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Vdop
                || this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Tdop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "geolocatorService", {
        get: /**
         * @return {?}
         */
        function () {
            return this.geolocator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationService.prototype, "accuracyStatement", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var noPosition = !this.position;
            if (noPosition) {
                return this.config.gpsNoAccuracyReading;
            }
            /** @type {?} */
            var isPositionAccuracyKnown = this.isPositionAccuracyKnown;
            /** @type {?} */
            var accuracy = isPositionAccuracyKnown ? this.position.accuracy : null;
            /** @type {?} */
            var suffix;
            if (isPositionAccuracyKnown && this.geolocator.hasCapability(GeolocatorCapability.Accuracy)) {
                suffix = this.geolocator.accuracyUnit === GeolocatorAccuracyUnit.Meter
                    ? 'm'
                    : String(this.geolocator.accuracyUnit).toUpperCase();
            }
            else if (this.geolocator.hasCapability(GeolocatorCapability.PDOP)) {
                accuracy = this.position.pdop;
                suffix = String(GeolocatorCapability.PDOP).toUpperCase();
            }
            else if (this.geolocator.hasCapability(GeolocatorCapability.HDOP)) {
                accuracy = this.position.hdop;
                suffix = String(GeolocatorCapability.HDOP).toUpperCase();
            }
            else if (this.geolocator.hasCapability(GeolocatorCapability.VDOP)) {
                accuracy = this.position.vdop;
                suffix = String(GeolocatorCapability.VDOP).toUpperCase();
            }
            else if (this.geolocator.hasCapability(GeolocatorCapability.TDOP)) {
                accuracy = this.position.tdop;
                suffix = String(GeolocatorCapability.TDOP).toUpperCase();
            }
            if (isNotNumber(accuracy)) {
                return this.config.gpsNoAccuracyReading;
            }
            return formatNumber(accuracy) + " " + suffix;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    GeolocationService.prototype.enableGpsTracking = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var geoOptions = {
            enableHighAccuracy: (/** @type {?} */ (this)).config.gpsEnableHighAccuracy
        };
        (/** @type {?} */ (this)).position = null;
        (/** @type {?} */ (this)).tryUnsubscribe();
        (/** @type {?} */ (this)).log.debug("Subscribing to GPS watching for '" + (/** @type {?} */ (this)).geolocator.name + "' with high accuracy set to '" + geoOptions.enableHighAccuracy + "'");
        (/** @type {?} */ (this)).gpsLocatorSubscription = (/** @type {?} */ (this)).geolocator.watchPosition(geoOptions)
            .subscribe((/**
         * @template THIS
         * @this {THIS}
         * @param {?} position
         * @return {THIS}
         */
        function (position) { return (/** @type {?} */ (_this)).onPositionRecieved(position); }), (/**
         * @template THIS
         * @this {THIS}
         * @param {?} error
         * @return {THIS}
         */
        function (error) { return (/** @type {?} */ (_this)).onLocationError(error); }));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    GeolocationService.prototype.disableGpsTracking = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).isTrackingPosition = false;
        (/** @type {?} */ (this)).tryUnsubscribe();
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} geolocator
     * @return {THIS}
     */
    GeolocationService.prototype.setGeoLocator = /**
     * @template THIS
     * @this {THIS}
     * @param {?} geolocator
     * @return {THIS}
     */
    function (geolocator) {
        (/** @type {?} */ (this)).tryUnsubscribe();
        (/** @type {?} */ (this)).geolocator = geolocator;
        if ((/** @type {?} */ (this)).isTrackingPosition) {
            (/** @type {?} */ (this)).enableGpsTracking();
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} isTrackingLocation
     * @return {THIS}
     */
    GeolocationService.prototype.setGpsTracking = /**
     * @template THIS
     * @this {THIS}
     * @param {?} isTrackingLocation
     * @return {THIS}
     */
    function (isTrackingLocation) {
        if (isTrackingLocation) {
            (/** @type {?} */ (this)).enableGpsTracking();
        }
        else {
            (/** @type {?} */ (this)).disableGpsTracking();
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    GeolocationService.prototype.toggleGpsTracking = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).setGpsTracking(!(/** @type {?} */ (this)).isTrackingPosition);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    GeolocationService.prototype.mockGpsPosition = /**
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    function (position) {
        if (!(/** @type {?} */ (this)).config.allowGpsMocking) {
            throw new Error('Permission denied to mock GPS location');
        }
        return (/** @type {?} */ (this)).onPositionRecieved(position);
    };
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    GeolocationService.prototype.onPositionRecieved = /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    function (position) {
        if (isPositionError(position)) {
            (/** @type {?} */ (this)).onLocationError((/** @type {?} */ (position)));
            return (/** @type {?} */ (this));
        }
        /** @type {?} */
        var gpsPosition = (/** @type {?} */ (position));
        if (isNotValidLocation(gpsPosition)) {
            return (/** @type {?} */ (this));
        }
        /** @type {?} */
        var isPreviousPointSameAsNew = (/** @type {?} */ (this)).position
            && gpsPositionsAlmostEqual((/** @type {?} */ (this)).position, gpsPosition, (/** @type {?} */ (this)).config.gpsPositionDuplicatePrecision);
        if (isPreviousPointSameAsNew && !(/** @type {?} */ (this)).config.emitDuplicateGpsPositions) {
            (/** @type {?} */ (this)).positionRecievedSubject.next(gpsPosition);
            return (/** @type {?} */ (this));
        }
        (/** @type {?} */ (this)).log.trace("Location recieved from '" + (/** @type {?} */ (this)).geolocator.name + "': " + gpsPosition.latitude + ", " + gpsPosition.longitude);
        (/** @type {?} */ (this)).adjustCoordinates(gpsPosition);
        (/** @type {?} */ (this)).position = gpsPosition;
        (/** @type {?} */ (this)).isTrackingPosition = true;
        (/** @type {?} */ (this)).positionRecievedTime = new Date((/** @type {?} */ (this)).position.timestamp || Date.now());
        (/** @type {?} */ (this)).positionRecievedSubject.next((/** @type {?} */ (this)).position);
        (/** @type {?} */ (this)).positionChangeSubject.next((/** @type {?} */ (this)).position);
        return (/** @type {?} */ (this));
    };
    /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    GeolocationService.prototype.onLocationError = /**
     * @protected
     * @template THIS
     * @this {THIS}
     * @param {?} error
     * @return {THIS}
     */
    function (error) {
        /** @type {?} */
        var errorMessage = errorMsg('Failed to retrieve location position. {error}', error);
        (/** @type {?} */ (this)).positionChangeSubject.error(error);
        (/** @type {?} */ (this)).log.error(errorMessage);
        (/** @type {?} */ (this)).notify.error(errorMessage);
        return (/** @type {?} */ (this));
    };
    /**
     * @private
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    GeolocationService.prototype.adjustCoordinates = /**
     * @private
     * @template THIS
     * @this {THIS}
     * @param {?} position
     * @return {THIS}
     */
    function (position) {
        (/** @type {?} */ (this)).tryAdjustMissingPositionValues(position);
        if ((/** @type {?} */ (this)).config.adjustForGpsAntennaHeight && (/** @type {?} */ (this)).config.gpsAntennaHeight) {
            /** @type {?} */
            var adjustedHeight = position.altitude - (/** @type {?} */ (this)).config.gpsAntennaHeight;
            adjustedHeight = adjustedHeight < 0 ? 0 : adjustedHeight;
            (/** @type {?} */ (this)).log.trace("Adjusting coordinate altitude from " + position.altitude + " to " + adjustedHeight);
            Object.assign(position, {
                altitude: adjustedHeight
            });
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @private
     * @param {?} newPosition
     * @return {?}
     */
    GeolocationService.prototype.tryAdjustMissingPositionValues = /**
     * @private
     * @param {?} newPosition
     * @return {?}
     */
    function (newPosition) {
        /** @type {?} */
        var missingSpeed = isNotValue(newPosition.speed);
        /** @type {?} */
        var missingHeading = isNotValue(newPosition.heading);
        /** @type {?} */
        var positionValuesMissing = missingSpeed || missingHeading;
        /** @type {?} */
        var shouldAdjustPositionValues = this.position && positionValuesMissing && this.config.calculateMissingPositionValues;
        if (shouldAdjustPositionValues) {
            /** @type {?} */
            var fromPoint = gpsPositionToPoint(this.position);
            /** @type {?} */
            var toPoint = gpsPositionToPoint(newPosition);
            if (missingSpeed) {
                // meters per second
                /** @type {?} */
                var kilometersTraveled = distance(fromPoint, toPoint, { units: 'kilometers' });
                if (kilometersTraveled) {
                    /** @type {?} */
                    var metersTraveled = convertLengthUnits(kilometersTraveled, LengthUnit.Kilometer, LengthUnit.Meter);
                    /** @type {?} */
                    var secondsDelta = millisecondsToSeconds(Math.abs(newPosition.timestamp - this.position.timestamp));
                    /** @type {?} */
                    var speed = metersTraveled / secondsDelta;
                    Object.assign(newPosition, { speed: speed });
                }
            }
            if (missingHeading) {
                /** @type {?} */
                var heading = bearing(fromPoint, toPoint);
                Object.assign(newPosition, { heading: heading });
            }
        }
    };
    /**
     * @private
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    GeolocationService.prototype.tryUnsubscribe = /**
     * @private
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        if ((/** @type {?} */ (this)).gpsLocatorSubscription) {
            (/** @type {?} */ (this)).log.debug("Unsubscribing from watching GPS stream from '" + (/** @type {?} */ (this)).geolocator.name + "'");
            (/** @type {?} */ (this)).gpsLocatorSubscription.unsubscribe();
        }
        return (/** @type {?} */ (this));
    };
    GeolocationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    GeolocationService.ctorParameters = function () { return [
        { type: BaseGeolocator },
        { type: Logger },
        { type: NotifyService },
        { type: GeolocationConfig }
    ]; };
    /** @nocollapse */ GeolocationService.ngInjectableDef = i0.defineInjectable({ factory: function GeolocationService_Factory() { return new GeolocationService(i0.inject(i1.BaseGeolocator), i0.inject(i2.Logger), i0.inject(i3.NotifyService), i0.inject(i4.GeolocationConfig)); }, token: GeolocationService, providedIn: "root" });
    return GeolocationService;
}());
export { GeolocationService };
if (false) {
    /** @type {?} */
    GeolocationService.prototype.position;
    /** @type {?} */
    GeolocationService.prototype.positionRecievedTime;
    /** @type {?} */
    GeolocationService.prototype.isTrackingPosition;
    /**
     * Fired when ever a new position is received and the value is different than the previous (unless the Geolocation config
     * value "emitDuplicateGpsPositions" is set to true - in which case duplicates will be published).
     * This value will alway emit the last recieved position (if you subscribe after it was emitted you will still receive it).
     * @type {?}
     */
    GeolocationService.prototype.positionChange;
    /**
     * Fired when ever a new position is received regardless of whether the position has changed since the last position was recieved.
     * @type {?}
     */
    GeolocationService.prototype.positionRecieved;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.positionChangeSubject;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.positionRecievedSubject;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.gpsLocatorSubscription;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.geolocator;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.log;
    /**
     * @type {?}
     * @private
     */
    GeolocationService.prototype.notify;
    /**
     * @type {?}
     * @protected
     */
    GeolocationService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,