/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable, Injector } from '@angular/core';
// 3rd party.
import { forkJoin, of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { GEOLOCATOR_REGISTRY } from '../geolocation.constants';
import * as i0 from "@angular/core";
var GeolocatorSourceService = /** @class */ (function () {
    function GeolocatorSourceService(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    GeolocatorSourceService.prototype.getGeolocator = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var registry = GEOLOCATOR_REGISTRY.find((/**
         * @param {?} registedSource
         * @return {?}
         */
        function (registedSource) { return registedSource.id === id; }));
        return this.getLocatorFromRegistry(registry);
    };
    /**
     * @return {?}
     */
    GeolocatorSourceService.prototype.getGeolocators = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return GEOLOCATOR_REGISTRY
            .map((/**
         * @param {?} registry
         * @return {?}
         */
        function (registry) { return _this.getLocatorFromRegistry(registry); }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    GeolocatorSourceService.prototype.getGeolocatorSource = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.getGeolocatorSources()
            .pipe(map((/**
         * @param {?} devices
         * @return {?}
         */
        function (devices) { return devices.find((/**
         * @param {?} device
         * @return {?}
         */
        function (device) { return device.id === id; })); })));
    };
    /**
     * @return {?}
     */
    GeolocatorSourceService.prototype.getAvailableGeolocatorSources = /**
     * @return {?}
     */
    function () {
        return this.getGeolocatorSources()
            .pipe(map((/**
         * @param {?} devices
         * @return {?}
         */
        function (devices) { return devices.filter((/**
         * @param {?} device
         * @return {?}
         */
        function (device) { return device.isAvailable; })); })));
    };
    /**
     * @return {?}
     */
    GeolocatorSourceService.prototype.getGeolocatorSources = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var availableObservables = GEOLOCATOR_REGISTRY
            .map((/**
         * @param {?} registry
         * @return {?}
         */
        function (registry) {
            /** @type {?} */
            var locator = _this.getLocatorFromRegistry(registry);
            /** @type {?} */
            var source = {
                id: registry.id,
                name: locator.name,
                description: locator.description,
                accuracyUnit: locator.accuracyUnit,
                capabilities: locator.capabilities,
                isAvailable: false,
            };
            return locator.isAvailable()
                .pipe(tap((/**
             * @param {?} available
             * @return {?}
             */
            function (available) { return source.isAvailable = available; })), map((/**
             * @return {?}
             */
            function () { return source; })));
        }));
        return availableObservables.length === 0
            ? of([])
            : forkJoin(availableObservables);
    };
    /**
     * @private
     * @param {?} registry
     * @return {?}
     */
    GeolocatorSourceService.prototype.getLocatorFromRegistry = /**
     * @private
     * @param {?} registry
     * @return {?}
     */
    function (registry) {
        /** @type {?} */
        var instance = this.injector.get(registry.constructor);
        return instance;
    };
    GeolocatorSourceService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    GeolocatorSourceService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    /** @nocollapse */ GeolocatorSourceService.ngInjectableDef = i0.defineInjectable({ factory: function GeolocatorSourceService_Factory() { return new GeolocatorSourceService(i0.inject(i0.INJECTOR)); }, token: GeolocatorSourceService, providedIn: "root" });
    return GeolocatorSourceService;
}());
export { GeolocatorSourceService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GeolocatorSourceService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRvci1zb3VyY2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2dlb2xvY2F0aW9uL2dlb2xvY2F0b3IvZ2VvbG9jYXRvci1zb3VyY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUdyRCxPQUFPLEVBQWMsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOztBQUkvRDtJQUdFLGlDQUE2QixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQy9DLENBQUM7Ozs7O0lBRUQsK0NBQWE7Ozs7SUFBYixVQUFjLEVBQVU7O1lBQ2hCLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxjQUFjLElBQUksT0FBQSxjQUFjLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBeEIsQ0FBd0IsRUFBQztRQUNyRixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsZ0RBQWM7OztJQUFkO1FBQUEsaUJBR0M7UUFGQyxPQUFPLG1CQUFtQjthQUN2QixHQUFHOzs7O1FBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLEVBQXJDLENBQXFDLEVBQUMsQ0FBQztJQUM1RCxDQUFDOzs7OztJQUVELHFEQUFtQjs7OztJQUFuQixVQUFvQixFQUFVO1FBQzVCLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixFQUFFO2FBQy9CLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLENBQUMsSUFBSTs7OztRQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQWhCLENBQWdCLEVBQUMsRUFBeEMsQ0FBd0MsRUFBQyxDQUN6RCxDQUFDO0lBQ04sQ0FBQzs7OztJQUVELCtEQUE2Qjs7O0lBQTdCO1FBQ0UsT0FBTyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7YUFDL0IsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsV0FBVyxFQUFsQixDQUFrQixFQUFDLEVBQTVDLENBQTRDLEVBQUMsQ0FDN0QsQ0FBQztJQUNOLENBQUM7Ozs7SUFFRCxzREFBb0I7OztJQUFwQjtRQUFBLGlCQXVCQzs7WUF0Qk8sb0JBQW9CLEdBQUcsbUJBQW1CO2FBQzdDLEdBQUc7Ozs7UUFBQyxVQUFBLFFBQVE7O2dCQUNMLE9BQU8sR0FBRyxLQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDOztnQkFDL0MsTUFBTSxHQUFxQjtnQkFDL0IsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFO2dCQUNmLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO2dCQUNoQyxZQUFZLEVBQUUsT0FBTyxDQUFDLFlBQVk7Z0JBQ2xDLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWTtnQkFDbEMsV0FBVyxFQUFFLEtBQUs7YUFDbkI7WUFFRCxPQUFPLE9BQU8sQ0FBQyxXQUFXLEVBQUU7aUJBQ3pCLElBQUksQ0FDSCxHQUFHOzs7O1lBQUMsVUFBQSxTQUFTLElBQUksT0FBQSxNQUFNLENBQUMsV0FBVyxHQUFHLFNBQVMsRUFBOUIsQ0FBOEIsRUFBQyxFQUNoRCxHQUFHOzs7WUFBQyxjQUFNLE9BQUEsTUFBTSxFQUFOLENBQU0sRUFBQyxDQUNsQixDQUFDO1FBQ04sQ0FBQyxFQUFDO1FBRUosT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUN0QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNSLENBQUMsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFFTyx3REFBc0I7Ozs7O0lBQTlCLFVBQStCLFFBQTBDOztZQUNqRSxRQUFRLEdBQWUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNwRSxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOztnQkExREYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztnQkFaYixRQUFROzs7a0NBRDdCO0NBd0VDLEFBM0RELElBMkRDO1NBMURZLHVCQUF1Qjs7Ozs7O0lBRXRCLDJDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vLyAzcmQgcGFydHkuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmb3JrSm9pbiwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBHZW9sb2NhdG9yU291cmNlIH0gZnJvbSAnLi9nZW9sb2NhdG9yLXNvdXJjZSc7XG5pbXBvcnQgeyBHRU9MT0NBVE9SX1JFR0lTVFJZIH0gZnJvbSAnLi4vZ2VvbG9jYXRpb24uY29uc3RhbnRzJztcbmltcG9ydCB7IEdlb2xvY2F0b3IgfSBmcm9tICcuL2dlb2xvY2F0b3InO1xuXG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgR2VvbG9jYXRvclNvdXJjZVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yKSB7XG4gIH1cblxuICBnZXRHZW9sb2NhdG9yKGlkOiBzdHJpbmcpOiBHZW9sb2NhdG9yIHtcbiAgICBjb25zdCByZWdpc3RyeSA9IEdFT0xPQ0FUT1JfUkVHSVNUUlkuZmluZChyZWdpc3RlZFNvdXJjZSA9PiByZWdpc3RlZFNvdXJjZS5pZCA9PT0gaWQpO1xuICAgIHJldHVybiB0aGlzLmdldExvY2F0b3JGcm9tUmVnaXN0cnkocmVnaXN0cnkpO1xuICB9XG5cbiAgZ2V0R2VvbG9jYXRvcnMoKTogR2VvbG9jYXRvcltdIHtcbiAgICByZXR1cm4gR0VPTE9DQVRPUl9SRUdJU1RSWVxuICAgICAgLm1hcChyZWdpc3RyeSA9PiB0aGlzLmdldExvY2F0b3JGcm9tUmVnaXN0cnkocmVnaXN0cnkpKTtcbiAgfVxuXG4gIGdldEdlb2xvY2F0b3JTb3VyY2UoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8R2VvbG9jYXRvclNvdXJjZT4ge1xuICAgIHJldHVybiB0aGlzLmdldEdlb2xvY2F0b3JTb3VyY2VzKClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoZGV2aWNlcyA9PiBkZXZpY2VzLmZpbmQoZGV2aWNlID0+IGRldmljZS5pZCA9PT0gaWQpKVxuICAgICAgKTtcbiAgfVxuXG4gIGdldEF2YWlsYWJsZUdlb2xvY2F0b3JTb3VyY2VzKCk6IE9ic2VydmFibGU8R2VvbG9jYXRvclNvdXJjZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0R2VvbG9jYXRvclNvdXJjZXMoKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChkZXZpY2VzID0+IGRldmljZXMuZmlsdGVyKGRldmljZSA9PiBkZXZpY2UuaXNBdmFpbGFibGUpKVxuICAgICAgKTtcbiAgfVxuXG4gIGdldEdlb2xvY2F0b3JTb3VyY2VzKCk6IE9ic2VydmFibGU8R2VvbG9jYXRvclNvdXJjZVtdPiB7XG4gICAgY29uc3QgYXZhaWxhYmxlT2JzZXJ2YWJsZXMgPSBHRU9MT0NBVE9SX1JFR0lTVFJZXG4gICAgICAubWFwKHJlZ2lzdHJ5ID0+IHtcbiAgICAgICAgY29uc3QgbG9jYXRvciA9IHRoaXMuZ2V0TG9jYXRvckZyb21SZWdpc3RyeShyZWdpc3RyeSk7XG4gICAgICAgIGNvbnN0IHNvdXJjZTogR2VvbG9jYXRvclNvdXJjZSA9IHtcbiAgICAgICAgICBpZDogcmVnaXN0cnkuaWQsXG4gICAgICAgICAgbmFtZTogbG9jYXRvci5uYW1lLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBsb2NhdG9yLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGFjY3VyYWN5VW5pdDogbG9jYXRvci5hY2N1cmFjeVVuaXQsXG4gICAgICAgICAgY2FwYWJpbGl0aWVzOiBsb2NhdG9yLmNhcGFiaWxpdGllcyxcbiAgICAgICAgICBpc0F2YWlsYWJsZTogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGxvY2F0b3IuaXNBdmFpbGFibGUoKVxuICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgdGFwKGF2YWlsYWJsZSA9PiBzb3VyY2UuaXNBdmFpbGFibGUgPSBhdmFpbGFibGUpLFxuICAgICAgICAgICAgbWFwKCgpID0+IHNvdXJjZSlcbiAgICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICByZXR1cm4gYXZhaWxhYmxlT2JzZXJ2YWJsZXMubGVuZ3RoID09PSAwXG4gICAgICA/IG9mKFtdKVxuICAgICAgOiBmb3JrSm9pbihhdmFpbGFibGVPYnNlcnZhYmxlcyk7XG4gIH1cblxuICBwcml2YXRlIGdldExvY2F0b3JGcm9tUmVnaXN0cnkocmVnaXN0cnk6IHsgaWQ6IHN0cmluZywgY29uc3RydWN0b3I6IGFueSB9KTogR2VvbG9jYXRvciB7XG4gICAgY29uc3QgaW5zdGFuY2U6IEdlb2xvY2F0b3IgPSB0aGlzLmluamVjdG9yLmdldChyZWdpc3RyeS5jb25zdHJ1Y3Rvcik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG59XG4iXX0=