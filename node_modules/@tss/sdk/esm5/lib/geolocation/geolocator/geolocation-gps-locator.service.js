/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
// 3rd Party.
import { Subject, of } from 'rxjs';
import { finalize } from 'rxjs/operators';
// TSS.
import { Geolocatable } from './geolocatable.decorator';
import { BaseGeolocator } from './base-geolocator.service';
import { positionToGpsPosition } from '../gps-position/position-to-gps-position.function';
import { GeolocatorCapability } from './geolocator-capability';
import { Logger } from '../../core/logging/logger.service';
import { GeolocationConfig } from '../geolocation.config';
import { GEOLOCATION_GEOLOCATOR_ID } from '../geolocation.constants';
import * as i0 from "@angular/core";
import * as i1 from "../../core/logging/logger.service";
import * as i2 from "../geolocation.config";
/**
 * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
 * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
 */
var GeolocationGeolocator = /** @class */ (function (_super) {
    tslib_1.__extends(GeolocationGeolocator, _super);
    function GeolocationGeolocator(log, config) {
        var _this = _super.call(this, log) || this;
        _this.config = config;
        _this.capabilities = [
            GeolocatorCapability.Accuracy,
            GeolocatorCapability.Altitude,
            GeolocatorCapability.AltitudeAccuracy,
            GeolocatorCapability.Heading,
            GeolocatorCapability.Speed,
        ];
        return _this;
    }
    Object.defineProperty(GeolocationGeolocator.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.geolocationGeolocatorName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeolocationGeolocator.prototype, "description", {
        get: /**
         * @return {?}
         */
        function () {
            return this.config.geolocationGeolocatorDescription;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} options
     * @return {?}
     */
    GeolocationGeolocator.prototype.getCurrentPosition = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            return navigator.geolocation
                .getCurrentPosition((/**
             * @param {?} position
             * @return {?}
             */
            function (position) {
                _this.log.trace("Received current position for " + _this.name);
                resolve(positionToGpsPosition(position));
            }), reject, options);
        }));
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    GeolocationGeolocator.prototype.watchPosition = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var watchId = navigator.geolocation.watchPosition((/**
         * @param {?} position
         * @return {?}
         */
        function (position) {
            _this.log.trace("Received watch position for " + _this.name);
            subject.next(positionToGpsPosition(position));
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return subject.error(error); }), options);
        return subject.pipe(finalize((/**
         * @return {?}
         */
        function () { return navigator.geolocation.clearWatch(watchId); })));
    };
    /**
     * @return {?}
     */
    GeolocationGeolocator.prototype.isAvailable = /**
     * @return {?}
     */
    function () {
        return of('geolocation' in navigator);
    };
    GeolocationGeolocator.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    GeolocationGeolocator.ctorParameters = function () { return [
        { type: Logger },
        { type: GeolocationConfig }
    ]; };
    /** @nocollapse */ GeolocationGeolocator.ngInjectableDef = i0.defineInjectable({ factory: function GeolocationGeolocator_Factory() { return new GeolocationGeolocator(i0.inject(i1.Logger), i0.inject(i2.GeolocationConfig)); }, token: GeolocationGeolocator, providedIn: "root" });
    /**
     * Wrapper for geolocation service. The wrapper primarily exists to abstract the direct interaction with
     * the "navigator" object and to allow for injecting other implementations of geolocation functionality.
     */
    GeolocationGeolocator = tslib_1.__decorate([
        Geolocatable(GEOLOCATION_GEOLOCATOR_ID),
        tslib_1.__metadata("design:paramtypes", [Logger, GeolocationConfig])
    ], GeolocationGeolocator);
    return GeolocationGeolocator;
}(BaseGeolocator));
export { GeolocationGeolocator };
if (false) {
    /** @type {?} */
    GeolocationGeolocator.prototype.capabilities;
    /**
     * @type {?}
     * @private
     */
    GeolocationGeolocator.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24tZ3BzLWxvY2F0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2dlb2xvY2F0aW9uL2dlb2xvY2F0b3IvZ2VvbG9jYXRpb24tZ3BzLWxvY2F0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUczQyxPQUFPLEVBQWMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFM0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDMUYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7Ozs7SUFTMUIsaURBQWM7SUFpQnZELCtCQUFZLEdBQVcsRUFBbUIsTUFBeUI7UUFBbkUsWUFDRSxrQkFBTSxHQUFHLENBQUMsU0FDWDtRQUZ5QyxZQUFNLEdBQU4sTUFBTSxDQUFtQjtRQWhCbkUsa0JBQVksR0FBRztZQUNiLG9CQUFvQixDQUFDLFFBQVE7WUFDN0Isb0JBQW9CLENBQUMsUUFBUTtZQUM3QixvQkFBb0IsQ0FBQyxnQkFBZ0I7WUFDckMsb0JBQW9CLENBQUMsT0FBTztZQUM1QixvQkFBb0IsQ0FBQyxLQUFLO1NBQzNCLENBQUM7O0lBWUYsQ0FBQztJQVZELHNCQUFJLHVDQUFJOzs7O1FBQVI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUM7UUFDL0MsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw4Q0FBVzs7OztRQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGdDQUFnQyxDQUFDO1FBQ3RELENBQUM7OztPQUFBOzs7OztJQU1ELGtEQUFrQjs7OztJQUFsQixVQUFtQixPQUF5QjtRQUE1QyxpQkFVQztRQVRDLE9BQU8sSUFBSSxPQUFPOzs7OztRQUFjLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDOUMsT0FBQSxTQUFTLENBQUMsV0FBVztpQkFDbEIsa0JBQWtCOzs7O1lBQUMsVUFBQyxRQUFrQjtnQkFDckMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsbUNBQWlDLEtBQUksQ0FBQyxJQUFNLENBQUMsQ0FBQztnQkFDN0QsT0FBTyxDQUNMLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUNoQyxDQUFDO1lBQ0osQ0FBQyxHQUFFLE1BQU0sRUFBRSxPQUFPLENBQUM7UUFOckIsQ0FNcUIsRUFDdEIsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRUQsNkNBQWE7Ozs7SUFBYixVQUFjLE9BQXlCO1FBQXZDLGlCQWNDOztZQWJPLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBZTs7WUFDcEMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsYUFBYTs7OztRQUNqRCxVQUFBLFFBQVE7WUFDTixLQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQ0FBK0IsS0FBSSxDQUFDLElBQU0sQ0FBQyxDQUFDO1lBQzNELE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRCxDQUFDOzs7O1FBQ0QsVUFBQSxLQUFLLElBQUksT0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixHQUM3QixPQUFPLENBQ1I7UUFFRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLFFBQVE7OztRQUFDLGNBQU0sT0FBQSxTQUFTLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBekMsQ0FBeUMsRUFBQyxDQUMxRCxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELDJDQUFXOzs7SUFBWDtRQUNFLE9BQU8sRUFBRSxDQUFDLGFBQWEsSUFBSSxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDOztnQkFyREYsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztnQkFUekIsTUFBTTtnQkFDTixpQkFBaUI7Ozs7Ozs7SUFVYixxQkFBcUI7UUFEakMsWUFBWSxDQUFDLHlCQUF5QixDQUFDO2lEQWtCckIsTUFBTSxFQUEyQixpQkFBaUI7T0FqQnhELHFCQUFxQixDQW9EakM7Z0NBNUVEO0NBNEVDLENBcEQwQyxjQUFjLEdBb0R4RDtTQXBEWSxxQkFBcUI7OztJQUNoQyw2Q0FNRTs7Ozs7SUFVdUIsdUNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBHZW9sb2NhdGFibGUgfSBmcm9tICcuL2dlb2xvY2F0YWJsZS5kZWNvcmF0b3InO1xuaW1wb3J0IHsgQmFzZUdlb2xvY2F0b3IgfSBmcm9tICcuL2Jhc2UtZ2VvbG9jYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IEdwc1Bvc2l0aW9uIH0gZnJvbSAnLi4vZ3BzLXBvc2l0aW9uL2dwcy1wb3NpdGlvbic7XG5pbXBvcnQgeyBwb3NpdGlvblRvR3BzUG9zaXRpb24gfSBmcm9tICcuLi9ncHMtcG9zaXRpb24vcG9zaXRpb24tdG8tZ3BzLXBvc2l0aW9uLmZ1bmN0aW9uJztcbmltcG9ydCB7IEdlb2xvY2F0b3JDYXBhYmlsaXR5IH0gZnJvbSAnLi9nZW9sb2NhdG9yLWNhcGFiaWxpdHknO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vLi4vY29yZS9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IEdlb2xvY2F0aW9uQ29uZmlnIH0gZnJvbSAnLi4vZ2VvbG9jYXRpb24uY29uZmlnJztcbmltcG9ydCB7IEdFT0xPQ0FUSU9OX0dFT0xPQ0FUT1JfSUQgfSBmcm9tICcuLi9nZW9sb2NhdGlvbi5jb25zdGFudHMnO1xuXG5cbi8qKlxuICogV3JhcHBlciBmb3IgZ2VvbG9jYXRpb24gc2VydmljZS4gVGhlIHdyYXBwZXIgcHJpbWFyaWx5IGV4aXN0cyB0byBhYnN0cmFjdCB0aGUgZGlyZWN0IGludGVyYWN0aW9uIHdpdGhcbiAqIHRoZSBcIm5hdmlnYXRvclwiIG9iamVjdCBhbmQgdG8gYWxsb3cgZm9yIGluamVjdGluZyBvdGhlciBpbXBsZW1lbnRhdGlvbnMgb2YgZ2VvbG9jYXRpb24gZnVuY3Rpb25hbGl0eS5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbkBHZW9sb2NhdGFibGUoR0VPTE9DQVRJT05fR0VPTE9DQVRPUl9JRClcbmV4cG9ydCBjbGFzcyBHZW9sb2NhdGlvbkdlb2xvY2F0b3IgZXh0ZW5kcyBCYXNlR2VvbG9jYXRvciB7XG4gIGNhcGFiaWxpdGllcyA9IFtcbiAgICBHZW9sb2NhdG9yQ2FwYWJpbGl0eS5BY2N1cmFjeSxcbiAgICBHZW9sb2NhdG9yQ2FwYWJpbGl0eS5BbHRpdHVkZSxcbiAgICBHZW9sb2NhdG9yQ2FwYWJpbGl0eS5BbHRpdHVkZUFjY3VyYWN5LFxuICAgIEdlb2xvY2F0b3JDYXBhYmlsaXR5LkhlYWRpbmcsXG4gICAgR2VvbG9jYXRvckNhcGFiaWxpdHkuU3BlZWQsXG4gIF07XG5cbiAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuZ2VvbG9jYXRpb25HZW9sb2NhdG9yTmFtZTtcbiAgfVxuXG4gIGdldCBkZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5nZW9sb2NhdGlvbkdlb2xvY2F0b3JEZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxvZzogTG9nZ2VyLCBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZzogR2VvbG9jYXRpb25Db25maWcpIHtcbiAgICBzdXBlcihsb2cpO1xuICB9XG5cbiAgZ2V0Q3VycmVudFBvc2l0aW9uKG9wdGlvbnM/OiBQb3NpdGlvbk9wdGlvbnMpOiBQcm9taXNlPEdwc1Bvc2l0aW9uPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEdwc1Bvc2l0aW9uPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uXG4gICAgICAgIC5nZXRDdXJyZW50UG9zaXRpb24oKHBvc2l0aW9uOiBQb3NpdGlvbikgPT4ge1xuICAgICAgICAgIHRoaXMubG9nLnRyYWNlKGBSZWNlaXZlZCBjdXJyZW50IHBvc2l0aW9uIGZvciAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgcG9zaXRpb25Ub0dwc1Bvc2l0aW9uKHBvc2l0aW9uKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sIHJlamVjdCwgb3B0aW9ucylcbiAgICApO1xuICB9XG5cbiAgd2F0Y2hQb3NpdGlvbihvcHRpb25zPzogUG9zaXRpb25PcHRpb25zKTogT2JzZXJ2YWJsZTxHcHNQb3NpdGlvbj4ge1xuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdDxHcHNQb3NpdGlvbj4oKTtcbiAgICBjb25zdCB3YXRjaElkID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oXG4gICAgICBwb3NpdGlvbiA9PiB7XG4gICAgICAgIHRoaXMubG9nLnRyYWNlKGBSZWNlaXZlZCB3YXRjaCBwb3NpdGlvbiBmb3IgJHt0aGlzLm5hbWV9YCk7XG4gICAgICAgIHN1YmplY3QubmV4dChwb3NpdGlvblRvR3BzUG9zaXRpb24ocG9zaXRpb24pKTtcbiAgICAgIH0sXG4gICAgICBlcnJvciA9PiBzdWJqZWN0LmVycm9yKGVycm9yKSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuXG4gICAgcmV0dXJuIHN1YmplY3QucGlwZShcbiAgICAgIGZpbmFsaXplKCgpID0+IG5hdmlnYXRvci5nZW9sb2NhdGlvbi5jbGVhcldhdGNoKHdhdGNoSWQpKVxuICAgICk7XG4gIH1cblxuICBpc0F2YWlsYWJsZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gb2YoJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3IpO1xuICB9XG59XG4iXX0=