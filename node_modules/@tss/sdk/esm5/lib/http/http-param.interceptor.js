/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { Logger } from '../core/logging/logger.service';
import { HttpConfig } from './http.config';
import * as i0 from "@angular/core";
import * as i1 from "./http.config";
import * as i2 from "../core/logging/logger.service";
var HttpParamInterceptor = /** @class */ (function () {
    function HttpParamInterceptor(config, log) {
        this.config = config;
        this.log = log;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    HttpParamInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        /** @type {?} */
        var httpParamInjections = this.config.paramInjectionsEnabled
            ? this.config.getInjectionDefinitions(request.urlWithParams)
            : [];
        if (httpParamInjections.length) {
            request = this.generateRequestWithParams(request, httpParamInjections);
        }
        return next.handle(request);
    };
    /**
     * @param {?} request
     * @param {?} httpParamInjections
     * @return {?}
     */
    HttpParamInterceptor.prototype.generateRequestWithParams = /**
     * @param {?} request
     * @param {?} httpParamInjections
     * @return {?}
     */
    function (request, httpParamInjections) {
        var _this = this;
        /** @type {?} */
        var params = request.params;
        httpParamInjections
            .forEach((/**
         * @param {?} paramInjection
         * @return {?}
         */
        function (paramInjection) {
            _this.log.debug("Injecting URL '" + request.url + "' with parameter value (name: '" + paramInjection.paramName + "')");
            params = params.set(paramInjection.paramName, paramInjection.paramValue);
        }));
        return request.clone({ params: params });
    };
    HttpParamInterceptor.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    HttpParamInterceptor.ctorParameters = function () { return [
        { type: HttpConfig },
        { type: Logger }
    ]; };
    /** @nocollapse */ HttpParamInterceptor.ngInjectableDef = i0.defineInjectable({ factory: function HttpParamInterceptor_Factory() { return new HttpParamInterceptor(i0.inject(i1.HttpConfig), i0.inject(i2.Logger)); }, token: HttpParamInterceptor, providedIn: "root" });
    return HttpParamInterceptor;
}());
export { HttpParamInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpParamInterceptor.prototype.config;
    /**
     * @type {?}
     * @private
     */
    HttpParamInterceptor.prototype.log;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1wYXJhbS5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2h0dHAvaHR0cC1wYXJhbS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBSTNDO0lBSUUsOEJBQW9CLE1BQWtCLEVBQVUsR0FBVztRQUF2QyxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBUTtJQUMzRCxDQUFDOzs7Ozs7SUFFRCx3Q0FBUzs7Ozs7SUFBVCxVQUFVLE9BQXlCLEVBQUUsSUFBaUI7O1lBQzlDLG1CQUFtQixHQUFtQyxJQUFJLENBQUMsTUFBTSxDQUFDLHNCQUFzQjtZQUM1RixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzVELENBQUMsQ0FBQyxFQUFFO1FBRU4sSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7WUFDOUIsT0FBTyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztTQUN4RTtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7Ozs7SUFFRCx3REFBeUI7Ozs7O0lBQXpCLFVBQTBCLE9BQXlCLEVBQUUsbUJBQW1EO1FBQXhHLGlCQVNDOztZQVJLLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTTtRQUMzQixtQkFBbUI7YUFDaEIsT0FBTzs7OztRQUFDLFVBQUEsY0FBYztZQUNyQixLQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxvQkFBa0IsT0FBTyxDQUFDLEdBQUcsdUNBQWtDLGNBQWMsQ0FBQyxTQUFTLE9BQUksQ0FBQyxDQUFDO1lBQzVHLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNFLENBQUMsRUFBQyxDQUFDO1FBRUwsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7O2dCQTVCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dCQU5RLFVBQVU7Z0JBRFYsTUFBTTs7OytCQVJmO0NBMENDLEFBN0JELElBNkJDO1NBMUJZLG9CQUFvQjs7Ozs7O0lBQ25CLHNDQUEwQjs7Ozs7SUFBRSxtQ0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbmd1bGFyLlxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFJlcXVlc3QsIEh0dHBIYW5kbGVyLCBIdHRwRXZlbnQsIEh0dHBJbnRlcmNlcHRvciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBUU1MuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb3JlL2xvZ2dpbmcvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENvbmZpZyB9IGZyb20gJy4vaHR0cC5jb25maWcnO1xuaW1wb3J0IHsgSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbiB9IGZyb20gJy4vaHR0cC1wYXJhbS1pbmplY3Rpb24tZGVmaW5pdGlvbic7XG5cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSHR0cFBhcmFtSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogSHR0cENvbmZpZywgcHJpdmF0ZSBsb2c6IExvZ2dlcikge1xuICB9XG5cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGNvbnN0IGh0dHBQYXJhbUluamVjdGlvbnM6IEh0dHBQYXJhbUluamVjdGlvbkRlZmluaXRpb25bXSA9IHRoaXMuY29uZmlnLnBhcmFtSW5qZWN0aW9uc0VuYWJsZWRcbiAgICAgID8gdGhpcy5jb25maWcuZ2V0SW5qZWN0aW9uRGVmaW5pdGlvbnMocmVxdWVzdC51cmxXaXRoUGFyYW1zKVxuICAgICAgOiBbXTtcblxuICAgIGlmIChodHRwUGFyYW1JbmplY3Rpb25zLmxlbmd0aCkge1xuICAgICAgcmVxdWVzdCA9IHRoaXMuZ2VuZXJhdGVSZXF1ZXN0V2l0aFBhcmFtcyhyZXF1ZXN0LCBodHRwUGFyYW1JbmplY3Rpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxdWVzdCk7XG4gIH1cblxuICBnZW5lcmF0ZVJlcXVlc3RXaXRoUGFyYW1zKHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIGh0dHBQYXJhbUluamVjdGlvbnM6IEh0dHBQYXJhbUluamVjdGlvbkRlZmluaXRpb25bXSk6IEh0dHBSZXF1ZXN0PGFueT4ge1xuICAgIGxldCBwYXJhbXMgPSByZXF1ZXN0LnBhcmFtcztcbiAgICBodHRwUGFyYW1JbmplY3Rpb25zXG4gICAgICAuZm9yRWFjaChwYXJhbUluamVjdGlvbiA9PiB7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKGBJbmplY3RpbmcgVVJMICcke3JlcXVlc3QudXJsfScgd2l0aCBwYXJhbWV0ZXIgdmFsdWUgKG5hbWU6ICcke3BhcmFtSW5qZWN0aW9uLnBhcmFtTmFtZX0nKWApO1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMuc2V0KHBhcmFtSW5qZWN0aW9uLnBhcmFtTmFtZSwgcGFyYW1JbmplY3Rpb24ucGFyYW1WYWx1ZSk7XG4gICAgICB9KTtcblxuICAgIHJldHVybiByZXF1ZXN0LmNsb25lKHsgcGFyYW1zIH0pO1xuICB9XG59XG4iXX0=