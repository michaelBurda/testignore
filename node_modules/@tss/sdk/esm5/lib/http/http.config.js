/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { AutoConfig } from '../core/auto-config.decorator';
import { isRouteMatch } from './is-route-match.function';
import * as i0 from "@angular/core";
/**
 * Configuration class for storing global data caching settings.
 */
var HttpConfig = /** @class */ (function () {
    function HttpConfig() {
        this.paramInjectionsEnabled = true;
        this.paramInjectionDefitions = [];
    }
    Object.defineProperty(HttpConfig.prototype, "hasInjections", {
        get: /**
         * @return {?}
         */
        function () {
            return Boolean(this.paramInjectionDefitions.length);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} route
     * @param {?} paramName
     * @param {?} paramValue
     * @return {?}
     */
    HttpConfig.prototype.addOrUpdateParameterInjection = /**
     * @param {?} route
     * @param {?} paramName
     * @param {?} paramValue
     * @return {?}
     */
    function (route, paramName, paramValue) {
        /** @type {?} */
        var definition = {
            route: route,
            paramName: paramName,
            paramValue: paramValue
        };
        /** @type {?} */
        var existingDefinition = this.paramInjectionDefitions.find((/**
         * @param {?} def
         * @return {?}
         */
        function (def) { return def.route === route && def.paramName === paramName; }));
        if (existingDefinition) {
            Object.assign(existingDefinition, definition);
            return existingDefinition;
        }
        else {
            this.paramInjectionDefitions.push(definition);
            return definition;
        }
    };
    /**
     * @param {?} route
     * @param {?} paramName
     * @param {?} paramValue
     * @return {?}
     */
    HttpConfig.prototype.addParameterInjection = /**
     * @param {?} route
     * @param {?} paramName
     * @param {?} paramValue
     * @return {?}
     */
    function (route, paramName, paramValue) {
        /** @type {?} */
        var definition = {
            route: route,
            paramName: paramName,
            paramValue: paramValue
        };
        this.paramInjectionDefitions.push(definition);
        return definition;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    HttpConfig.prototype.getInjectionDefinitions = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.paramInjectionDefitions.filter((/**
         * @param {?} def
         * @return {?}
         */
        function (def) { return isRouteMatch(route, def.route); }));
    };
    /**
     * @param {?} route
     * @return {?}
     */
    HttpConfig.prototype.getFirstInjectionDefinition = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.paramInjectionDefitions.find((/**
         * @param {?} def
         * @return {?}
         */
        function (def) { return isRouteMatch(route, def.route); }));
    };
    HttpConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ HttpConfig.ngInjectableDef = i0.defineInjectable({ factory: function HttpConfig_Factory() { return new HttpConfig(); }, token: HttpConfig, providedIn: "root" });
    /**
     * Configuration class for storing global data caching settings.
     */
    HttpConfig = tslib_1.__decorate([
        AutoConfig('HttpConfig')
    ], HttpConfig);
    return HttpConfig;
}());
export { HttpConfig };
if (false) {
    /** @type {?} */
    HttpConfig.prototype.paramInjectionsEnabled;
    /** @type {?} */
    HttpConfig.prototype.paramInjectionDefitions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHNzL3Nkay8iLCJzb3VyY2VzIjpbImxpYi9odHRwL2h0dHAuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7OztJQU96RDtRQVNFLDJCQUFzQixHQUFHLElBQUksQ0FBQztRQUM5Qiw0QkFBdUIsR0FBbUMsRUFBRSxDQUFDO0tBcUM5RDtJQTFDQyxzQkFBSSxxQ0FBYTs7OztRQUFqQjtZQUNFLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxDQUFDOzs7T0FBQTs7Ozs7OztJQUtELGtEQUE2Qjs7Ozs7O0lBQTdCLFVBQThCLEtBQXNCLEVBQUUsU0FBaUIsRUFBRSxVQUFrQjs7WUFDbkYsVUFBVSxHQUFpQztZQUMvQyxLQUFLLE9BQUE7WUFDTCxTQUFTLFdBQUE7WUFDVCxVQUFVLFlBQUE7U0FDWDs7WUFFSyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSTs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLEVBQWxELENBQWtELEVBQUM7UUFDdkgsSUFBSSxrQkFBa0IsRUFBRTtZQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sa0JBQWtCLENBQUM7U0FDM0I7YUFBTTtZQUNMLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDOUMsT0FBTyxVQUFVLENBQUM7U0FDbkI7SUFDSCxDQUFDOzs7Ozs7O0lBRUQsMENBQXFCOzs7Ozs7SUFBckIsVUFBc0IsS0FBc0IsRUFBRSxTQUFpQixFQUFFLFVBQWtCOztZQUMzRSxVQUFVLEdBQUc7WUFDakIsS0FBSyxPQUFBO1lBQ0wsU0FBUyxXQUFBO1lBQ1QsVUFBVSxZQUFBO1NBQ1g7UUFFRCxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBRUQsNENBQXVCOzs7O0lBQXZCLFVBQXdCLEtBQWE7UUFDbkMsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQTlCLENBQThCLEVBQUMsQ0FBQztJQUNwRixDQUFDOzs7OztJQUVELGdEQUEyQjs7OztJQUEzQixVQUE0QixLQUFhO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUE5QixDQUE4QixFQUFDLENBQUM7SUFDbEYsQ0FBQzs7Z0JBOUNGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7OztJQUVZLFVBQVU7UUFEdEIsVUFBVSxDQUFDLFlBQVksQ0FBQztPQUNaLFVBQVUsQ0EyQ3RCO3FCQTVERDtDQTREQyxJQUFBO1NBM0NZLFVBQVU7OztJQUtyQiw0Q0FBOEI7O0lBQzlCLDZDQUE2RCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFuZ3VsYXIuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vIFRTUy5cbmltcG9ydCB7IEF1dG9Db25maWcgfSBmcm9tICcuLi9jb3JlL2F1dG8tY29uZmlnLmRlY29yYXRvcic7XG5pbXBvcnQgeyBIdHRwUGFyYW1JbmplY3Rpb25EZWZpbml0aW9uIH0gZnJvbSAnLi9odHRwLXBhcmFtLWluamVjdGlvbi1kZWZpbml0aW9uJztcbmltcG9ydCB7IGlzUm91dGVNYXRjaCB9IGZyb20gJy4vaXMtcm91dGUtbWF0Y2guZnVuY3Rpb24nO1xuaW1wb3J0IHsgUm91dGVFeHByZXNzaW9uIH0gZnJvbSAnLi9yb3V0ZS1leHByZXNzaW9uJztcblxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gY2xhc3MgZm9yIHN0b3JpbmcgZ2xvYmFsIGRhdGEgY2FjaGluZyBzZXR0aW5ncy5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5AQXV0b0NvbmZpZygnSHR0cENvbmZpZycpXG5leHBvcnQgY2xhc3MgSHR0cENvbmZpZyB7XG4gIGdldCBoYXNJbmplY3Rpb25zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMucGFyYW1JbmplY3Rpb25EZWZpdGlvbnMubGVuZ3RoKTtcbiAgfVxuXG4gIHBhcmFtSW5qZWN0aW9uc0VuYWJsZWQgPSB0cnVlO1xuICBwYXJhbUluamVjdGlvbkRlZml0aW9uczogSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbltdID0gW107XG5cbiAgYWRkT3JVcGRhdGVQYXJhbWV0ZXJJbmplY3Rpb24ocm91dGU6IFJvdXRlRXhwcmVzc2lvbiwgcGFyYW1OYW1lOiBzdHJpbmcsIHBhcmFtVmFsdWU6IHN0cmluZyk6IEh0dHBQYXJhbUluamVjdGlvbkRlZmluaXRpb24ge1xuICAgIGNvbnN0IGRlZmluaXRpb246IEh0dHBQYXJhbUluamVjdGlvbkRlZmluaXRpb24gPSB7XG4gICAgICByb3V0ZSxcbiAgICAgIHBhcmFtTmFtZSxcbiAgICAgIHBhcmFtVmFsdWVcbiAgICB9O1xuXG4gICAgY29uc3QgZXhpc3RpbmdEZWZpbml0aW9uID0gdGhpcy5wYXJhbUluamVjdGlvbkRlZml0aW9ucy5maW5kKGRlZiA9PiBkZWYucm91dGUgPT09IHJvdXRlICYmIGRlZi5wYXJhbU5hbWUgPT09IHBhcmFtTmFtZSk7XG4gICAgaWYgKGV4aXN0aW5nRGVmaW5pdGlvbikge1xuICAgICAgT2JqZWN0LmFzc2lnbihleGlzdGluZ0RlZmluaXRpb24sIGRlZmluaXRpb24pO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nRGVmaW5pdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXJhbUluamVjdGlvbkRlZml0aW9ucy5wdXNoKGRlZmluaXRpb24pO1xuICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfVxuICB9XG5cbiAgYWRkUGFyYW1ldGVySW5qZWN0aW9uKHJvdXRlOiBSb3V0ZUV4cHJlc3Npb24sIHBhcmFtTmFtZTogc3RyaW5nLCBwYXJhbVZhbHVlOiBzdHJpbmcpOiBIdHRwUGFyYW1JbmplY3Rpb25EZWZpbml0aW9uIHtcbiAgICBjb25zdCBkZWZpbml0aW9uID0ge1xuICAgICAgcm91dGUsXG4gICAgICBwYXJhbU5hbWUsXG4gICAgICBwYXJhbVZhbHVlXG4gICAgfTtcblxuICAgIHRoaXMucGFyYW1JbmplY3Rpb25EZWZpdGlvbnMucHVzaChkZWZpbml0aW9uKTtcbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgfVxuXG4gIGdldEluamVjdGlvbkRlZmluaXRpb25zKHJvdXRlOiBzdHJpbmcpOiBIdHRwUGFyYW1JbmplY3Rpb25EZWZpbml0aW9uW10ge1xuICAgIHJldHVybiB0aGlzLnBhcmFtSW5qZWN0aW9uRGVmaXRpb25zLmZpbHRlcihkZWYgPT4gaXNSb3V0ZU1hdGNoKHJvdXRlLCBkZWYucm91dGUpKTtcbiAgfVxuXG4gIGdldEZpcnN0SW5qZWN0aW9uRGVmaW5pdGlvbihyb3V0ZTogc3RyaW5nKTogSHR0cFBhcmFtSW5qZWN0aW9uRGVmaW5pdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1JbmplY3Rpb25EZWZpdGlvbnMuZmluZChkZWYgPT4gaXNSb3V0ZU1hdGNoKHJvdXRlLCBkZWYucm91dGUpKTtcbiAgfVxufVxuIl19