/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
// TSS.
import { AutoConfig } from '../core/auto-config.decorator';
import { isRouteMatch } from '../http/is-route-match.function';
import * as i0 from "@angular/core";
/**
 * Configuration class for storing global data caching settings.
 */
var CacheConfig = /** @class */ (function () {
    function CacheConfig() {
        /**
         * Determines whether caching should be used or not. When disabled, all
         * caching-related functionality is ignored (not used).
         */
        this.cacheEnabled = false;
        /**
         * List of configurations that describe what to cache and how to cache it.
         * The main parts of this configuration include the "route" (how to match what
         * to cache) and the "strategy" (whether to look for content in the cache first
         * or try to make the HTTP request first).
         */
        this.cacheDefitions = [];
        /**
         * When set, this strategy will trump all strategies defined in the "Cache Defintions".
         * WARNING: This is a global setting and can have adverse affects when used improperly.
         * The main use case for this setting is to allow for the global cache strategy of
         * 'cacheOnly', which will allow an application to force an "offline" state (forcing
         * requests to pull from cache only).
         */
        this.forcedGlobalCacheStrategy = null;
    }
    CacheConfig_1 = CacheConfig;
    /**
     * @param {?} config
     * @return {?}
     */
    CacheConfig.create = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return Object.assign(new CacheConfig_1(), config);
    };
    /**
     * @param {...?} defs
     * @return {?}
     */
    CacheConfig.enable = /**
     * @param {...?} defs
     * @return {?}
     */
    function () {
        var defs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            defs[_i] = arguments[_i];
        }
        return CacheConfig_1.create({
            cacheEnabled: true,
            cacheDefitions: defs,
        });
    };
    /**
     * @param {?} route
     * @return {?}
     */
    CacheConfig.prototype.getCacheDefinition = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.cacheDefitions.find((/**
         * @param {?} def
         * @return {?}
         */
        function (def) { return isRouteMatch(route, def.route); }));
    };
    var CacheConfig_1;
    CacheConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ CacheConfig.ngInjectableDef = i0.defineInjectable({ factory: function CacheConfig_Factory() { return new CacheConfig(); }, token: CacheConfig, providedIn: "root" });
    /**
     * Configuration class for storing global data caching settings.
     */
    CacheConfig = CacheConfig_1 = tslib_1.__decorate([
        AutoConfig('CacheConfig')
    ], CacheConfig);
    return CacheConfig;
}());
export { CacheConfig };
if (false) {
    /**
     * Determines whether caching should be used or not. When disabled, all
     * caching-related functionality is ignored (not used).
     * @type {?}
     */
    CacheConfig.prototype.cacheEnabled;
    /**
     * List of configurations that describe what to cache and how to cache it.
     * The main parts of this configuration include the "route" (how to match what
     * to cache) and the "strategy" (whether to look for content in the cache first
     * or try to make the HTTP request first).
     * @type {?}
     */
    CacheConfig.prototype.cacheDefitions;
    /**
     * When set, this strategy will trump all strategies defined in the "Cache Defintions".
     * WARNING: This is a global setting and can have adverse affects when used improperly.
     * The main use case for this setting is to allow for the global cache strategy of
     * 'cacheOnly', which will allow an application to force an "offline" state (forcing
     * requests to pull from cache only).
     * @type {?}
     */
    CacheConfig.prototype.forcedGlobalCacheStrategy;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRzcy9zZGsvIiwic291cmNlcyI6WyJsaWIvY2FjaGUvY2FjaGUuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7OztJQVMvRDs7Ozs7UUFTRSxpQkFBWSxHQUFHLEtBQUssQ0FBQzs7Ozs7OztRQVFyQixtQkFBYyxHQUFzQixFQUFFLENBQUM7Ozs7Ozs7O1FBU3ZDLDhCQUF5QixHQUFrQixJQUFJLENBQUM7S0FnQmpEO29CQXRDWSxXQUFXOzs7OztJQXdCZixrQkFBTTs7OztJQUFiLFVBQWMsTUFBMEI7UUFDdEMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksYUFBVyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFTSxrQkFBTTs7OztJQUFiO1FBQWMsY0FBMEI7YUFBMUIsVUFBMEIsRUFBMUIscUJBQTBCLEVBQTFCLElBQTBCO1lBQTFCLHlCQUEwQjs7UUFDdEMsT0FBTyxhQUFXLENBQUMsTUFBTSxDQUFDO1lBQ3hCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsd0NBQWtCOzs7O0lBQWxCLFVBQW1CLEtBQWE7UUFDOUIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLFlBQVksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUE5QixDQUE4QixFQUFDLENBQUM7SUFDekUsQ0FBQzs7O2dCQXpDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs7SUFFWSxXQUFXO1FBRHZCLFVBQVUsQ0FBQyxhQUFhLENBQUM7T0FDYixXQUFXLENBc0N2QjtzQkF4REQ7Q0F3REMsSUFBQTtTQXRDWSxXQUFXOzs7Ozs7O0lBS3RCLG1DQUFxQjs7Ozs7Ozs7SUFRckIscUNBQXVDOzs7Ozs7Ozs7SUFTdkMsZ0RBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLy8gVFNTLlxuaW1wb3J0IHsgQXV0b0NvbmZpZyB9IGZyb20gJy4uL2NvcmUvYXV0by1jb25maWcuZGVjb3JhdG9yJztcbmltcG9ydCB7IGlzUm91dGVNYXRjaCB9IGZyb20gJy4uL2h0dHAvaXMtcm91dGUtbWF0Y2guZnVuY3Rpb24nO1xuaW1wb3J0IHsgQ2FjaGVEZWZpbml0aW9uIH0gZnJvbSAnLi9jYWNoZS1kZWZpbml0aW9uJztcbmltcG9ydCB7IENhY2hlU3RyYXRlZ3kgfSBmcm9tICcuL2NhY2hlLXN0cmF0ZWd5JztcbmltcG9ydCB7IENhY2hlQ29uZmlnT3B0aW9ucyB9IGZyb20gJy4vY2FjaGUtY29uZmlnLW9wdGlvbnMnO1xuXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBjbGFzcyBmb3Igc3RvcmluZyBnbG9iYWwgZGF0YSBjYWNoaW5nIHNldHRpbmdzLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbkBBdXRvQ29uZmlnKCdDYWNoZUNvbmZpZycpXG5leHBvcnQgY2xhc3MgQ2FjaGVDb25maWcge1xuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGNhY2hpbmcgc2hvdWxkIGJlIHVzZWQgb3Igbm90LiBXaGVuIGRpc2FibGVkLCBhbGxcbiAgICogY2FjaGluZy1yZWxhdGVkIGZ1bmN0aW9uYWxpdHkgaXMgaWdub3JlZCAobm90IHVzZWQpLlxuICAgKi9cbiAgY2FjaGVFbmFibGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgY29uZmlndXJhdGlvbnMgdGhhdCBkZXNjcmliZSB3aGF0IHRvIGNhY2hlIGFuZCBob3cgdG8gY2FjaGUgaXQuXG4gICAqIFRoZSBtYWluIHBhcnRzIG9mIHRoaXMgY29uZmlndXJhdGlvbiBpbmNsdWRlIHRoZSBcInJvdXRlXCIgKGhvdyB0byBtYXRjaCB3aGF0XG4gICAqIHRvIGNhY2hlKSBhbmQgdGhlIFwic3RyYXRlZ3lcIiAod2hldGhlciB0byBsb29rIGZvciBjb250ZW50IGluIHRoZSBjYWNoZSBmaXJzdFxuICAgKiBvciB0cnkgdG8gbWFrZSB0aGUgSFRUUCByZXF1ZXN0IGZpcnN0KS5cbiAgICovXG4gIGNhY2hlRGVmaXRpb25zOiBDYWNoZURlZmluaXRpb25bXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBXaGVuIHNldCwgdGhpcyBzdHJhdGVneSB3aWxsIHRydW1wIGFsbCBzdHJhdGVnaWVzIGRlZmluZWQgaW4gdGhlIFwiQ2FjaGUgRGVmaW50aW9uc1wiLlxuICAgKiBXQVJOSU5HOiBUaGlzIGlzIGEgZ2xvYmFsIHNldHRpbmcgYW5kIGNhbiBoYXZlIGFkdmVyc2UgYWZmZWN0cyB3aGVuIHVzZWQgaW1wcm9wZXJseS5cbiAgICogVGhlIG1haW4gdXNlIGNhc2UgZm9yIHRoaXMgc2V0dGluZyBpcyB0byBhbGxvdyBmb3IgdGhlIGdsb2JhbCBjYWNoZSBzdHJhdGVneSBvZlxuICAgKiAnY2FjaGVPbmx5Jywgd2hpY2ggd2lsbCBhbGxvdyBhbiBhcHBsaWNhdGlvbiB0byBmb3JjZSBhbiBcIm9mZmxpbmVcIiBzdGF0ZSAoZm9yY2luZ1xuICAgKiByZXF1ZXN0cyB0byBwdWxsIGZyb20gY2FjaGUgb25seSkuXG4gICAqL1xuICBmb3JjZWRHbG9iYWxDYWNoZVN0cmF0ZWd5OiBDYWNoZVN0cmF0ZWd5ID0gbnVsbDtcblxuICBzdGF0aWMgY3JlYXRlKGNvbmZpZzogQ2FjaGVDb25maWdPcHRpb25zKTogQ2FjaGVDb25maWcge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDYWNoZUNvbmZpZygpLCBjb25maWcpO1xuICB9XG5cbiAgc3RhdGljIGVuYWJsZSguLi5kZWZzOiBDYWNoZURlZmluaXRpb25bXSk6IENhY2hlQ29uZmlnIHtcbiAgICByZXR1cm4gQ2FjaGVDb25maWcuY3JlYXRlKHtcbiAgICAgIGNhY2hlRW5hYmxlZDogdHJ1ZSxcbiAgICAgIGNhY2hlRGVmaXRpb25zOiBkZWZzLFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0Q2FjaGVEZWZpbml0aW9uKHJvdXRlOiBzdHJpbmcpOiBDYWNoZURlZmluaXRpb24ge1xuICAgIHJldHVybiB0aGlzLmNhY2hlRGVmaXRpb25zLmZpbmQoZGVmID0+IGlzUm91dGVNYXRjaChyb3V0ZSwgZGVmLnJvdXRlKSk7XG4gIH1cbn1cbiJdfQ==