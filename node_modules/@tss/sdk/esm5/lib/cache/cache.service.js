/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Angular.
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
// 3rd Party.
import { PersistentCacheStorage } from './cache.storage';
import * as i0 from "@angular/core";
import * as i1 from "./cache.storage";
/**
 * Cache Service is an observables based in-memory cache implementation
 * Keeps track of in-flight observables and sets a default expiry for cached values
 */
var CacheService = /** @class */ (function () {
    function CacheService(cache) {
        this.cache = cache;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var cacheItem = this.cache.getObject(key);
        /** @type {?} */
        var now = new Date();
        /** @type {?} */
        var cacheData;
        if (cacheItem && cacheItem.expires && cacheItem.expires.getTime() < now.getTime()) {
            this.cache.remove(key);
        }
        else if (cacheItem) {
            // NOTE: We can't just pull the serialized data, because
            // we need an actual instance of the HttpResponse class.
            cacheData = Object.assign(new HttpResponse(), cacheItem.value);
        }
        else {
            cacheData = null;
        }
        return cacheData;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} timeToLive
     * @return {?}
     */
    CacheService.prototype.set = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} timeToLive
     * @return {?}
     */
    function (key, value, timeToLive) {
        if (timeToLive === void 0) { timeToLive = null; }
        /** @type {?} */
        var expires = timeToLive ? this.getExpireDate(timeToLive) : null;
        /** @type {?} */
        var cacheData = { expires: expires, value: value };
        this.cache.setObject(key, cacheData);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    CacheService.prototype.has = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.cache.has(key);
    };
    /**
     * @private
     * @param {?=} timeToLive
     * @return {?}
     */
    CacheService.prototype.getExpireDate = /**
     * @private
     * @param {?=} timeToLive
     * @return {?}
     */
    function (timeToLive) {
        if (timeToLive === void 0) { timeToLive = null; }
        /** @type {?} */
        var expires = new Date();
        expires.setSeconds(expires.getSeconds() + timeToLive);
        return expires;
    };
    CacheService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CacheService.ctorParameters = function () { return [
        { type: PersistentCacheStorage }
    ]; };
    /** @nocollapse */ CacheService.ngInjectableDef = i0.defineInjectable({ factory: function CacheService_Factory() { return new CacheService(i0.inject(i1.PersistentCacheStorage)); }, token: CacheService, providedIn: "root" });
    return CacheService;
}());
export { CacheService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CacheService.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0c3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2NhY2hlL2NhY2hlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFHcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7QUFRekQ7SUFJRSxzQkFBb0IsS0FBNkI7UUFBN0IsVUFBSyxHQUFMLEtBQUssQ0FBd0I7SUFDakQsQ0FBQzs7Ozs7SUFFRCwwQkFBRzs7OztJQUFILFVBQUksR0FBVzs7WUFDUCxTQUFTLEdBQWlCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQzs7WUFDbkQsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFOztZQUNsQixTQUE0QjtRQUVoQyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2pGLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO2FBQU0sSUFBSSxTQUFTLEVBQUU7WUFDcEIsd0RBQXdEO1lBQ3hELHdEQUF3RDtZQUN4RCxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFlBQVksRUFBTyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyRTthQUFNO1lBQ0wsU0FBUyxHQUFHLElBQUksQ0FBQztTQUNsQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Ozs7Ozs7SUFFRCwwQkFBRzs7Ozs7O0lBQUgsVUFBSSxHQUFXLEVBQUUsS0FBd0IsRUFBRSxVQUF5QjtRQUF6QiwyQkFBQSxFQUFBLGlCQUF5Qjs7WUFDNUQsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTs7WUFDNUQsU0FBUyxHQUFpQixFQUFFLE9BQU8sU0FBQSxFQUFFLEtBQUssT0FBQSxFQUFFO1FBRWxELElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7OztJQUVELDBCQUFHOzs7O0lBQUgsVUFBSSxHQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7Ozs7SUFFTyxvQ0FBYTs7Ozs7SUFBckIsVUFBc0IsVUFBeUI7UUFBekIsMkJBQUEsRUFBQSxpQkFBeUI7O1lBQ3ZDLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRTtRQUMxQixPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQztRQUV0RCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztnQkF6Q0YsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFWUSxzQkFBc0I7Ozt1QkFML0I7Q0F1REMsQUExQ0QsSUEwQ0M7U0F2Q1ksWUFBWTs7Ozs7O0lBQ1gsNkJBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQW5ndWxhci5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLy8gM3JkIFBhcnR5LlxuaW1wb3J0IHsgUGVyc2lzdGVudENhY2hlU3RvcmFnZSB9IGZyb20gJy4vY2FjaGUuc3RvcmFnZSc7XG5pbXBvcnQgeyBDYWNoZUNvbnRlbnQgfSBmcm9tICcuL2NhY2hlLWNvbnRlbnQnO1xuXG5cbi8qKlxuICogQ2FjaGUgU2VydmljZSBpcyBhbiBvYnNlcnZhYmxlcyBiYXNlZCBpbi1tZW1vcnkgY2FjaGUgaW1wbGVtZW50YXRpb25cbiAqIEtlZXBzIHRyYWNrIG9mIGluLWZsaWdodCBvYnNlcnZhYmxlcyBhbmQgc2V0cyBhIGRlZmF1bHQgZXhwaXJ5IGZvciBjYWNoZWQgdmFsdWVzXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENhY2hlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FjaGU6IFBlcnNpc3RlbnRDYWNoZVN0b3JhZ2UpIHtcbiAgfVxuXG4gIGdldChrZXk6IHN0cmluZyk6IEh0dHBSZXNwb25zZTxhbnk+IHtcbiAgICBjb25zdCBjYWNoZUl0ZW06IENhY2hlQ29udGVudCA9IHRoaXMuY2FjaGUuZ2V0T2JqZWN0KGtleSk7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgY2FjaGVEYXRhOiBIdHRwUmVzcG9uc2U8YW55PjtcblxuICAgIGlmIChjYWNoZUl0ZW0gJiYgY2FjaGVJdGVtLmV4cGlyZXMgJiYgY2FjaGVJdGVtLmV4cGlyZXMuZ2V0VGltZSgpIDwgbm93LmdldFRpbWUoKSkge1xuICAgICAgdGhpcy5jYWNoZS5yZW1vdmUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGNhY2hlSXRlbSkge1xuICAgICAgLy8gTk9URTogV2UgY2FuJ3QganVzdCBwdWxsIHRoZSBzZXJpYWxpemVkIGRhdGEsIGJlY2F1c2VcbiAgICAgIC8vIHdlIG5lZWQgYW4gYWN0dWFsIGluc3RhbmNlIG9mIHRoZSBIdHRwUmVzcG9uc2UgY2xhc3MuXG4gICAgICBjYWNoZURhdGEgPSBPYmplY3QuYXNzaWduKG5ldyBIdHRwUmVzcG9uc2U8YW55PigpLCBjYWNoZUl0ZW0udmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZURhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZURhdGE7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBIdHRwUmVzcG9uc2U8YW55PiwgdGltZVRvTGl2ZTogbnVtYmVyID0gbnVsbCkge1xuICAgIGNvbnN0IGV4cGlyZXMgPSB0aW1lVG9MaXZlID8gdGhpcy5nZXRFeHBpcmVEYXRlKHRpbWVUb0xpdmUpIDogbnVsbDtcbiAgICBjb25zdCBjYWNoZURhdGE6IENhY2hlQ29udGVudCA9IHsgZXhwaXJlcywgdmFsdWUgfTtcblxuICAgIHRoaXMuY2FjaGUuc2V0T2JqZWN0KGtleSwgY2FjaGVEYXRhKTtcbiAgfVxuXG4gIGhhcyhrZXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFeHBpcmVEYXRlKHRpbWVUb0xpdmU6IG51bWJlciA9IG51bGwpOiBEYXRlIHtcbiAgICBjb25zdCBleHBpcmVzID0gbmV3IERhdGUoKTtcbiAgICBleHBpcmVzLnNldFNlY29uZHMoZXhwaXJlcy5nZXRTZWNvbmRzKCkgKyB0aW1lVG9MaXZlKTtcblxuICAgIHJldHVybiBleHBpcmVzO1xuICB9XG59XG4iXX0=