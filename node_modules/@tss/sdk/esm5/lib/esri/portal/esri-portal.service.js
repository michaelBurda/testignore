/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Angular.
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { tap, map } from 'rxjs/operators';
// TSS.
import { getPortalUrl } from './get-portal-url.function';
import { getEsriMapServiceHttOptions, addParamsToHttpOptions } from '../esri-map-service-request';
import { EsriConfig } from '../esri-config';
import { DataSourceConfig } from '../../data-source/data-source-config';
import { BaseEsriService } from '../base-esri.service';
import { Logger } from '../../core/logging/logger.service';
import { toFormData } from '../../http/to-form-data.function';
import { toEsriPortalAccessToken } from './to-esri-portal-access-token.function';
import { toEsriServerToken } from '../to-esri-server-token.function';
import { PORTAL_GENERATE_TOKEN_ENDPOINT, PORTAL_OAUTH_TOKEN_ENDPOINT } from '../esri.constants';
import { removePortalAccessTokenFromHash } from './remove-portal-access-token-from-hash.function';
import { join } from '../../core/url/join.function';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../esri-config";
import * as i3 from "../../data-source/data-source-config";
import * as i4 from "../../core/logging/logger.service";
var EsriPortalService = /** @class */ (function (_super) {
    tslib_1.__extends(EsriPortalService, _super);
    function EsriPortalService(http, config, dataConfig, log) {
        return _super.call(this, http, config, dataConfig, log) || this;
    }
    /**
     * @param {?} portalUrl
     * @param {?} clientId
     * @param {?} code
     * @param {?=} bodyData
     * @param {?=} params
     * @return {?}
     */
    EsriPortalService.prototype.getTokenByCode = /**
     * @param {?} portalUrl
     * @param {?} clientId
     * @param {?} code
     * @param {?=} bodyData
     * @param {?=} params
     * @return {?}
     */
    function (portalUrl, clientId, code, bodyData, params) {
        /** @type {?} */
        var data = Object.assign({
            client_id: clientId,
            code: code,
            redirect_uri: removePortalAccessTokenFromHash(window.location.href),
            grant_type: 'authorization_code'
        }, bodyData);
        /** @type {?} */
        var formData = toFormData(data);
        return this.doPost(portalUrl, PORTAL_OAUTH_TOKEN_ENDPOINT, formData, params)
            .pipe(map((/**
         * @param {?} rawToken
         * @return {?}
         */
        function (rawToken) { return toEsriPortalAccessToken(rawToken, portalUrl); })));
    };
    /**
     * @param {?} portalUrl
     * @param {?} clientId
     * @param {?} refreshToken
     * @param {?=} bodyData
     * @param {?=} params
     * @return {?}
     */
    EsriPortalService.prototype.refreshToken = /**
     * @param {?} portalUrl
     * @param {?} clientId
     * @param {?} refreshToken
     * @param {?=} bodyData
     * @param {?=} params
     * @return {?}
     */
    function (portalUrl, clientId, refreshToken, bodyData, params) {
        /** @type {?} */
        var data = Object.assign({
            client_id: clientId,
            refresh_token: refreshToken,
            grant_type: 'refresh_token'
        }, bodyData);
        /** @type {?} */
        var formData = toFormData(data);
        return this.doPost(portalUrl, PORTAL_OAUTH_TOKEN_ENDPOINT, formData, params)
            .pipe(map((/**
         * @param {?} rawToken
         * @return {?}
         */
        function (rawToken) { return toEsriPortalAccessToken(rawToken, portalUrl); })));
    };
    /**
     * @param {?} portalUrl
     * @param {?} portalAccessToken
     * @param {?} serverUrl
     * @param {?=} params
     * @return {?}
     */
    EsriPortalService.prototype.getServerToken = /**
     * @param {?} portalUrl
     * @param {?} portalAccessToken
     * @param {?} serverUrl
     * @param {?=} params
     * @return {?}
     */
    function (portalUrl, portalAccessToken, serverUrl, params) {
        /** @type {?} */
        var additionalParams = {
            request: 'getToken',
            serverUrl: serverUrl,
            token: portalAccessToken,
            referer: window.location.host
        };
        return this.doGet(portalUrl, PORTAL_GENERATE_TOKEN_ENDPOINT, additionalParams, params)
            .pipe(map((/**
         * @param {?} token
         * @return {?}
         */
        function (token) { return toEsriServerToken(token); })));
    };
    /**
     * @protected
     * @template T
     * @param {?} portalUrl
     * @param {?} endpoint
     * @param {?} queryParams
     * @param {?=} params
     * @return {?}
     */
    EsriPortalService.prototype.doGet = /**
     * @protected
     * @template T
     * @param {?} portalUrl
     * @param {?} endpoint
     * @param {?} queryParams
     * @param {?=} params
     * @return {?}
     */
    function (portalUrl, endpoint, queryParams, params) {
        var _this = this;
        /** @type {?} */
        var basePortalUrl = getPortalUrl(portalUrl);
        /** @type {?} */
        var url = join(basePortalUrl, endpoint);
        /** @type {?} */
        var httpOption = getEsriMapServiceHttOptions(params);
        addParamsToHttpOptions(httpOption, queryParams);
        return this.http
            .get(url, httpOption)
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.handleEsriResponseError(response, url); })));
    };
    /**
     * @protected
     * @template T
     * @param {?} portalUrl
     * @param {?} endpoint
     * @param {?} formData
     * @param {?=} params
     * @return {?}
     */
    EsriPortalService.prototype.doPost = /**
     * @protected
     * @template T
     * @param {?} portalUrl
     * @param {?} endpoint
     * @param {?} formData
     * @param {?=} params
     * @return {?}
     */
    function (portalUrl, endpoint, formData, params) {
        var _this = this;
        /** @type {?} */
        var basePortalUrl = getPortalUrl(portalUrl);
        /** @type {?} */
        var url = join(basePortalUrl, endpoint);
        /** @type {?} */
        var httpOption = getEsriMapServiceHttOptions(params);
        return this.http
            .post(url, formData, httpOption)
            .pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.handleEsriResponseError(response, url); })));
    };
    EsriPortalService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EsriPortalService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: EsriConfig },
        { type: DataSourceConfig },
        { type: Logger }
    ]; };
    /** @nocollapse */ EsriPortalService.ngInjectableDef = i0.defineInjectable({ factory: function EsriPortalService_Factory() { return new EsriPortalService(i0.inject(i1.HttpClient), i0.inject(i2.EsriConfig), i0.inject(i3.DataSourceConfig), i0.inject(i4.Logger)); }, token: EsriPortalService, providedIn: "root" });
    return EsriPortalService;
}(BaseEsriService));
export { EsriPortalService };
//# sourceMappingURL=data:application/json;base64,